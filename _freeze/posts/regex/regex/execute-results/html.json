{
  "hash": "96a7df00572e96bdf8ba8b7f9f0f9f23",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\ncallout-appearance: simple\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# TODO {.unnumbered}\n\n   * The *postfix* for a **wildcard** that begins with a **letter** is `[0-9]{n}`.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n   * Groups 3, 4 & 5 beginning with letters.\n   * Group 5 ending with letters.\n\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#note-good .callout-note collapse=\"true\"}\n\n### Good Examples\n\n### Case 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(\"L80\", \n     c(\"L56\", \"L59\"))\n\nlength(sf_extract(hcpcs, \"^L56|^L59|^L80\"))\nlength(sf_extract(hcpcs, \"^L(5[69]|80)[0-9]{2}$\"))\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^L56|^L59|^L80\"),\n  compact = sf_extract(hcpcs, \"^L(5[69]|80)[0-9]{2}$\"),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(c(\"021\", \"022\", \"026\", \"027\"), \n     c(\"032\", \"033\"), \n     c(\"042\", \"044\"), \n     \"050\")\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^021|^022|^026|^027|^032|^033|^042|^044|^050\"),\n  compact = sf_extract(hcpcs, sf_convert(\"^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$\")),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(c(\"C75\", \"C97\"),\n     c(\"G02\", \"G04\"))\n\nlength(sf_extract(hcpcs, \"^C75|^C97|^G02|^G04\"))\nlength(sf_extract(hcpcs, \"^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$\"))\nlength(sf_extract(hcpcs, \"^(C(75|97)|G0[24])[0-9]{2}$\"))\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^C75|^C97|^G02|^G04\"),\n  reduced = sf_extract(hcpcs, \"^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$\"),\n  compact = sf_extract(hcpcs, sf_convert(\"^(C(75|97)|G0[24])[0-9]{2}$\")),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(\"0[2-5]\", \n     \"15\", \n     \"2[027]\", \n     \"3[0-24-6]\", \n     \"5[0458]\", \n     \"6[134]\", \n     \"76\", \n     \"9[25]\", \n     \"C[79]\", \n     \"E0\", \n     \"G0\", \n     \"S2\") -> c4list\n\nc4list\n\nc4raw <- \"^02|^03|^04|^05|^15|^20|^22|^27|^30|^31|^32|^34|^35|^36|^50|^54|^55|^58|^61|^63|^64|^76|^92|^95|^C7|^C9|^E0|^G0|^S2\"\n\nc4compact <- paste0(\"^(\", sf_collapse(list_c(c4list), collapse = \"|\"), \")[A-Z0-9]{3}$\")\n\nlength(sf_extract(hcpcs, c4raw))\nlength(sf_extract(hcpcs, c4compact))\n\nbench::mark(\n  raw = sf_extract(hcpcs, c4raw),\n  compact = sf_extract(hcpcs, c4compact),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n::: \n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Preprocess Steps\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_first <- function (x) {\n  \n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  list(x1 = x1, \n       x2 = split_1(x2), \n       x3 = split_1(x3), \n       x4 = split_1(x4), \n       x5 = split_end(x5))\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview <- \\(x) {\n  \n  grp_name    <- format(seq_along(x))\n  grp_size    <- format(vlen(x), justify = \"left\")\n  \n  grp_mems <- modify_if(x, len_gt_one, function(x) {\n    paste0(\"[\", map_chr(x, \\(x) paste0(x, collapse = \"-\")), \"]\")\n  })\n  \n  grp_mems <- format(unname(map_vec(grp_mems, paste0, collapse = \" \")), justify = \"none\")\n  \n  msg <- glue::glue(\n      \"{grp_name}: \",\n      \"{grp_size}|\",\n      \"--{if (empty(grp_mems)) NULL else grp_mems}\"\n      )\n  \n  cli::cat_bullet(msg)\n  \n  return(invisible(x))\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- random_hcpcs()\n\nx |> \n  split_lengths() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1:  5|--[7] [9] [B] [J] [L]\n• 2: 10|--[30] [35] [46] [61] [96] [99] [A4] [C1] [L0] [V5]\n• 3: 10|--[205] [256] [351] [549] [648] [721] [773] [812] [H00] [J18]\n• 4: 10|--[1910] [3158] [4676] [8726] [9132] [9637] [C960] [E101] [G400] [S016]\n• 5: 10|--[28001] [37780] [64617] [76940] [88155] [90669] [G8415] [G9132] [G9647] [J1426]\n```\n\n\n:::\n\n```{.r .cell-code}\nx |>\n  split_lengths() |> \n  remove_redundant() |>\n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 5|--[7] [9] [B] [J] [L]\n• 2: 7|--[30] [35] [46] [61] [A4] [C1] [V5]\n• 3: 6|--[205] [256] [549] [648] [812] [H00]\n• 4: 7|--[1910] [3158] [8726] [C960] [E101] [G400] [S016]\n• 5: 7|--[28001] [37780] [64617] [88155] [G8415] [G9132] [G9647]\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- x |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 5|--[7] [9] [B] [J] [L]\n• 2: 6|--[30-35] [46] [61] [A4] [C1] [V5]\n• 3: 5|--[205-256] [549] [648] [812] [H00]\n• 4: 7|--[1910] [3158] [8726] [C960] [E101] [G400] [S016]\n• 5: 5|--[28001] [37780] [64617] [88155] [G8415-G9132-G9647]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1:  5|--[C] [E] [F] [M] [R]\n• 2: 18|--[00-01-02-03-04] [12] [27-28] [30-38] [41-43-44-49] [52-54-59] [61-66] [73-75] [80-81-83-87-89] [92-99] [A4-A6] [G9] [J0] [L0-L2-L3] [Q0] [S9] [T2] [V5]\n• 3: 15|--[083] [110-150-158-190] [225-253-264-298] [355] [485] [605-644-674] [721-784-785] [821-860-883] [908-909-935-947] [D74] [G60-G88-G89] [L16-L56] [P90] [Q42] [V23]\n• 4: 14|--[1055-1192] [2120-2434] [3248-3296-3327-3532] [5097-5326-5586-5664-5834] [6216-6852-6994] [7402] [8502] [9570] [A703] [G015] [J172-J221-J276-J729-J904-J920] [L532-L613-L688] [Q410-Q415] [S051]\n• 5: 17|--[22862-26861] [32851-33031-33221-35182-35303] [45114] [55810] [67332] [70370-76496-77600-77762] [90646] [A9579] [D4270] [G8483] [J9381-J9393] [L6647] [Q4312] [S0250] [V2522] [6020F] [0543T-0548T-0619T-0746T]\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Process Groups\n\n::: {.panel-tabset}\n\n## Group 3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(\"C75\", \"C97\", \"G02\", \"G04\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C75\"\n\n[[1]][[2]]\n[1] \"C97\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G02\" \"G04\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"021\" \"022\" \"026\" \"027\"\n\n[[1]][[2]]\n[1] \"032\" \"033\"\n\n[[1]][[3]]\n[1] \"042\" \"044\"\n\n[[1]][[4]]\n[1] \"050\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"157\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"209\"\n\n[[3]][[2]]\n[1] \"225\"\n\n[[3]][[3]]\n[1] \"271\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"308\"\n\n[[4]][[2]]\n[1] \"312\"\n\n[[4]][[3]]\n[1] \"326\"\n\n[[4]][[4]]\n[1] \"347\" \"348\"\n\n[[4]][[5]]\n[1] \"355\"\n\n[[4]][[6]]\n[1] \"362\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"503\" \"505\"\n\n[[5]][[2]]\n[1] \"544\"\n\n[[5]][[3]]\n[1] \"552\" \"553\"\n\n[[5]][[4]]\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"610\" \"612\"\n\n[[6]][[2]]\n[1] \"630\"\n\n[[6]][[3]]\n[1] \"644\" \"646\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"765\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"920\" \"921\" \"922\"\n\n[[8]][[2]]\n[1] \"958\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C75\"\n\n[[9]][[2]]\n[1] \"C97\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E06\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G02\" \"G04\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S23\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"064\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"712\"\n\n[[2]][[2]]\n[1] \"784\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"876\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"G85\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"J06\"\n\n[[5]][[2]]\n[1] \"J11\"\n\n[[5]][[3]]\n[1] \"J76\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"Q99\"\n```\n\n\n:::\n:::\n\n\n\n\n## Group 4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nold_group_4 <- function(x) {\n  x <- getelem(x, \"x4\")\n\n  if (empty(x))\n    return(x)\n\n  map(x, function(x) {\n    idx <- data.table(\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      i1 = groupid(take_at(x))\n    )\n    \n    message(\"Initial data frame\")\n    print(idx)\n    \n    idx <- idx |>\n      fgroup_by(a1) |>\n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |>\n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |>\n      fmutate(i4 = groupid(a4)) |>\n      fungroup()\n    \n    message(\"Grouped data frame\")\n    print(idx)\n\n    lone <- fcount(idx, i1, add = TRUE) |>\n      fmutate(`i2 + i3 + i4 + N` = i2 + i3 + i4 + N)\n    \n    message(\"Lone Counted\")\n    print(lone)\n    \n    lone <- lone |>\n      fsubset((i2 + i3 + i4 + N) == 4)\n    \n    message(\"Lone i2 + i3 + i4 + N == 4\")\n    print(lone)\n\n    last <- fsubset(idx, code %!in% lone[[\"code\"]])\n    \n    message(\"Last Filtered\")\n    print(last)\n\n    last <- join(\n      fcount(last, grp1, a3),\n      fcount(last, grp1, name = \"G\"),\n      on = \"grp1\",\n      verbose = 0\n    ) |>\n      fsubset(N == G) |>\n      join(\n        last,\n        on = c(\"grp1\", \"a3\"),\n        how = \"right\",\n        verbose = 0\n      )\n    \n    message(\"Last Joined\")\n    print(last)\n    \n    last <- last |>\n      fsubset(not_na(N))\n    \n    message(\"Last Filtered\")\n    print(last)\n\n    rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n    \n    message(\"Rest Filtered\")\n    print(rest)\n\n    c(\n      if (empty(lone))\n        NULL\n      else\n        list(lone[[\"code\"]]),\n      if (empty(last))\n        NULL\n      else\n        gchop(last[[\"code\"]], last[[\"grp1\"]]),\n      if (empty(rest))\n        NULL\n      else\n        gchop(rest[[\"code\"]], rest[[\"grp2\"]])\n    )\n  })\n}\n\nc(\"C751\", \"C752\", \"C970\", \"G020\", \"G021\", \"G040\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  old_group_4()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInitial data frame\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1\n   <char> <char> <char> <char> <char> <char> <char> <qG>\n1:   C751     C7    C75      C      7      5      1    1\n2:   C752     C7    C75      C      7      5      2    1\n3:   C970     C9    C97      C      9      7      0    1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGrouped data frame\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   C751     C7    C75      C      7      5      1    1     1     1     1\n2:   C752     C7    C75      C      7      5      2    1     1     1     2\n3:   C970     C9    C97      C      9      7      0    1     2     1     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLone Counted\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   C751     C7    C75      C      7      5      1    1     1     1     1\n2:   C752     C7    C75      C      7      5      2    1     1     1     2\n3:   C970     C9    C97      C      9      7      0    1     2     1     1\n       N i2 + i3 + i4 + N\n   <int>            <int>\n1:     3                6\n2:     3                7\n3:     3                7\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLone i2 + i3 + i4 + N == 4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty data.table (0 rows and 13 cols): code,grp1,grp2,a1,a2,a3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   C751     C7    C75      C      7      5      1    1     1     1     1\n2:   C752     C7    C75      C      7      5      2    1     1     1     2\n3:   C970     C9    C97      C      9      7      0    1     2     1     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Joined\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     grp1     a3     N     G   code   grp2     a1     a2     a4   i1    i2\n   <char> <char> <int> <int> <char> <char> <char> <char> <char> <qG> <int>\n1:     C7      5     2     2   C751    C75      C      7      1    1     1\n2:     C7      5     2     2   C752    C75      C      7      2    1     1\n3:     C9      7     1     1   C970    C97      C      9      0    1     2\n      i3    i4\n   <int> <int>\n1:     1     1\n2:     1     2\n3:     1     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     grp1     a3     N     G   code   grp2     a1     a2     a4   i1    i2\n   <char> <char> <int> <int> <char> <char> <char> <char> <char> <qG> <int>\n1:     C7      5     2     2   C751    C75      C      7      1    1     1\n2:     C7      5     2     2   C752    C75      C      7      2    1     1\n3:     C9      7     1     1   C970    C97      C      9      0    1     2\n      i3    i4\n   <int> <int>\n1:     1     1\n2:     1     2\n3:     1     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRest Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty data.table (0 rows and 11 cols): code,grp1,grp2,a1,a2,a3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInitial data frame\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1\n   <char> <char> <char> <char> <char> <char> <char> <qG>\n1:   G020     G0    G02      G      0      2      0    1\n2:   G021     G0    G02      G      0      2      1    1\n3:   G040     G0    G04      G      0      4      0    1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGrouped data frame\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   G020     G0    G02      G      0      2      0    1     1     1     1\n2:   G021     G0    G02      G      0      2      1    1     1     1     2\n3:   G040     G0    G04      G      0      4      0    1     1     2     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLone Counted\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   G020     G0    G02      G      0      2      0    1     1     1     1\n2:   G021     G0    G02      G      0      2      1    1     1     1     2\n3:   G040     G0    G04      G      0      4      0    1     1     2     1\n       N i2 + i3 + i4 + N\n   <int>            <int>\n1:     3                6\n2:     3                7\n3:     3                7\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLone i2 + i3 + i4 + N == 4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty data.table (0 rows and 13 cols): code,grp1,grp2,a1,a2,a3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   G020     G0    G02      G      0      2      0    1     1     1     1\n2:   G021     G0    G02      G      0      2      1    1     1     1     2\n3:   G040     G0    G04      G      0      4      0    1     1     2     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Joined\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     grp1     a3     N     G   code   grp2     a1     a2     a4   i1    i2\n   <char> <char> <int> <int> <char> <char> <char> <char> <char> <qG> <int>\n1:     G0      2    NA    NA   G020    G02      G      0      0    1     1\n2:     G0      2    NA    NA   G021    G02      G      0      1    1     1\n3:     G0      4    NA    NA   G040    G04      G      0      0    1     1\n      i3    i4\n   <int> <int>\n1:     1     1\n2:     1     2\n3:     2     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty data.table (0 rows and 13 cols): grp1,a3,N,G,code,grp2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRest Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   G020     G0    G02      G      0      2      0    1     1     1     1\n2:   G021     G0    G02      G      0      2      1    1     1     1     2\n3:   G040     G0    G04      G      0      4      0    1     1     2     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C751\" \"C752\"\n\n[[1]][[2]]\n[1] \"C970\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G020\" \"G021\"\n\n[[2]][[2]]\n[1] \"G040\"\n```\n\n\n:::\n:::\n\n\n\n\n## Group 5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5_num <- function(x) {\n  \n  map(x, function(x) {\n    \n    idx <- data.table(\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      grp3 = sf_sub(x, 1, 4),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      a5 = take_at(x, 5),\n      i1 = groupid(take_at(x))) |>\n      fgroup_by(a1) |> \n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |> \n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |> \n      fmutate(i4 = groupid(a4)) |>\n      fgroup_by(a1, a2, a3, a4) |> \n      fmutate(i5 = groupid(a5)) |> \n      fungroup()\n\n      lone <- fcount(idx, i1, add = TRUE) |> \n        fsubset((i2 + i3 + i4 + i5 + N) == 5)\n      \n      last <- fsubset(idx, code %!in% lone[[\"code\"]])\n      \n      last <- join(\n        fcount(last, grp2, a4),\n        fcount(last, grp2, name = \"G\"), on = \"grp2\", verbose = 0) |>\n        fsubset(N == G) |>\n        join(last, on = c(\"grp2\", \"a4\"), how = \"right\", verbose = 0) |> \n        fsubset(not_na(N))\n      \n      rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n      \n      c(if (empty(lone)) NULL else list(lone[[\"code\"]]),\n        if (empty(last)) NULL else gchop(last[[\"code\"]], last[[\"grp2\"]]),\n        if (empty(rest)) NULL else gchop(rest[[\"code\"]], rest[[\"grp3\"]]))\n    })\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5_chr <- function(x) {\n  \n  original <- x\n  \n  reversed <- map(original, \\(x) paste0(take_at(x, 5), sf_remove(x, \"[A-Z]$\")))\n\n  map2(reversed, original, function(x, y) {\n    \n    idx <- data.table(\n      orig = y,\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      grp3 = sf_sub(x, 1, 4),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      a5 = take_at(x, 5),\n      i1 = groupid(take_at(x))) |>\n      fgroup_by(a1) |> \n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |> \n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |> \n      fmutate(i4 = groupid(a4)) |>\n      fgroup_by(a1, a2, a3, a4) |> \n      fmutate(i5 = groupid(a5)) |> \n      fungroup()\n\n      lone <- fcount(idx, i1, add = TRUE) |> \n        fsubset((i2 + i3 + i4 + i5 + N) == 5)\n      \n      last <- fsubset(idx, code %!in% lone[[\"code\"]])\n      \n      last <- join(\n        fcount(last, grp2, a4),\n        fcount(last, grp2, name = \"G\"), on = \"grp2\", verbose = 0) |>\n        fsubset(N == G) |>\n        join(last, on = c(\"grp2\", \"a4\"), how = \"right\", verbose = 0) |> \n        fsubset(not_na(N))\n      \n      rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n\n    c(\n      if (empty(lone))\n        NULL\n      else\n        list(lone[[\"orig\"]]),\n      if (empty(last))\n        NULL\n      else\n        gchop(last[[\"orig\"]], last[[\"grp1\"]]),\n      if (empty(rest))\n        NULL\n      else\n        gchop(rest[[\"orig\"]], rest[[\"grp2\"]])\n    )\n  })\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5 <- function(x) {\n\n  x <- getelem(x, \"x5\")\n\n  if (empty(x)) return(x)\n  \n  chr <- map(x, \\(x) sf_extract(x, \"[A-Z]$\")) |> compact()\n  num <- map(x, \\(x) sf_extract(x, \"[0-9]$\")) |> compact()\n\n  c(\n    if (empty(chr)) NULL else group_5_chr(chr),\n    if (empty(num)) NULL else group_5_num(num)\n  )\n}\n\n\nc(\"C7510\", \"C9701\", \"G0200\", \"G0400\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C7510\"\n\n[[1]][[2]]\n[1] \"C9701\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G0200\"\n\n[[2]][[2]]\n[1] \"G0400\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 5] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"0506T\" \"0507T\"\n\n[[1]][[2]]\n [1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\" \"0221T\" \"0222T\" \"0263T\"\n[10] \"0265T\" \"0266T\" \"0269T\" \"0274T\" \"0275T\"\n\n[[1]][[3]]\n[1] \"0329T\" \"0330T\"\n\n[[1]][[4]]\n[1] \"0422T\" \"0444T\" \"0445T\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"15777\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"20939\"\n\n[[3]][[2]]\n[1] \"27197\" \"27198\"\n\n[[3]][[3]]\n[1] \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n\n[[3]][[4]]\n[1] \"22526\" \"22527\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"30801\" \"30802\"\n\n[[4]][[2]]\n[1] \"31231\"\n\n[[4]][[3]]\n[1] \"32673\"\n\n[[4]][[4]]\n[1] \"34713\" \"34714\" \"34715\" \"34716\" \"34717\"\n\n[[4]][[5]]\n[1] \"35572\"\n\n[[4]][[6]]\n[1] \"36221\"\n\n[[4]][[7]]\n[1] \"34812\"\n\n[[4]][[8]]\n[1] \"34820\"\n\n[[4]][[9]]\n[1] \"34833\" \"34834\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"50300\"\n\n[[5]][[2]]\n[1] \"50540\"\n\n[[5]][[3]]\n[1] \"55300\"\n\n[[5]][[4]]\n[1] \"58575\"\n\n[[5]][[5]]\n[1] \"58600\" \"58605\"\n\n[[5]][[6]]\n[1] \"58800\" \"58805\"\n\n[[5]][[7]]\n[1] \"54420\"\n\n[[5]][[8]]\n[1] \"54430\"\n\n[[5]][[9]]\n[1] \"55200\"\n\n[[5]][[10]]\n[1] \"55250\"\n\n[[5]][[11]]\n[1] \"58700\"\n\n[[5]][[12]]\n[1] \"58720\"\n\n[[5]][[13]]\n[1] \"58900\"\n\n[[5]][[14]]\n[1] \"58920\" \"58925\"\n\n[[5]][[15]]\n[1] \"58940\" \"58943\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"61000\" \"61001\"\n\n[[6]][[2]]\n[1] \"61253\"\n\n[[6]][[3]]\n[1] \"64634\" \"64636\"\n\n[[6]][[4]]\n[1] \"63035\"\n\n[[6]][[5]]\n[1] \"63043\" \"63044\" \"63045\" \"63046\" \"63047\" \"63048\"\n\n[[6]][[6]]\n[1] \"64421\"\n\n[[6]][[7]]\n[1] \"64480\" \"64484\"\n\n[[6]][[8]]\n[1] \"64491\" \"64492\" \"64494\" \"64495\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"76514\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"95870\"\n\n[[8]][[2]]\n[1] \"92025\"\n\n[[8]][[3]]\n[1] \"92081\" \"92082\" \"92083\"\n\n[[8]][[4]]\n[1] \"92132\" \"92133\" \"92134\"\n\n[[8]][[5]]\n[1] \"92145\"\n\n[[8]][[6]]\n[1] \"92201\" \"92202\"\n\n[[8]][[7]]\n[1] \"92227\" \"92228\" \"92229\"\n\n[[8]][[8]]\n[1] \"92235\"\n\n[[8]][[9]]\n[1] \"92240\" \"92242\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n\n[[9]][[2]]\n[1] \"C9771\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E0675\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G0279\"\n\n[[11]][[2]]\n[1] \"G0412\" \"G0413\" \"G0414\" \"G0415\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"0415U\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"10010\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"33243\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"84560\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"A9597\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"B4164\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"L4350\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"S2118\"\n```\n\n\n:::\n:::\n\n\n\n\n## process_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  list(\n    g1 = x$x1,\n    g2 = x$x2,\n    g3 = group_3(x),\n    g4 = group_4(x),\n    g5 = group_5(x)\n    )\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n$g2\n$g2[[1]]\n[1] \"30\" \"31\" \"32\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n\n$g4\nlist()\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n$g2\nlist()\n\n$g3\nlist()\n\n$g4\nlist()\n\n$g5\nlist()\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"0\" \"6\" \"8\" \"H\"\n\n$g2\n$g2[[1]]\n[1] \"23\" \"27\"\n\n$g2[[2]]\n[1] \"31\" \"33\" \"36\"\n\n$g2[[3]]\n[1] \"41\" \"44\"\n\n$g2[[4]]\n[1] \"56\"\n\n$g2[[5]]\n[1] \"70\"\n\n$g2[[6]]\n[1] \"91\" \"93\" \"96\"\n\n$g2[[7]]\n[1] \"A9\"\n\n$g2[[8]]\n[1] \"C1\"\n\n$g2[[9]]\n[1] \"D0\"\n\n$g2[[10]]\n[1] \"E0\" \"E2\"\n\n$g2[[11]]\n[1] \"G0\" \"G8\" \"G9\"\n\n$g2[[12]]\n[1] \"J2\" \"J9\"\n\n$g2[[13]]\n[1] \"M1\"\n\n$g2[[14]]\n[1] \"Q4\"\n\n$g2[[15]]\n[1] \"S4\" \"S9\"\n\n$g2[[16]]\n[1] \"T2\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"158\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"223\"\n\n$g3[[2]][[2]]\n[1] \"241\"\n\n$g3[[2]][[3]]\n[1] \"285\"\n\n$g3[[2]][[4]]\n[1] \"295\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"345\"\n\n$g3[[3]][[2]]\n[1] \"356\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"422\" \"427\"\n\n$g3[[4]][[2]]\n[1] \"451\"\n\n$g3[[4]][[3]]\n[1] \"471\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"774\"\n\n$g3[[5]][[2]]\n[1] \"787\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"950\" \"951\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"A20\"\n\n$g3[[7]][[2]]\n[1] \"A65\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"C79\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"D34\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"E10\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"G10\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"J15\"\n\n$g3[[12]][[2]]\n[1] \"J30\"\n\n$g3[[12]][[3]]\n[1] \"J70\"\n\n\n$g3[[13]]\n$g3[[13]][[1]]\n[1] \"K08\"\n\n\n$g3[[14]]\n$g3[[14]][[1]]\n[1] \"L32\" \"L35\" \"L39\"\n\n$g3[[14]][[2]]\n[1] \"L70\"\n\n\n$g3[[15]]\n$g3[[15]][[1]]\n[1] \"Q50\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"1731\"\n\n$g4[[1]][[2]]\n[1] \"1912\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"2147\"\n\n$g4[[2]][[2]]\n[1] \"2873\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"4321\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"5180\"\n\n$g4[[4]][[2]]\n[1] \"5385\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"7202\"\n\n$g4[[5]][[2]]\n[1] \"7682\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"9255\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"A660\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"C908\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"G201\" \"G202\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"J181\"\n\n$g4[[10]][[2]]\n[1] \"J750\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"L168\"\n\n$g4[[11]][[2]]\n[1] \"L224\"\n\n$g4[[11]][[3]]\n[1] \"L572\"\n\n\n$g4[[12]]\n$g4[[12]][[1]]\n[1] \"Q049\"\n\n\n$g4[[13]]\n$g4[[13]][[1]]\n[1] \"T500\"\n\n$g4[[13]][[2]]\n[1] \"T599\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"1200F\" \"1490F\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"3752F\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"9001F\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"20610\"\n\n$g5[[4]][[2]]\n[1] \"21100\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"35820\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"43191\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"51595\"\n\n$g5[[7]][[2]]\n[1] \"58146\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"77316\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"90725\"\n\n$g5[[9]][[2]]\n[1] \"90834\"\n\n$g5[[9]][[3]]\n[1] \"92314\"\n\n$g5[[9]][[4]]\n[1] \"95864\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"A4918\"\n\n$g5[[10]][[2]]\n[1] \"A5112\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"C9041\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"J0565\"\n\n\n$g5[[13]]\n$g5[[13]][[1]]\n[1] \"K0006\"\n\n$g5[[13]][[2]]\n[1] \"K0608\"\n\n\n$g5[[14]]\n$g5[[14]][[1]]\n[1] \"L3809\"\n\n$g5[[14]][[2]]\n[1] \"L7180\"\n\n\n$g5[[15]]\n$g5[[15]][[1]]\n[1] \"P9017\"\n\n\n$g5[[16]]\n$g5[[16]][[1]]\n[1] \"S5110\"\n\n\n$g5[[17]]\n$g5[[17]][[1]]\n[1] \"V5274\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Reduce Groups\n\n::: {.panel-tabset}\n\n## reduce_runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  if (sf_nchar(x) == 1) \n    return(x)\n\n  test <- setNames(rep(0, 37), c(0:9, \"&\", LETTERS))\n  \n  vec <- test[c(desplit(x), \"&\")]\n  \n  vec <- vec[not_na(vec)]\n  \n  test[names(vec)] <- 1\n  \n  test[names(test) == \"&\"] <- 0\n\n  groups <- data.table(\n    value = names(test),\n    keys = test,\n    group = groupid(test)) |>\n    fgroup_by(group)\n  \n  groups <- join(\n    groups, \n    fcount(groups, group), \n    on = \"group\", \n    verbose = 0) |> \n    fungroup() |> \n    fsubset(keys == 1) |>\n    fsubset(N >= 3) |>\n    fselect(value, group)\n    \n  if (empty(groups)) \n    return(x)\n  \n  xgroups <- gchop(\n    groups$value, \n    groups$group) |>\n    map(smush) |>\n    list_c()\n  \n  if (all(xgroups == smush(c(0:9, \"&\", LETTERS)))) \n    return(\"[A-Z0-9]\")\n  \n  replacements <- join(\n    dplyr::slice_min(groups, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(groups, by = group, order_by = value) |> dplyr::rename(end = value),\n    on = \"group\", verbose = 0) |>\n    stringr::str_glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  bracket(replace_regex(x, xgroups, replacements))\n}\n```\n:::\n\n\n\n\n## red1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred1 <- function(x) {\n  \n  x <- getelem(x, \"g1\")[[1]]\n  \n  if (empty(x)) \n    return(character(0))\n  \n  re <- sort_order(x) |> \n    reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") \n    return(str_glue(\"^{re}{{5}}\"))\n  \n  post <- iif_else(\n    sf_detect(\n      re, \n      \"\\\\[?[0-9]{1}\"), \n    \"[A-Z0-9]\", \n    \"[0-9]\")\n  \n  str_glue(\"^{re}{post}{{4}}\")\n}\n\nlong_test2 |>\n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^0[A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^0[A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nc(LETTERS[1:5], 0:9) |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^0[A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(0:9, LETTERS))) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-Z0-9]{5}\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(LETTERS[1:5], 0:9))) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}\n```\n\n\n:::\n:::\n\n\n\n\n## red2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred2 <- function(x) {\n  \n  x <- getelem(x, \"g2\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  modify_if(x, len_gt_one, function(x) {\n    \n    parts <- split_max_vlen(x) |> \n    as.data.frame() |>\n    map(uniq_narm) |>\n    map(sort_order) |>\n    map(reduce_runs) |>\n    delist()\n\n  multi <- sf_nchar(parts) > 1\n  nobrk <- sf_ndetect(parts[multi], \"\\\\[|\\\\]\")\n  \n  parts[multi] <- if (any(nobrk)) map_chr(parts[multi], bracket) else parts[multi]\n\n  # if (any(nobrk)) {\n  #   parts[multi] <- map_chr(parts[multi], bracket)\n  # }\n  \n  smush(parts)\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 2] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"0[2-5]\"\n\n[[2]]\n[1] \"15\"\n\n[[3]]\n[1] \"2[027]\"\n\n[[4]]\n[1] \"3[0-24-6]\"\n\n[[5]]\n[1] \"5[0458]\"\n\n[[6]]\n[1] \"6[134]\"\n\n[[7]]\n[1] \"76\"\n\n[[8]]\n[1] \"9[25]\"\n\n[[9]]\n[1] \"C[79]\"\n\n[[10]]\n[1] \"E0\"\n\n[[11]]\n[1] \"G0\"\n\n[[12]]\n[1] \"S2\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"A\", c(0:5, LETTERS)) |> \n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"A[A-Z0-5]\"\n```\n\n\n:::\n:::\n\n\n\n\n## red3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred3 <- function(x) {\n  \n  x <- getelem(x, \"g3\")\n  \n  if (empty(x)) return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- !sf_detect(parts[multi], \"\\\\[|\\\\]\")\n      \n      if (any(nobrk)) parts[multi] <- map_chr(parts[multi], bracket)\n      \n      smush(parts)\n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 3] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"02[1267]\"\n\n[[1]][[2]]\n[1] \"03[23]\"\n\n[[1]][[3]]\n[1] \"04[24]\"\n\n[[1]][[4]]\n[1] \"050\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"157\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"209\"\n\n[[3]][[2]]\n[1] \"225\"\n\n[[3]][[3]]\n[1] \"271\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"308\"\n\n[[4]][[2]]\n[1] \"312\"\n\n[[4]][[3]]\n[1] \"326\"\n\n[[4]][[4]]\n[1] \"34[78]\"\n\n[[4]][[5]]\n[1] \"355\"\n\n[[4]][[6]]\n[1] \"362\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"50[35]\"\n\n[[5]][[2]]\n[1] \"544\"\n\n[[5]][[3]]\n[1] \"55[23]\"\n\n[[5]][[4]]\n[1] \"58[5-9]\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"61[02]\"\n\n[[6]][[2]]\n[1] \"630\"\n\n[[6]][[3]]\n[1] \"64[46]\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"765\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"92[0-2]\"\n\n[[8]][[2]]\n[1] \"958\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C75\"\n\n[[9]][[2]]\n[1] \"C97\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E06\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G0[24]\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S23\"\n```\n\n\n:::\n:::\n\n\n\n\n## red4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred4 <- function(x) {\n  \n  x <- getelem(x, \"g4\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- !sf_detect(parts[multi], \"\\\\[|\\\\]\")\n      \n      if (any(nobrk)) {\n        parts[multi] <- map_chr(parts[multi], bracket)\n      }\n      \n      smush(parts)\n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 4] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"050[67]\"\n\n[[1]][[2]]\n[1] \"021[457-9]\"\n\n[[1]][[3]]\n[1] \"022[0-2]\"\n\n[[1]][[4]]\n[1] \"026[3569]\"\n\n[[1]][[5]]\n[1] \"027[45]\"\n\n[[1]][[6]]\n[1] \"0329\"\n\n[[1]][[7]]\n[1] \"0330\"\n\n[[1]][[8]]\n[1] \"0422\"\n\n[[1]][[9]]\n[1] \"044[45]\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"1577\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"2093\"\n\n[[3]][[2]]\n[1] \"225[12]\"\n\n[[3]][[3]]\n[1] \"2719\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"3080\"\n\n[[4]][[2]]\n[1] \"3123\"\n\n[[4]][[3]]\n[1] \"3267\"\n\n[[4]][[4]]\n[1] \"3557\"\n\n[[4]][[5]]\n[1] \"3622\"\n\n[[4]][[6]]\n[1] \"3471\"\n\n[[4]][[7]]\n[1] \"348[1-3]\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"544[23]\"\n\n[[5]][[2]]\n[1] \"5030\"\n\n[[5]][[3]]\n[1] \"5054\"\n\n[[5]][[4]]\n[1] \"552[05]\"\n\n[[5]][[5]]\n[1] \"5530\"\n\n[[5]][[6]]\n[1] \"5857\"\n\n[[5]][[7]]\n[1] \"5860\"\n\n[[5]][[8]]\n[1] \"587[02]\"\n\n[[5]][[9]]\n[1] \"5880\"\n\n[[5]][[10]]\n[1] \"589[024]\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"630[34]\"\n\n[[6]][[2]]\n[1] \"6100\"\n\n[[6]][[3]]\n[1] \"6125\"\n\n[[6]][[4]]\n[1] \"644[289]\"\n\n[[6]][[5]]\n[1] \"6463\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"7651\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"9587\"\n\n[[8]][[2]]\n[1] \"920[28]\"\n\n[[8]][[3]]\n[1] \"921[34]\"\n\n[[8]][[4]]\n[1] \"922[02-4]\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C750\"\n\n[[9]][[2]]\n[1] \"C977\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E067\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G027\"\n\n[[11]][[2]]\n[1] \"G041\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S234\"\n```\n\n\n:::\n:::\n\n\n\n\n## red5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred5 <- function(x) {\n  \n  x <- getelem(x, \"g5\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- sf_ndetect(parts[multi], \"\\\\[|\\\\]\")\n      \n      if (any(nobrk)) {\n        parts[multi] <- map_chr(parts[multi], bracket)\n      }\n      smush(parts)\n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 5] |>\n  split_lengths() |>\n  # remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"050[67]T\"\n\n[[1]][[2]]\n[1] \"02[1267][[0-9]]T\"\n\n[[1]][[3]]\n[1] \"03[23][09]T\"\n\n[[1]][[4]]\n[1] \"04[24][245]T\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"15777\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"20939\"\n\n[[3]][[2]]\n[1] \"2719[78]\"\n\n[[3]][[3]]\n[1] \"2251[0-5]\"\n\n[[3]][[4]]\n[1] \"2252[67]\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"3080[12]\"\n\n[[4]][[2]]\n[1] \"31231\"\n\n[[4]][[3]]\n[1] \"32673\"\n\n[[4]][[4]]\n[1] \"3471[3-7]\"\n\n[[4]][[5]]\n[1] \"35572\"\n\n[[4]][[6]]\n[1] \"36221\"\n\n[[4]][[7]]\n[1] \"34812\"\n\n[[4]][[8]]\n[1] \"34820\"\n\n[[4]][[9]]\n[1] \"3483[34]\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"50300\"\n\n[[5]][[2]]\n[1] \"50540\"\n\n[[5]][[3]]\n[1] \"55300\"\n\n[[5]][[4]]\n[1] \"58575\"\n\n[[5]][[5]]\n[1] \"5860[05]\"\n\n[[5]][[6]]\n[1] \"5880[05]\"\n\n[[5]][[7]]\n[1] \"54420\"\n\n[[5]][[8]]\n[1] \"54430\"\n\n[[5]][[9]]\n[1] \"55200\"\n\n[[5]][[10]]\n[1] \"55250\"\n\n[[5]][[11]]\n[1] \"58700\"\n\n[[5]][[12]]\n[1] \"58720\"\n\n[[5]][[13]]\n[1] \"58900\"\n\n[[5]][[14]]\n[1] \"5892[05]\"\n\n[[5]][[15]]\n[1] \"5894[03]\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"6100[01]\"\n\n[[6]][[2]]\n[1] \"61253\"\n\n[[6]][[3]]\n[1] \"6463[46]\"\n\n[[6]][[4]]\n[1] \"63035\"\n\n[[6]][[5]]\n[1] \"6304[3-8]\"\n\n[[6]][[6]]\n[1] \"64421\"\n\n[[6]][[7]]\n[1] \"6448[04]\"\n\n[[6]][[8]]\n[1] \"6449[1245]\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"76514\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"95870\"\n\n[[8]][[2]]\n[1] \"92025\"\n\n[[8]][[3]]\n[1] \"9208[1-3]\"\n\n[[8]][[4]]\n[1] \"9213[2-4]\"\n\n[[8]][[5]]\n[1] \"92145\"\n\n[[8]][[6]]\n[1] \"9220[12]\"\n\n[[8]][[7]]\n[1] \"9222[7-9]\"\n\n[[8]][[8]]\n[1] \"92235\"\n\n[[8]][[9]]\n[1] \"9224[02]\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C750[1245]\"\n\n[[9]][[2]]\n[1] \"C9771\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E0675\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G0279\"\n\n[[11]][[2]]\n[1] \"G041[2-5]\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S2342\"\n```\n\n\n:::\n:::\n\n\n\n\n## reduce_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_groups <- \\(x) {\n  \n  list(\n    g1 = red1(x),\n    g2 = red2(x),\n    g3 = red3(x),\n    g4 = red4(x),\n    g5 = red5(x)\n  )\n}\n\nlong_test2 |>\n  split_lengths() |>\n  # remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^0[A-Z0-9]{4}\n\n$g2\n$g2[[1]]\n[1] \"0[2-5]\"\n\n$g2[[2]]\n[1] \"15\"\n\n$g2[[3]]\n[1] \"2[027]\"\n\n$g2[[4]]\n[1] \"3[0-24-6]\"\n\n$g2[[5]]\n[1] \"5[0458]\"\n\n$g2[[6]]\n[1] \"6[134]\"\n\n$g2[[7]]\n[1] \"76\"\n\n$g2[[8]]\n[1] \"9[25]\"\n\n$g2[[9]]\n[1] \"C[79]\"\n\n$g2[[10]]\n[1] \"E0\"\n\n$g2[[11]]\n[1] \"G0\"\n\n$g2[[12]]\n[1] \"S2\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"02[1267]\"\n\n$g3[[1]][[2]]\n[1] \"03[23]\"\n\n$g3[[1]][[3]]\n[1] \"04[24]\"\n\n$g3[[1]][[4]]\n[1] \"050\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"157\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"209\"\n\n$g3[[3]][[2]]\n[1] \"225\"\n\n$g3[[3]][[3]]\n[1] \"271\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"308\"\n\n$g3[[4]][[2]]\n[1] \"312\"\n\n$g3[[4]][[3]]\n[1] \"326\"\n\n$g3[[4]][[4]]\n[1] \"34[78]\"\n\n$g3[[4]][[5]]\n[1] \"355\"\n\n$g3[[4]][[6]]\n[1] \"362\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"50[35]\"\n\n$g3[[5]][[2]]\n[1] \"544\"\n\n$g3[[5]][[3]]\n[1] \"55[23]\"\n\n$g3[[5]][[4]]\n[1] \"58[5-9]\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"61[02]\"\n\n$g3[[6]][[2]]\n[1] \"630\"\n\n$g3[[6]][[3]]\n[1] \"64[46]\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"765\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"92[0-2]\"\n\n$g3[[8]][[2]]\n[1] \"958\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"C75\"\n\n$g3[[9]][[2]]\n[1] \"C97\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"E06\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"G0[24]\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"S23\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"050[67]\"\n\n$g4[[1]][[2]]\n[1] \"021[457-9]\"\n\n$g4[[1]][[3]]\n[1] \"022[0-2]\"\n\n$g4[[1]][[4]]\n[1] \"026[3569]\"\n\n$g4[[1]][[5]]\n[1] \"027[45]\"\n\n$g4[[1]][[6]]\n[1] \"0329\"\n\n$g4[[1]][[7]]\n[1] \"0330\"\n\n$g4[[1]][[8]]\n[1] \"0422\"\n\n$g4[[1]][[9]]\n[1] \"044[45]\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"1577\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"2093\"\n\n$g4[[3]][[2]]\n[1] \"225[12]\"\n\n$g4[[3]][[3]]\n[1] \"2719\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"3080\"\n\n$g4[[4]][[2]]\n[1] \"3123\"\n\n$g4[[4]][[3]]\n[1] \"3267\"\n\n$g4[[4]][[4]]\n[1] \"3557\"\n\n$g4[[4]][[5]]\n[1] \"3622\"\n\n$g4[[4]][[6]]\n[1] \"3471\"\n\n$g4[[4]][[7]]\n[1] \"348[1-3]\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"544[23]\"\n\n$g4[[5]][[2]]\n[1] \"5030\"\n\n$g4[[5]][[3]]\n[1] \"5054\"\n\n$g4[[5]][[4]]\n[1] \"552[05]\"\n\n$g4[[5]][[5]]\n[1] \"5530\"\n\n$g4[[5]][[6]]\n[1] \"5857\"\n\n$g4[[5]][[7]]\n[1] \"5860\"\n\n$g4[[5]][[8]]\n[1] \"587[02]\"\n\n$g4[[5]][[9]]\n[1] \"5880\"\n\n$g4[[5]][[10]]\n[1] \"589[024]\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"630[34]\"\n\n$g4[[6]][[2]]\n[1] \"6100\"\n\n$g4[[6]][[3]]\n[1] \"6125\"\n\n$g4[[6]][[4]]\n[1] \"644[289]\"\n\n$g4[[6]][[5]]\n[1] \"6463\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"7651\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"9587\"\n\n$g4[[8]][[2]]\n[1] \"920[28]\"\n\n$g4[[8]][[3]]\n[1] \"921[34]\"\n\n$g4[[8]][[4]]\n[1] \"922[02-4]\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"C750\"\n\n$g4[[9]][[2]]\n[1] \"C977\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"E067\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"G027\"\n\n$g4[[11]][[2]]\n[1] \"G041\"\n\n\n$g4[[12]]\n$g4[[12]][[1]]\n[1] \"S234\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"050[67]T\"\n\n$g5[[1]][[2]]\n[1] \"02[1267][[0-9]]T\"\n\n$g5[[1]][[3]]\n[1] \"03[23][09]T\"\n\n$g5[[1]][[4]]\n[1] \"04[24][245]T\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"15777\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"20939\"\n\n$g5[[3]][[2]]\n[1] \"2719[78]\"\n\n$g5[[3]][[3]]\n[1] \"2251[0-5]\"\n\n$g5[[3]][[4]]\n[1] \"2252[67]\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"3080[12]\"\n\n$g5[[4]][[2]]\n[1] \"31231\"\n\n$g5[[4]][[3]]\n[1] \"32673\"\n\n$g5[[4]][[4]]\n[1] \"3471[3-7]\"\n\n$g5[[4]][[5]]\n[1] \"35572\"\n\n$g5[[4]][[6]]\n[1] \"36221\"\n\n$g5[[4]][[7]]\n[1] \"34812\"\n\n$g5[[4]][[8]]\n[1] \"34820\"\n\n$g5[[4]][[9]]\n[1] \"3483[34]\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"50300\"\n\n$g5[[5]][[2]]\n[1] \"50540\"\n\n$g5[[5]][[3]]\n[1] \"55300\"\n\n$g5[[5]][[4]]\n[1] \"58575\"\n\n$g5[[5]][[5]]\n[1] \"5860[05]\"\n\n$g5[[5]][[6]]\n[1] \"5880[05]\"\n\n$g5[[5]][[7]]\n[1] \"54420\"\n\n$g5[[5]][[8]]\n[1] \"54430\"\n\n$g5[[5]][[9]]\n[1] \"55200\"\n\n$g5[[5]][[10]]\n[1] \"55250\"\n\n$g5[[5]][[11]]\n[1] \"58700\"\n\n$g5[[5]][[12]]\n[1] \"58720\"\n\n$g5[[5]][[13]]\n[1] \"58900\"\n\n$g5[[5]][[14]]\n[1] \"5892[05]\"\n\n$g5[[5]][[15]]\n[1] \"5894[03]\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"6100[01]\"\n\n$g5[[6]][[2]]\n[1] \"61253\"\n\n$g5[[6]][[3]]\n[1] \"6463[46]\"\n\n$g5[[6]][[4]]\n[1] \"63035\"\n\n$g5[[6]][[5]]\n[1] \"6304[3-8]\"\n\n$g5[[6]][[6]]\n[1] \"64421\"\n\n$g5[[6]][[7]]\n[1] \"6448[04]\"\n\n$g5[[6]][[8]]\n[1] \"6449[1245]\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"76514\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"95870\"\n\n$g5[[8]][[2]]\n[1] \"92025\"\n\n$g5[[8]][[3]]\n[1] \"9208[1-3]\"\n\n$g5[[8]][[4]]\n[1] \"9213[2-4]\"\n\n$g5[[8]][[5]]\n[1] \"92145\"\n\n$g5[[8]][[6]]\n[1] \"9220[12]\"\n\n$g5[[8]][[7]]\n[1] \"9222[7-9]\"\n\n$g5[[8]][[8]]\n[1] \"92235\"\n\n$g5[[8]][[9]]\n[1] \"9224[02]\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"C750[1245]\"\n\n$g5[[9]][[2]]\n[1] \"C9771\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"E0675\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"G0279\"\n\n$g5[[11]][[2]]\n[1] \"G041[2-5]\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"S2342\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n\n# Recombine Vectors\n\n::: {.panel-tabset}\n\n## recombine2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine2 <- function(x) {\n  \n  x <- getelem(x, \"g2\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  x <- sf_collapse(list_c(x), collapse = '|')\n  \n  str_glue(\"^({x})[A-Z0-9]{{3}}$\")\n}\n\nlong_test2[sf_nchar(long_test2) == 2] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine2()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in getelem(x, \"g1\")[[1]]: subscript out of bounds\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^(06|4[467]|6[37]|A4|J[17]|L8)[A-Z0-9]{3}$\n```\n\n\n:::\n:::\n\n\n\n\n## recombine3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine3 <- function(x) {\n  \n  x <- getelem(x, \"g3\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  c(\n    if (empty(x[vlen(x) == 1])) character(0) else str_glue(\"{list_c(x[vlen(x) == 1])}\"),\n    \n    if (empty(x[vlen(x) > 1])) \n      character(0) \n    else \n      map(\n        x[vlen(x) > 1], function(x) {\n          \n          front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          \n          back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          \n          str_glue(\"{front}({back})\")\n          })\n    )\n}\n\nlong_test2[sf_nchar(long_test2) == 3] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine3()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in getelem(x, \"g1\")[[1]]: subscript out of bounds\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"084\"\n\n[[2]]\n[1] \"B90\"\n\n[[3]]\n[1] \"K08\"\n\n[[4]]\n1(40|60)\n\n[[5]]\n2(09|35)\n\n[[6]]\n3(02|3[67]|72|82)\n\n[[7]]\n4(04|75)\n\n[[8]]\n5(08|72)\n\n[[9]]\n6(37|85)\n\n[[10]]\n8(36|62|76)\n\n[[11]]\nJ(1[45]|71)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine4 <- function(x) {\n  \n  x <- getelem(x, \"g4\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  c(\n    if (empty(x[vlen(x) == 1])) \n      character(0) \n    else \n      sf_convert(str_glue(\"{list_c(x[vlen(x) == 1])}\")),\n    \n    if (empty(x[vlen(x) > 1])) \n      character(0) \n    else \n      map(\n        x[vlen(x) > 1], function(x) {\n          \n          front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          sf_convert(str_glue(\"{front}({back})\"))\n          }\n        )\n    )\n  }\n\nlong_test2[sf_nchar(long_test2) == 4] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine4()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in getelem(x, \"g1\")[[1]]: subscript out of bounds\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"2983\"\n\n[[2]]\n[1] \"D943\"\n\n[[3]]\n[1] \"E067\"\n\n[[4]]\n[1] \"H101\"\n\n[[5]]\n[1] \"L664\"\n\n[[6]]\n[1] \"3(062|12[35]|266)\"\n\n[[7]]\n[1] \"4(174|956)\"\n\n[[8]]\n[1] \"5(200|435|660)\"\n\n[[9]]\n[1] \"8(252|448|040|050)\"\n```\n\n\n:::\n:::\n\n\n\n\n## recombine5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine5 <- function(x) {\n  \n  x <- getelem(x, \"g5\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  c(\n    if (empty(x[vlen(x) == 1])) \n      character(0) \n    else \n      sf_convert(str_glue(\"{list_c(x[vlen(x) == 1])}\")),\n    \n    if (empty(x[vlen(x) > 1])) \n      character(0) \n    else \n      map(\n        x[vlen(x) > 1], function(x) {\n          \n          front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          sf_convert(str_glue(\"{front}({back})\"))\n          }\n        )\n    )\n  }\n\nlong_test2[sf_nchar(long_test2) == 5] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine5()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in getelem(x, \"g1\")[[1]]: subscript out of bounds\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"11[25][38]F\"\n\n[[2]]\n[1] \"4240F\"\n\n[[3]]\n[1] \"11310\"\n\n[[4]]\n[1] \"45388\"\n\n[[5]]\n[1] \"A4211\"\n\n[[6]]\n[1] \"K0602\"\n\n[[7]]\n[1] \"3(2310|5682|5876)\"\n\n[[8]]\n[1] \"5(4100|4308|8546)\"\n\n[[9]]\n[1] \"E(0770|0994)\"\n\n[[10]]\n[1] \"J(1932|7517)\"\n\n[[11]]\n[1] \"L(5500|1240|1270)\"\n\n[[12]]\n[1] \"Q(4259|4319)\"\n```\n\n\n:::\n:::\n\n\n\n\n## recombine_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine_groups <- \\(x) {\n  \n  list(\n    v1 = x$g1,\n    v2 = recombine2(x),\n    v3 = recombine3(x),\n    v4 = recombine4(x),\n    v5 = recombine5(x)\n  )\n}\n\nlong_test2 |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$v1\n^0[A-Z0-9]{4}\n\n$v2\ncharacter(0)\n\n$v3\ncharacter(0)\n\n$v4\ncharacter(0)\n\n$v5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |>\n  recombine_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$v1\n^4[A-Z0-9]{4}\n\n$v2\n^(00|2[278]|3[13]|5[149]|6[17]|78|8[0-24689]|9[023]|B5|C9|E[02]|G[0689]|L3|M1|T1)[A-Z0-9]{3}$\n\n$v3\n$v3[[1]]\n[1] \"755\"\n\n$v3[[2]]\n[1] \"837\"\n\n$v3[[3]]\n[1] \"994\"\n\n$v3[[4]]\n[1] \"A43\"\n\n$v3[[5]]\n[1] \"C75\"\n\n$v3[[6]]\n[1] \"E10\"\n\n$v3[[7]]\n[1] \"G21\"\n\n$v3[[8]]\n[1] \"K0[08]\"\n\n$v3[[9]]\n[1] \"Q40\"\n\n$v3[[10]]\n[1] \"S10\"\n\n$v3[[11]]\n0(12|28|52|86)\n\n$v3[[12]]\n2(41|97)\n\n$v3[[13]]\n3(56|62)\n\n$v3[[14]]\n6(06|23|30|46|99)\n\n\n$v4\n$v4[[1]]\n[1] \"1490\"\n\n$v4[[2]]\n[1] \"3570\"\n\n$v4[[3]]\n[1] \"8718\"\n\n$v4[[4]]\n[1] \"9597\"\n\n$v4[[5]]\n[1] \"A427\"\n\n$v4[[6]]\n[1] \"B414\"\n\n$v4[[7]]\n[1] \"G208\"\n\n$v4[[8]]\n[1] \"0(208|326|350)\"\n\n$v4[[9]]\n[1] \"2(527|567|658|695)\"\n\n$v4[[10]]\n[1] \"5(038|754|896)\"\n\n$v4[[11]]\n[1] \"6(489|542)\"\n\n$v4[[12]]\n[1] \"L(207|848|860)\"\n\n$v4[[13]]\n[1] \"S(012|944)\"\n\n\n$v5\n$v5[[1]]\n[1] \"0106U\"\n\n$v5[[2]]\n[1] \"01472\"\n\n$v5[[3]]\n[1] \"64872\"\n\n$v5[[4]]\n[1] \"C1766\"\n\n$v5[[5]]\n[1] \"2(3465|5820|6392)\"\n\n$v5[[6]]\n[1] \"3(5122|5518)\"\n\n$v5[[7]]\n[1] \"9(4012|6367|9024)\"\n\n$v5[[8]]\n[1] \"L(4392|5697)\"\n\n$v5[[9]]\n[1] \"Q(2009|4313)\"\n```\n\n\n:::\n:::\n\n\n\n\n\n::: \n\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Collapse Regex\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- vrg <- \\(x, n) {\n  \n  if (empty(x)) \n    return(character(0))\n  \n  post <- iif_else(sf_detect(x, \"^\\\\[?[A-Z]\\\\-?\"), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- fcase(\n    n == 0, glue::glue(\"^{x}$\"),                \n    n == 1, glue::glue(\"^{x}{post}$\"),\n    n == 2, glue::glue(\"^{x}{post}{{2}}$\"),\n    n == 3, glue::glue(\"^{x}{post}{{3}}$\")\n    )\n    \n  glue::glue_collapse(x)\n}\n\ncollapse_regex <- \\(x) {\n  \n  list(\n    g1 = red1(x),\n    g2 = map_chr(x$g2, red2) |> map_chr(vrg, n = 3) |> glue::as_glue(),\n    g3 = map_chr(x$g3, red3) |> map_chr(vrg, n = 2) |> glue::as_glue(),\n    g4 = map_chr(x$g4, red4) |> map_chr(vrg, n = 1) |> glue::as_glue(),\n    g5 = map_chr(x$g5, red5) |> map_chr(vrg, n = 0) |> glue::as_glue()\n  )\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# S7 Class\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhcpcs <- new_class(\n  name = \"hcpcs\",\n  properties = list(\n    input = class_vector,\n    split_length     = new_property(class = class_list, getter = \\(self) split_lengths(self@input)),\n    remove_redundant = new_property(class = class_list, getter = \\(self) remove_redundant(self@split_length)),\n    split_first      = new_property(class = class_list, getter = \\(self) split_first(self@remove_redundant)),\n    process_groups   = new_property(class = class_list, getter = \\(self) process_groups(self@split_first)),\n    reduce_groups    = new_property(class = class_list, getter = \\(self) reduce_groups(self@process_groups)),\n    recombine_groups = new_property(class = class_list, getter = \\(self) recombine_groups(self@reduce_groups))\n    )\n  )\n\nx <- hcpcs(input = random_hcpcs(50))\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<hcpcs>\n @ input           : chr [1:201] \"F\" \"49\" \"M1\" \"63\" \"C9\" \"03\" \"K0\" \"96\" \"43\" \"38\" \"27\" ...\n @ split_length    :List of 5\n .. $ x1: chr \"F\"\n .. $ x2: chr [1:43] \"02\" \"03\" \"06\" \"07\" ...\n .. $ x3: chr [1:50] \"015\" \"032\" \"037\" \"066\" ...\n .. $ x4: chr [1:49] \"0002\" \"0526\" \"0791\" \"1911\" ...\n .. $ x5: chr [1:50] \"0202T\" \"0716T\" \"15260\" \"23405\" ...\n @ remove_redundant:List of 5\n .. $ x1: chr \"F\"\n .. $ x2: chr [1:43] \"02\" \"03\" \"06\" \"07\" ...\n .. $ x3: chr [1:25] \"015\" \"192\" \"241\" \"453\" ...\n .. $ x4: chr [1:28] \"0002\" \"0526\" \"1911\" \"2263\" ...\n .. $ x5: chr [1:23] \"15260\" \"23405\" \"39499\" \"53520\" ...\n @ split_first     :List of 5\n .. $ x1: chr \"F\"\n .. $ x2:List of 19\n ..  ..$ : chr [1:4] \"02\" \"03\" \"06\" \"07\"\n ..  ..$ : chr \"27\"\n ..  ..$ : chr [1:7] \"30\" \"33\" \"34\" \"35\" ...\n ..  ..$ : chr [1:3] \"43\" \"48\" \"49\"\n ..  ..$ : chr [1:4] \"61\" \"62\" \"63\" \"66\"\n ..  ..$ : chr [1:3] \"70\" \"73\" \"74\"\n ..  ..$ : chr [1:3] \"82\" \"86\" \"88\"\n ..  ..$ : chr [1:4] \"90\" \"93\" \"95\" \"96\"\n ..  ..$ : chr \"A4\"\n ..  ..$ : chr \"C9\"\n ..  ..$ : chr \"D1\"\n ..  ..$ : chr \"E1\"\n ..  ..$ : chr [1:3] \"G0\" \"G2\" \"G9\"\n ..  ..$ : chr [1:2] \"J1\" \"J2\"\n ..  ..$ : chr \"K0\"\n ..  ..$ : chr \"L5\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr \"Q4\"\n ..  ..$ : chr \"V5\"\n .. $ x3:List of 16\n ..  ..$ : chr \"015\"\n ..  ..$ : chr \"192\"\n ..  ..$ : chr \"241\"\n ..  ..$ : chr \"453\"\n ..  ..$ : chr [1:3] \"503\" \"517\" \"555\"\n ..  ..$ : chr [1:3] \"646\" \"658\" \"672\"\n ..  ..$ : chr [1:2] \"774\" \"777\"\n ..  ..$ : chr [1:2] \"805\" \"878\"\n ..  ..$ : chr \"A65\"\n ..  ..$ : chr \"C26\"\n ..  ..$ : chr \"E06\"\n ..  ..$ : chr \"G84\"\n ..  ..$ : chr [1:3] \"J05\" \"J73\" \"J76\"\n ..  ..$ : chr \"L04\"\n ..  ..$ : chr [1:2] \"T15\" \"T20\"\n ..  ..$ : chr \"V27\"\n .. $ x4:List of 13\n ..  ..$ : chr [1:2] \"0002\" \"0526\"\n ..  ..$ : chr \"1911\"\n ..  ..$ : chr [1:5] \"2263\" \"2283\" \"2285\" \"2365\" ...\n ..  ..$ : chr [1:2] \"4267\" \"4480\"\n ..  ..$ : chr [1:2] \"5724\" \"5961\"\n ..  ..$ : chr \"6575\"\n ..  ..$ : chr \"7651\"\n ..  ..$ : chr \"9924\"\n ..  ..$ : chr \"G899\"\n ..  ..$ : chr [1:4] \"J325\" \"J719\" \"J902\" \"J905\"\n ..  ..$ : chr [1:4] \"L183\" \"L347\" \"L367\" \"L376\"\n ..  ..$ : chr \"P202\"\n ..  ..$ : chr [1:3] \"S008\" \"S058\" \"S061\"\n .. $ x5:List of 12\n ..  ..$ : chr \"15260\"\n ..  ..$ : chr \"23405\"\n ..  ..$ : chr \"39499\"\n ..  ..$ : chr [1:2] \"53520\" \"57400\"\n ..  ..$ : chr [1:3] \"64861\" \"64892\" \"69718\"\n ..  ..$ : chr [1:2] \"72120\" \"77317\"\n ..  ..$ : chr [1:4] \"80410\" \"81187\" \"84545\" \"85415\"\n ..  ..$ : chr [1:2] \"92591\" \"99444\"\n ..  ..$ : chr \"E0994\"\n ..  ..$ : chr [1:3] \"G1014\" \"G8575\" \"G8923\"\n ..  ..$ : chr \"J8610\"\n ..  ..$ : chr [1:2] \"S9430\" \"S9542\"\n @ process_groups  :List of 5\n .. $ g1: chr \"F\"\n .. $ g2:List of 19\n ..  ..$ : chr [1:4] \"02\" \"03\" \"06\" \"07\"\n ..  ..$ : chr \"27\"\n ..  ..$ : chr [1:7] \"30\" \"33\" \"34\" \"35\" ...\n ..  ..$ : chr [1:3] \"43\" \"48\" \"49\"\n ..  ..$ : chr [1:4] \"61\" \"62\" \"63\" \"66\"\n ..  ..$ : chr [1:3] \"70\" \"73\" \"74\"\n ..  ..$ : chr [1:3] \"82\" \"86\" \"88\"\n ..  ..$ : chr [1:4] \"90\" \"93\" \"95\" \"96\"\n ..  ..$ : chr \"A4\"\n ..  ..$ : chr \"C9\"\n ..  ..$ : chr \"D1\"\n ..  ..$ : chr \"E1\"\n ..  ..$ : chr [1:3] \"G0\" \"G2\" \"G9\"\n ..  ..$ : chr [1:2] \"J1\" \"J2\"\n ..  ..$ : chr \"K0\"\n ..  ..$ : chr \"L5\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr \"Q4\"\n ..  ..$ : chr \"V5\"\n .. $ g3:List of 16\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"015\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"192\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"241\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"453\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"503\"\n ..  .. ..$ : chr \"517\"\n ..  .. ..$ : chr \"555\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"646\"\n ..  .. ..$ : chr \"658\"\n ..  .. ..$ : chr \"672\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr [1:2] \"774\" \"777\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"805\"\n ..  .. ..$ : chr \"878\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"A65\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"C26\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E06\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"G84\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"J05\"\n ..  .. ..$ : chr [1:2] \"J73\" \"J76\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"L04\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"T15\"\n ..  .. ..$ : chr \"T20\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"V27\"\n .. $ g4:List of 13\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"0002\"\n ..  .. ..$ : chr \"0526\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"1911\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"2365\"\n ..  .. ..$ : chr \"2806\"\n ..  .. ..$ : chr \"2263\"\n ..  .. ..$ : chr [1:2] \"2283\" \"2285\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"4267\"\n ..  .. ..$ : chr \"4480\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"5724\"\n ..  .. ..$ : chr \"5961\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"6575\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"7651\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"9924\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"G899\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"J325\"\n ..  .. ..$ : chr \"J719\"\n ..  .. ..$ : chr [1:2] \"J902\" \"J905\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"L183\"\n ..  .. ..$ : chr \"L347\"\n ..  .. ..$ : chr \"L367\"\n ..  .. ..$ : chr \"L376\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"P202\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"S008\"\n ..  .. ..$ : chr \"S058\"\n ..  .. ..$ : chr \"S061\"\n .. $ g5:List of 12\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"15260\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"23405\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"39499\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"53520\"\n ..  .. ..$ : chr \"57400\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"69718\"\n ..  .. ..$ : chr \"64861\"\n ..  .. ..$ : chr \"64892\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"72120\"\n ..  .. ..$ : chr \"77317\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"80410\"\n ..  .. ..$ : chr \"81187\"\n ..  .. ..$ : chr \"84545\"\n ..  .. ..$ : chr \"85415\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"92591\"\n ..  .. ..$ : chr \"99444\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E0994\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"G1014\"\n ..  .. ..$ : chr \"G8575\"\n ..  .. ..$ : chr \"G8923\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"J8610\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"S9430\"\n ..  .. ..$ : chr \"S9542\"\n @ reduce_groups   :List of 5\n .. $ g1: 'glue' chr \"^F[0-9]{4}\"\n .. $ g2:List of 19\n ..  ..$ : chr \"0[2367]\"\n ..  ..$ : chr \"27\"\n ..  ..$ : chr \"3[03-8]\"\n ..  ..$ : chr \"4[389]\"\n ..  ..$ : chr \"6[1-36]\"\n ..  ..$ : chr \"7[034]\"\n ..  ..$ : chr \"8[268]\"\n ..  ..$ : chr \"9[0356]\"\n ..  ..$ : chr \"A4\"\n ..  ..$ : chr \"C9\"\n ..  ..$ : chr \"D1\"\n ..  ..$ : chr \"E1\"\n ..  ..$ : chr \"G[029]\"\n ..  ..$ : chr \"J[12]\"\n ..  ..$ : chr \"K0\"\n ..  ..$ : chr \"L5\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr \"Q4\"\n ..  ..$ : chr \"V5\"\n .. $ g3:List of 16\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"015\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"192\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"241\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"453\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"503\"\n ..  .. ..$ : chr \"517\"\n ..  .. ..$ : chr \"555\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"646\"\n ..  .. ..$ : chr \"658\"\n ..  .. ..$ : chr \"672\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"77[47]\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"805\"\n ..  .. ..$ : chr \"878\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"A65\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"C26\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E06\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"G84\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"J05\"\n ..  .. ..$ : chr \"J7[36]\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"L04\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"T15\"\n ..  .. ..$ : chr \"T20\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"V27\"\n .. $ g4:List of 13\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"0002\"\n ..  .. ..$ : chr \"0526\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"1911\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"2365\"\n ..  .. ..$ : chr \"2806\"\n ..  .. ..$ : chr \"2263\"\n ..  .. ..$ : chr \"228[35]\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"4267\"\n ..  .. ..$ : chr \"4480\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"5724\"\n ..  .. ..$ : chr \"5961\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"6575\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"7651\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"9924\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"G899\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"J325\"\n ..  .. ..$ : chr \"J719\"\n ..  .. ..$ : chr \"J90[25]\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"L183\"\n ..  .. ..$ : chr \"L347\"\n ..  .. ..$ : chr \"L367\"\n ..  .. ..$ : chr \"L376\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"P202\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"S008\"\n ..  .. ..$ : chr \"S058\"\n ..  .. ..$ : chr \"S061\"\n .. $ g5:List of 12\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"15260\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"23405\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"39499\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"53520\"\n ..  .. ..$ : chr \"57400\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"69718\"\n ..  .. ..$ : chr \"64861\"\n ..  .. ..$ : chr \"64892\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"72120\"\n ..  .. ..$ : chr \"77317\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"80410\"\n ..  .. ..$ : chr \"81187\"\n ..  .. ..$ : chr \"84545\"\n ..  .. ..$ : chr \"85415\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"92591\"\n ..  .. ..$ : chr \"99444\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E0994\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"G1014\"\n ..  .. ..$ : chr \"G8575\"\n ..  .. ..$ : chr \"G8923\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"J8610\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"S9430\"\n ..  .. ..$ : chr \"S9542\"\n @ recombine_groups:List of 5\n .. $ v1: 'glue' chr \"^F[0-9]{4}\"\n .. $ v2: 'glue' chr \"^(0[2367]|27|3[03-8]|4[389]|6[1-36]|7[034]|8[268]|9[0356]|A4|C9|D1|E1|G[029]|J[12]|K0|L5|M1|Q4|V5)[A-Z0-9]{3}$\"\n .. $ v3:List of 16\n ..  ..$ : chr \"015\"\n ..  ..$ : chr \"192\"\n ..  ..$ : chr \"241\"\n ..  ..$ : chr \"453\"\n ..  ..$ : chr \"77[47]\"\n ..  ..$ : chr \"A65\"\n ..  ..$ : chr \"C26\"\n ..  ..$ : chr \"E06\"\n ..  ..$ : chr \"G84\"\n ..  ..$ : chr \"L04\"\n ..  ..$ : chr \"V27\"\n ..  ..$ : 'glue' chr \"5(03|17|55)\"\n ..  ..$ : 'glue' chr \"6(46|58|72)\"\n ..  ..$ : 'glue' chr \"8(05|78)\"\n ..  ..$ : 'glue' chr \"J(05|7[36])\"\n ..  ..$ : 'glue' chr \"T(15|20)\"\n .. $ v4:List of 13\n ..  ..$ : chr \"1911\"\n ..  ..$ : chr \"6575\"\n ..  ..$ : chr \"7651\"\n ..  ..$ : chr \"9924\"\n ..  ..$ : chr \"G899\"\n ..  ..$ : chr \"P202\"\n ..  ..$ : chr \"0(002|526)\"\n ..  ..$ : chr \"2(365|806|263|28[35])\"\n ..  ..$ : chr \"4(267|480)\"\n ..  ..$ : chr \"5(724|961)\"\n ..  ..$ : chr \"J(325|719|90[25])\"\n ..  ..$ : chr \"L(183|347|367|376)\"\n ..  ..$ : chr \"S(008|058|061)\"\n .. $ v5:List of 12\n ..  ..$ : chr \"15260\"\n ..  ..$ : chr \"23405\"\n ..  ..$ : chr \"39499\"\n ..  ..$ : chr \"E0994\"\n ..  ..$ : chr \"J8610\"\n ..  ..$ : chr \"5(3520|7400)\"\n ..  ..$ : chr \"6(9718|4861|4892)\"\n ..  ..$ : chr \"7(2120|7317)\"\n ..  ..$ : chr \"8(0410|1187|4545|5415)\"\n ..  ..$ : chr \"9(2591|9444)\"\n ..  ..$ : chr \"G(1014|8575|8923)\"\n ..  ..$ : chr \"S(9430|9542)\"\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.2 (2024-10-31 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_codex(v.0.0.0.9000)_, _kit(v.0.0.19)_, _collapse(v.2.0.17)_, _data.table(v.1.16.99)_, _stringfish(v.0.16.0)_, _S7(v.0.2.0)_, _vctrs(v.0.6.5)_, _cli(v.3.6.3)_, _rlang(v.1.1.4)_, _stringr(v.1.5.1)_, _purrr(v.1.0.2)_, _dplyr(v.1.1.4)_ and _fuimus(v.0.0.2)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _crayon(v.1.5.3)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _tools(v.4.4.2)_, _qs(v.0.27.2)_, _parallel(v.4.4.2)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _cheapr(v.0.9.91)_, _fs(v.1.6.5)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13-1)_, _systemfonts(v.1.1.0)_, _xfun(v.0.49)_, _tibble(v.3.2.1)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.49)_, _htmltools(v.0.5.8.1)_ and _rmarkdown(v.2.29)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}