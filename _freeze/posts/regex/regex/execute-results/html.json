{
  "hash": "13881507bf036a6ca72f935987b156cc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\ncallout-appearance: simple\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# TODO {.unnumbered}\n\n   * The *postfix* for a **wildcard** that begins with a **letter** is `[0-9]{n}`.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n   * Groups 3, 4 & 5 beginning with letters.\n   * Group 5 ending with letters.\n\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#note-good .callout-note collapse=\"true\"}\n\n### Good Examples\n\n### Case 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(\"L80\", \n     c(\"L56\", \"L59\"))\n\nlength(sf_extract(hcpcs, \"^L56|^L59|^L80\"))\nlength(sf_extract(hcpcs, \"^L(5[69]|80)[0-9]{2}$\"))\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^L56|^L59|^L80\"),\n  compact = sf_extract(hcpcs, \"^L(5[69]|80)[0-9]{2}$\"),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(c(\"021\", \"022\", \"026\", \"027\"), \n     c(\"032\", \"033\"), \n     c(\"042\", \"044\"), \n     \"050\")\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^021|^022|^026|^027|^032|^033|^042|^044|^050\"),\n  compact = sf_extract(hcpcs, sf_convert(\"^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$\")),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(c(\"C75\", \"C97\"),\n     c(\"G02\", \"G04\"))\n\nlength(sf_extract(hcpcs, \"^C75|^C97|^G02|^G04\"))\nlength(sf_extract(hcpcs, \"^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$\"))\nlength(sf_extract(hcpcs, \"^(C(75|97)|G0[24])[0-9]{2}$\"))\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^C75|^C97|^G02|^G04\"),\n  reduced = sf_extract(hcpcs, \"^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$\"),\n  compact = sf_extract(hcpcs, sf_convert(\"^(C(75|97)|G0[24])[0-9]{2}$\")),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(\"0[2-5]\", \n     \"15\", \n     \"2[027]\", \n     \"3[0-24-6]\", \n     \"5[0458]\", \n     \"6[134]\", \n     \"76\", \n     \"9[25]\", \n     \"C[79]\", \n     \"E0\", \n     \"G0\", \n     \"S2\") -> c4list\n\nc4list\n\nc4raw <- \"^02|^03|^04|^05|^15|^20|^22|^27|^30|^31|^32|^34|^35|^36|^50|^54|^55|^58|^61|^63|^64|^76|^92|^95|^C7|^C9|^E0|^G0|^S2\"\n\nc4compact <- paste0(\"^(\", sf_collapse(list_c(c4list), collapse = \"|\"), \")[A-Z0-9]{3}$\")\n\nlength(sf_extract(hcpcs, c4raw))\nlength(sf_extract(hcpcs, c4compact))\n\nbench::mark(\n  raw = sf_extract(hcpcs, c4raw),\n  compact = sf_extract(hcpcs, c4compact),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n::: \n\n<hr>\n\n\n# Preprocess Steps\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview <- \\(x) {\n  \n  grp_name <- format(seq_along(x))\n  grp_size <- format(vlen(x), justify = \"left\")\n  grp_mems <- purrr::modify_if(\n    x, vctrs::obj_is_list, \n    function(x) paste0(\"(\", map_chr(x, \\(x) paste0(x, collapse = \" \")), \")\"))\n  \n  grp_mems <- format(unname(grp_mems), justify = \"none\")\n  grp_mems <- if (empty(grp_mems)) NULL else grp_mems\n  \n  msg <- glue::glue(\n      \"{grp_name}: \",\n      \"{grp_size}|\",\n      \"-[{grp_mems}]\"\n      )\n  \n  cli::cat_bullet(msg)\n  \n  return(invisible(x))\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- random_hcpcs(50)\n\nx |> \n  split_lengths() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1:  3|-[6, C, L]\n• 2: 41|-[01, 02, 04, 05, 06, 21, 23, 27, 28, 29, 30, 41, 43, 50, 57, 66, 67, 75, 82, 92, 97, 99, A6, A7, A9, E0, G0, G1, G8, G9, J0, J2, J3, K0, L1, L3, L5, L6, Q4, T2, V2]\n• 3: 43|-[002, 006, 011, 019, 117, 158, 278, 358, 377, 430, 475, 530, 546, 572, 605, 644, 674, 712, 737, 812, 845, 911, 924, 932, 959, 963, A47, C93, E06, G88, G92, J03, J34, J71, K00, M10, Q41, S02, S21, S40, S93, S94, T20]\n• 4: 49|-[1110, 1728, 1928, 2022, 2093, 2143, 2193, 2644, 2782, 2789, 3140, 3165, 3351, 3621, 4538, 5032, 5108, 5192, 5660, 6455, 6527, 8136, 8241, 8260, 8296, 8747, 9356, 9379, 9578, 9948, E047, E109, G926, G938, G940, G982, J029, J100, J180, J717, K081, K087, L660, M100, M134, Q422, Q424, S903, V275]\n• 5: 50|-[00474, 00870, 0106T, 0313T, 0624T, 11302, 21199, 3066F, 31300, 33951, 33960, 35600, 43284, 45915, 49540, 58353, 58553, 58674, 67113, 74455, 82172, 86146, 86832, 87487, 90736, 92507, 95831, 96111, A5083, C9724, C9742, D7140, E0860, E2100, G2126, G8465, G8497, G8881, G9275, G9899, J0457, J1451, J2941, K0885, L3465, L5642, M1120, Q0479, S3005, V5298]\n```\n\n\n:::\n\n```{.r .cell-code}\nx |>\n  split_lengths() |> \n  remove_redundant() |>\n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1:  3|-[6, C, L]\n• 2: 35|-[01, 02, 04, 05, 06, 21, 23, 27, 28, 29, 30, 41, 43, 50, 57, 75, 82, 92, 97, 99, A6, A7, A9, E0, G0, G1, G8, G9, J0, J2, J3, K0, Q4, T2, V2]\n• 3: 25|-[002, 006, 117, 158, 358, 377, 475, 530, 546, 712, 737, 812, 845, 911, 932, 959, 963, A47, J71, M10, S02, S21, S40, S93, S94]\n• 4: 24|-[1110, 1728, 1928, 2022, 2093, 2644, 3140, 3165, 3351, 3621, 4538, 5108, 5192, 5660, 8136, 8747, 9356, 9379, 9578, E109, J100, J180, M134, S903]\n• 5: 29|-[00474, 00870, 0313T, 11302, 31300, 33951, 33960, 35600, 45915, 49540, 58353, 58553, 58674, 74455, 86146, 86832, 87487, 90736, 95831, 96111, A5083, D7140, E2100, G2126, J1451, M1120, Q0479, S3005, V5298]\n```\n\n\n:::\n\n```{.r .cell-code}\nx |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1:  3|-[6, C, L]\n• 2: 16|-[(01 02 04 05 06), (21 23 27 28 29), (30), (41 43), (50 57), (75), (82), (92 97 99), (A6 A7 A9), (E0), (G0 G1 G8 G9), (J0 J2 J3), (K0), (Q4), (T2), (V2)]\n• 3: 12|-[(002 006), (117 158), (358 377), (475), (530 546), (712 737), (812 845), (911 932 959 963), (A47), (J71), (M10), (S02 S21 S40 S93 S94)]\n• 4: 11|-[(1110 1728 1928), (2022 2093 2644), (3140 3165 3351 3621), (4538), (5108 5192 5660), (8136 8747), (9356 9379 9578), (E109), (J100 J180), (M134), (S903)]\n• 5: 18|-[(00474 00870), (11302), (31300 33951 33960 35600), (45915 49540), (58353 58553 58674), (74455), (86146 86832 87487), (90736 95831 96111), (A5083), (D7140), (E2100), (G2126), (J1451), (M1120), (Q0479), (S3005), (V5298), (0313T)]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1:  4|-[3, Q, S, V]\n• 2: 12|-[(00 02 03), (20 21), (51 53 54 59), (61 63 65 69), (74 77), (81 83), (95 96 97 99), (A4 A7), (C9), (G0 G1 G8 G9), (J0 J2 J3 J7), (L1 L6)]\n• 3: 15|-[(140 158), (231 238 258 275 286), (467 475 496), (566 572), (649), (864 874 882), (913 925), (A65 A95), (C75), (E01 E15 E23), (G20), (J18 J90), (K00 K10), (L08 L34 L57), (M12)]\n• 4: 13|-[(0626 0744), (2281 2822 2829 2875), (4164 4281 4310 4440), (5060 5250 5855), (7003 7361), (8449 8663), (9037 9231 9326 9466), (A619), (E046), (J921), (K085), (L064 L227 L359), (P907)]\n• 5: 16|-[(01842 01965), (29875), (41007 45307), (52450 55060), (66988), (73000), (82760 84075 86941 87802), (93292), (A0998), (D7240), (E0485), (J1304 J1443), (L8048), (M1029), (6005F), (0142U)]\n```\n\n\n:::\n:::\n\n\n\n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Process Groups\n\n::: {.panel-tabset}\n\n## Group 3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(\"C75\", \"C97\", \"G02\", \"G04\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3() |>\n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 2|-[(C75), (C97)]\n• 2: 1|-[(G02 G04)]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"021\" \"022\" \"026\" \"027\"\n\n[[1]][[2]]\n[1] \"032\" \"033\"\n\n[[1]][[3]]\n[1] \"042\" \"044\"\n\n[[1]][[4]]\n[1] \"050\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"157\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"209\"\n\n[[3]][[2]]\n[1] \"225\"\n\n[[3]][[3]]\n[1] \"271\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"308\"\n\n[[4]][[2]]\n[1] \"312\"\n\n[[4]][[3]]\n[1] \"326\"\n\n[[4]][[4]]\n[1] \"347\" \"348\"\n\n[[4]][[5]]\n[1] \"355\"\n\n[[4]][[6]]\n[1] \"362\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"503\" \"505\"\n\n[[5]][[2]]\n[1] \"544\"\n\n[[5]][[3]]\n[1] \"552\" \"553\"\n\n[[5]][[4]]\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"610\" \"612\"\n\n[[6]][[2]]\n[1] \"630\"\n\n[[6]][[3]]\n[1] \"644\" \"646\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"765\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"920\" \"921\" \"922\"\n\n[[8]][[2]]\n[1] \"958\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C75\"\n\n[[9]][[2]]\n[1] \"C97\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E06\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G02\" \"G04\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S23\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"000\"\n\n[[1]][[2]]\n[1] \"010\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"426\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"647\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"995\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"J05\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"L68\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"M12\"\n```\n\n\n:::\n:::\n\n\n\n\n## Group 4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nold_group_4 <- function(x) {\n  x <- getelem(x, \"x4\")\n\n  if (empty(x))\n    return(x)\n\n  map(x, function(x) {\n    idx <- data.table(\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      i1 = groupid(take_at(x))\n    )\n    \n    message(\"Initial data frame\")\n    print(idx)\n    \n    idx <- idx |>\n      fgroup_by(a1) |>\n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |>\n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |>\n      fmutate(i4 = groupid(a4)) |>\n      fungroup()\n    \n    message(\"Grouped data frame\")\n    print(idx)\n\n    lone <- fcount(idx, i1, add = TRUE) |>\n      fmutate(`i2 + i3 + i4 + N` = i2 + i3 + i4 + N)\n    \n    message(\"Lone Counted\")\n    print(lone)\n    \n    lone <- lone |>\n      fsubset((i2 + i3 + i4 + N) == 4)\n    \n    message(\"Lone i2 + i3 + i4 + N == 4\")\n    print(lone)\n\n    last <- fsubset(idx, code %!in% lone[[\"code\"]])\n    \n    message(\"Last Filtered\")\n    print(last)\n\n    last <- join(\n      fcount(last, grp1, a3),\n      fcount(last, grp1, name = \"G\"),\n      on = \"grp1\",\n      verbose = 0\n    ) |>\n      fsubset(N == G) |>\n      join(\n        last,\n        on = c(\"grp1\", \"a3\"),\n        how = \"right\",\n        verbose = 0\n      )\n    \n    message(\"Last Joined\")\n    print(last)\n    \n    last <- last |>\n      fsubset(not_na(N))\n    \n    message(\"Last Filtered\")\n    print(last)\n\n    rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n    \n    message(\"Rest Filtered\")\n    print(rest)\n\n    c(\n      if (empty(lone))\n        NULL\n      else\n        list(lone[[\"code\"]]),\n      if (empty(last))\n        NULL\n      else\n        gchop(last[[\"code\"]], last[[\"grp1\"]]),\n      if (empty(rest))\n        NULL\n      else\n        gchop(rest[[\"code\"]], rest[[\"grp2\"]])\n    )\n  })\n}\n\nc(\"C751\", \"C752\", \"C970\", \"G020\", \"G021\", \"G040\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  old_group_4()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInitial data frame\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1\n   <char> <char> <char> <char> <char> <char> <char> <qG>\n1:   C751     C7    C75      C      7      5      1    1\n2:   C752     C7    C75      C      7      5      2    1\n3:   C970     C9    C97      C      9      7      0    1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGrouped data frame\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   C751     C7    C75      C      7      5      1    1     1     1     1\n2:   C752     C7    C75      C      7      5      2    1     1     1     2\n3:   C970     C9    C97      C      9      7      0    1     2     1     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLone Counted\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   C751     C7    C75      C      7      5      1    1     1     1     1\n2:   C752     C7    C75      C      7      5      2    1     1     1     2\n3:   C970     C9    C97      C      9      7      0    1     2     1     1\n       N i2 + i3 + i4 + N\n   <int>            <int>\n1:     3                6\n2:     3                7\n3:     3                7\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLone i2 + i3 + i4 + N == 4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty data.table (0 rows and 13 cols): code,grp1,grp2,a1,a2,a3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   C751     C7    C75      C      7      5      1    1     1     1     1\n2:   C752     C7    C75      C      7      5      2    1     1     1     2\n3:   C970     C9    C97      C      9      7      0    1     2     1     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Joined\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     grp1     a3     N     G   code   grp2     a1     a2     a4   i1    i2\n   <char> <char> <int> <int> <char> <char> <char> <char> <char> <qG> <int>\n1:     C7      5     2     2   C751    C75      C      7      1    1     1\n2:     C7      5     2     2   C752    C75      C      7      2    1     1\n3:     C9      7     1     1   C970    C97      C      9      0    1     2\n      i3    i4\n   <int> <int>\n1:     1     1\n2:     1     2\n3:     1     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     grp1     a3     N     G   code   grp2     a1     a2     a4   i1    i2\n   <char> <char> <int> <int> <char> <char> <char> <char> <char> <qG> <int>\n1:     C7      5     2     2   C751    C75      C      7      1    1     1\n2:     C7      5     2     2   C752    C75      C      7      2    1     1\n3:     C9      7     1     1   C970    C97      C      9      0    1     2\n      i3    i4\n   <int> <int>\n1:     1     1\n2:     1     2\n3:     1     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRest Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty data.table (0 rows and 11 cols): code,grp1,grp2,a1,a2,a3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInitial data frame\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1\n   <char> <char> <char> <char> <char> <char> <char> <qG>\n1:   G020     G0    G02      G      0      2      0    1\n2:   G021     G0    G02      G      0      2      1    1\n3:   G040     G0    G04      G      0      4      0    1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGrouped data frame\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   G020     G0    G02      G      0      2      0    1     1     1     1\n2:   G021     G0    G02      G      0      2      1    1     1     1     2\n3:   G040     G0    G04      G      0      4      0    1     1     2     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLone Counted\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   G020     G0    G02      G      0      2      0    1     1     1     1\n2:   G021     G0    G02      G      0      2      1    1     1     1     2\n3:   G040     G0    G04      G      0      4      0    1     1     2     1\n       N i2 + i3 + i4 + N\n   <int>            <int>\n1:     3                6\n2:     3                7\n3:     3                7\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLone i2 + i3 + i4 + N == 4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty data.table (0 rows and 13 cols): code,grp1,grp2,a1,a2,a3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   G020     G0    G02      G      0      2      0    1     1     1     1\n2:   G021     G0    G02      G      0      2      1    1     1     1     2\n3:   G040     G0    G04      G      0      4      0    1     1     2     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Joined\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     grp1     a3     N     G   code   grp2     a1     a2     a4   i1    i2\n   <char> <char> <int> <int> <char> <char> <char> <char> <char> <qG> <int>\n1:     G0      2    NA    NA   G020    G02      G      0      0    1     1\n2:     G0      2    NA    NA   G021    G02      G      0      1    1     1\n3:     G0      4    NA    NA   G040    G04      G      0      0    1     1\n      i3    i4\n   <int> <int>\n1:     1     1\n2:     1     2\n3:     2     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLast Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty data.table (0 rows and 13 cols): grp1,a3,N,G,code,grp2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRest Filtered\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code   grp1   grp2     a1     a2     a3     a4   i1    i2    i3    i4\n   <char> <char> <char> <char> <char> <char> <char> <qG> <int> <int> <int>\n1:   G020     G0    G02      G      0      2      0    1     1     1     1\n2:   G021     G0    G02      G      0      2      1    1     1     1     2\n3:   G040     G0    G04      G      0      4      0    1     1     2     1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C751\" \"C752\"\n\n[[1]][[2]]\n[1] \"C970\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G020\" \"G021\"\n\n[[2]][[2]]\n[1] \"G040\"\n```\n\n\n:::\n:::\n\n\n\n\n## Group 5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5_num <- function(x) {\n  \n  map(x, function(x) {\n    \n    idx <- data.table(\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      grp3 = sf_sub(x, 1, 4),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      a5 = take_at(x, 5),\n      i1 = groupid(take_at(x))) |>\n      fgroup_by(a1) |> \n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |> \n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |> \n      fmutate(i4 = groupid(a4)) |>\n      fgroup_by(a1, a2, a3, a4) |> \n      fmutate(i5 = groupid(a5)) |> \n      fungroup()\n\n      lone <- fcount(idx, i1, add = TRUE) |> \n        fsubset((i2 + i3 + i4 + i5 + N) == 5)\n      \n      last <- fsubset(idx, code %!in% lone[[\"code\"]])\n      \n      last <- join(\n        fcount(last, grp2, a4),\n        fcount(last, grp2, name = \"G\"), on = \"grp2\", verbose = 0) |>\n        fsubset(N == G) |>\n        join(last, on = c(\"grp2\", \"a4\"), how = \"right\", verbose = 0) |> \n        fsubset(not_na(N))\n      \n      rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n      \n      c(if (empty(lone)) NULL else list(lone[[\"code\"]]),\n        if (empty(last)) NULL else gchop(last[[\"code\"]], last[[\"grp2\"]]),\n        if (empty(rest)) NULL else gchop(rest[[\"code\"]], rest[[\"grp3\"]]))\n    })\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5_chr <- function(x) {\n  \n  original <- x\n  \n  reversed <- map(\n    original, \n    \\(x) paste0(\n      take_at(x, 5), \n      sf_remove(x, \"[A-Z]$\")\n      )\n    )\n\n  map2(reversed, original, function(x, y) {\n    \n    idx <- data.table(\n      orig = y,\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      grp3 = sf_sub(x, 1, 4),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      a5 = take_at(x, 5),\n      i1 = groupid(take_at(x))) |>\n      fgroup_by(a1) |> \n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |> \n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |> \n      fmutate(i4 = groupid(a4)) |>\n      fgroup_by(a1, a2, a3, a4) |> \n      fmutate(i5 = groupid(a5)) |> \n      fungroup()\n\n      lone <- fcount(idx, i1, add = TRUE) |> \n        fsubset((i2 + i3 + i4 + i5 + N) == 5)\n      \n      last <- fsubset(idx, code %!in% lone[[\"code\"]])\n      \n      last <- join(\n        fcount(last, grp2, a4),\n        fcount(last, grp2, name = \"G\"), on = \"grp2\", verbose = 0) |>\n        fsubset(N == G) |>\n        join(last, on = c(\"grp2\", \"a4\"), how = \"right\", verbose = 0) |> \n        fsubset(not_na(N))\n      \n      rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n\n    c(\n      if (empty(lone))\n        NULL\n      else\n        list(lone[[\"orig\"]]),\n      if (empty(last))\n        NULL\n      else\n        gchop(last[[\"orig\"]], last[[\"grp1\"]]),\n      if (empty(rest))\n        NULL\n      else\n        gchop(rest[[\"orig\"]], rest[[\"grp2\"]])\n    )\n  })\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5 <- function(x) {\n\n  x <- getelem(x, \"x5\")\n\n  if (empty(x)) return(x)\n  \n  chr <- map(x, \\(x) sf_extract(x, \"[A-Z]$\")) |> compact()\n  num <- map(x, \\(x) sf_extract(x, \"[0-9]$\")) |> compact()\n\n  c(\n    if (empty(chr)) NULL else group_5_chr(chr),\n    if (empty(num)) NULL else group_5_num(num)\n  )\n}\n\nc(\"C7510\", \"C9701\", \"G0200\", \"G0400\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C7510\"\n\n[[1]][[2]]\n[1] \"C9701\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G0200\"\n\n[[2]][[2]]\n[1] \"G0400\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 5] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5() |> \n  nametree()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in nametree(group_5(split_first(remove_redundant(split_lengths(long_test2[nchar(long_test2) == : could not find function \"nametree\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"3500F\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"31513\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"43810\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"70545\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"90646\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"D6055\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"J0558\"\n\n[[7]][[2]]\n[1] \"J1627\"\n```\n\n\n:::\n:::\n\n\n\n\n## process_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  list(\n    g1 = x$x1,\n    g2 = x$x2,\n    g3 = group_3(x),\n    g4 = group_4(x),\n    g5 = group_5(x))\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n$g2\n$g2[[1]]\n[1] \"30\" \"31\" \"32\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n\n$g4\nlist()\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n$g2\nlist()\n\n$g3\nlist()\n\n$g4\nlist()\n\n$g5\nlist()\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"7\" \"M\" \"U\"\n\n$g2\n$g2[[1]]\n[1] \"00\" \"06\" \"08\"\n\n$g2[[2]]\n[1] \"21\" \"27\" \"29\"\n\n$g2[[3]]\n[1] \"31\" \"32\" \"38\"\n\n$g2[[4]]\n[1] \"44\" \"45\" \"46\"\n\n$g2[[5]]\n[1] \"53\" \"54\"\n\n$g2[[6]]\n[1] \"68\"\n\n$g2[[7]]\n[1] \"81\" \"82\" \"86\" \"87\"\n\n$g2[[8]]\n[1] \"94\" \"97\" \"99\"\n\n$g2[[9]]\n[1] \"A4\"\n\n$g2[[10]]\n[1] \"C7\" \"C9\"\n\n$g2[[11]]\n[1] \"E0\" \"E1\" \"E2\"\n\n$g2[[12]]\n[1] \"G0\" \"G1\" \"G8\" \"G9\"\n\n$g2[[13]]\n[1] \"J2\" \"J3\"\n\n$g2[[14]]\n[1] \"K0\"\n\n$g2[[15]]\n[1] \"L4\" \"L6\"\n\n$g2[[16]]\n[1] \"S5\"\n\n$g2[[17]]\n[1] \"V5\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"016\"\n\n$g3[[1]][[2]]\n[1] \"029\"\n\n$g3[[1]][[3]]\n[1] \"030\" \"037\"\n\n$g3[[1]][[4]]\n[1] \"046\"\n\n$g3[[1]][[5]]\n[1] \"051\"\n\n$g3[[1]][[6]]\n[1] \"075\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"112\"\n\n$g3[[2]][[2]]\n[1] \"157\"\n\n$g3[[2]][[3]]\n[1] \"172\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"244\"\n\n$g3[[3]][[2]]\n[1] \"259\"\n\n$g3[[3]][[3]]\n[1] \"264\" \"266\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"304\"\n\n$g3[[4]][[2]]\n[1] \"357\"\n\n$g3[[4]][[3]]\n[1] \"364\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"408\"\n\n$g3[[5]][[2]]\n[1] \"424\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"522\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"630\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"802\"\n\n$g3[[8]][[2]]\n[1] \"842\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"961\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"A50\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"D42\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"H20\"\n\n\n$g3[[13]]\n$g3[[13]][[1]]\n[1] \"J05\" \"J08\"\n\n$g3[[13]][[2]]\n[1] \"J10\"\n\n$g3[[13]][[3]]\n[1] \"J76\"\n\n\n$g3[[14]]\n$g3[[14]][[1]]\n[1] \"Q42\"\n\n\n$g3[[15]]\n$g3[[15]][[1]]\n[1] \"T10\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"0151\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"1910\"\n\n$g4[[2]][[2]]\n[1] \"1160\"\n\n$g4[[2]][[3]]\n[1] \"1195\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"2095\"\n\n$g4[[3]][[2]]\n[1] \"2255\"\n\n$g4[[3]][[3]]\n[1] \"2528\"\n\n$g4[[3]][[4]]\n[1] \"2826\"\n\n$g4[[3]][[5]]\n[1] \"2852\"\n\n$g4[[3]][[6]]\n[1] \"2870\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"3321\"\n\n$g4[[4]][[2]]\n[1] \"3683\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"4365\"\n\n$g4[[5]][[2]]\n[1] \"4922\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"5174\" \"5179\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"6228\"\n\n$g4[[7]][[2]]\n[1] \"6473\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"9210\"\n\n$g4[[8]][[2]]\n[1] \"9007\"\n\n$g4[[8]][[3]]\n[1] \"9067\"\n\n$g4[[8]][[4]]\n[1] \"9330\"\n\n$g4[[8]][[5]]\n[1] \"9345\"\n\n$g4[[8]][[6]]\n[1] \"9525\"\n\n$g4[[8]][[7]]\n[1] \"9597\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"A655\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"C184\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"G220\"\n\n$g4[[11]][[2]]\n[1] \"G600\"\n\n\n$g4[[12]]\n$g4[[12]][[1]]\n[1] \"J046\"\n\n$g4[[12]][[2]]\n[1] \"J126\"\n\n$g4[[12]][[3]]\n[1] \"J145\"\n\n\n$g4[[13]]\n$g4[[13]][[1]]\n[1] \"S909\"\n\n$g4[[13]][[2]]\n[1] \"S937\"\n\n\n$g4[[14]]\n$g4[[14]][[1]]\n[1] \"T203\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"0331T\" \"0407T\" \"0731T\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"0254U\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"15157\"\n\n$g5[[3]][[2]]\n[1] \"15273\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"20805\"\n\n$g5[[4]][[2]]\n[1] \"20974\"\n\n$g5[[4]][[3]]\n[1] \"26010\"\n\n$g5[[4]][[4]]\n[1] \"26502\"\n\n$g5[[4]][[5]]\n[1] \"28202\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"33340\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"41800\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"50390\"\n\n$g5[[7]][[2]]\n[1] \"55862\"\n\n$g5[[7]][[3]]\n[1] \"57260\"\n\n$g5[[7]][[4]]\n[1] \"58559\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"63305\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"88363\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"95801\"\n\n$g5[[10]][[2]]\n[1] \"96402\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"A7035\"\n\n$g5[[11]][[2]]\n[1] \"A9268\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"J1730\"\n\n\n$g5[[13]]\n$g5[[13]][[1]]\n[1] \"L8603\"\n\n\n$g5[[14]]\n$g5[[14]][[1]]\n[1] \"Q2042\"\n\n\n$g5[[15]]\n$g5[[15]][[1]]\n[1] \"S9538\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Reduce Groups\n\n::: {.panel-tabset}\n\n## reduce_runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  if (sf_nchar(x) == 1) \n    return(x)\n\n  test <- setNames(rep(0, 37), c(0:9, \"&\", LETTERS))\n  \n  vec <- test[c(desplit(x), \"&\")]\n  \n  vec <- vec[not_na(vec)]\n  \n  test[names(vec)] <- 1\n  \n  test[names(test) == \"&\"] <- 0\n\n  groups <- data.table(\n    value = names(test),\n    keys = test,\n    group = groupid(test)) |>\n    fgroup_by(group)\n  \n  groups <- join(\n    groups, \n    fcount(groups, group), \n    on = \"group\", \n    verbose = 0) |> \n    fungroup() |> \n    fsubset(keys == 1) |>\n    fsubset(N >= 3) |>\n    fselect(value, group)\n    \n  if (empty(groups)) \n    return(x)\n  \n  xgroups <- gchop(\n    groups$value, \n    groups$group) |>\n    map(smush) |>\n    list_c()\n  \n  if (all(xgroups == smush(c(0:9, \"&\", LETTERS)))) return(\"[A-Z0-9]\")\n  \n  replacements <- join(\n    dplyr::slice_min(groups, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(groups, by = group, order_by = value) |> dplyr::rename(end = value),\n    on = \"group\", verbose = 0) |>\n    stringr::str_glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  bracket(replace_regex(x, xgroups, replacements))\n}\n```\n:::\n\n\n\n\n## red1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred1 <- function(x) {\n  \n  x <- getelem(x, \"g1\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  re <- sort_order(x) |> \n    reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") \n    return(str_glue(\"^{re}{{5}}\"))\n  \n  post <- iif_else(\n    sf_detect(\n      re, \n      \"\\\\[?[0-9]{1}\"), \n    \"[A-Z0-9]\", \n    \"[0-9]\")\n  \n  str_glue(\"^{re}{post}{{4}}\")\n}\n\nlong_test2 |>\n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[CEGS0-35-79][A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[GJ04-6][A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nc(LETTERS[1:5], 0:9) |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-Z0-9]{5}\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(LETTERS[1:5], 0:9)) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}\n```\n\n\n:::\n:::\n\n\n\n\n## red2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred2 <- function(x) {\n  \n  x <- getelem(x, \"g2\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  modify_if(x, len_gt_one, function(x) {\n    \n    parts <- split_max_vlen(x) |> \n    as.data.frame() |>\n    map(uniq_narm) |>\n    map(sort_order) |>\n    map(reduce_runs) |>\n    delist()\n\n  multi <- sf_nchar(parts) > 1\n  nobrk <- sf_ndetect(parts, \"\\\\[|\\\\]\")\n  \n  if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)\n  \n  smush(parts)\n  \n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 2] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"0[2-5]\"\n\n[[2]]\n[1] \"15\"\n\n[[3]]\n[1] \"2[027]\"\n\n[[4]]\n[1] \"3[0-24-6]\"\n\n[[5]]\n[1] \"5[0458]\"\n\n[[6]]\n[1] \"6[134]\"\n\n[[7]]\n[1] \"76\"\n\n[[8]]\n[1] \"9[25]\"\n\n[[9]]\n[1] \"C[79]\"\n\n[[10]]\n[1] \"E0\"\n\n[[11]]\n[1] \"G0\"\n\n[[12]]\n[1] \"S2\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"A\", c(0:5, LETTERS)) |> \n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"A[A-Z0-5]\"\n```\n\n\n:::\n:::\n\n\n\n\n## red3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred3 <- function(x) {\n  \n  x <- getelem(x, \"g3\")\n  \n  if (empty(x)) return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- sf_ndetect(parts, \"\\\\[|\\\\]\")\n      \n      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)\n      \n      smush(parts)\n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 3] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"02[1267]\"\n\n[[1]][[2]]\n[1] \"03[23]\"\n\n[[1]][[3]]\n[1] \"04[24]\"\n\n[[1]][[4]]\n[1] \"050\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"157\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"209\"\n\n[[3]][[2]]\n[1] \"225\"\n\n[[3]][[3]]\n[1] \"271\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"308\"\n\n[[4]][[2]]\n[1] \"312\"\n\n[[4]][[3]]\n[1] \"326\"\n\n[[4]][[4]]\n[1] \"34[78]\"\n\n[[4]][[5]]\n[1] \"355\"\n\n[[4]][[6]]\n[1] \"362\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"50[35]\"\n\n[[5]][[2]]\n[1] \"544\"\n\n[[5]][[3]]\n[1] \"55[23]\"\n\n[[5]][[4]]\n[1] \"58[5-9]\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"61[02]\"\n\n[[6]][[2]]\n[1] \"630\"\n\n[[6]][[3]]\n[1] \"64[46]\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"765\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"92[0-2]\"\n\n[[8]][[2]]\n[1] \"958\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C75\"\n\n[[9]][[2]]\n[1] \"C97\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E06\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G0[24]\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S23\"\n```\n\n\n:::\n:::\n\n\n\n\n## red4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred4 <- function(x) {\n  \n  x <- getelem(x, \"g4\")\n  \n  if (empty(x)) return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- sf_ndetect(parts, \"\\\\[|\\\\]\")\n      \n      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)\n      \n      smush(parts)\n      \n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 4] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"050[67]\"\n\n[[1]][[2]]\n[1] \"021[457-9]\"\n\n[[1]][[3]]\n[1] \"022[0-2]\"\n\n[[1]][[4]]\n[1] \"026[3569]\"\n\n[[1]][[5]]\n[1] \"027[45]\"\n\n[[1]][[6]]\n[1] \"0329\"\n\n[[1]][[7]]\n[1] \"0330\"\n\n[[1]][[8]]\n[1] \"0422\"\n\n[[1]][[9]]\n[1] \"044[45]\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"1577\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"2093\"\n\n[[3]][[2]]\n[1] \"225[12]\"\n\n[[3]][[3]]\n[1] \"2719\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"3080\"\n\n[[4]][[2]]\n[1] \"3123\"\n\n[[4]][[3]]\n[1] \"3267\"\n\n[[4]][[4]]\n[1] \"3557\"\n\n[[4]][[5]]\n[1] \"3622\"\n\n[[4]][[6]]\n[1] \"3471\"\n\n[[4]][[7]]\n[1] \"348[1-3]\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"544[23]\"\n\n[[5]][[2]]\n[1] \"5030\"\n\n[[5]][[3]]\n[1] \"5054\"\n\n[[5]][[4]]\n[1] \"552[05]\"\n\n[[5]][[5]]\n[1] \"5530\"\n\n[[5]][[6]]\n[1] \"5857\"\n\n[[5]][[7]]\n[1] \"5860\"\n\n[[5]][[8]]\n[1] \"587[02]\"\n\n[[5]][[9]]\n[1] \"5880\"\n\n[[5]][[10]]\n[1] \"589[024]\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"630[34]\"\n\n[[6]][[2]]\n[1] \"6100\"\n\n[[6]][[3]]\n[1] \"6125\"\n\n[[6]][[4]]\n[1] \"644[289]\"\n\n[[6]][[5]]\n[1] \"6463\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"7651\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"9587\"\n\n[[8]][[2]]\n[1] \"920[28]\"\n\n[[8]][[3]]\n[1] \"921[34]\"\n\n[[8]][[4]]\n[1] \"922[02-4]\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C750\"\n\n[[9]][[2]]\n[1] \"C977\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E067\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G027\"\n\n[[11]][[2]]\n[1] \"G041\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S234\"\n```\n\n\n:::\n:::\n\n\n\n\n## red5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred5 <- function(x) {\n  \n  x <- getelem(x, \"g5\")\n  \n  if (empty(x)) return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- sf_ndetect(parts, \"\\\\[|\\\\]\")\n      \n      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)\n      \n      smush(parts)\n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 5] |>\n  split_lengths() |>\n  # remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"050[67]T\"\n\n[[1]][[2]]\n[1] \"02[1267][0-9]T\"\n\n[[1]][[3]]\n[1] \"03[23][09]T\"\n\n[[1]][[4]]\n[1] \"04[24][245]T\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"15777\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"20939\"\n\n[[3]][[2]]\n[1] \"2719[78]\"\n\n[[3]][[3]]\n[1] \"2251[0-5]\"\n\n[[3]][[4]]\n[1] \"2252[67]\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"3080[12]\"\n\n[[4]][[2]]\n[1] \"31231\"\n\n[[4]][[3]]\n[1] \"32673\"\n\n[[4]][[4]]\n[1] \"3471[3-7]\"\n\n[[4]][[5]]\n[1] \"35572\"\n\n[[4]][[6]]\n[1] \"36221\"\n\n[[4]][[7]]\n[1] \"34812\"\n\n[[4]][[8]]\n[1] \"34820\"\n\n[[4]][[9]]\n[1] \"3483[34]\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"50300\"\n\n[[5]][[2]]\n[1] \"50540\"\n\n[[5]][[3]]\n[1] \"55300\"\n\n[[5]][[4]]\n[1] \"58575\"\n\n[[5]][[5]]\n[1] \"5860[05]\"\n\n[[5]][[6]]\n[1] \"5880[05]\"\n\n[[5]][[7]]\n[1] \"54420\"\n\n[[5]][[8]]\n[1] \"54430\"\n\n[[5]][[9]]\n[1] \"55200\"\n\n[[5]][[10]]\n[1] \"55250\"\n\n[[5]][[11]]\n[1] \"58700\"\n\n[[5]][[12]]\n[1] \"58720\"\n\n[[5]][[13]]\n[1] \"58900\"\n\n[[5]][[14]]\n[1] \"5892[05]\"\n\n[[5]][[15]]\n[1] \"5894[03]\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"6100[01]\"\n\n[[6]][[2]]\n[1] \"61253\"\n\n[[6]][[3]]\n[1] \"6463[46]\"\n\n[[6]][[4]]\n[1] \"63035\"\n\n[[6]][[5]]\n[1] \"6304[3-8]\"\n\n[[6]][[6]]\n[1] \"64421\"\n\n[[6]][[7]]\n[1] \"6448[04]\"\n\n[[6]][[8]]\n[1] \"6449[1245]\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"76514\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"95870\"\n\n[[8]][[2]]\n[1] \"92025\"\n\n[[8]][[3]]\n[1] \"9208[1-3]\"\n\n[[8]][[4]]\n[1] \"9213[2-4]\"\n\n[[8]][[5]]\n[1] \"92145\"\n\n[[8]][[6]]\n[1] \"9220[12]\"\n\n[[8]][[7]]\n[1] \"9222[7-9]\"\n\n[[8]][[8]]\n[1] \"92235\"\n\n[[8]][[9]]\n[1] \"9224[02]\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C750[1245]\"\n\n[[9]][[2]]\n[1] \"C9771\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E0675\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G0279\"\n\n[[11]][[2]]\n[1] \"G041[2-5]\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S2342\"\n```\n\n\n:::\n:::\n\n\n\n\n## reduce_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_groups <- \\(x) {\n  \n  list(\n    g1 = red1(x),\n    g2 = red2(x),\n    g3 = red3(x),\n    g4 = red4(x),\n    g5 = red5(x)\n  )\n}\n\nlong_test2 |>\n  split_lengths() |>\n  # remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^[CEGS0-35-79][A-Z0-9]{4}\n\n$g2\n$g2[[1]]\n[1] \"0[2-5]\"\n\n$g2[[2]]\n[1] \"15\"\n\n$g2[[3]]\n[1] \"2[027]\"\n\n$g2[[4]]\n[1] \"3[0-24-6]\"\n\n$g2[[5]]\n[1] \"5[0458]\"\n\n$g2[[6]]\n[1] \"6[134]\"\n\n$g2[[7]]\n[1] \"76\"\n\n$g2[[8]]\n[1] \"9[25]\"\n\n$g2[[9]]\n[1] \"C[79]\"\n\n$g2[[10]]\n[1] \"E0\"\n\n$g2[[11]]\n[1] \"G0\"\n\n$g2[[12]]\n[1] \"S2\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"02[1267]\"\n\n$g3[[1]][[2]]\n[1] \"03[23]\"\n\n$g3[[1]][[3]]\n[1] \"04[24]\"\n\n$g3[[1]][[4]]\n[1] \"050\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"157\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"209\"\n\n$g3[[3]][[2]]\n[1] \"225\"\n\n$g3[[3]][[3]]\n[1] \"271\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"308\"\n\n$g3[[4]][[2]]\n[1] \"312\"\n\n$g3[[4]][[3]]\n[1] \"326\"\n\n$g3[[4]][[4]]\n[1] \"34[78]\"\n\n$g3[[4]][[5]]\n[1] \"355\"\n\n$g3[[4]][[6]]\n[1] \"362\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"50[35]\"\n\n$g3[[5]][[2]]\n[1] \"544\"\n\n$g3[[5]][[3]]\n[1] \"55[23]\"\n\n$g3[[5]][[4]]\n[1] \"58[5-9]\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"61[02]\"\n\n$g3[[6]][[2]]\n[1] \"630\"\n\n$g3[[6]][[3]]\n[1] \"64[46]\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"765\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"92[0-2]\"\n\n$g3[[8]][[2]]\n[1] \"958\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"C75\"\n\n$g3[[9]][[2]]\n[1] \"C97\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"E06\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"G0[24]\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"S23\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"050[67]\"\n\n$g4[[1]][[2]]\n[1] \"021[457-9]\"\n\n$g4[[1]][[3]]\n[1] \"022[0-2]\"\n\n$g4[[1]][[4]]\n[1] \"026[3569]\"\n\n$g4[[1]][[5]]\n[1] \"027[45]\"\n\n$g4[[1]][[6]]\n[1] \"0329\"\n\n$g4[[1]][[7]]\n[1] \"0330\"\n\n$g4[[1]][[8]]\n[1] \"0422\"\n\n$g4[[1]][[9]]\n[1] \"044[45]\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"1577\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"2093\"\n\n$g4[[3]][[2]]\n[1] \"225[12]\"\n\n$g4[[3]][[3]]\n[1] \"2719\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"3080\"\n\n$g4[[4]][[2]]\n[1] \"3123\"\n\n$g4[[4]][[3]]\n[1] \"3267\"\n\n$g4[[4]][[4]]\n[1] \"3557\"\n\n$g4[[4]][[5]]\n[1] \"3622\"\n\n$g4[[4]][[6]]\n[1] \"3471\"\n\n$g4[[4]][[7]]\n[1] \"348[1-3]\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"544[23]\"\n\n$g4[[5]][[2]]\n[1] \"5030\"\n\n$g4[[5]][[3]]\n[1] \"5054\"\n\n$g4[[5]][[4]]\n[1] \"552[05]\"\n\n$g4[[5]][[5]]\n[1] \"5530\"\n\n$g4[[5]][[6]]\n[1] \"5857\"\n\n$g4[[5]][[7]]\n[1] \"5860\"\n\n$g4[[5]][[8]]\n[1] \"587[02]\"\n\n$g4[[5]][[9]]\n[1] \"5880\"\n\n$g4[[5]][[10]]\n[1] \"589[024]\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"630[34]\"\n\n$g4[[6]][[2]]\n[1] \"6100\"\n\n$g4[[6]][[3]]\n[1] \"6125\"\n\n$g4[[6]][[4]]\n[1] \"644[289]\"\n\n$g4[[6]][[5]]\n[1] \"6463\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"7651\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"9587\"\n\n$g4[[8]][[2]]\n[1] \"920[28]\"\n\n$g4[[8]][[3]]\n[1] \"921[34]\"\n\n$g4[[8]][[4]]\n[1] \"922[02-4]\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"C750\"\n\n$g4[[9]][[2]]\n[1] \"C977\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"E067\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"G027\"\n\n$g4[[11]][[2]]\n[1] \"G041\"\n\n\n$g4[[12]]\n$g4[[12]][[1]]\n[1] \"S234\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"050[67]T\"\n\n$g5[[1]][[2]]\n[1] \"02[1267][0-9]T\"\n\n$g5[[1]][[3]]\n[1] \"03[23][09]T\"\n\n$g5[[1]][[4]]\n[1] \"04[24][245]T\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"15777\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"20939\"\n\n$g5[[3]][[2]]\n[1] \"2719[78]\"\n\n$g5[[3]][[3]]\n[1] \"2251[0-5]\"\n\n$g5[[3]][[4]]\n[1] \"2252[67]\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"3080[12]\"\n\n$g5[[4]][[2]]\n[1] \"31231\"\n\n$g5[[4]][[3]]\n[1] \"32673\"\n\n$g5[[4]][[4]]\n[1] \"3471[3-7]\"\n\n$g5[[4]][[5]]\n[1] \"35572\"\n\n$g5[[4]][[6]]\n[1] \"36221\"\n\n$g5[[4]][[7]]\n[1] \"34812\"\n\n$g5[[4]][[8]]\n[1] \"34820\"\n\n$g5[[4]][[9]]\n[1] \"3483[34]\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"50300\"\n\n$g5[[5]][[2]]\n[1] \"50540\"\n\n$g5[[5]][[3]]\n[1] \"55300\"\n\n$g5[[5]][[4]]\n[1] \"58575\"\n\n$g5[[5]][[5]]\n[1] \"5860[05]\"\n\n$g5[[5]][[6]]\n[1] \"5880[05]\"\n\n$g5[[5]][[7]]\n[1] \"54420\"\n\n$g5[[5]][[8]]\n[1] \"54430\"\n\n$g5[[5]][[9]]\n[1] \"55200\"\n\n$g5[[5]][[10]]\n[1] \"55250\"\n\n$g5[[5]][[11]]\n[1] \"58700\"\n\n$g5[[5]][[12]]\n[1] \"58720\"\n\n$g5[[5]][[13]]\n[1] \"58900\"\n\n$g5[[5]][[14]]\n[1] \"5892[05]\"\n\n$g5[[5]][[15]]\n[1] \"5894[03]\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"6100[01]\"\n\n$g5[[6]][[2]]\n[1] \"61253\"\n\n$g5[[6]][[3]]\n[1] \"6463[46]\"\n\n$g5[[6]][[4]]\n[1] \"63035\"\n\n$g5[[6]][[5]]\n[1] \"6304[3-8]\"\n\n$g5[[6]][[6]]\n[1] \"64421\"\n\n$g5[[6]][[7]]\n[1] \"6448[04]\"\n\n$g5[[6]][[8]]\n[1] \"6449[1245]\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"76514\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"95870\"\n\n$g5[[8]][[2]]\n[1] \"92025\"\n\n$g5[[8]][[3]]\n[1] \"9208[1-3]\"\n\n$g5[[8]][[4]]\n[1] \"9213[2-4]\"\n\n$g5[[8]][[5]]\n[1] \"92145\"\n\n$g5[[8]][[6]]\n[1] \"9220[12]\"\n\n$g5[[8]][[7]]\n[1] \"9222[7-9]\"\n\n$g5[[8]][[8]]\n[1] \"92235\"\n\n$g5[[8]][[9]]\n[1] \"9224[02]\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"C750[1245]\"\n\n$g5[[9]][[2]]\n[1] \"C9771\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"E0675\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"G0279\"\n\n$g5[[11]][[2]]\n[1] \"G041[2-5]\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"S2342\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n\n# Recombine Vectors\n\n::: {.panel-tabset}\n\n## recombine2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine2 <- function(x) {\n  \n  x <- getelem(x, \"g2\")\n  \n  if (empty(x)) return(character(0))\n  \n  x <- sf_collapse(list_c(x), collapse = '|')\n  \n  # str_glue(\"^({x})[A-Z0-9]{{3}}$\")\n  str_glue(\"({x})\")\n}\n\nlong_test2[sf_nchar(long_test2) == 2] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(0[2-5]|15|2[027]|3[0-24-6]|5[0458]|6[134]|76|9[25]|C[79]|E0|G0|S2)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(03|2[01]|54|62|75|95|K0|L2)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine3 <- function(x) {\n  \n  x <- getelem(x, \"g3\")\n  \n  if (empty(x)) return(character(0))\n  \n  list(\n    if (empty(x[vlen(x) == 1])) \n      NULL \n    else \n      parentheses(\n        sf_collapse(\n          delist(x[vlen(x) == 1]), collapse = \"|\")\n        ) |>\n      glue::as_glue(),\n    if (empty(x[vlen(x) > 1])) \n      NULL \n    else \n      map(x[vlen(x) > 1], \n          function(x) {\n          \n            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          \n            back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          \n            str_glue(\"{front}({back})\")\n          \n            })) |> list_flatten()\n}\n\nlong_test2[sf_nchar(long_test2) == 3] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(157|765|E06|G0[24]|S23)\n\n[[2]]\n0(2[1267]|3[23]|4[24]|50)\n\n[[3]]\n2(09|25|71)\n\n[[4]]\n3(08|12|26|4[78]|55|62)\n\n[[5]]\n5(0[35]|44|5[23]|8[5-9])\n\n[[6]]\n6(1[02]|30|4[46])\n\n[[7]]\n9(2[0-2]|58)\n\n[[8]]\nC(75|97)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(50[457]|630|705|95[18]|Q4[12]|S94)\n\n[[2]]\n1(17|40|56)\n\n[[3]]\n2(5[01]|6[49])\n\n[[4]]\n3(17|38|50)\n\n[[5]]\n4(24|32|54)\n\n[[6]]\nG(20|89)\n\n[[7]]\nJ(15|27|73)\n\n[[8]]\nL(16|83)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine4 <- function(x) {\n  \n  x <- getelem(x, \"g4\")\n  \n  if (empty(x)) return(character(0))\n  \n  list(\n    if (empty(x[vlen(x) == 1])) \n      NULL \n    else \n      parentheses(\n        sf_collapse(\n          delist(x[vlen(x) == 1]), collapse = \"|\")\n        ) |>\n      glue::as_glue(),\n    if (empty(x[vlen(x) > 1])) \n      NULL \n    else \n      map(x[vlen(x) > 1], \n          function(x) {\n          \n            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          \n            back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          \n            str_glue(\"{front}({back})\")\n          \n            })) |> list_flatten()\n}\n\nlong_test2[sf_nchar(long_test2) == 4] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(1577|7651|E067|S234)\n\n[[2]]\n0(50[67]|21[457-9]|22[0-2]|26[3569]|27[45]|329|330|422|44[45])\n\n[[3]]\n2(093|25[12]|719)\n\n[[4]]\n3(080|123|267|557|622|471|48[1-3])\n\n[[5]]\n5(44[23]|030|054|52[05]|530|857|860|87[02]|880|89[024])\n\n[[6]]\n6(30[34]|100|125|44[289]|463)\n\n[[7]]\n9(587|20[28]|21[34]|22[02-4])\n\n[[8]]\nC(750|977)\n\n[[9]]\nG(027|041)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(7032|E095|G886|J155|K060)\n\n[[2]]\n0(274|481|531)\n\n[[3]]\n2(286|434|015|026|72[46]|732|772|812|830)\n\n[[4]]\n3(284|336)\n\n[[5]]\n5(192|250|854)\n\n[[6]]\n6(461|729)\n\n[[7]]\n9(130|296|361|931|94[68])\n\n[[8]]\nA(420|602)\n\n[[9]]\nQ(047|201)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine5 <- function(x) {\n  \n  x <- getelem(x, \"g5\")\n  \n  if (empty(x)) return(character(0))\n  \n  list(\n    if (empty(x[vlen(x) == 1])) \n      NULL \n    else \n      parentheses(\n        sf_collapse(\n          delist(x[vlen(x) == 1]), collapse = \"|\")\n        ) |>\n      glue::as_glue(),\n    if (empty(x[vlen(x) > 1])) \n      NULL \n    else \n      map(x[vlen(x) > 1], \n          function(x) {\n          \n            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          \n            back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          \n            str_glue(\"{front}({back})\")\n          \n            })) |> list_flatten()\n}\n\nlong_test2[sf_nchar(long_test2) == 5] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(15777|76514|E0675|S2342)\n\n[[2]]\n0(50[67]T|2[1267][0-9]T|3[23][09]T|4[24][245]T)\n\n[[3]]\n2(0939|719[78]|251[0-5]|252[67])\n\n[[4]]\n3(080[12]|1231|2673|471[3-7]|5572|6221|4812|4820|483[34])\n\n[[5]]\n5(0300|0540|5300|8575|860[05]|880[05]|4420|4430|5200|5250|8700|8720|8900|892[05]|894[03])\n\n[[6]]\n6(100[01]|1253|463[46]|3035|304[3-8]|4421|448[04]|449[1245])\n\n[[7]]\n9(5870|2025|208[1-3]|213[2-4]|2145|220[12]|222[7-9]|2235|224[02])\n\n[[8]]\nC(750[1245]|9771)\n\n[[9]]\nG(0279|041[2-5])\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(0769T|0253U|01710|17312|35907|44300|56631|E2101|K0071|Q0483)\n\n[[2]]\n7(3522|8598)\n\n[[3]]\n9(4452|8976)\n\n[[4]]\nC(1822|7535)\n\n[[5]]\nG(0235|0313|0476|0505)\n\n[[6]]\nL(1001|1290)\n\n[[7]]\nV(2211|2315)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine_groups <- \\(x) {\n  \n  list(\n    v1 = x$g1,\n    v2 = recombine2(x),\n    v3 = recombine3(x),\n    v4 = recombine4(x),\n    v5 = recombine5(x)\n  )\n}\n\nlong_test2 |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$v1\n^[CEGS0-35-79][A-Z0-9]{4}\n\n$v2\ncharacter(0)\n\n$v3\ncharacter(0)\n\n$v4\ncharacter(0)\n\n$v5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |>\n  recombine_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$v1\n^GP1[A-Z0-9]{4}\n\n$v2\n(2[1-358]|3[235]|4[0-36]|5[02]|6[49]|7[26]|8[01468]|9[367]|A[06]|C1|J[027]|L3|M0|Q4|T1|V2)\n\n$v3\n$v3[[1]]\n(028|305|481|585|616|872|J85|L56|M10|S21|T45)\n\n$v3[[2]]\n2(06|67|74)\n\n$v3[[3]]\n7(58|7[04])\n\n$v3[[4]]\n9(59|9[14])\n\n$v3[[5]]\nA(42|55|95)\n\n$v3[[6]]\nQ(04|20)\n\n\n$v4\n$v4[[1]]\n(8544|J330|M118|S557|T204)\n\n$v4[[2]]\n0(207|310|458)\n\n$v4[[3]]\n2(72[37]|772)\n\n$v4[[4]]\n3(163|682|949)\n\n$v4[[5]]\n4(901|942)\n\n$v4[[6]]\n5(386|416)\n\n$v4[[7]]\n6(121|514|308|328)\n\n$v4[[8]]\n9(038|066|071)\n\n\n$v5\n$v5[[1]]\n(0015M|0[246][256][128]T|0377U|26055|44680|73201|94400|C7535|E2607|M1133)\n\n$v5[[2]]\n3(6522|6904|7242|8530)\n\n$v5[[3]]\n5(3410|8356)\n\n$v5[[4]]\n6(0100|1501|2320|7850|8135)\n\n$v5[[5]]\n8(2638|5421)\n\n$v5[[6]]\nA(9609|4427|4438)\n\n$v5[[7]]\nJ(1652|9227)\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Collapse Regex\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- vrg <- \\(x, n) {\n  \n  if (empty(x)) \n    return(character(0))\n  \n  post <- iif_else(sf_detect(x, \"^\\\\[?[A-Z]\\\\-?\"), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- fcase(\n    n == 0, glue::glue(\"^{x}$\"),                \n    n == 1, glue::glue(\"^{x}{post}$\"),\n    n == 2, glue::glue(\"^{x}{post}{{2}}$\"),\n    n == 3, glue::glue(\"^{x}{post}{{3}}$\")\n    )\n    \n  glue::glue_collapse(x)\n}\n\ncollapse_regex <- \\(x) {\n  \n  list(\n    g1 = red1(x),\n    g2 = map_chr(x$g2, red2) |> map_chr(vrg, n = 3) |> glue::as_glue(),\n    g3 = map_chr(x$g3, red3) |> map_chr(vrg, n = 2) |> glue::as_glue(),\n    g4 = map_chr(x$g4, red4) |> map_chr(vrg, n = 1) |> glue::as_glue(),\n    g5 = map_chr(x$g5, red5) |> map_chr(vrg, n = 0) |> glue::as_glue()\n  )\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# S7 Class\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhcpcs <- new_class(\n  name = \"hcpcs\",\n  properties = list(\n    input = class_vector,\n    split_length     = new_property(class = class_list, getter = \\(self) split_lengths(self@input)),\n    remove_redundant = new_property(class = class_list, getter = \\(self) remove_redundant(self@split_length)),\n    split_first      = new_property(class = class_list, getter = \\(self) split_first(self@remove_redundant)),\n    process_groups   = new_property(class = class_list, getter = \\(self) process_groups(self@split_first)),\n    reduce_groups    = new_property(class = class_list, getter = \\(self) reduce_groups(self@process_groups)),\n    recombine_groups = new_property(class = class_list, getter = \\(self) recombine_groups(self@reduce_groups))\n    )\n  )\n\nx <- hcpcs(input = random_hcpcs(50))\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<hcpcs>\n @ input           : chr [1:203] \"0\" \"U\" \"8\" \"K0\" \"M1\" \"31\" \"46\" \"Q4\" \"L5\" \"07\" \"Q4\" \"54\" ...\n @ split_length    :List of 5\n .. $ x1: chr [1:3] \"0\" \"8\" \"U\"\n .. $ x2: chr [1:41] \"00\" \"01\" \"02\" \"05\" ...\n .. $ x3: chr [1:49] \"000\" \"005\" \"008\" \"018\" ...\n .. $ x4: chr [1:50] \"0073\" \"0222\" \"0425\" \"1142\" ...\n .. $ x5: chr [1:50] \"0025U\" \"01112\" \"0239T\" \"15100\" ...\n @ remove_redundant:List of 5\n .. $ x1: chr [1:3] \"0\" \"8\" \"U\"\n .. $ x2: chr [1:33] \"17\" \"21\" \"22\" \"23\" ...\n .. $ x3: chr [1:26] \"100\" \"245\" \"325\" \"365\" ...\n .. $ x4: chr [1:28] \"1142\" \"1520\" \"2097\" \"2466\" ...\n .. $ x5: chr [1:23] \"15100\" \"20703\" \"25515\" \"25920\" ...\n @ split_first     :List of 5\n .. $ x1: chr [1:3] \"0\" \"8\" \"U\"\n .. $ x2:List of 16\n ..  ..$ : chr \"17\"\n ..  ..$ : chr [1:5] \"21\" \"22\" \"23\" \"27\" ...\n ..  ..$ : chr [1:3] \"30\" \"31\" \"33\"\n ..  ..$ : chr [1:3] \"42\" \"43\" \"46\"\n ..  ..$ : chr \"54\"\n ..  ..$ : chr [1:3] \"60\" \"61\" \"62\"\n ..  ..$ : chr [1:3] \"72\" \"73\" \"74\"\n ..  ..$ : chr \"E0\"\n ..  ..$ : chr [1:3] \"G4\" \"G8\" \"G9\"\n ..  ..$ : chr [1:2] \"J1\" \"J7\"\n ..  ..$ : chr \"K0\"\n ..  ..$ : chr [1:3] \"L5\" \"L7\" \"L8\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr \"P9\"\n ..  ..$ : chr \"Q4\"\n ..  ..$ : chr \"S9\"\n .. $ x3:List of 13\n ..  ..$ : chr \"100\"\n ..  ..$ : chr \"245\"\n ..  ..$ : chr [1:3] \"325\" \"365\" \"385\"\n ..  ..$ : chr [1:3] \"404\" \"418\" \"451\"\n ..  ..$ : chr \"572\"\n ..  ..$ : chr \"648\"\n ..  ..$ : chr [1:4] \"757\" \"759\" \"782\" \"785\"\n ..  ..$ : chr [1:3] \"925\" \"963\" \"994\"\n ..  ..$ : chr \"A95\"\n ..  ..$ : chr [1:2] \"C26\" \"C90\"\n ..  ..$ : chr [1:2] \"E10\" \"E26\"\n ..  ..$ : chr [1:3] \"J02\" \"J07\" \"J08\"\n ..  ..$ : chr \"M02\"\n .. $ x4:List of 16\n ..  ..$ : chr [1:2] \"1142\" \"1520\"\n ..  ..$ : chr [1:6] \"2097\" \"2466\" \"2507\" \"2530\" ...\n ..  ..$ : chr \"3776\"\n ..  ..$ : chr \"5040\"\n ..  ..$ : chr \"7049\"\n ..  ..$ : chr [1:2] \"9353\" \"9362\"\n ..  ..$ : chr [1:3] \"A443\" \"A470\" \"A621\"\n ..  ..$ : chr [1:2] \"C176\" \"C973\"\n ..  ..$ : chr \"E221\"\n ..  ..$ : chr \"G218\"\n ..  ..$ : chr \"H201\"\n ..  ..$ : chr \"J928\"\n ..  ..$ : chr \"L688\"\n ..  ..$ : chr \"Q510\"\n ..  ..$ : chr [1:2] \"S031\" \"S080\"\n ..  ..$ : chr [1:2] \"V230\" \"V526\"\n .. $ x5:List of 14\n ..  ..$ : chr \"15100\"\n ..  ..$ : chr [1:3] \"20703\" \"25515\" \"25920\"\n ..  ..$ : chr [1:3] \"34832\" \"36620\" \"37224\"\n ..  ..$ : chr \"48400\"\n ..  ..$ : chr [1:4] \"50688\" \"50860\" \"53085\" \"58750\"\n ..  ..$ : chr \"67921\"\n ..  ..$ : chr \"76883\"\n ..  ..$ : chr \"90655\"\n ..  ..$ : chr \"C7549\"\n ..  ..$ : chr [1:2] \"E1231\" \"E2370\"\n ..  ..$ : chr [1:2] \"G2167\" \"G2204\"\n ..  ..$ : chr \"J9144\"\n ..  ..$ : chr \"Q0244\"\n ..  ..$ : chr \"3200F\"\n @ process_groups  :List of 5\n .. $ g1: chr [1:3] \"0\" \"8\" \"U\"\n .. $ g2:List of 16\n ..  ..$ : chr \"17\"\n ..  ..$ : chr [1:5] \"21\" \"22\" \"23\" \"27\" ...\n ..  ..$ : chr [1:3] \"30\" \"31\" \"33\"\n ..  ..$ : chr [1:3] \"42\" \"43\" \"46\"\n ..  ..$ : chr \"54\"\n ..  ..$ : chr [1:3] \"60\" \"61\" \"62\"\n ..  ..$ : chr [1:3] \"72\" \"73\" \"74\"\n ..  ..$ : chr \"E0\"\n ..  ..$ : chr [1:3] \"G4\" \"G8\" \"G9\"\n ..  ..$ : chr [1:2] \"J1\" \"J7\"\n ..  ..$ : chr \"K0\"\n ..  ..$ : chr [1:3] \"L5\" \"L7\" \"L8\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr \"P9\"\n ..  ..$ : chr \"Q4\"\n ..  ..$ : chr \"S9\"\n .. $ g3:List of 13\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"100\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"245\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"325\"\n ..  .. ..$ : chr \"365\"\n ..  .. ..$ : chr \"385\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"404\"\n ..  .. ..$ : chr \"418\"\n ..  .. ..$ : chr \"451\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"572\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"648\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr [1:2] \"757\" \"759\"\n ..  .. ..$ : chr [1:2] \"782\" \"785\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"925\"\n ..  .. ..$ : chr \"963\"\n ..  .. ..$ : chr \"994\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"A95\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"C26\"\n ..  .. ..$ : chr \"C90\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"E10\"\n ..  .. ..$ : chr \"E26\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr [1:3] \"J02\" \"J07\" \"J08\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"M02\"\n .. $ g4:List of 16\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"1142\"\n ..  .. ..$ : chr \"1520\"\n ..  ..$ :List of 6\n ..  .. ..$ : chr \"2097\"\n ..  .. ..$ : chr \"2466\"\n ..  .. ..$ : chr \"2686\"\n ..  .. ..$ : chr \"2988\"\n ..  .. ..$ : chr \"2507\"\n ..  .. ..$ : chr \"2530\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"3776\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"5040\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"7049\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"9353\"\n ..  .. ..$ : chr \"9362\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"A621\"\n ..  .. ..$ : chr \"A443\"\n ..  .. ..$ : chr \"A470\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"C176\"\n ..  .. ..$ : chr \"C973\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E221\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"G218\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"H201\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"J928\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"L688\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"Q510\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"S031\"\n ..  .. ..$ : chr \"S080\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"V230\"\n ..  .. ..$ : chr \"V526\"\n .. $ g5:List of 14\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"3200F\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"15100\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"20703\"\n ..  .. ..$ : chr \"25515\"\n ..  .. ..$ : chr \"25920\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"34832\"\n ..  .. ..$ : chr \"36620\"\n ..  .. ..$ : chr \"37224\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"48400\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"50688\"\n ..  .. ..$ : chr \"50860\"\n ..  .. ..$ : chr \"53085\"\n ..  .. ..$ : chr \"58750\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"67921\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"76883\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"90655\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"C7549\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"E1231\"\n ..  .. ..$ : chr \"E2370\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"G2167\"\n ..  .. ..$ : chr \"G2204\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"J9144\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"Q0244\"\n @ reduce_groups   :List of 5\n .. $ g1: 'glue' chr \"^U08[A-Z0-9]{4}\"\n .. $ g2:List of 16\n ..  ..$ : chr \"17\"\n ..  ..$ : chr \"2[1-378]\"\n ..  ..$ : chr \"3[013]\"\n ..  ..$ : chr \"4[236]\"\n ..  ..$ : chr \"54\"\n ..  ..$ : chr \"6[0-2]\"\n ..  ..$ : chr \"7[2-4]\"\n ..  ..$ : chr \"E0\"\n ..  ..$ : chr \"G[489]\"\n ..  ..$ : chr \"J[17]\"\n ..  ..$ : chr \"K0\"\n ..  ..$ : chr \"L[578]\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr \"P9\"\n ..  ..$ : chr \"Q4\"\n ..  ..$ : chr \"S9\"\n .. $ g3:List of 13\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"100\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"245\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"325\"\n ..  .. ..$ : chr \"365\"\n ..  .. ..$ : chr \"385\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"404\"\n ..  .. ..$ : chr \"418\"\n ..  .. ..$ : chr \"451\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"572\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"648\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"75[79]\"\n ..  .. ..$ : chr \"78[25]\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"925\"\n ..  .. ..$ : chr \"963\"\n ..  .. ..$ : chr \"994\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"A95\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"C26\"\n ..  .. ..$ : chr \"C90\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"E10\"\n ..  .. ..$ : chr \"E26\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"J0[278]\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"M02\"\n .. $ g4:List of 16\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"1142\"\n ..  .. ..$ : chr \"1520\"\n ..  ..$ :List of 6\n ..  .. ..$ : chr \"2097\"\n ..  .. ..$ : chr \"2466\"\n ..  .. ..$ : chr \"2686\"\n ..  .. ..$ : chr \"2988\"\n ..  .. ..$ : chr \"2507\"\n ..  .. ..$ : chr \"2530\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"3776\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"5040\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"7049\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"9353\"\n ..  .. ..$ : chr \"9362\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"A621\"\n ..  .. ..$ : chr \"A443\"\n ..  .. ..$ : chr \"A470\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"C176\"\n ..  .. ..$ : chr \"C973\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E221\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"G218\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"H201\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"J928\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"L688\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"Q510\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"S031\"\n ..  .. ..$ : chr \"S080\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"V230\"\n ..  .. ..$ : chr \"V526\"\n .. $ g5:List of 14\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"3200F\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"15100\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"20703\"\n ..  .. ..$ : chr \"25515\"\n ..  .. ..$ : chr \"25920\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"34832\"\n ..  .. ..$ : chr \"36620\"\n ..  .. ..$ : chr \"37224\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"48400\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"50688\"\n ..  .. ..$ : chr \"50860\"\n ..  .. ..$ : chr \"53085\"\n ..  .. ..$ : chr \"58750\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"67921\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"76883\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"90655\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"C7549\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"E1231\"\n ..  .. ..$ : chr \"E2370\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"G2167\"\n ..  .. ..$ : chr \"G2204\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"J9144\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"Q0244\"\n @ recombine_groups:List of 5\n .. $ v1: 'glue' chr \"^U08[A-Z0-9]{4}\"\n .. $ v2: 'glue' chr \"(17|2[1-378]|3[013]|4[236]|54|6[0-2]|7[2-4]|E0|G[489]|J[17]|K0|L[578]|M1|P9|Q4|S9)\"\n .. $ v3:List of 7\n ..  ..$ : 'glue' chr \"(100|245|572|648|A95|J0[278]|M02)\"\n ..  ..$ : 'glue' chr \"3(25|65|85)\"\n ..  ..$ : 'glue' chr \"4(04|18|51)\"\n ..  ..$ : 'glue' chr \"7(5[79]|8[25])\"\n ..  ..$ : 'glue' chr \"9(25|63|94)\"\n ..  ..$ : 'glue' chr \"C(26|90)\"\n ..  ..$ : 'glue' chr \"E(10|26)\"\n .. $ v4:List of 8\n ..  ..$ : 'glue' chr \"(3776|5040|7049|E221|G218|H201|J928|L688|Q510)\"\n ..  ..$ : 'glue' chr \"1(142|520)\"\n ..  ..$ : 'glue' chr \"2(097|466|686|988|507|530)\"\n ..  ..$ : 'glue' chr \"9(353|362)\"\n ..  ..$ : 'glue' chr \"A(621|443|470)\"\n ..  ..$ : 'glue' chr \"C(176|973)\"\n ..  ..$ : 'glue' chr \"S(031|080)\"\n ..  ..$ : 'glue' chr \"V(230|526)\"\n .. $ v5:List of 6\n ..  ..$ : 'glue' chr \"(3200F|15100|48400|67921|76883|90655|C7549|J9144|Q0244)\"\n ..  ..$ : 'glue' chr \"2(0703|5515|5920)\"\n ..  ..$ : 'glue' chr \"3(4832|6620|7224)\"\n ..  ..$ : 'glue' chr \"5(0688|0860|3085|8750)\"\n ..  ..$ : 'glue' chr \"E(1231|2370)\"\n ..  ..$ : 'glue' chr \"G(2167|2204)\"\n```\n\n\n:::\n:::\n\n\n\n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.2 (2024-10-31 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_codex(v.0.0.1)_, _kit(v.0.0.19)_, _collapse(v.2.0.18)_, _data.table(v.1.16.99)_, _stringfish(v.0.16.0)_, _S7(v.0.2.0)_, _vctrs(v.0.6.5)_, _cli(v.3.6.3)_, _rlang(v.1.1.4)_, _stringr(v.1.5.1)_, _purrr(v.1.0.2)_, _dplyr(v.1.1.4)_ and _fuimus(v.0.0.2)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _crayon(v.1.5.3)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _tools(v.4.4.2)_, _qs(v.0.27.2)_, _parallel(v.4.4.2)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _cheapr(v.0.9.91)_, _fs(v.1.6.5)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13-1)_, _systemfonts(v.1.1.0)_, _xfun(v.0.49)_, _tibble(v.3.2.1)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.49)_, _htmltools(v.0.5.8.1)_ and _rmarkdown(v.2.29)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}