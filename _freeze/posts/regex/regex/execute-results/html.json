{
  "hash": "17c2c2b50cfa9ec0aadf50f8fbb9006e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\ncallout-appearance: simple\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# TODO {.unnumbered}\n\n   * The *postfix* for a **wildcard** that begins with a **letter** is `[0-9]{n}`.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n   * Groups 3, 4 & 5 beginning with letters.\n   * Group 5 ending with letters.\n\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#note-good .callout-note collapse=\"true\"}\n\n### Good Examples\n\n### Case 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(\"L80\", \n     c(\"L56\", \"L59\"))\n\nlength(sf_extract(hcpcs, \"^L56|^L59|^L80\"))\nlength(sf_extract(hcpcs, \"^L(5[69]|80)[0-9]{2}$\"))\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^L56|^L59|^L80\"),\n  compact = sf_extract(hcpcs, \"^L(5[69]|80)[0-9]{2}$\"),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(c(\"021\", \"022\", \"026\", \"027\"), \n     c(\"032\", \"033\"), \n     c(\"042\", \"044\"), \n     \"050\")\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^021|^022|^026|^027|^032|^033|^042|^044|^050\"),\n  compact = sf_extract(hcpcs, sf_convert(\"^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$\")),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(c(\"C75\", \"C97\"),\n     c(\"G02\", \"G04\"))\n\nlength(sf_extract(hcpcs, \"^C75|^C97|^G02|^G04\"))\nlength(sf_extract(hcpcs, \"^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$\"))\nlength(sf_extract(hcpcs, \"^(C(75|97)|G0[24])[0-9]{2}$\"))\n\nbench::mark(\n  raw = sf_extract(hcpcs, \"^C75|^C97|^G02|^G04\"),\n  reduced = sf_extract(hcpcs, \"^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$\"),\n  compact = sf_extract(hcpcs, sf_convert(\"^(C(75|97)|G0[24])[0-9]{2}$\")),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n### Case 4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlist(\"0[2-5]\", \n     \"15\", \n     \"2[027]\", \n     \"3[0-24-6]\", \n     \"5[0458]\", \n     \"6[134]\", \n     \"76\", \n     \"9[25]\", \n     \"C[79]\", \n     \"E0\", \n     \"G0\", \n     \"S2\") -> c4list\n\nc4list\n\nc4raw <- \"^02|^03|^04|^05|^15|^20|^22|^27|^30|^31|^32|^34|^35|^36|^50|^54|^55|^58|^61|^63|^64|^76|^92|^95|^C7|^C9|^E0|^G0|^S2\"\n\nc4compact <- paste0(\"^(\", sf_collapse(list_c(c4list), collapse = \"|\"), \")[A-Z0-9]{3}$\")\n\nlength(sf_extract(hcpcs, c4raw))\nlength(sf_extract(hcpcs, c4compact))\n\nbench::mark(\n  raw = sf_extract(hcpcs, c4raw),\n  compact = sf_extract(hcpcs, c4compact),\n  iterations = 10000) |> \n  select(expression:total_time)\n```\n:::\n\n\n\n\n::: \n\n<hr>\n\n\n# Preprocess Steps\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview_length <- \\(x) {\n  grp_name <- format(seq_along(x))\n  grp_size <- format(vlen(x), justify = \"left\")\n  grp_mems <- unname(grp_mems)\n  grp_mems <- if (empty(grp_mems)) NULL else format(grp_mems, justify = \"none\")\n  cli::cat_bullet(glue::glue(\"{grp_name}: \", \"{grp_size}|\", \"-[{grp_mems}]\"))\n  return(invisible(x))\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview_first <- \\(x) {\n  grp_name <- format(seq_along(x))\n  grp_size <- format(vlen(x), justify = \"left\")\n  \n  grp_mems <- purrr::modify_if(x, is.list, \\(x) map_chr(x, \\(x) paste0(\"<\", paste0(x, collapse = \" \"), \">\")))\n  grp_mems <- if (empty(grp_mems)) NULL else format(unname(grp_mems), justify = \"none\")\n\n  cli::cat_bullet(glue::glue(\"{grp_name}: \", \"{grp_size}|\", \"-[{grp_mems}]\"))\n  \n  return(invisible(x))\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- random_hcpcs(50)\n\nx |> \n  split_lengths() |> \n  view_length()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in view_length(split_lengths(x)): object 'grp_mems' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nx |>\n  split_lengths() |> \n  remove_redundant() |>\n  view_length()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in view_length(remove_redundant(split_lengths(x))): object 'grp_mems' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nx |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |> \n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1:  1|-[0]\n• 2: 18|-[<28>, <32 37>, <40 43>, <50 54 57>, <61>, <77>, <83 84>, <92 93 95 96 99>, <A4>, <C9>, <D9>, <E0 E1>, <G8 G9>, <J2>, <K0>, <L1 L2 L6>, <Q0 Q4>, <S0 S9>]\n• 3: 14|-[<152>, <210 240 241 297>, <300 361 365>, <585>, <732>, <803 812 820 824>, <908>, <A95>, <C18 C26>, <G01 G10 G21 G60>, <J04 J71 J76 J93>, <L32 L39 L70>, <S10>, <T20>]\n• 4: 16|-[<1177 1511 1583 1900>, <2527 2786 2944>, <3378>, <4958>, <5226>, <6971>, <7848>, <8263 8718 8799 8935>, <9073 9401>, <E236 E259>, <G034>, <L373 L868>, <M103>, <S557>, <T452>, <V273>]\n• 5: 13|-[<17380>, <20920 21408 22865 26535 26605 27003 27165 27226>, <33511 35509>, <42960>, <63011>, <80230 81437 86353>, <A6239>, <G0426 G0436 G0504>, <J9044>, <S3655>, <T1041>, <1157F>, <3512F>]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1:  2|-[K, P]\n• 2: 20|-[<00 03 04 06 08>, <10>, <21 24 27 28>, <30 33 36 37>, <50 52>, <60 61 69>, <77>, <81 82 88>, <90>, <A4 A9>, <B4>, <C7 C9>, <E2>, <G0 G8 G9>, <J1 J2 J3>, <L2 L6>, <M1>, <Q5>, <T1>, <V5>]\n• 3: 14|-[<014 022>, <111>, <231 252 260 264 298>, <315 387>, <432 451>, <511 565>, <853 871 874>, <925 993>, <E08>, <G20 G21>, <H20>, <J93>, <Q41>, <U00>]\n• 4: 10|-[<0152 0569>, <2080 2252 2560 2952>, <3123 3165 3535>, <4240 4384 4961>, <5104 5420 5750>, <7417>, <8017 8790>, <E024>, <L564>, <Q051>]\n• 5: 16|-[<01951>, <11971 15004>, <23491 23545>, <38214>, <47760 49000 49568>, <64721>, <78216 78414>, <85240 86835>, <95706 99211>, <E0210>, <J0330 J7615 J9052 J9212>, <L0861 L4210 L8033>, <Q0480>, <0582F>, <3272F>, <0754T>]\n```\n\n\n:::\n:::\n\n\n\n\n<hr>\n\n# Process Groups\n\n::: {.panel-tabset}\n\n## Group 3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(\"C75\", \"C97\", \"G02\", \"G04\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 2|-[<C75>, <C97>]\n• 2: 1|-[<G02 G04>]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n•  1: 4|-[<021 022 026 027>, <032 033>, <042 044>, <050>]\n•  2: 1|-[<157>]\n•  3: 3|-[<209>, <225>, <271>]\n•  4: 6|-[<308>, <312>, <326>, <347 348>, <355>, <362>]\n•  5: 4|-[<503 505>, <544>, <552 553>, <585 586 587 588 589>]\n•  6: 3|-[<610 612>, <630>, <644 646>]\n•  7: 1|-[<765>]\n•  8: 2|-[<920 921 922>, <958>]\n•  9: 2|-[<C75>, <C97>]\n• 10: 1|-[<E06>]\n• 11: 1|-[<G02 G04>]\n• 12: 1|-[<S23>]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 1|-[<193>]\n• 2: 1|-[<317>]\n• 3: 1|-[<492>]\n• 4: 1|-[<526>]\n• 5: 1|-[<799>]\n• 6: 1|-[<L01>]\n• 7: 1|-[<Q41>]\n• 8: 1|-[<S00>]\n```\n\n\n:::\n:::\n\n\n\n\n## Group 4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(\"C751\", \"C752\", \"C970\", \"G020\", \"G021\", \"G040\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 2|-[<C751 C752>, <C970>]\n• 2: 2|-[<G020 G021>, <G040>]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 4] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n•  1:  9|-[<0506 0507>, <0214 0215 0217 0218 0219>, <0220 0221 0222>, <0263 0265 0266 0269>, <0274 0275>, <0329>, <0330>, <0422>, <0444 0445>]\n•  2:  1|-[<1577>]\n•  3:  3|-[<2093>, <2251 2252>, <2719>]\n•  4:  7|-[<3080>, <3123>, <3267>, <3557>, <3622>, <3471>, <3481 3482 3483>]\n•  5: 10|-[<5442 5443>, <5030>, <5054>, <5520 5525>, <5530>, <5857>, <5860>, <5870 5872>, <5880>, <5890 5892 5894>]\n•  6:  5|-[<6303 6304>, <6100>, <6125>, <6442 6448 6449>, <6463>]\n•  7:  1|-[<7651>]\n•  8:  4|-[<9587>, <9202 9208>, <9213 9214>, <9220 9222 9223 9224>]\n•  9:  2|-[<C750>, <C977>]\n• 10:  1|-[<E067>]\n• 11:  2|-[<G027>, <G041>]\n• 12:  1|-[<S234>]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 1|-[<0344>]\n• 2: 1|-[<4296>]\n• 3: 1|-[<9636>]\n• 4: 1|-[<C940>]\n• 5: 1|-[<D573>]\n• 6: 2|-[<G005>, <G045>]\n• 7: 1|-[<J083>]\n• 8: 1|-[<S503>]\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n## Group 5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5_num <- function(x) {\n  \n  map(x, function(x) {\n    \n    idx <- data.table(\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      grp3 = sf_sub(x, 1, 4),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      a5 = take_at(x, 5),\n      i1 = groupid(take_at(x))) |>\n      fgroup_by(a1) |> \n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |> \n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |> \n      fmutate(i4 = groupid(a4)) |>\n      fgroup_by(a1, a2, a3, a4) |> \n      fmutate(i5 = groupid(a5)) |> \n      fungroup()\n\n      lone <- fcount(idx, i1, add = TRUE) |> \n        fsubset((i2 + i3 + i4 + i5 + N) == 5)\n      \n      last <- fsubset(idx, code %!in% lone[[\"code\"]])\n      \n      last <- join(\n        fcount(last, grp2, a4),\n        fcount(last, grp2, name = \"G\"), on = \"grp2\", verbose = 0) |>\n        fsubset(N == G) |>\n        join(last, on = c(\"grp2\", \"a4\"), how = \"right\", verbose = 0) |> \n        fsubset(not_na(N))\n      \n      rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n      \n      c(if (empty(lone)) NULL else list(lone[[\"code\"]]),\n        if (empty(last)) NULL else gchop(last[[\"code\"]], last[[\"grp2\"]]),\n        if (empty(rest)) NULL else gchop(rest[[\"code\"]], rest[[\"grp3\"]]))\n    })\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5_chr <- function(x) {\n  \n  original <- x\n  \n  reversed <- map(\n    original, \n    \\(x) paste0(\n      take_at(x, 5), \n      sf_remove(x, \"[A-Z]$\")\n      )\n    )\n\n  map2(reversed, original, function(x, y) {\n    \n    idx <- data.table(\n      orig = y,\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      grp3 = sf_sub(x, 1, 4),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      a5 = take_at(x, 5),\n      i1 = groupid(take_at(x))) |>\n      fgroup_by(a1) |> \n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |> \n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |> \n      fmutate(i4 = groupid(a4)) |>\n      fgroup_by(a1, a2, a3, a4) |> \n      fmutate(i5 = groupid(a5)) |> \n      fungroup()\n\n      lone <- fcount(idx, i1, add = TRUE) |> \n        fsubset((i2 + i3 + i4 + i5 + N) == 5)\n      \n      last <- fsubset(idx, code %!in% lone[[\"code\"]])\n      \n      last <- join(\n        fcount(last, grp2, a4),\n        fcount(last, grp2, name = \"G\"), on = \"grp2\", verbose = 0) |>\n        fsubset(N == G) |>\n        join(last, on = c(\"grp2\", \"a4\"), how = \"right\", verbose = 0) |> \n        fsubset(not_na(N))\n      \n      rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n\n    c(\n      if (empty(lone))\n        NULL\n      else\n        list(lone[[\"orig\"]]),\n      if (empty(last))\n        NULL\n      else\n        gchop(last[[\"orig\"]], last[[\"grp1\"]]),\n      if (empty(rest))\n        NULL\n      else\n        gchop(rest[[\"orig\"]], rest[[\"grp2\"]])\n    )\n  })\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5 <- function(x) {\n\n  x <- getelem(x, \"x5\")\n\n  if (empty(x)) return(x)\n  \n  chr <- map(x, \\(x) sf_extract(x, \"[A-Z]$\")) |> compact()\n  num <- map(x, \\(x) sf_extract(x, \"[0-9]$\")) |> compact()\n\n  c(\n    if (empty(chr)) NULL else group_5_chr(chr),\n    if (empty(num)) NULL else group_5_num(num)\n  )\n}\n\nc(\"C7510\", \"C9701\", \"G0200\", \"G0400\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 2|-[<C7510>, <C9701>]\n• 2: 2|-[<G0200>, <G0400>]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 5] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n•  1:  4|-[<0506T 0507T>, <0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T 0263T 0265T 0266T 0269T 0274T 0275T>, <0329T 0330T>, <0422T 0444T 0445T>]\n•  2:  1|-[<15777>]\n•  3:  4|-[<20939>, <27197 27198>, <22510 22511 22512 22513 22514 22515>, <22526 22527>]\n•  4:  9|-[<30801 30802>, <31231>, <32673>, <34713 34714 34715 34716 34717>, <35572>, <36221>, <34812>, <34820>, <34833 34834>]\n•  5: 15|-[<50300>, <50540>, <55300>, <58575>, <58600 58605>, <58800 58805>, <54420>, <54430>, <55200>, <55250>, <58700>, <58720>, <58900>, <58920 58925>, <58940 58943>]\n•  6:  8|-[<61000 61001>, <61253>, <64634 64636>, <63035>, <63043 63044 63045 63046 63047 63048>, <64421>, <64480 64484>, <64491 64492 64494 64495>]\n•  7:  1|-[<76514>]\n•  8:  9|-[<95870>, <92025>, <92081 92082 92083>, <92132 92133 92134>, <92145>, <92201 92202>, <92227 92228 92229>, <92235>, <92240 92242>]\n•  9:  2|-[<C7501 C7502 C7504 C7505>, <C9771>]\n• 10:  1|-[<E0675>]\n• 11:  2|-[<G0279>, <G0412 G0413 G0414 G0415>]\n• 12:  1|-[<S2342>]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 2|-[<22590>, <27535>]\n• 2: 1|-[<31551>]\n• 3: 1|-[<50130>]\n• 4: 1|-[<61545>]\n• 5: 1|-[<A4231>]\n• 6: 1|-[<C2636>]\n```\n\n\n:::\n:::\n\n\n\n\n## process_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  list(\n    g1 = x$x1,\n    g2 = x$x2,\n    g3 = group_3(x),\n    g4 = group_4(x),\n    g5 = group_5(x))\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n$g2\n$g2[[1]]\n[1] \"30\" \"31\" \"32\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n\n$g4\nlist()\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n$g2\nlist()\n\n$g3\nlist()\n\n$g4\nlist()\n\n$g5\nlist()\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"4\" \"C\" \"G\" \"R\" \"T\"\n\n$g2\n$g2[[1]]\n[1] \"02\" \"05\"\n\n$g2[[2]]\n[1] \"15\"\n\n$g2[[3]]\n[1] \"20\" \"23\" \"24\" \"27\"\n\n$g2[[4]]\n[1] \"30\" \"31\" \"38\" \"39\"\n\n$g2[[5]]\n[1] \"58\"\n\n$g2[[6]]\n[1] \"69\"\n\n$g2[[7]]\n[1] \"77\"\n\n$g2[[8]]\n[1] \"80\" \"81\" \"82\" \"86\"\n\n$g2[[9]]\n[1] \"99\"\n\n$g2[[10]]\n[1] \"A4\" \"A7\"\n\n$g2[[11]]\n[1] \"D7\"\n\n$g2[[12]]\n[1] \"J0\" \"J1\" \"J7\" \"J9\"\n\n$g2[[13]]\n[1] \"L0\" \"L1\"\n\n$g2[[14]]\n[1] \"M1\"\n\n$g2[[15]]\n[1] \"Q4\" \"Q9\"\n\n$g2[[16]]\n[1] \"S0\" \"S9\"\n\n$g2[[17]]\n[1] \"V5\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"019\"\n\n$g3[[1]][[2]]\n[1] \"033\" \"036\"\n\n$g3[[1]][[3]]\n[1] \"048\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"100\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"211\"\n\n$g3[[3]][[2]]\n[1] \"223\"\n\n$g3[[3]][[3]]\n[1] \"290\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"326\"\n\n$g3[[4]][[2]]\n[1] \"339\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"545\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"621\" \"622\"\n\n$g3[[6]][[2]]\n[1] \"645\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"711\"\n\n$g3[[7]][[2]]\n[1] \"768\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"835\" \"836\"\n\n$g3[[8]][[2]]\n[1] \"844\"\n\n$g3[[8]][[3]]\n[1] \"883\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"909\"\n\n$g3[[9]][[2]]\n[1] \"934\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"A95\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"D99\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"E23\"\n\n\n$g3[[13]]\n$g3[[13]][[1]]\n[1] \"L20\" \"L26\"\n\n\n$g3[[14]]\n$g3[[14]][[1]]\n[1] \"Q00\"\n\n\n$g3[[15]]\n$g3[[15]][[1]]\n[1] \"S20\" \"S23\"\n\n\n$g3[[16]]\n$g3[[16]][[1]]\n[1] \"V23\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"0410\"\n\n$g4[[1]][[2]]\n[1] \"0440\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"2670\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"3350\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"5466\"\n\n$g4[[4]][[2]]\n[1] \"5553\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"6050\"\n\n$g4[[5]][[2]]\n[1] \"6232\"\n\n$g4[[5]][[3]]\n[1] \"6304\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"7036\"\n\n$g4[[6]][[2]]\n[1] \"7826\"\n\n$g4[[6]][[3]]\n[1] \"7874\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"9067\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"A506\"\n\n$g4[[8]][[2]]\n[1] \"A602\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"D012\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"E062\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"K101\"\n\n\n$g4[[12]]\n$g4[[12]][[1]]\n[1] \"L725\"\n\n\n$g4[[13]]\n$g4[[13]][[1]]\n[1] \"S103\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"6090F\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"0318U\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"12047\"\n\n$g5[[3]][[2]]\n[1] \"14040\"\n\n$g5[[3]][[3]]\n[1] \"17262\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"22868\"\n\n$g5[[4]][[2]]\n[1] \"25107\"\n\n$g5[[4]][[3]]\n[1] \"28062\"\n\n$g5[[4]][[4]]\n[1] \"28630\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"34051\"\n\n$g5[[5]][[2]]\n[1] \"35013\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"61304\"\n\n$g5[[6]][[2]]\n[1] \"64643\"\n\n$g5[[6]][[3]]\n[1] \"64896\"\n\n$g5[[6]][[4]]\n[1] \"67218\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"75946\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"87512\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"A6577\"\n\n$g5[[9]][[2]]\n[1] \"A9698\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"D2332\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"E1035\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"J2183\"\n\n$g5[[12]][[2]]\n[1] \"J3105\"\n\n\n$g5[[13]]\n$g5[[13]][[1]]\n[1] \"K0098\"\n\n$g5[[13]][[2]]\n[1] \"K0852\"\n\n$g5[[13]][[3]]\n[1] \"K1037\"\n\n\n$g5[[14]]\n$g5[[14]][[1]]\n[1] \"S5125\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Reduce Groups\n\n::: {.panel-tabset}\n\n## reduce_runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  if (sf_nchar(x) == 1) \n    return(x)\n\n  test <- setNames(rep(0, 37), c(0:9, \"&\", LETTERS))\n  \n  vec <- test[c(desplit(x), \"&\")]\n  \n  vec <- vec[not_na(vec)]\n  \n  test[names(vec)] <- 1\n  \n  test[names(test) == \"&\"] <- 0\n\n  groups <- data.table(\n    value = names(test),\n    keys = test,\n    group = groupid(test)) |>\n    fgroup_by(group)\n  \n  groups <- join(\n    groups, \n    fcount(groups, group), \n    on = \"group\", \n    verbose = 0) |> \n    fungroup() |> \n    fsubset(keys == 1) |>\n    fsubset(N >= 3) |>\n    fselect(value, group)\n    \n  if (empty(groups)) \n    return(x)\n  \n  xgroups <- gchop(\n    groups$value, \n    groups$group) |>\n    map(smush) |>\n    list_c()\n  \n  if (all(xgroups == smush(c(0:9, \"&\", LETTERS)))) return(\"[A-Z0-9]\")\n  \n  replacements <- join(\n    dplyr::slice_min(groups, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(groups, by = group, order_by = value) |> dplyr::rename(end = value),\n    on = \"group\", verbose = 0) |>\n    stringr::str_glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  bracket(replace_regex(x, xgroups, replacements))\n}\n```\n:::\n\n\n\n\n## red1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred1 <- function(x) {\n  \n  x <- getelem(x, \"g1\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  re <- sort_order(x) |> \n    reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") \n    return(str_glue(\"^{re}{{5}}\"))\n  \n  post <- iif_else(\n    sf_detect(\n      re, \n      \"\\\\[?[0-9]{1}\"), \n    \"[A-Z0-9]\", \n    \"[0-9]\")\n  \n  str_glue(\"^{re}{post}{{4}}\")\n}\n\nlong_test2 |>\n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[CEGS0-35-79][A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[GJ04-6][A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nc(LETTERS[1:5], 0:9) |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-Z0-9]{5}\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(LETTERS[1:5], 0:9)) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}\n```\n\n\n:::\n:::\n\n\n\n\n## red2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred2 <- function(x) {\n  \n  x <- getelem(x, \"g2\")\n  \n  if (empty(x)) \n    return(character(0))\n  \n  modify_if(x, len_gt_one, function(x) {\n    \n    parts <- split_max_vlen(x) |> \n    as.data.frame() |>\n    map(uniq_narm) |>\n    map(sort_order) |>\n    map(reduce_runs) |>\n    delist()\n\n  multi <- sf_nchar(parts) > 1\n  nobrk <- sf_ndetect(parts, \"\\\\[|\\\\]\")\n  \n  if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)\n  \n  smush(parts)\n  \n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 2] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2() |> \n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n•  1: 1|-[0[2-5]]\n•  2: 1|-[15]\n•  3: 1|-[2[027]]\n•  4: 1|-[3[0-24-6]]\n•  5: 1|-[5[0458]]\n•  6: 1|-[6[134]]\n•  7: 1|-[76]\n•  8: 1|-[9[25]]\n•  9: 1|-[C[79]]\n• 10: 1|-[E0]\n• 11: 1|-[G0]\n• 12: 1|-[S2]\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"A\", c(0:5, LETTERS)) |> \n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2() |>\n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n• 1: 1|-[A[A-Z0-5]]\n```\n\n\n:::\n:::\n\n\n\n\n## red3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred3 <- function(x) {\n  \n  x <- getelem(x, \"g3\")\n  \n  if (empty(x)) return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- sf_ndetect(parts, \"\\\\[|\\\\]\")\n      \n      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)\n      \n      smush(parts)\n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 3] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red3() |> \n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n•  1: 4|-[<02[1267]>, <03[23]>, <04[24]>, <050>]\n•  2: 1|-[<157>]\n•  3: 3|-[<209>, <225>, <271>]\n•  4: 6|-[<308>, <312>, <326>, <34[78]>, <355>, <362>]\n•  5: 4|-[<50[35]>, <544>, <55[23]>, <58[5-9]>]\n•  6: 3|-[<61[02]>, <630>, <64[46]>]\n•  7: 1|-[<765>]\n•  8: 2|-[<92[0-2]>, <958>]\n•  9: 2|-[<C75>, <C97>]\n• 10: 1|-[<E06>]\n• 11: 1|-[<G0[24]>]\n• 12: 1|-[<S23>]\n```\n\n\n:::\n:::\n\n\n\n\n## red4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred4 <- function(x) {\n  \n  x <- getelem(x, \"g4\")\n  \n  if (empty(x)) return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- sf_ndetect(parts, \"\\\\[|\\\\]\")\n      \n      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)\n      \n      smush(parts)\n      \n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 4] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red4() |> \n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n•  1:  9|-[<050[67]>, <021[457-9]>, <022[0-2]>, <026[3569]>, <027[45]>, <0329>, <0330>, <0422>, <044[45]>]\n•  2:  1|-[<1577>]\n•  3:  3|-[<2093>, <225[12]>, <2719>]\n•  4:  7|-[<3080>, <3123>, <3267>, <3557>, <3622>, <3471>, <348[1-3]>]\n•  5: 10|-[<544[23]>, <5030>, <5054>, <552[05]>, <5530>, <5857>, <5860>, <587[02]>, <5880>, <589[024]>]\n•  6:  5|-[<630[34]>, <6100>, <6125>, <644[289]>, <6463>]\n•  7:  1|-[<7651>]\n•  8:  4|-[<9587>, <920[28]>, <921[34]>, <922[02-4]>]\n•  9:  2|-[<C750>, <C977>]\n• 10:  1|-[<E067>]\n• 11:  2|-[<G027>, <G041>]\n• 12:  1|-[<S234>]\n```\n\n\n:::\n:::\n\n\n\n\n## red5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred5 <- function(x) {\n  \n  x <- getelem(x, \"g5\")\n  \n  if (empty(x)) return(character(0))\n  \n  map(x, function(x) {\n    \n    modify_if(x, len_gt_one, function(x) {\n      \n      parts <- split_max_vlen(x) |> \n        as.data.frame() |>\n        map(uniq_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchar(parts) > 1\n      nobrk <- sf_ndetect(parts, \"\\\\[|\\\\]\")\n      \n      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)\n      \n      smush(parts)\n    })\n  })\n}\n\nlong_test2[sf_nchar(long_test2) == 5] |>\n  split_lengths() |>\n  # remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  red5() |> \n  view_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n•  1:  4|-[<050[67]T>, <02[1267][0-9]T>, <03[23][09]T>, <04[24][245]T>]\n•  2:  1|-[<15777>]\n•  3:  4|-[<20939>, <2719[78]>, <2251[0-5]>, <2252[67]>]\n•  4:  9|-[<3080[12]>, <31231>, <32673>, <3471[3-7]>, <35572>, <36221>, <34812>, <34820>, <3483[34]>]\n•  5: 15|-[<50300>, <50540>, <55300>, <58575>, <5860[05]>, <5880[05]>, <54420>, <54430>, <55200>, <55250>, <58700>, <58720>, <58900>, <5892[05]>, <5894[03]>]\n•  6:  8|-[<6100[01]>, <61253>, <6463[46]>, <63035>, <6304[3-8]>, <64421>, <6448[04]>, <6449[1245]>]\n•  7:  1|-[<76514>]\n•  8:  9|-[<95870>, <92025>, <9208[1-3]>, <9213[2-4]>, <92145>, <9220[12]>, <9222[7-9]>, <92235>, <9224[02]>]\n•  9:  2|-[<C750[1245]>, <C9771>]\n• 10:  1|-[<E0675>]\n• 11:  2|-[<G0279>, <G041[2-5]>]\n• 12:  1|-[<S2342>]\n```\n\n\n:::\n:::\n\n\n\n\n## reduce_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_groups <- \\(x) {\n  \n  list(\n    g1 = red1(x),\n    g2 = red2(x),\n    g3 = red3(x),\n    g4 = red4(x),\n    g5 = red5(x)\n  )\n}\n\nlong_test2 |>\n  split_lengths() |>\n  # remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^[CEGS0-35-79][A-Z0-9]{4}\n\n$g2\n$g2[[1]]\n[1] \"0[2-5]\"\n\n$g2[[2]]\n[1] \"15\"\n\n$g2[[3]]\n[1] \"2[027]\"\n\n$g2[[4]]\n[1] \"3[0-24-6]\"\n\n$g2[[5]]\n[1] \"5[0458]\"\n\n$g2[[6]]\n[1] \"6[134]\"\n\n$g2[[7]]\n[1] \"76\"\n\n$g2[[8]]\n[1] \"9[25]\"\n\n$g2[[9]]\n[1] \"C[79]\"\n\n$g2[[10]]\n[1] \"E0\"\n\n$g2[[11]]\n[1] \"G0\"\n\n$g2[[12]]\n[1] \"S2\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"02[1267]\"\n\n$g3[[1]][[2]]\n[1] \"03[23]\"\n\n$g3[[1]][[3]]\n[1] \"04[24]\"\n\n$g3[[1]][[4]]\n[1] \"050\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"157\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"209\"\n\n$g3[[3]][[2]]\n[1] \"225\"\n\n$g3[[3]][[3]]\n[1] \"271\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"308\"\n\n$g3[[4]][[2]]\n[1] \"312\"\n\n$g3[[4]][[3]]\n[1] \"326\"\n\n$g3[[4]][[4]]\n[1] \"34[78]\"\n\n$g3[[4]][[5]]\n[1] \"355\"\n\n$g3[[4]][[6]]\n[1] \"362\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"50[35]\"\n\n$g3[[5]][[2]]\n[1] \"544\"\n\n$g3[[5]][[3]]\n[1] \"55[23]\"\n\n$g3[[5]][[4]]\n[1] \"58[5-9]\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"61[02]\"\n\n$g3[[6]][[2]]\n[1] \"630\"\n\n$g3[[6]][[3]]\n[1] \"64[46]\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"765\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"92[0-2]\"\n\n$g3[[8]][[2]]\n[1] \"958\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"C75\"\n\n$g3[[9]][[2]]\n[1] \"C97\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"E06\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"G0[24]\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"S23\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"050[67]\"\n\n$g4[[1]][[2]]\n[1] \"021[457-9]\"\n\n$g4[[1]][[3]]\n[1] \"022[0-2]\"\n\n$g4[[1]][[4]]\n[1] \"026[3569]\"\n\n$g4[[1]][[5]]\n[1] \"027[45]\"\n\n$g4[[1]][[6]]\n[1] \"0329\"\n\n$g4[[1]][[7]]\n[1] \"0330\"\n\n$g4[[1]][[8]]\n[1] \"0422\"\n\n$g4[[1]][[9]]\n[1] \"044[45]\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"1577\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"2093\"\n\n$g4[[3]][[2]]\n[1] \"225[12]\"\n\n$g4[[3]][[3]]\n[1] \"2719\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"3080\"\n\n$g4[[4]][[2]]\n[1] \"3123\"\n\n$g4[[4]][[3]]\n[1] \"3267\"\n\n$g4[[4]][[4]]\n[1] \"3557\"\n\n$g4[[4]][[5]]\n[1] \"3622\"\n\n$g4[[4]][[6]]\n[1] \"3471\"\n\n$g4[[4]][[7]]\n[1] \"348[1-3]\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"544[23]\"\n\n$g4[[5]][[2]]\n[1] \"5030\"\n\n$g4[[5]][[3]]\n[1] \"5054\"\n\n$g4[[5]][[4]]\n[1] \"552[05]\"\n\n$g4[[5]][[5]]\n[1] \"5530\"\n\n$g4[[5]][[6]]\n[1] \"5857\"\n\n$g4[[5]][[7]]\n[1] \"5860\"\n\n$g4[[5]][[8]]\n[1] \"587[02]\"\n\n$g4[[5]][[9]]\n[1] \"5880\"\n\n$g4[[5]][[10]]\n[1] \"589[024]\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"630[34]\"\n\n$g4[[6]][[2]]\n[1] \"6100\"\n\n$g4[[6]][[3]]\n[1] \"6125\"\n\n$g4[[6]][[4]]\n[1] \"644[289]\"\n\n$g4[[6]][[5]]\n[1] \"6463\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"7651\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"9587\"\n\n$g4[[8]][[2]]\n[1] \"920[28]\"\n\n$g4[[8]][[3]]\n[1] \"921[34]\"\n\n$g4[[8]][[4]]\n[1] \"922[02-4]\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"C750\"\n\n$g4[[9]][[2]]\n[1] \"C977\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"E067\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"G027\"\n\n$g4[[11]][[2]]\n[1] \"G041\"\n\n\n$g4[[12]]\n$g4[[12]][[1]]\n[1] \"S234\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"050[67]T\"\n\n$g5[[1]][[2]]\n[1] \"02[1267][0-9]T\"\n\n$g5[[1]][[3]]\n[1] \"03[23][09]T\"\n\n$g5[[1]][[4]]\n[1] \"04[24][245]T\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"15777\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"20939\"\n\n$g5[[3]][[2]]\n[1] \"2719[78]\"\n\n$g5[[3]][[3]]\n[1] \"2251[0-5]\"\n\n$g5[[3]][[4]]\n[1] \"2252[67]\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"3080[12]\"\n\n$g5[[4]][[2]]\n[1] \"31231\"\n\n$g5[[4]][[3]]\n[1] \"32673\"\n\n$g5[[4]][[4]]\n[1] \"3471[3-7]\"\n\n$g5[[4]][[5]]\n[1] \"35572\"\n\n$g5[[4]][[6]]\n[1] \"36221\"\n\n$g5[[4]][[7]]\n[1] \"34812\"\n\n$g5[[4]][[8]]\n[1] \"34820\"\n\n$g5[[4]][[9]]\n[1] \"3483[34]\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"50300\"\n\n$g5[[5]][[2]]\n[1] \"50540\"\n\n$g5[[5]][[3]]\n[1] \"55300\"\n\n$g5[[5]][[4]]\n[1] \"58575\"\n\n$g5[[5]][[5]]\n[1] \"5860[05]\"\n\n$g5[[5]][[6]]\n[1] \"5880[05]\"\n\n$g5[[5]][[7]]\n[1] \"54420\"\n\n$g5[[5]][[8]]\n[1] \"54430\"\n\n$g5[[5]][[9]]\n[1] \"55200\"\n\n$g5[[5]][[10]]\n[1] \"55250\"\n\n$g5[[5]][[11]]\n[1] \"58700\"\n\n$g5[[5]][[12]]\n[1] \"58720\"\n\n$g5[[5]][[13]]\n[1] \"58900\"\n\n$g5[[5]][[14]]\n[1] \"5892[05]\"\n\n$g5[[5]][[15]]\n[1] \"5894[03]\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"6100[01]\"\n\n$g5[[6]][[2]]\n[1] \"61253\"\n\n$g5[[6]][[3]]\n[1] \"6463[46]\"\n\n$g5[[6]][[4]]\n[1] \"63035\"\n\n$g5[[6]][[5]]\n[1] \"6304[3-8]\"\n\n$g5[[6]][[6]]\n[1] \"64421\"\n\n$g5[[6]][[7]]\n[1] \"6448[04]\"\n\n$g5[[6]][[8]]\n[1] \"6449[1245]\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"76514\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"95870\"\n\n$g5[[8]][[2]]\n[1] \"92025\"\n\n$g5[[8]][[3]]\n[1] \"9208[1-3]\"\n\n$g5[[8]][[4]]\n[1] \"9213[2-4]\"\n\n$g5[[8]][[5]]\n[1] \"92145\"\n\n$g5[[8]][[6]]\n[1] \"9220[12]\"\n\n$g5[[8]][[7]]\n[1] \"9222[7-9]\"\n\n$g5[[8]][[8]]\n[1] \"92235\"\n\n$g5[[8]][[9]]\n[1] \"9224[02]\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"C750[1245]\"\n\n$g5[[9]][[2]]\n[1] \"C9771\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"E0675\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"G0279\"\n\n$g5[[11]][[2]]\n[1] \"G041[2-5]\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"S2342\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n\n# Recombine Vectors\n\n::: {.panel-tabset}\n\n## recombine2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine2 <- function(x) {\n  \n  x <- getelem(x, \"g2\")\n  \n  if (empty(x)) return(character(0))\n  \n  x <- sf_collapse(list_c(x), collapse = '|')\n  \n  # str_glue(\"^({x})[A-Z0-9]{{3}}$\")\n  str_glue(\"({x})\")\n}\n\nlong_test2[sf_nchar(long_test2) == 2] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(0[2-5]|15|2[027]|3[0-24-6]|5[0458]|6[134]|76|9[25]|C[79]|E0|G0|S2)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(6[46]|95|G[08]|H0|J0|L8|Q4)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine3 <- function(x) {\n  \n  x <- getelem(x, \"g3\")\n  \n  if (empty(x)) return(character(0))\n  \n  list(\n    if (empty(x[vlen(x) == 1])) \n      NULL \n    else \n      parentheses(\n        sf_collapse(\n          delist(x[vlen(x) == 1]), collapse = \"|\")\n        ) |>\n      glue::as_glue(),\n    if (empty(x[vlen(x) > 1])) \n      NULL \n    else \n      map(x[vlen(x) > 1], \n          function(x) {\n          \n            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          \n            back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          \n            str_glue(\"{front}({back})\")\n          \n            })) |> list_flatten()\n}\n\nlong_test2[sf_nchar(long_test2) == 3] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(157|765|E06|G0[24]|S23)\n\n[[2]]\n0(2[1267]|3[23]|4[24]|50)\n\n[[3]]\n2(09|25|71)\n\n[[4]]\n3(08|12|26|4[78]|55|62)\n\n[[5]]\n5(0[35]|44|5[23]|8[5-9])\n\n[[6]]\n6(1[02]|30|4[46])\n\n[[7]]\n9(2[0-2]|58)\n\n[[8]]\nC(75|97)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(172|566|880|A96|B40|D01|G86|L23|S84)\n\n[[2]]\n2(07|2[15]|67|76)\n\n[[3]]\n3(03|2[68]|55)\n\n[[4]]\n4(10|32|5[45]|9[29])\n\n[[5]]\n9(08|92)\n\n[[6]]\nE(09|22)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine4 <- function(x) {\n  \n  x <- getelem(x, \"g4\")\n  \n  if (empty(x)) return(character(0))\n  \n  list(\n    if (empty(x[vlen(x) == 1])) \n      NULL \n    else \n      parentheses(\n        sf_collapse(\n          delist(x[vlen(x) == 1]), collapse = \"|\")\n        ) |>\n      glue::as_glue(),\n    if (empty(x[vlen(x) > 1])) \n      NULL \n    else \n      map(x[vlen(x) > 1], \n          function(x) {\n          \n            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          \n            back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          \n            str_glue(\"{front}({back})\")\n          \n            })) |> list_flatten()\n}\n\nlong_test2[sf_nchar(long_test2) == 4] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(1577|7651|E067|S234)\n\n[[2]]\n0(50[67]|21[457-9]|22[0-2]|26[3569]|27[45]|329|330|422|44[45])\n\n[[3]]\n2(093|25[12]|719)\n\n[[4]]\n3(080|123|267|557|622|471|48[1-3])\n\n[[5]]\n5(44[23]|030|054|52[05]|530|857|860|87[02]|880|89[024])\n\n[[6]]\n6(30[34]|100|125|44[289]|463)\n\n[[7]]\n9(587|20[28]|21[34]|22[02-4])\n\n[[8]]\nC(750|977)\n\n[[9]]\nG(027|041)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(0140|120[14]|3824|6722|D427|E170|G942)\n\n[[2]]\n2(524|647|805)\n\n[[3]]\n4(232|414|770|604|670)\n\n[[4]]\n5(483|902)\n\n[[5]]\n9(301|58[12]|652)\n\n[[6]]\nA(927|424|436|492)\n\n[[7]]\nJ(027|195)\n\n[[8]]\nK(08[14]|103)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine5 <- function(x) {\n  \n  x <- getelem(x, \"g5\")\n  \n  if (empty(x)) return(character(0))\n  \n  list(\n    if (empty(x[vlen(x) == 1])) \n      NULL \n    else \n      parentheses(\n        sf_collapse(\n          delist(x[vlen(x) == 1]), collapse = \"|\")\n        ) |>\n      glue::as_glue(),\n    if (empty(x[vlen(x) > 1])) \n      NULL \n    else \n      map(x[vlen(x) > 1], \n          function(x) {\n          \n            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))\n          \n            back  <- sf_collapse(sf_remove(delist(x), str_glue(\"^[{front}]{{1}}\")), collapse = \"|\")\n          \n            str_glue(\"{front}({back})\")\n          \n            })) |> list_flatten()\n}\n\nlong_test2[sf_nchar(long_test2) == 5] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(15777|76514|E0675|S2342)\n\n[[2]]\n0(50[67]T|2[1267][0-9]T|3[23][09]T|4[24][245]T)\n\n[[3]]\n2(0939|719[78]|251[0-5]|252[67])\n\n[[4]]\n3(080[12]|1231|2673|471[3-7]|5572|6221|4812|4820|483[34])\n\n[[5]]\n5(0300|0540|5300|8575|860[05]|880[05]|4420|4430|5200|5250|8700|8720|8900|892[05]|894[03])\n\n[[6]]\n6(100[01]|1253|463[46]|3035|304[3-8]|4421|448[04]|449[1245])\n\n[[7]]\n9(5870|2025|208[1-3]|213[2-4]|2145|220[12]|222[7-9]|2235|224[02])\n\n[[8]]\nC(750[1245]|9771)\n\n[[9]]\nG(0279|041[2-5])\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |> \n  recombine5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n(1137F|0356U|00740|73719|B4224)\n\n[[2]]\n0(527T|4[29]2T)\n\n[[3]]\n2(6110|6715|2515|2552)\n\n[[4]]\n3(3615|3960)\n\n[[5]]\n8(1181|4081|7340)\n\n[[6]]\n9(3260|5822|7001)\n\n[[7]]\nA(4207|4315|5062|9601)\n\n[[8]]\nG(0278|0381)\n\n[[9]]\nJ(0402|2186)\n\n[[10]]\nL(3253|4000)\n```\n\n\n:::\n:::\n\n\n\n\n## recombine_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecombine_groups <- \\(x) {\n  \n  list(\n    v1 = x$g1,\n    v2 = recombine2(x),\n    v3 = recombine3(x),\n    v4 = recombine4(x),\n    v5 = recombine5(x)\n  )\n}\n\nlong_test2 |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |> \n  reduce_groups() |> \n  recombine_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$v1\n^[CEGS0-35-79][A-Z0-9]{4}\n\n$v2\ncharacter(0)\n\n$v3\ncharacter(0)\n\n$v4\ncharacter(0)\n\n$v5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_groups() |>\n  recombine_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$v1\n^CKV[0-9]{4}\n\n$v2\n(0[28]|2[247]|3[07]|4[145]|5[09]|6[479]|7[67]|8[06]|9[235-79]|A[46]|B4|E[01]|G[489]|J[0-2]|L[26]|M1|S9)\n\n$v3\n$v3[[1]]\n(140|989|G0[13]|J90|L06|Q51|S24|T20)\n\n$v3[[2]]\n0(1[29]|4[39]|58)\n\n$v3[[3]]\n2(06|8[16])\n\n$v3[[4]]\n3(15|37)\n\n$v3[[5]]\n6(14|23|30)\n\n$v3[[6]]\n7(4[04]|58)\n\n$v3[[7]]\nD(02|73)\n\n\n$v4\n$v4[[1]]\n(0100|7054|J926|Q424|S556)\n\n$v4[[2]]\n3(342|590)\n\n$v4[[3]]\n4(223|32[15]|671|855|918)\n\n$v4[[4]]\n5(728|834)\n\n$v4[[5]]\n6(070|159)\n\n$v4[[6]]\n8(802|935|718|756)\n\n$v4[[7]]\nL(700|860)\n\n\n$v5\n$v5[[1]]\n(3316F|11404|54500|66130|87593|L0112|Q9967|T4522)\n\n$v5[[2]]\n2(3616|5390|6105|6545|9580)\n\n$v5[[3]]\n3(2810|5875|8700)\n\n$v5[[4]]\n4(3496|7379|8520|9582)\n\n$v5[[5]]\nJ(7318|7614|9179|9357)\n\n$v5[[6]]\nS(2053|8490)\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# Collapse Regex\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- vrg <- \\(x, n) {\n  \n  if (empty(x)) \n    return(character(0))\n  \n  post <- iif_else(sf_detect(x, \"^\\\\[?[A-Z]\\\\-?\"), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- fcase(\n    n == 0, glue::glue(\"^{x}$\"),                \n    n == 1, glue::glue(\"^{x}{post}$\"),\n    n == 2, glue::glue(\"^{x}{post}{{2}}$\"),\n    n == 3, glue::glue(\"^{x}{post}{{3}}$\")\n    )\n    \n  glue::glue_collapse(x)\n}\n\ncollapse_regex <- \\(x) {\n  \n  list(\n    g1 = red1(x),\n    g2 = map_chr(x$g2, red2) |> map_chr(vrg, n = 3) |> glue::as_glue(),\n    g3 = map_chr(x$g3, red3) |> map_chr(vrg, n = 2) |> glue::as_glue(),\n    g4 = map_chr(x$g4, red4) |> map_chr(vrg, n = 1) |> glue::as_glue(),\n    g5 = map_chr(x$g5, red5) |> map_chr(vrg, n = 0) |> glue::as_glue()\n  )\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n# S7 Class\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhcpcs <- new_class(\n  name = \"hcpcs\",\n  properties = list(\n    input = class_vector,\n    split_length     = new_property(class = class_list, getter = \\(self) split_lengths(self@input)),\n    remove_redundant = new_property(class = class_list, getter = \\(self) remove_redundant(self@split_length)),\n    split_first      = new_property(class = class_list, getter = \\(self) split_first(self@remove_redundant)),\n    process_groups   = new_property(class = class_list, getter = \\(self) process_groups(self@split_first)),\n    reduce_groups    = new_property(class = class_list, getter = \\(self) reduce_groups(self@process_groups)),\n    recombine_groups = new_property(class = class_list, getter = \\(self) recombine_groups(self@reduce_groups))\n    )\n  )\n\nx <- hcpcs(input = random_hcpcs(50))\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<hcpcs>\n @ input           : chr [1:205] \"5\" \"7\" \"8\" \"A\" \"B\" \"73\" \"E2\" \"80\" \"86\" \"S0\" \"95\" \"85\" ...\n @ split_length    :List of 5\n .. $ x1: chr [1:5] \"5\" \"7\" \"8\" \"A\" ...\n .. $ x2: chr [1:42] \"02\" \"10\" \"15\" \"21\" ...\n .. $ x3: chr [1:49] \"019\" \"038\" \"052\" \"084\" ...\n .. $ x4: chr [1:49] \"0034\" \"0063\" \"0084\" \"0092\" ...\n .. $ x5: chr [1:50] \"0003M\" \"0431T\" \"0645T\" \"12034\" ...\n @ remove_redundant:List of 5\n .. $ x1: chr [1:5] \"5\" \"7\" \"8\" \"A\" ...\n .. $ x2: chr [1:31] \"02\" \"10\" \"15\" \"21\" ...\n .. $ x3: chr [1:23] \"019\" \"038\" \"052\" \"084\" ...\n .. $ x4: chr [1:30] \"0034\" \"0063\" \"0084\" \"0092\" ...\n .. $ x5: chr [1:23] \"0003M\" \"0431T\" \"0645T\" \"12034\" ...\n @ split_first     :List of 5\n .. $ x1: chr [1:5] \"5\" \"7\" \"8\" \"A\" ...\n .. $ x2:List of 15\n ..  ..$ : chr \"02\"\n ..  ..$ : chr [1:2] \"10\" \"15\"\n ..  ..$ : chr [1:2] \"21\" \"27\"\n ..  ..$ : chr [1:3] \"32\" \"36\" \"38\"\n ..  ..$ : chr [1:4] \"41\" \"42\" \"46\" \"47\"\n ..  ..$ : chr \"66\"\n ..  ..$ : chr [1:4] \"92\" \"95\" \"96\" \"97\"\n ..  ..$ : chr [1:2] \"C1\" \"C9\"\n ..  ..$ : chr [1:2] \"E1\" \"E2\"\n ..  ..$ : chr [1:3] \"G0\" \"G8\" \"G9\"\n ..  ..$ : chr [1:2] \"L0\" \"L6\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr [1:2] \"Q4\" \"Q9\"\n ..  ..$ : chr \"S0\"\n ..  ..$ : chr \"V5\"\n .. $ x3:List of 12\n ..  ..$ : chr [1:4] \"019\" \"038\" \"052\" \"084\"\n ..  ..$ : chr [1:3] \"255\" \"265\" \"298\"\n ..  ..$ : chr [1:3] \"334\" \"336\" \"348\"\n ..  ..$ : chr \"490\"\n ..  ..$ : chr \"644\"\n ..  ..$ : chr [1:2] \"947\" \"993\"\n ..  ..$ : chr \"D52\"\n ..  ..$ : chr [1:2] \"E06\" \"E09\"\n ..  ..$ : chr \"G21\"\n ..  ..$ : chr [1:3] \"J07\" \"J25\" \"J30\"\n ..  ..$ : chr \"L56\"\n ..  ..$ : chr \"V25\"\n .. $ x4:List of 13\n ..  ..$ : chr [1:5] \"0034\" \"0063\" \"0084\" \"0092\" ...\n ..  ..$ : chr [1:5] \"2040\" \"2210\" \"2253\" \"2453\" ...\n ..  ..$ : chr [1:2] \"3136\" \"3471\"\n ..  ..$ : chr \"4350\"\n ..  ..$ : chr [1:3] \"6327\" \"6464\" \"6966\"\n ..  ..$ : chr [1:3] \"9058\" \"9332\" \"9945\"\n ..  ..$ : chr \"D899\"\n ..  ..$ : chr \"E077\"\n ..  ..$ : chr [1:2] \"H001\" \"H004\"\n ..  ..$ : chr [1:4] \"J094\" \"J326\" \"J732\" \"J927\"\n ..  ..$ : chr \"K101\"\n ..  ..$ : chr \"S515\"\n ..  ..$ : chr \"T104\"\n .. $ x5:List of 15\n ..  ..$ : chr \"12034\"\n ..  ..$ : chr \"23031\"\n ..  ..$ : chr \"43632\"\n ..  ..$ : chr [1:2] \"61514\" \"64744\"\n ..  ..$ : chr \"91065\"\n ..  ..$ : chr \"E0755\"\n ..  ..$ : chr \"H0004\"\n ..  ..$ : chr [1:4] \"J1030\" \"J1070\" \"J1756\" \"J2326\"\n ..  ..$ : chr \"K1023\"\n ..  ..$ : chr [1:3] \"L1836\" \"L8621\" \"L8696\"\n ..  ..$ : chr \"Q0174\"\n ..  ..$ : chr \"U0002\"\n ..  ..$ : chr [1:2] \"4003F\" \"4044F\"\n ..  ..$ : chr \"0003M\"\n ..  ..$ : chr [1:2] \"0431T\" \"0645T\"\n @ process_groups  :List of 5\n .. $ g1: chr [1:5] \"5\" \"7\" \"8\" \"A\" ...\n .. $ g2:List of 15\n ..  ..$ : chr \"02\"\n ..  ..$ : chr [1:2] \"10\" \"15\"\n ..  ..$ : chr [1:2] \"21\" \"27\"\n ..  ..$ : chr [1:3] \"32\" \"36\" \"38\"\n ..  ..$ : chr [1:4] \"41\" \"42\" \"46\" \"47\"\n ..  ..$ : chr \"66\"\n ..  ..$ : chr [1:4] \"92\" \"95\" \"96\" \"97\"\n ..  ..$ : chr [1:2] \"C1\" \"C9\"\n ..  ..$ : chr [1:2] \"E1\" \"E2\"\n ..  ..$ : chr [1:3] \"G0\" \"G8\" \"G9\"\n ..  ..$ : chr [1:2] \"L0\" \"L6\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr [1:2] \"Q4\" \"Q9\"\n ..  ..$ : chr \"S0\"\n ..  ..$ : chr \"V5\"\n .. $ g3:List of 12\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"019\"\n ..  .. ..$ : chr \"038\"\n ..  .. ..$ : chr \"052\"\n ..  .. ..$ : chr \"084\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"255\"\n ..  .. ..$ : chr \"265\"\n ..  .. ..$ : chr \"298\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr [1:2] \"334\" \"336\"\n ..  .. ..$ : chr \"348\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"490\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"644\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"947\"\n ..  .. ..$ : chr \"993\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"D52\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr [1:2] \"E06\" \"E09\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"G21\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"J07\"\n ..  .. ..$ : chr \"J25\"\n ..  .. ..$ : chr \"J30\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"L56\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"V25\"\n .. $ g4:List of 13\n ..  ..$ :List of 5\n ..  .. ..$ : chr \"0412\"\n ..  .. ..$ : chr \"0034\"\n ..  .. ..$ : chr \"0063\"\n ..  .. ..$ : chr \"0084\"\n ..  .. ..$ : chr \"0092\"\n ..  ..$ :List of 5\n ..  .. ..$ : chr \"2040\"\n ..  .. ..$ : chr \"2210\"\n ..  .. ..$ : chr \"2253\"\n ..  .. ..$ : chr \"2453\"\n ..  .. ..$ : chr \"2460\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"3136\"\n ..  .. ..$ : chr \"3471\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"4350\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"6327\"\n ..  .. ..$ : chr \"6464\"\n ..  .. ..$ : chr \"6966\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"9058\"\n ..  .. ..$ : chr \"9332\"\n ..  .. ..$ : chr \"9945\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"D899\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E077\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr [1:2] \"H001\" \"H004\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"J094\"\n ..  .. ..$ : chr \"J326\"\n ..  .. ..$ : chr \"J732\"\n ..  .. ..$ : chr \"J927\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"K101\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"S515\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"T104\"\n .. $ g5:List of 15\n ..  ..$ :List of 1\n ..  .. ..$ : chr [1:2] \"4003F\" \"4044F\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"0003M\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr [1:2] \"0431T\" \"0645T\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"12034\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"23031\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"43632\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"61514\"\n ..  .. ..$ : chr \"64744\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"91065\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E0755\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"H0004\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"J1756\"\n ..  .. ..$ : chr \"J2326\"\n ..  .. ..$ : chr \"J1030\"\n ..  .. ..$ : chr \"J1070\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"K1023\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"L1836\"\n ..  .. ..$ : chr \"L8621\"\n ..  .. ..$ : chr \"L8696\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"Q0174\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"U0002\"\n @ reduce_groups   :List of 5\n .. $ g1: 'glue' chr \"^AB578[A-Z0-9]{4}\"\n .. $ g2:List of 15\n ..  ..$ : chr \"02\"\n ..  ..$ : chr \"1[05]\"\n ..  ..$ : chr \"2[17]\"\n ..  ..$ : chr \"3[268]\"\n ..  ..$ : chr \"4[1267]\"\n ..  ..$ : chr \"66\"\n ..  ..$ : chr \"9[25-7]\"\n ..  ..$ : chr \"C[19]\"\n ..  ..$ : chr \"E[12]\"\n ..  ..$ : chr \"G[089]\"\n ..  ..$ : chr \"L[06]\"\n ..  ..$ : chr \"M1\"\n ..  ..$ : chr \"Q[49]\"\n ..  ..$ : chr \"S0\"\n ..  ..$ : chr \"V5\"\n .. $ g3:List of 12\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"019\"\n ..  .. ..$ : chr \"038\"\n ..  .. ..$ : chr \"052\"\n ..  .. ..$ : chr \"084\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"255\"\n ..  .. ..$ : chr \"265\"\n ..  .. ..$ : chr \"298\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"33[46]\"\n ..  .. ..$ : chr \"348\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"490\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"644\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"947\"\n ..  .. ..$ : chr \"993\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"D52\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E0[69]\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"G21\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"J07\"\n ..  .. ..$ : chr \"J25\"\n ..  .. ..$ : chr \"J30\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"L56\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"V25\"\n .. $ g4:List of 13\n ..  ..$ :List of 5\n ..  .. ..$ : chr \"0412\"\n ..  .. ..$ : chr \"0034\"\n ..  .. ..$ : chr \"0063\"\n ..  .. ..$ : chr \"0084\"\n ..  .. ..$ : chr \"0092\"\n ..  ..$ :List of 5\n ..  .. ..$ : chr \"2040\"\n ..  .. ..$ : chr \"2210\"\n ..  .. ..$ : chr \"2253\"\n ..  .. ..$ : chr \"2453\"\n ..  .. ..$ : chr \"2460\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"3136\"\n ..  .. ..$ : chr \"3471\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"4350\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"6327\"\n ..  .. ..$ : chr \"6464\"\n ..  .. ..$ : chr \"6966\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"9058\"\n ..  .. ..$ : chr \"9332\"\n ..  .. ..$ : chr \"9945\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"D899\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E077\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"H00[14]\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"J094\"\n ..  .. ..$ : chr \"J326\"\n ..  .. ..$ : chr \"J732\"\n ..  .. ..$ : chr \"J927\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"K101\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"S515\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"T104\"\n .. $ g5:List of 15\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"40[04][34]F\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"0003M\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"0[46][34][15]T\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"12034\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"23031\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"43632\"\n ..  ..$ :List of 2\n ..  .. ..$ : chr \"61514\"\n ..  .. ..$ : chr \"64744\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"91065\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"E0755\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"H0004\"\n ..  ..$ :List of 4\n ..  .. ..$ : chr \"J1756\"\n ..  .. ..$ : chr \"J2326\"\n ..  .. ..$ : chr \"J1030\"\n ..  .. ..$ : chr \"J1070\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"K1023\"\n ..  ..$ :List of 3\n ..  .. ..$ : chr \"L1836\"\n ..  .. ..$ : chr \"L8621\"\n ..  .. ..$ : chr \"L8696\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"Q0174\"\n ..  ..$ :List of 1\n ..  .. ..$ : chr \"U0002\"\n @ recombine_groups:List of 5\n .. $ v1: 'glue' chr \"^AB578[A-Z0-9]{4}\"\n .. $ v2: 'glue' chr \"(02|1[05]|2[17]|3[268]|4[1267]|66|9[25-7]|C[19]|E[12]|G[089]|L[06]|M1|Q[49]|S0|V5)\"\n .. $ v3:List of 6\n ..  ..$ : 'glue' chr \"(490|644|D52|E0[69]|G21|L56|V25)\"\n ..  ..$ : 'glue' chr \"0(19|38|52|84)\"\n ..  ..$ : 'glue' chr \"2(55|65|98)\"\n ..  ..$ : 'glue' chr \"3(3[46]|48)\"\n ..  ..$ : 'glue' chr \"9(47|93)\"\n ..  ..$ : 'glue' chr \"J(07|25|30)\"\n .. $ v4:List of 7\n ..  ..$ : 'glue' chr \"(4350|D899|E077|H00[14]|K101|S515|T104)\"\n ..  ..$ : 'glue' chr \"0(412|034|063|084|092)\"\n ..  ..$ : 'glue' chr \"2(040|210|253|453|460)\"\n ..  ..$ : 'glue' chr \"3(136|471)\"\n ..  ..$ : 'glue' chr \"6(327|464|966)\"\n ..  ..$ : 'glue' chr \"9(058|332|945)\"\n ..  ..$ : 'glue' chr \"J(094|326|732|927)\"\n .. $ v5:List of 4\n ..  ..$ : 'glue' chr \"(40[04][34]F|0003M|0[46][34][15]T|12034|23031|43632|91065|E0755|H0004|K1023|Q0174|U0002)\"\n ..  ..$ : 'glue' chr \"6(1514|4744)\"\n ..  ..$ : 'glue' chr \"J(1756|2326|1030|1070)\"\n ..  ..$ : 'glue' chr \"L(1836|8621|8696)\"\n```\n\n\n:::\n:::\n\n\n\n\n<hr>\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.2 (2024-10-31 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_codex(v.0.0.1)_, _kit(v.0.0.19)_, _collapse(v.2.0.18)_, _data.table(v.1.16.99)_, _stringfish(v.0.16.0)_, _S7(v.0.2.0)_, _vctrs(v.0.6.5)_, _cli(v.3.6.3)_, _rlang(v.1.1.4)_, _stringr(v.1.5.1)_, _purrr(v.1.0.2)_, _dplyr(v.1.1.4)_ and _fuimus(v.0.0.2)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _crayon(v.1.5.3)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _tools(v.4.4.2)_, _qs(v.0.27.2)_, _parallel(v.4.4.2)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _cheapr(v.0.9.91)_, _fs(v.1.6.5)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13-1)_, _systemfonts(v.1.1.0)_, _xfun(v.0.49)_, _tibble(v.3.2.1)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.49)_, _htmltools(v.0.5.8.1)_ and _rmarkdown(v.2.29)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}