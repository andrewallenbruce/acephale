{
  "hash": "bdd4fa6fee963ff183dee37289e3700f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>                 Count                                   Regex</span><br/>All             <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/> Level I        <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>  Category I    <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>  Category II   <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>  Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/> Level II       <span style='color:#ffffff;'><span style='background-color:#333333;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n# TODO\n\n   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [ ] `process_groups()`\n   -   [X] `g1()`\n   -   [X] `g2()`\n   -   [ ] `g3()`\n   -   [ ] `g4()`\n   -   [ ] `g5()`\n-   [ ] `reduce_groups()`\n\n# Helpers\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsf <- list(\n  c = \\(...) stringfish::sf_concat(...),\n  p = \\(..., sep = \", \") stringfish::sf_paste(..., sep = sep, nthreads = 4L),\n  p0 = \\(x, sep = \"\") stringfish::sf_collapse(x = x, collapse = sep),\n  gsub = \\(x, p, r, ...) stringfish::sf_gsub(subject = x, pattern = p, replacement = r, nthreads = 4L, ...),\n  grepl = \\(x, p, ...) stringfish::sf_grepl(subject = x, pattern = p, nthreads = 4L, ...),\n  substr = \\(x, i, e, ...) stringfish::sf_substr(x = x, start = i, stop = e, nthreads = 4L),\n  compare = \\(long, short) stringfish::sf_compare(x = long, y = short, nthreads = 4L),\n  match = \\(x, t) stringfish::sf_match(x = x, table = t, nthreads = 4L),\n  nchar = \\(x) stringfish::sf_nchar(x = x, type = \"chars\", nthreads = 4L),\n  split = \\(x, d, ...) stringfish::sf_split(subject = x, split = d, nthreads = 4L),\n  assign = \\(x, i, e) stringfish::sf_assign(x = x, i = i, e = e)\n)\n\nsf$c(\"a\", \"b\", \"c\", \"b\", \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsf$p(\"a\", \"b\", \"c\", \"b\", \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a, b, c, b, c\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsf$p0(c(\"a\", \"b\", \"c\", \"b\", \"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"abcbc\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsf$gsub(\"A12345\", \"[A-Z]{1}\", \"B\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"B12345\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsf$grepl(\"A\", \"[A-Z]{1}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrandom_hcpcs_vec2 <- \\(n = 10) {\n  \n  ltrs <- LETTERS[sf$grepl(LETTERS, \"[^DINOW-Z]\")]\n\n  c(\n    sample(c(ltrs, 0:9), size = sample.int(5, 1)),\n    codex::random_hcpcs(n = n, l = 2),\n    codex::random_hcpcs(n = n, l = 3),\n    codex::random_hcpcs(n = n, l = 4),\n    codex::random_hcpcs(n = n, l = 5)\n  )\n}\n\nrandom_hcpcs_vec2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"U\"     \"Q\"     \"0\"     \"R\"     \"K\"     \"43\"    \"81\"    \"87\"    \"L3\"   \n[10] \"E0\"    \"86\"    \"V2\"    \"S9\"    \"M1\"    \"27\"    \"544\"   \"929\"   \"G99\"  \n[19] \"336\"   \"Q20\"   \"265\"   \"277\"   \"L11\"   \"696\"   \"616\"   \"6943\"  \"2675\" \n[28] \"E200\"  \"9593\"  \"6668\"  \"S051\"  \"Q203\"  \"K074\"  \"C892\"  \"1150\"  \"Q4157\"\n[37] \"25263\" \"50385\" \"G9347\" \"35903\" \"G9518\" \"96131\" \"86300\" \"J0589\" \"G0506\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npull_char <- \\(x) stringr::str_extract_all(x, stringr::regex(\"[A-Z]\"))\n\npull_numb <- \\(x) stringr::str_extract_all(x, stringr::regex(\"[0-9]\"))\n\nsort_order <- \\(x) {\n\n  sorted   <- stringr::str_sort(x, numeric = TRUE)\n  alphabet <- purrr::list_c(pull_char(sorted))\n  numbers  <- purrr::list_c(pull_numb(sorted))\n\n  paste0(\n    fuimus::collapser(alphabet),\n    fuimus::collapser(numbers)\n    )\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuniq_vlen <- \\(x) collapse::funique(collapse::vlengths(x, use.names = FALSE))\n\nempty <- \\(x) vctrs::vec_is_empty(x)\n\ntakei <- \\(x, i = 1) sf$substr(x, i, e = i)\n\nchop <- \\(v, g) vctrs::vec_chop(v, sizes = vctrs::vec_run_sizes(g))\n\ngrabaz <- \\(x) x[sf$grepl(x, \"[A-Z]{1}\")]\n\ngrabaz(sf$p0(random_hcpcs_vec2(5), sep = \", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"S, G, 6, 8, 4, 44, 25, H0, G9, 96, 801, A55, G90, 151, 992, V231, 3105, 3569, J109, G908, 80432, L0458, 15131, 21085, 87581\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsorder <- \\(x) {\n  \n  st <- stringr::str_sort(x, numeric = TRUE)\n  \n  az <- grabaz(st)\n  \n  sf$p0(sf$p0(az), sf$p0(st[!st %in% az]))\n\n}\n\nsorder(random_hcpcs_vec2(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"CC9147G9G93G886J90MT\"\n```\n\n\n:::\n:::\n\n\n\n\n## View\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff <- \\(x) stringr::str_trunc(string = x, width = 40, side = \"right\")\n\npaste0(LETTERS, \" \", LETTERS)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"A A\" \"B B\" \"C C\" \"D D\" \"E E\" \"F F\" \"G G\" \"H H\" \"I I\" \"J J\" \"K K\" \"L L\"\n[13] \"M M\" \"N N\" \"O O\" \"P P\" \"Q Q\" \"R R\" \"S S\" \"T T\" \"U U\" \"V V\" \"W W\" \"X X\"\n[25] \"Y Y\" \"Z Z\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(cutoff(sf$p(LETTERS, \" \", LETTERS, sep = \"\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA A B B C C D D E E F F G G H H I I J J K K L L M M N N O O P P Q Q R R S S T T U U V V W W X X Y Y Z Z\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwrap <- \\(x) stringr::str_wrap(string = x, width = 60, exdent = 5, whitespace_only = FALSE)\n\ncat(wrap(paste0(LETTERS, \"] \", LETTERS, LETTERS, sep = \"\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA] AA B] BB C] CC D] DD E] EE F] FF G] GG H] HH I] II J] JJ K] KK L] LL M] MM N] NN O] OO P] PP Q] QQ R] RR S] SS T] TT U] UU V] VV W] WW X] XX Y] YY Z] ZZ\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview <- \\(x) {\n  \n  idx  <- seq_along(x)\n  len  <- collapse::vlengths(x, use.names = FALSE)\n  tree <- unname(purrr::map_vec(x, paste0, collapse = \" \")) |> \n    purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"{format(idx)}: \", \n      \"{format(len)}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview_remove <- \\(x) {\n  \n  len  <- length(x)\n  tree <- unname(paste0(x, collapse = \" \")) |> \n    purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"Removed \", \n      \"{format(len, justify = 'left')}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n\n\n\n# Preprocessing\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x, verbose = TRUE) {\n  \n  stopifnot(is.character(x))\n  \n  x <- stringfish::sf_gsub(x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n    fuimus::uniq_rmna() |> \n    stringr::str_sort()\n  \n  l <- collapse::vlengths(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  if (verbose) {\n    \n    cat(\"*  Split By Lengths:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs_vec2(n = 5) |> \n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 5|--[5 8 A L S]\n2: 5|--[43 49 75 81 G9]\n3: 5|--[417 860 G92 M10 M13]\n4: 5|--[3395 5592 A702 G873 G993]\n5: 5|--[0114U 54417 81297 99316 A4285]\n```\n\n\n:::\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncontrast <- \\(long, short) {\n  \n  if (empty(long))  return(character(0))\n  if (empty(short)) return(long)\n\n  end <- uniq_vlen(short)\n  \n  ldx <- stringfish::sf_substr(long, 1, end, nthreads = 4L)\n  \n  long[!ldx %in% short]\n}\n\nrr <- contrast\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nremove_redundant <- function(x, verbose = TRUE) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  if (verbose) {\n    \n    cat(\"*  Remove Redundancies:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")\n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs_vec2(25) |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  2|--[P R]\n2: 23|--[00 01 05 19 20 21 23 24 27 29 36 44 6...]\n3: 25|--[032 158 268 273 298 326 432 476 546 6...]\n4: 25|--[0052 0206 1205 2112 2870 3364 4048 72...]\n5: 25|--[00731 0235U 0443T 0620T 17107 25263 2...]\n\n*  Remove Redundancies:\n1:  2|--[P R]\n2: 23|--[00 01 05 19 20 21 23 24 27 29 36 44 6...]\n3: 20|--[032 158 268 326 432 476 546 630 645 6...]\n4: 21|--[0206 1205 2870 3364 4048 8127 8133 85...]\n5: 20|--[0235U 0443T 0620T 17107 25263 26420 3...]\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlump <- function(x, threshold = 3) {\n  \n  stopifnot(is.numeric(x))\n\n  xo <- order(x)\n\n  xs <- x[xo]\n  \n  dlag <- abs(c(0, xs[-1] - xs[seq_along(xs) - 1]))\n\n  bi <- ifelse(dlag >= threshold, 1, 0)\n\n  id <- cumsum(bi) + 1\n  \n  id[xo]\n  \n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nletters_2_numbers <- \\(x) {\n  \n  look <- rlang::set_names(seq_along(LETTERS), LETTERS)\n  unname(look[grabaz(x)])\n}\n```\n:::\n\n\n\n\n\n::: {.panel-tabset}\n\n## [g1|g2]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  out <- list(x)\n  \n  if (verbose) {\n    \n    cat(\"** Group 1:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\ng2 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  out <- collapse::rsplit(x, takei(x, 1), use.names = FALSE)\n  \n  if (verbose) {\n    \n    cat(\"** Group 2:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs_vec2() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  1|--[8]\n2: 10|--[04 20 27 68 83 88 90 92 C9 P9]\n3: 10|--[012 022 276 336 339 869 A95 E03 L39 S01]\n4: 10|--[2590 3373 3776 5729 6230 9083 9335 G9...]\n5: 10|--[14350 25320 28735 30125 50900 51595 8...]\n\n*  Remove Redundancies:\n1: 1|--[8]\n2: 8|--[04 20 27 68 90 92 C9 P9]\n3: 8|--[012 022 336 339 A95 E03 L39 S01]\n4: 9|--[2590 3373 3776 5729 6230 9335 G912 G9...]\n5: 9|--[14350 25320 28735 30125 50900 51595 G...]\n\n** Group 1:\n1: 1|--[8]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec2(25) |>\n  split_lengths() |> \n  remove_redundant() |> \n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  1|--[T]\n2: 22|--[05 06 07 22 25 33 80 81 82 87 90 C7 C...]\n3: 24|--[000 193 215 226 276 462 477 534 571 5...]\n4: 25|--[0002 0102 0576 1928 2127 2728 3152 33...]\n5: 25|--[00218 15776 15782 17274 2033F 27465 6...]\n\n*  Remove Redundancies:\n1:  1|--[T]\n2: 22|--[05 06 07 22 25 33 80 81 82 87 90 C7 C...]\n3: 20|--[000 193 215 276 462 477 534 571 585 6...]\n4: 17|--[0102 1928 2127 2728 3152 3601 3683 42...]\n5: 19|--[00218 15776 15782 17274 2033F 27465 6...]\n\n** Group 2:\n 1: 3|--[05 06 07]\n 2: 2|--[22 25]\n 3: 1|--[33]\n 4: 4|--[80 81 82 87]\n 5: 1|--[90]\n 6: 2|--[C7 C9]\n 7: 1|--[E0]\n 8: 2|--[G0 G8]\n 9: 1|--[J9]\n10: 2|--[L3 L6]\n11: 2|--[Q0 Q4]\n12: 1|--[S5]\n```\n\n\n:::\n:::\n\n\n\n\n## [g3]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x, verbose = TRUE) {\n  \n  x <- get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(as.integer(str_replace_all(chr, \"[A-Z]\", letters_2_numbers))))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  if (verbose) {\n    \n    cat(\"** Group 3:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nall_tests[nchar(all_tests) < 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  6|--[0 4 5 6 G J]\n2: 29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n*  Remove Redundancies:\n1:  6|--[0 4 5 6 G J]\n2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 9...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n*  Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n** Group 3:\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec2(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  3|--[7 H T]\n2: 27|--[00 02 15 21 27 28 30 31 33 50 59 81 8...]\n3: 30|--[017 066 159 207 276 347 365 438 546 6...]\n4: 30|--[0092 1204 2060 2067 2083 2114 2140 28...]\n5: 30|--[0588T 0621T 17270 23525 26130 33506 4...]\n\n*  Remove Redundancies:\n1:  3|--[7 H T]\n2: 26|--[00 02 15 21 27 28 30 31 33 50 59 81 8...]\n3: 22|--[017 066 207 347 365 438 546 622 687 8...]\n4: 24|--[1204 2060 2067 2083 2904 2986 3550 43...]\n5: 18|--[0588T 0621T 17270 23525 26130 49320 4...]\n\n** Group 3:\n 1: 1|--[017]\n 2: 1|--[066]\n 3: 1|--[207]\n 4: 1|--[347]\n 5: 1|--[365]\n 6: 1|--[438]\n 7: 1|--[546]\n 8: 1|--[622]\n 9: 1|--[687]\n10: 1|--[820]\n11: 1|--[830]\n12: 1|--[878]\n13: 1|--[900]\n14: 1|--[959]\n15: 1|--[A03]\n16: 1|--[A41]\n17: 1|--[A92]\n18: 1|--[E04]\n19: 1|--[E07]\n20: 1|--[G87]\n21: 1|--[Q43]\n22: 1|--[Q50]\n```\n\n\n:::\n:::\n\n\n\n\n## [4]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_replace_all(chr, \"[A-Z]\", letters_2_numbers)\n        )))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  if (verbose) {\n    \n    cat(\"** Group 4:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n*  Remove Redundancies:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n** Group 4:\n1: 6|--[5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n*  Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec2() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  3|--[3 H R]\n2:  9|--[02 27 59 88 99 G9 J0 J9 K0]\n3: 10|--[008 035 118 131 382 432 658 C90 E10 S24]\n4: 10|--[0408 0670 2641 3553 7697 G935 J232 L8...]\n5: 10|--[1504F 40530 75887 77615 87556 B4081 C...]\n\n*  Remove Redundancies:\n1: 3|--[3 H R]\n2: 9|--[02 27 59 88 99 G9 J0 J9 K0]\n3: 9|--[008 035 118 131 432 658 C90 E10 S24]\n4: 8|--[0408 0670 2641 7697 J232 L803 Q432 S499]\n5: 9|--[1504F 40530 75887 77615 87556 B4081 C...]\n\n** Group 4:\n1: 1|--[0408]\n2: 1|--[0670]\n3: 1|--[2641]\n4: 1|--[7697]\n5: 1|--[J232]\n6: 1|--[L803]\n7: 1|--[Q432]\n8: 1|--[S499]\n```\n\n\n:::\n:::\n\n\n\n\n## [5]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num  <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_remove_all(chr, \"[A-Z]\")\n        )))\n  \n  # dchr <- as.integer(str_remove_all(chr, \"^[A-Z]|[A-Z]$\"))\n  # \n  # dchr <- ifelse(dchr %% 10 == 0, dchr + max(dchr), dchr)\n  # \n  # chr <- data.table(\n  #   code = chr, \n  #   lump = lump(dchr))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  if (verbose) {\n    \n    cat(\"** Group 5:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n*  Remove Redundancies:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n** Group 5:\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n*  Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |>\n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n*  Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n** Group 5:\n 1: 2|--[90460 90461]\n 2: 1|--[90471]\n 3: 1|--[90474]\n 4: 1|--[90619]\n 5: 1|--[90633]\n 6: 1|--[90647]\n 7: 2|--[90670 90672]\n 8: 2|--[90681 90682]\n 9: 2|--[90687 90688]\n10: 2|--[90698 90700]\n11: 1|--[90710]\n12: 1|--[90713]\n13: 1|--[90716]\n14: 1|--[90723]\n15: 1|--[90740]\n16: 1|--[90743]\n17: 2|--[90747 90749]\n18: 1|--[90756]\n19: 1|--[A4467]\n20: 1|--[A9283]\n21: 1|--[A9285]\n22: 2|--[L1904 L1906]\n23: 1|--[L1920]\n24: 1|--[L1930]\n25: 1|--[L1945]\n26: 1|--[L1950]\n27: 2|--[L1970 L1971]\n28: 1|--[L2000]\n29: 1|--[L2005]\n30: 2|--[L2020 L2030]\n31: 1|--[L2036]\n32: 1|--[L2037]\n33: 2|--[L2108 L2112]\n34: 1|--[L2126]\n35: 1|--[L2128]\n36: 1|--[L2136]\n37: 1|--[L2180]\n38: 1|--[L2186]\n39: 1|--[L2188]\n40: 1|--[L2200]\n41: 1|--[L2210]\n42: 1|--[L2232]\n43: 1|--[L2240]\n44: 1|--[L2265]\n45: 1|--[L2270]\n46: 1|--[L2300]\n47: 1|--[L2310]\n48: 1|--[L2335]\n49: 1|--[L2340]\n50: 1|--[L2370]\n51: 1|--[L2375]\n52: 2|--[L2387 L2390]\n53: 1|--[L2405]\n54: 1|--[L2415]\n55: 1|--[L2492]\n56: 1|--[L2500]\n57: 1|--[L2525]\n58: 1|--[L2526]\n59: 1|--[L2550]\n60: 1|--[L2750]\n61: 1|--[L2768]\n62: 1|--[L2780]\n63: 1|--[L2800]\n64: 1|--[L2810]\n65: 1|--[L2840]\n66: 1|--[L2850]\n67: 1|--[L4010]\n68: 1|--[L4020]\n69: 1|--[L4045]\n70: 1|--[L4050]\n71: 2|--[L4070 L4080]\n72: 2|--[L4110 L4130]\n73: 1|--[L4350]\n74: 2|--[L4360 L4386]\n75: 2|--[L4387 L4396]\n76: 1|--[L4397]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec2() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  3|--[3 4 H]\n2: 10|--[00 21 28 43 50 64 E2 J1 L6 L8]\n3: 10|--[214 265 272 382 508 850 L06 L20 S00 S93]\n4: 10|--[0041 3180 4187 6211 6362 7733 9256 A4...]\n5: 10|--[00145 11042 36299 46999 72083 78457 8...]\n\n*  Remove Redundancies:\n1: 3|--[3 4 H]\n2: 9|--[00 21 28 50 64 E2 J1 L6 L8]\n3: 7|--[265 272 850 L06 L20 S00 S93]\n4: 7|--[6211 6362 7733 9256 A433 T203 V221]\n5: 7|--[11042 72083 78457 87529 C9800 G9097 G...]\n\n** Group 5:\n1: 1|--[11042]\n2: 1|--[72083]\n3: 1|--[78457]\n4: 1|--[87529]\n5: 1|--[C9800]\n6: 1|--[G9097]\n7: 1|--[G9560]\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n# Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x, verbose = TRUE) {\n  \n    out <- list(\n      g1 = g1(x, verbose = verbose),\n      g2 = g2(x, verbose = verbose),\n      g3 = g3(x, verbose = verbose),\n      g4 = g4(x, verbose = verbose),\n      g5 = g5(x, verbose = verbose)\n      )\n  \n  if (verbose) {\n    return(invisible(out))\n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n*  Remove Redundancies:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n** Group 1:\n1: 6|--[0 4 5 6 G J]\n\n** Group 2:\n1: 3|--[30 31 32]\n\n** Group 3:\n1: 9|--[721 722 723 724 725 726 727 728 729]\n\n** Group 5:\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n*  Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n** Group 1:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:   6|--[0 4 5 6 G J]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n*  Remove Redundancies:\n1:  6|--[0 4 5 6 G J]\n2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 9...]\n3:  9|--[721 722 723 724 725 726 727 728 729]\n4:  0|--[]\n5:  0|--[]\n\n** Group 1:\n1: 6|--[0 4 5 6 G J]\n\n** Group 2:\n1: 1|--[15]\n2: 3|--[20 22 27]\n3: 6|--[30 31 32 34 35 36]\n4: 1|--[76]\n5: 2|--[92 95]\n6: 2|--[C7 C9]\n7: 1|--[E0]\n8: 1|--[S2]\n\n** Group 3:\n1: 9|--[721 722 723 724 725 726 727 728 729]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec2() |> \n  split_lengths() |> \n  remove_redundant() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  2|--[4 F]\n2:  9|--[04 30 78 84 A0 A7 C1 G9 V2]\n3: 10|--[315 438 735 A44 G10 G92 G93 G96 L58 P90]\n4: 10|--[1018 1938 2392 7322 7370 8728 E030 G0...]\n5: 10|--[33813 58825 75774 76145 85360 86769 C...]\n\n*  Remove Redundancies:\n1:  2|--[4 F]\n2:  9|--[04 30 78 84 A0 A7 C1 G9 V2]\n3:  6|--[315 735 A44 G10 L58 P90]\n4: 10|--[1018 1938 2392 7322 7370 8728 E030 G0...]\n5:  9|--[33813 58825 75774 76145 85360 86769 C...]\n\n** Group 1:\n1: 2|--[4 F]\n\n** Group 2:\n1: 1|--[04]\n2: 1|--[30]\n3: 1|--[78]\n4: 1|--[84]\n5: 2|--[A0 A7]\n6: 1|--[C1]\n7: 1|--[G9]\n8: 1|--[V2]\n\n** Group 3:\n1: 1|--[315]\n2: 1|--[735]\n3: 1|--[A44]\n4: 1|--[G10]\n5: 1|--[L58]\n6: 1|--[P90]\n\n** Group 4:\n 1: 1|--[1018]\n 2: 1|--[1938]\n 3: 1|--[2392]\n 4: 1|--[7322]\n 5: 1|--[7370]\n 6: 1|--[8728]\n 7: 1|--[E030]\n 8: 1|--[G009]\n 9: 1|--[G207]\n10: 1|--[J124]\n\n** Group 5:\n1: 1|--[33813]\n2: 1|--[58825]\n3: 1|--[75774]\n4: 1|--[76145]\n5: 1|--[85360]\n6: 1|--[86769]\n7: 1|--[C2627]\n8: 1|--[G0461]\n9: 1|--[M1261]\n```\n\n\n:::\n:::\n\n\n\n\n## Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  # if (x == paste0(ad, collapse = \"\")) return(\"[A-Z0-9]\")\n  \n  vec  <- rlang::set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[fuimus::splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(character(0))\n  \n  g1 <- collapse::get_elem(x, \"g1\")[[1]]\n  \n  re <- sort_order(g1) |> reduce_runs()\n  \n  # re <- sorder(g1) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(paste0(\"^\", re, \"{5}$\"))\n  \n  postfix <- ifelse(\n    stringfish::sf_grepl(re, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  glue::glue(\"^{re}{postfix}{{4}}$\")\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n*  Remove Redundancies:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n** Group 1:\n1: 6|--[0 4 5 6 G J]\n\n** Group 2:\n1: 3|--[30 31 32]\n\n** Group 3:\n1: 9|--[721 722 723 724 725 726 727 728 729]\n\n** Group 5:\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[GJ04-6][0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n*  Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n** Group 1:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[CEGS0-35-79][0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^0[A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(LETTERS[1:5], 0:9)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^A[0-9]{4}$\n```\n\n\n:::\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(character(0))\n  \n  vecs <- stringr::str_split_fixed(\n    x, \"\", collapse::fmax(collapse::vlengths(x))) |> \n    as.data.frame()\n  \n  to_vec <- vecs |>\n    purrr::map(fuimus::uniq_rmna) |>\n    purrr::map(sort_order) |>\n    purrr::map(reduce_runs)\n  \n  multi_chars <- unname(nchar(to_vec) > 1)\n  \n  nobrack <- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n  \n  to_vec[multi_chars] <- ifelse(\n    any(nobrack), \n    purrr::map_chr(to_vec[multi_chars], \\(x) paste0(\"[\", x, \"]\")), \n    to_vec[multi_chars])\n\n  paste0(purrr::list_c(to_vec), collapse = \"\")\n}\n```\n:::\n\n\n\n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- function(x, n) {\n  \n  if (empty(x)) return(character(0))\n  \n  postfix <- ifelse(\n    stringfish::sf_grepl(\n      x, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \n    \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- data.table::fcase(\n    n == 0, paste0(\"^\", x, \"$\"),                \n    n == 1, paste0(\"^\", x, postfix, \"$\"),\n    default = paste0(\"^\", x, postfix, \"{\", n, \"}$\"))\n    \n  paste0(x , collapse = \"\")\n}\n\nvrg <- vec_to_regex\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = purrr::map_chr(x$g2, p2) |> purrr::map_chr(vrg, n = 3),\n    g3 = purrr::map_chr(x$g3, p2) |> purrr::map_chr(vrg, n = 2),\n    g4 = purrr::map_chr(x$g4, p2) |> purrr::map_chr(vrg, n = 1),\n    g5 = purrr::map_chr(x$g5, p2) |> purrr::map_chr(vrg, n = 0)\n  )\n    # unlist(use.names = FALSE) |> \n    # glue::glue_collapse(sep = \"|\")\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:   0|--[]\n2:   0|--[]\n3:  55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n*  Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  7|--[5202 5203 5204 5205 5206 5207 5208]\n5:  0|--[]\n\n** Group 3:\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n\n** Group 4:\n1: 7|--[5202 5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\ncharacter(0)\n\n$g2\ncharacter(0)\n\n$g3\n [1] \"^02[12][A-Z0-9]{2}$\"  \"^02[67][A-Z0-9]{2}$\"  \"^03[23][A-Z0-9]{2}$\" \n [4] \"^04[24][A-Z0-9]{2}$\"  \"^050[A-Z0-9]{2}$\"     \"^157[A-Z0-9]{2}$\"    \n [7] \"^209[A-Z0-9]{2}$\"     \"^225[A-Z0-9]{2}$\"     \"^271[A-Z0-9]{2}$\"    \n[10] \"^308[A-Z0-9]{2}$\"     \"^312[A-Z0-9]{2}$\"     \"^326[A-Z0-9]{2}$\"    \n[13] \"^34[78][A-Z0-9]{2}$\"  \"^355[A-Z0-9]{2}$\"     \"^362[A-Z0-9]{2}$\"    \n[16] \"^50[35][A-Z0-9]{2}$\"  \"^544[A-Z0-9]{2}$\"     \"^55[23][A-Z0-9]{2}$\" \n[19] \"^58[5-9][A-Z0-9]{2}$\" \"^61[02][A-Z0-9]{2}$\"  \"^630[A-Z0-9]{2}$\"    \n[22] \"^64[46][A-Z0-9]{2}$\"  \"^72[1-9][A-Z0-9]{2}$\" \"^765[A-Z0-9]{2}$\"    \n[25] \"^92[0-2][A-Z0-9]{2}$\" \"^958[A-Z0-9]{2}$\"     \"^C75[0-9]{2}$\"       \n[28] \"^C97[0-9]{2}$\"        \"^E06[0-9]{2}$\"        \"^G0[24][0-9]{2}$\"    \n[31] \"^S23[0-9]{2}$\"       \n\n$g4\n[1] \"^520[2-8][A-Z0-9]$\"\n\n$g5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n*  Remove Redundancies:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n** Group 1:\n1: 6|--[0 4 5 6 G J]\n\n** Group 2:\n1: 3|--[30 31 32]\n\n** Group 3:\n1: 9|--[721 722 723 724 725 726 727 728 729]\n\n** Group 5:\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^[GJ04-6][0-9]{4}$\n\n$g2\n[1] \"^3[0-2][A-Z0-9]{3}$\"\n\n$g3\n[1] \"^72[1-9][A-Z0-9]{2}$\"\n\n$g4\ncharacter(0)\n\n$g5\n[1] \"^9201[5-9]$\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n*  Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n** Group 1:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^[CEGS0-35-79][0-9]{4}$\n\n$g2\ncharacter(0)\n\n$g3\ncharacter(0)\n\n$g4\ncharacter(0)\n\n$g5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\n# long_test2[nchar(long_test2) == 4] |> \n#   split_lengths() |> \n#   remove_redundant() |> \n#   process_groups() |> \n#   reduce_groups()\n\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n*  Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n** Group 5:\n 1: 2|--[90460 90461]\n 2: 1|--[90471]\n 3: 1|--[90474]\n 4: 1|--[90619]\n 5: 1|--[90633]\n 6: 1|--[90647]\n 7: 2|--[90670 90672]\n 8: 2|--[90681 90682]\n 9: 2|--[90687 90688]\n10: 2|--[90698 90700]\n11: 1|--[90710]\n12: 1|--[90713]\n13: 1|--[90716]\n14: 1|--[90723]\n15: 1|--[90740]\n16: 1|--[90743]\n17: 2|--[90747 90749]\n18: 1|--[90756]\n19: 1|--[A4467]\n20: 1|--[A9283]\n21: 1|--[A9285]\n22: 2|--[L1904 L1906]\n23: 1|--[L1920]\n24: 1|--[L1930]\n25: 1|--[L1945]\n26: 1|--[L1950]\n27: 2|--[L1970 L1971]\n28: 1|--[L2000]\n29: 1|--[L2005]\n30: 2|--[L2020 L2030]\n31: 1|--[L2036]\n32: 1|--[L2037]\n33: 2|--[L2108 L2112]\n34: 1|--[L2126]\n35: 1|--[L2128]\n36: 1|--[L2136]\n37: 1|--[L2180]\n38: 1|--[L2186]\n39: 1|--[L2188]\n40: 1|--[L2200]\n41: 1|--[L2210]\n42: 1|--[L2232]\n43: 1|--[L2240]\n44: 1|--[L2265]\n45: 1|--[L2270]\n46: 1|--[L2300]\n47: 1|--[L2310]\n48: 1|--[L2335]\n49: 1|--[L2340]\n50: 1|--[L2370]\n51: 1|--[L2375]\n52: 2|--[L2387 L2390]\n53: 1|--[L2405]\n54: 1|--[L2415]\n55: 1|--[L2492]\n56: 1|--[L2500]\n57: 1|--[L2525]\n58: 1|--[L2526]\n59: 1|--[L2550]\n60: 1|--[L2750]\n61: 1|--[L2768]\n62: 1|--[L2780]\n63: 1|--[L2800]\n64: 1|--[L2810]\n65: 1|--[L2840]\n66: 1|--[L2850]\n67: 1|--[L4010]\n68: 1|--[L4020]\n69: 1|--[L4045]\n70: 1|--[L4050]\n71: 2|--[L4070 L4080]\n72: 2|--[L4110 L4130]\n73: 1|--[L4350]\n74: 2|--[L4360 L4386]\n75: 2|--[L4387 L4396]\n76: 1|--[L4397]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\ncharacter(0)\n\n$g2\ncharacter(0)\n\n$g3\ncharacter(0)\n\n$g4\ncharacter(0)\n\n$g5\n [1] \"^9046[01]$\"       \"^90471$\"          \"^90474$\"          \"^90619$\"         \n [5] \"^90633$\"          \"^90647$\"          \"^9067[02]$\"       \"^9068[12]$\"      \n [9] \"^9068[78]$\"       \"^90[67][67][67]$\" \"^90710$\"          \"^90713$\"         \n[13] \"^90716$\"          \"^90723$\"          \"^90740$\"          \"^90743$\"         \n[17] \"^9074[79]$\"       \"^90756$\"          \"^A4467$\"          \"^A9283$\"         \n[21] \"^A9285$\"          \"^L190[46]$\"       \"^L1920$\"          \"^L1930$\"         \n[25] \"^L1945$\"          \"^L1950$\"          \"^L197[01]$\"       \"^L2000$\"         \n[29] \"^L2005$\"          \"^L20[23]0$\"       \"^L2036$\"          \"^L2037$\"         \n[33] \"^L21[01][01]$\"    \"^L2126$\"          \"^L2128$\"          \"^L2136$\"         \n[37] \"^L2180$\"          \"^L2186$\"          \"^L2188$\"          \"^L2200$\"         \n[41] \"^L2210$\"          \"^L2232$\"          \"^L2240$\"          \"^L2265$\"         \n[45] \"^L2270$\"          \"^L2300$\"          \"^L2310$\"          \"^L2335$\"         \n[49] \"^L2340$\"          \"^L2370$\"          \"^L2375$\"          \"^L23[89][89]$\"   \n[53] \"^L2405$\"          \"^L2415$\"          \"^L2492$\"          \"^L2500$\"         \n[57] \"^L2525$\"          \"^L2526$\"          \"^L2550$\"          \"^L2750$\"         \n[61] \"^L2768$\"          \"^L2780$\"          \"^L2800$\"          \"^L2810$\"         \n[65] \"^L2840$\"          \"^L2850$\"          \"^L4010$\"          \"^L4020$\"         \n[69] \"^L4045$\"          \"^L4050$\"          \"^L40[78]0$\"       \"^L41[13]0$\"      \n[73] \"^L4350$\"          \"^L43[68][68]$\"    \"^L43[89][89]$\"    \"^L4397$\"         \n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec2() |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  4|--[6 J S V]\n2: 10|--[00 25 31 36 63 90 A4 A6 C9 S0]\n3: 10|--[322 511 526 534 547 844 929 G93 G96 Q42]\n4: 10|--[0659 1526 3051 8280 8427 A421 A506 C1...]\n5: 10|--[22857 58660 65273 90785 E2378 G2189 J...]\n\n*  Remove Redundancies:\n1:  4|--[6 J S V]\n2:  8|--[00 25 31 36 90 A4 A6 C9]\n3: 10|--[322 511 526 534 547 844 929 G93 G96 Q42]\n4:  8|--[0659 1526 3051 8280 8427 A506 C172 L018]\n5:  5|--[22857 58660 E2378 G2189 T1007]\n\n** Group 1:\n1: 4|--[6 J S V]\n\n** Group 2:\n1: 1|--[00]\n2: 1|--[25]\n3: 2|--[31 36]\n4: 1|--[90]\n5: 2|--[A4 A6]\n6: 1|--[C9]\n\n** Group 3:\n 1: 1|--[322]\n 2: 1|--[511]\n 3: 1|--[526]\n 4: 1|--[534]\n 5: 1|--[547]\n 6: 1|--[844]\n 7: 1|--[929]\n 8: 1|--[G93]\n 9: 1|--[G96]\n10: 1|--[Q42]\n\n** Group 4:\n1: 1|--[0659]\n2: 1|--[1526]\n3: 1|--[3051]\n4: 1|--[8280]\n5: 1|--[8427]\n6: 1|--[A506]\n7: 1|--[C172]\n8: 1|--[L018]\n\n** Group 5:\n1: 1|--[22857]\n2: 1|--[58660]\n3: 1|--[E2378]\n4: 1|--[G2189]\n5: 1|--[T1007]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^JSV6[0-9]{4}$\n\n$g2\n[1] \"^00[A-Z0-9]{3}$\"    \"^25[A-Z0-9]{3}$\"    \"^3[16][A-Z0-9]{3}$\"\n[4] \"^90[A-Z0-9]{3}$\"    \"^A[46][0-9]{3}$\"    \"^C9[0-9]{3}$\"      \n\n$g3\n [1] \"^322[A-Z0-9]{2}$\" \"^511[A-Z0-9]{2}$\" \"^526[A-Z0-9]{2}$\" \"^534[A-Z0-9]{2}$\"\n [5] \"^547[A-Z0-9]{2}$\" \"^844[A-Z0-9]{2}$\" \"^929[A-Z0-9]{2}$\" \"^G93[0-9]{2}$\"   \n [9] \"^G96[0-9]{2}$\"    \"^Q42[0-9]{2}$\"   \n\n$g4\n[1] \"^0659[A-Z0-9]$\" \"^1526[A-Z0-9]$\" \"^3051[A-Z0-9]$\" \"^8280[A-Z0-9]$\"\n[5] \"^8427[A-Z0-9]$\" \"^A506[0-9]$\"    \"^C172[0-9]$\"    \"^L018[0-9]$\"   \n\n$g5\n[1] \"^22857$\" \"^58660$\" \"^E2378$\" \"^G2189$\" \"^T1007$\"\n```\n\n\n:::\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x, verbose = TRUE) {\n  x |> \n    split_lengths(verbose = verbose) |> \n    remove_redundant(verbose = verbose) |> \n    process_groups(verbose = verbose) |> \n    reduce_groups() |> \n    unlist(use.names = FALSE) |> \n    glue::glue_collapse(sep = \"|\")\n}\n\nlong_test2[nchar(long_test2) > 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\" \"0221T\" \"0222T\" \"0263T\"\n [10] \"0265T\" \"0266T\" \"0269T\" \"0274T\" \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\"\n [19] \"0445T\" \"0506T\" \"0507T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\"\n [28] \"22514\" \"22515\" \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\"\n [37] \"32673\" \"34713\" \"34714\" \"34715\" \"34716\" \"34717\" \"36221\" \"34812\" \"34820\"\n [46] \"34833\" \"34834\" \"35572\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\"\n [55] \"55300\" \"58575\" \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\"\n [64] \"58920\" \"58925\" \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\"\n [73] \"63044\" \"63045\" \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\"\n [82] \"64492\" \"64494\" \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\"\n [91] \"92083\" \"92132\" \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\"\n[100] \"92229\" \"92235\" \"92240\" \"92242\" \"95870\" \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n[109] \"C9771\" \"E0675\" \"G0279\" \"G0412\" \"G0413\" \"G0414\" \"G0415\" \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\nmedrex(long_test2[nchar(long_test2) > 4])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n*  Remove Redundancies:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n** Group 5:\n 1: 1|--[15777]\n 2: 1|--[20939]\n 3: 6|--[22510 22511 22512 22513 22514 22515]\n 4: 2|--[22526 22527]\n 5: 2|--[27197 27198]\n 6: 2|--[30801 30802]\n 7: 1|--[31231]\n 8: 1|--[32673]\n 9: 5|--[34713 34714 34715 34716 34717]\n10: 1|--[34812]\n11: 1|--[34820]\n12: 2|--[34833 34834]\n13: 1|--[35572]\n14: 1|--[36221]\n15: 1|--[50300]\n16: 1|--[50540]\n17: 1|--[54420]\n18: 1|--[54430]\n19: 1|--[55200]\n20: 1|--[55250]\n21: 1|--[55300]\n22: 1|--[58575]\n23: 1|--[58600]\n24: 1|--[58605]\n25: 1|--[58700]\n26: 1|--[58720]\n27: 1|--[58800]\n28: 1|--[58805]\n29: 1|--[58900]\n30: 1|--[58920]\n31: 1|--[58925]\n32: 1|--[58940]\n33: 1|--[58943]\n34: 2|--[61000 61001]\n35: 1|--[61253]\n36: 1|--[63035]\n37: 6|--[63043 63044 63045 63046 63047 63048]\n38: 1|--[64421]\n39: 1|--[64480]\n40: 1|--[64484]\n41: 4|--[64491 64492 64494 64495]\n42: 2|--[64634 64636]\n43: 1|--[76514]\n44: 1|--[92025]\n45: 3|--[92081 92082 92083]\n46: 3|--[92132 92133 92134]\n47: 1|--[92145]\n48: 2|--[92201 92202]\n49: 3|--[92227 92228 92229]\n50: 1|--[92235]\n51: 2|--[92240 92242]\n52: 1|--[95870]\n53: 8|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n54: 3|--[0263T 0265T 0266T]\n55: 1|--[0269T]\n56: 2|--[0274T 0275T]\n57: 1|--[0329T]\n58: 1|--[0330T]\n59: 1|--[0422T]\n60: 4|--[0444T 0445T 0506T 0507T]\n61: 1|--[C7501]\n62: 4|--[C7502 C7504 C7505 C9771]\n63: 1|--[E0675]\n64: 1|--[G0279]\n65: 1|--[G0412]\n66: 2|--[G0413 G0414]\n67: 2|--[G0415 S2342]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^15777$|^20939$|^2251[0-5]$|^2252[67]$|^2719[78]$|^3080[12]$|^31231$|^32673$|^3471[3-7]$|^34812$|^34820$|^3483[34]$|^35572$|^36221$|^50300$|^50540$|^54420$|^54430$|^55200$|^55250$|^55300$|^58575$|^58600$|^58605$|^58700$|^58720$|^58800$|^58805$|^58900$|^58920$|^58925$|^58940$|^58943$|^6100[01]$|^61253$|^63035$|^6304[3-8]$|^64421$|^64480$|^64484$|^6449[1245]$|^6463[46]$|^76514$|^92025$|^9208[1-3]$|^9213[2-4]$|^92145$|^9220[12]$|^9222[7-9]$|^92235$|^9224[02]$|^95870$|^02[12][12]T$|^026[356]T$|^0269T$|^027[45]T$|^0329T$|^0330T$|^0422T$|^0[45][45][45]T$|^C7501$|^C[79][79][79][79]$|^E0675$|^G0279$|^G0412$|^G041[34]$|^[GS][GS][GS][GS][GS]$\n```\n\n\n:::\n\n```{.r .cell-code}\nvctrs::vec_slice(\n  hcpcs, \n  stringfish::sf_grepl(\n    hcpcs, \n    medrex(\n      long_test2[nchar(long_test2) > 4],\n      verbose = FALSE\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0211T\" \"0212T\" \"0221T\" \"0222T\" \"0263T\" \"0265T\" \"0266T\" \"0269T\" \"0274T\"\n [10] \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\" \"0445T\" \"0544T\" \"0545T\" \"0554T\"\n [19] \"0555T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n [28] \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\" \"32673\" \"34713\"\n [37] \"34714\" \"34715\" \"34716\" \"34717\" \"34812\" \"34820\" \"34833\" \"34834\" \"35572\"\n [46] \"36221\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\" \"55300\" \"58575\"\n [55] \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\" \"58920\" \"58925\"\n [64] \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\" \"63044\" \"63045\"\n [73] \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\" \"64492\" \"64494\"\n [82] \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\" \"92083\" \"92132\"\n [91] \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\" \"92229\" \"92235\"\n[100] \"92240\" \"92242\" \"95870\" \"C7501\" \"C9777\" \"C9779\" \"C9797\" \"E0675\" \"G0279\"\n[109] \"G0412\" \"G0413\" \"G0414\"\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0)_, _cheapr(v.0.9.9)_, _collapse(v.2.0.16)_, _tidyfast(v.0.4.0)_, _data.table(v.1.16.99)_, _re2r(v.1.0.0)_, _re2(v.0.1.3)_, _stringfish(v.0.16.0)_, _fuimus(v.0.0.2)_, _emphatic(v.0.1.8)_, _colortable(v.0.3.0)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_gtable(v.0.3.6)_, _xfun(v.0.48)_, _htmlwidgets(v.1.6.4)_, _RApiSerialize(v.0.1.4)_, _tzdb(v.0.4.0)_, _tools(v.4.4.1)_, _generics(v.0.1.3)_, _parallel(v.4.4.1)_, _fansi(v.1.0.6)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _lifecycle(v.1.0.4)_, _textshaping(v.0.4.0)_, _codex(v.0.0.0.9000)_, _munsell(v.0.5.1)_, _qs(v.0.27.2)_, _htmltools(v.0.5.8.1)_, _yaml(v.2.3.10)_, _pillar(v.1.9.0)_, _crayon(v.1.5.3)_, _tidyselect(v.1.2.1)_, _digest(v.0.6.37)_, _stringi(v.1.8.4)_, _pander(v.0.6.5)_, _pins(v.1.4.0)_, _rprojroot(v.2.0.4)_, _fastmap(v.1.2.0)_, _grid(v.4.4.1)_, _here(v.1.0.1)_, _colorspace(v.2.1-1)_, _magrittr(v.2.0.3)_, _utf8(v.1.2.4)_, _withr(v.3.0.2)_, _scales(v.1.3.0)_, _rappdirs(v.0.3.3)_, _cpp11(v.0.5.0)_, _timechange(v.0.3.0)_, _rmarkdown(v.2.28)_, _ragg(v.1.3.3)_, _hms(v.1.1.3)_, _evaluate(v.1.0.1)_, _knitr(v.1.48)_, _Rcpp(v.1.0.13)_, _glue(v.1.8.0)_, _rstudioapi(v.0.17.1)_, _jsonlite(v.1.8.9)_, _R6(v.2.5.1)_, _northstar(v.0.0.7)_, _systemfonts(v.1.1.0)_ and _fs(v.1.6.4)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}