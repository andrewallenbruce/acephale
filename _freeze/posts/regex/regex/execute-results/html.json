{
  "hash": "118c7400e57a5472798de58c026deb75",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>           HCPCS Count                                   Regex</span><br/>1  <span style='color:#ffffff;'><span style='background-color:#000000;'>          All</span></span><span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/>2  <span style='color:#000000;'><span style='background-color:#fde725;'>      Level I</span></span><span style='color:#000000;'><span style='background-color:#fde725;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>3  <span style='color:#000000;'><span style='background-color:#c4dd3e;'>   Category I</span></span><span style='color:#000000;'><span style='background-color:#c4dd3e;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>4  <span style='color:#ffffff;'><span style='background-color:#440757;'>  Category II</span></span><span style='color:#ffffff;'><span style='background-color:#440757;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>5  <span style='color:#ffffff;'><span style='background-color:#440154;'> Category III</span></span><span style='color:#ffffff;'><span style='background-color:#440154;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/>6  <span style='color:#000000;'><span style='background-color:#5dbe6b;'>     Level II</span></span><span style='color:#000000;'><span style='background-color:#5dbe6b;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/><br/><span><span>Count: </span></span><span style='color:#ffffff;'><span style='background-color:#462167;'>  1250</span></span><span style='color:#ffffff;'><span style='background-color:#414386;'>  2500</span></span><span style='color:#ffffff;'><span style='background-color:#39628b;'>  3750</span></span><span style='color:#ffffff;'><span style='background-color:#2b808d;'>  5000</span></span><span style='color:#ffffff;'><span style='background-color:#289c87;'>  6250</span></span><span style='color:#000000;'><span style='background-color:#4db674;'>  7500</span></span><span style='color:#000000;'><span style='background-color:#77cf55;'>  8750</span></span><span style='color:#000000;'><span style='background-color:#c4de3e;'> 10000</span></span>\n</pre>\n`````\n:::\n\n\n\n\n# TODOs\n\n   * If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n## Preprocessing\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntake  <- \\(x, i) stringfish::sf_substr(x, start = i, stop = i, nthreads = 4L)\nempty <- \\(x)    vctrs::vec_is_empty(x)\nchop  <- \\(v, g) vctrs::vec_chop(v, sizes = vctrs::vec_run_sizes(g))\ngrab  <- \\(x)    { x[stringfish::sf_grepl(x, \"[A-Z]{1}\", nthreads = 4L)] }\np     <- \\(...)  paste0(..., collapse = \"\")\n\nsort_order <- function(x) {\n  srt <- str_sort(x)\n  chr <- grab(srt)\n  p(p(chr), p(srt[!srt %in% chr]))\n}\n```\n:::\n\n\n\n\n### 1. `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x) {\n  \n  stopifnot(is.character(x))\n  \n  x <- sf_gsub(x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n    uniq_rmna() |> \n    str_sort()\n  \n  l <- vlengths(x)\n  \n  list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5]\n  )\n}\n```\n:::\n\n\n\n\n### 2. `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Why? A user may input complete and incomplete HCPCS codes alongside each other. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrr <- \\(x, y) {\n  \n  if (empty(x)) {\n    \n    cat(c(\"EMPTY: x | RETURN: character(0)\"), sep = \"\\n\")\n    \n    return(character(0))\n    \n  }\n  \n  if (empty(y)) {    \n    \n    cat(c(\"EMPTY: y | RETURN: x\"), sep = \"\\n\")\n    \n    return(x)\n    \n  }\n  \n  x[!sf_substr(x, 1, funique(vlengths(y, use.names = FALSE)), nthreads = 4L) %in% y]\n\n}\n\nremove_redundant <- function(x) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n}\n\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n$x2\ncharacter(0)\n\n$x3\ncharacter(0)\n\n$x4\ncharacter(0)\n\n$x5\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroups each set of vectors into groupable regex patterns.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlump <- function(x, thresh = 3){\n\n  xo <- order(x)\n\n  xs <- x[xo]\n  \n  diff_prev <- abs(c(0, xs[-1] - xs[seq_along(xs) - 1]))\n\n  binary <- ifelse(diff_prev >= thresh, 1, 0)\n\n  id <- cumsum(binary) + 1\n  \n  id[xo]\n  \n  }\n\nletters_2_numbers <- \\(x) {\n  \n  look <- set_names(as.character(1:26), LETTERS)\n  \n  unname(look[grab(x)])\n  \n  }\n```\n:::\n\n\n\n\n::: {.panel-tabset}\n\n## Groups 1 & 2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x) {\n  \n  x <- get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  x\n}\n\ng2 <- function(x) {\n  \n  x <- get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  rsplit(x, take(x, 1), use.names = FALSE)\n}\n\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n## Groups 3-5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x) {\n  \n  x <- get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(as.integer(str_replace_all(chr, \"[A-Z]\", letters_2_numbers))))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  out\n}\n\nthree <- all_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g3()\n\nthree   <- three[collapse::radixorder(collapse::vlengths(three), sort = FALSE)]\norphans <- three[collapse::vlengths(three) == 1] |> purrr::list_c()\ngroups  <- three[collapse::vlengths(three) > 1]\n\nmodifyList(\n  setNames(\n    groups, \n    paste0(\"group_\", collapse::vlengths(groups))\n    ), \n  list(orphans = orphans))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$group_2\n[1] \"021\" \"022\"\n\n$group_2\n[1] \"026\" \"027\"\n\n$group_2\n[1] \"032\" \"033\"\n\n$group_2\n[1] \"042\" \"044\"\n\n$group_2\n[1] \"347\" \"348\"\n\n$group_2\n[1] \"503\" \"505\"\n\n$group_2\n[1] \"552\" \"553\"\n\n$group_2\n[1] \"610\" \"612\"\n\n$group_2\n[1] \"644\" \"646\"\n\n$group_2\n[1] \"G02\" \"G04\"\n\n$group_3\n[1] \"920\" \"921\" \"922\"\n\n$group_5\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n$group_9\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n$orphans\n [1] \"050\" \"157\" \"209\" \"225\" \"271\" \"308\" \"312\" \"326\" \"355\" \"362\" \"544\" \"630\"\n[13] \"765\" \"958\" \"C75\" \"C97\" \"E06\" \"S23\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x) {\n  \n  x <- get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_replace_all(chr, \"[A-Z]\", let2num)\n        )))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in g4(remove_redundant(split_lengths(hcpcs_tests[20:25]))): object 'let2num' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in g4(split_lengths(long_test2)): object 'let2num' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- long_test2 |> \n  split_lengths() |> \n  get_elem(\"x5\")\n\ny <- data.table(\n    x,\n    a1 = take(x, 1),\n    a2 = take(x, 2),\n    a3 = take(x, 3),\n    a4 = take(x, 4),\n    a5 = take(x, 5)\n    )\n\ny |> dplyr::tibble() |> \n  dplyr::mutate(\n    i3 = dplyr::consecutive_id(a1, a2, a3),\n    i4 = dplyr::consecutive_id(a1, a2, a4),\n    i5 = dplyr::consecutive_id(a1, a2, a5),\n    l3 = i3 - dplyr::lag(i3, n = 1, default = 0),\n    l4 = i4 - dplyr::lag(i4, n = 1, default = 0),\n    l5 = i5 - dplyr::lag(i5, n = 1, default = 0),\n    ) |> \n  print(n = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\u001b[90m# A tibble: 116 × 12\u001b[39m\n    x     a1    a2    a3    a4    a5       i3    i4    i5    l3    l4    l5\n    \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m\n\u001b[90m  1\u001b[39m 0214T 0     2     1     4     T         1     1     1     1     1     1\n\u001b[90m  2\u001b[39m 0215T 0     2     1     5     T         1     2     1     0     1     0\n\u001b[90m  3\u001b[39m 0217T 0     2     1     7     T         1     3     1     0     1     0\n\u001b[90m  4\u001b[39m 0218T 0     2     1     8     T         1     4     1     0     1     0\n\u001b[90m  5\u001b[39m 0219T 0     2     1     9     T         1     5     1     0     1     0\n\u001b[90m  6\u001b[39m 0220T 0     2     2     0     T         2     6     1     1     1     0\n\u001b[90m  7\u001b[39m 0221T 0     2     2     1     T         2     7     1     0     1     0\n\u001b[90m  8\u001b[39m 0222T 0     2     2     2     T         2     8     1     0     1     0\n\u001b[90m  9\u001b[39m 0263T 0     2     6     3     T         3     9     1     1     1     0\n\u001b[90m 10\u001b[39m 0265T 0     2     6     5     T         3    10     1     0     1     0\n\u001b[90m 11\u001b[39m 0266T 0     2     6     6     T         3    11     1     0     1     0\n\u001b[90m 12\u001b[39m 0269T 0     2     6     9     T         3    12     1     0     1     0\n\u001b[90m 13\u001b[39m 0274T 0     2     7     4     T         4    13     1     1     1     0\n\u001b[90m 14\u001b[39m 0275T 0     2     7     5     T         4    14     1     0     1     0\n\u001b[90m 15\u001b[39m 0329T 0     3     2     9     T         5    15     2     1     1     1\n\u001b[90m 16\u001b[39m 0330T 0     3     3     0     T         6    16     2     1     1     0\n\u001b[90m 17\u001b[39m 0422T 0     4     2     2     T         7    17     3     1     1     1\n\u001b[90m 18\u001b[39m 0444T 0     4     4     4     T         8    18     3     1     1     0\n\u001b[90m 19\u001b[39m 0445T 0     4     4     5     T         8    19     3     0     1     0\n\u001b[90m 20\u001b[39m 0506T 0     5     0     6     T         9    20     4     1     1     1\n\u001b[90m 21\u001b[39m 0507T 0     5     0     7     T         9    21     4     0     1     0\n\u001b[90m 22\u001b[39m 15777 1     5     7     7     7        10    22     5     1     1     1\n\u001b[90m 23\u001b[39m 20939 2     0     9     3     9        11    23     6     1     1     1\n\u001b[90m 24\u001b[39m 22510 2     2     5     1     0        12    24     7     1     1     1\n\u001b[90m 25\u001b[39m 22511 2     2     5     1     1        12    24     8     0     0     1\n\u001b[90m 26\u001b[39m 22512 2     2     5     1     2        12    24     9     0     0     1\n\u001b[90m 27\u001b[39m 22513 2     2     5     1     3        12    24    10     0     0     1\n\u001b[90m 28\u001b[39m 22514 2     2     5     1     4        12    24    11     0     0     1\n\u001b[90m 29\u001b[39m 22515 2     2     5     1     5        12    24    12     0     0     1\n\u001b[90m 30\u001b[39m 22526 2     2     5     2     6        12    25    13     0     1     1\n\u001b[90m 31\u001b[39m 22527 2     2     5     2     7        12    25    14     0     0     1\n\u001b[90m 32\u001b[39m 27197 2     7     1     9     7        13    26    15     1     1     1\n\u001b[90m 33\u001b[39m 27198 2     7     1     9     8        13    26    16     0     0     1\n\u001b[90m 34\u001b[39m 30801 3     0     8     0     1        14    27    17     1     1     1\n\u001b[90m 35\u001b[39m 30802 3     0     8     0     2        14    27    18     0     0     1\n\u001b[90m 36\u001b[39m 31231 3     1     2     3     1        15    28    19     1     1     1\n\u001b[90m 37\u001b[39m 32673 3     2     6     7     3        16    29    20     1     1     1\n\u001b[90m 38\u001b[39m 34713 3     4     7     1     3        17    30    21     1     1     1\n\u001b[90m 39\u001b[39m 34714 3     4     7     1     4        17    30    22     0     0     1\n\u001b[90m 40\u001b[39m 34715 3     4     7     1     5        17    30    23     0     0     1\n\u001b[90m 41\u001b[39m 34716 3     4     7     1     6        17    30    24     0     0     1\n\u001b[90m 42\u001b[39m 34717 3     4     7     1     7        17    30    25     0     0     1\n\u001b[90m 43\u001b[39m 34812 3     4     8     1     2        18    30    26     1     0     1\n\u001b[90m 44\u001b[39m 34820 3     4     8     2     0        18    31    27     0     1     1\n\u001b[90m 45\u001b[39m 34833 3     4     8     3     3        18    32    28     0     1     1\n\u001b[90m 46\u001b[39m 34834 3     4     8     3     4        18    32    29     0     0     1\n\u001b[90m 47\u001b[39m 35572 3     5     5     7     2        19    33    30     1     1     1\n\u001b[90m 48\u001b[39m 36221 3     6     2     2     1        20    34    31     1     1     1\n\u001b[90m 49\u001b[39m 50300 5     0     3     0     0        21    35    32     1     1     1\n\u001b[90m 50\u001b[39m 50540 5     0     5     4     0        22    36    32     1     1     0\n\u001b[90m 51\u001b[39m 54420 5     4     4     2     0        23    37    33     1     1     1\n\u001b[90m 52\u001b[39m 54430 5     4     4     3     0        23    38    33     0     1     0\n\u001b[90m 53\u001b[39m 55200 5     5     2     0     0        24    39    34     1     1     1\n\u001b[90m 54\u001b[39m 55250 5     5     2     5     0        24    40    34     0     1     0\n\u001b[90m 55\u001b[39m 55300 5     5     3     0     0        25    41    34     1     1     0\n\u001b[90m 56\u001b[39m 58575 5     8     5     7     5        26    42    35     1     1     1\n\u001b[90m 57\u001b[39m 58600 5     8     6     0     0        27    43    36     1     1     1\n\u001b[90m 58\u001b[39m 58605 5     8     6     0     5        27    43    37     0     0     1\n\u001b[90m 59\u001b[39m 58700 5     8     7     0     0        28    43    38     1     0     1\n\u001b[90m 60\u001b[39m 58720 5     8     7     2     0        28    44    38     0     1     0\n\u001b[90m 61\u001b[39m 58800 5     8     8     0     0        29    45    38     1     1     0\n\u001b[90m 62\u001b[39m 58805 5     8     8     0     5        29    45    39     0     0     1\n\u001b[90m 63\u001b[39m 58900 5     8     9     0     0        30    45    40     1     0     1\n\u001b[90m 64\u001b[39m 58920 5     8     9     2     0        30    46    40     0     1     0\n\u001b[90m 65\u001b[39m 58925 5     8     9     2     5        30    46    41     0     0     1\n\u001b[90m 66\u001b[39m 58940 5     8     9     4     0        30    47    42     0     1     1\n\u001b[90m 67\u001b[39m 58943 5     8     9     4     3        30    47    43     0     0     1\n\u001b[90m 68\u001b[39m 61000 6     1     0     0     0        31    48    44     1     1     1\n\u001b[90m 69\u001b[39m 61001 6     1     0     0     1        31    48    45     0     0     1\n\u001b[90m 70\u001b[39m 61253 6     1     2     5     3        32    49    46     1     1     1\n\u001b[90m 71\u001b[39m 63035 6     3     0     3     5        33    50    47     1     1     1\n\u001b[90m 72\u001b[39m 63043 6     3     0     4     3        33    51    48     0     1     1\n\u001b[90m 73\u001b[39m 63044 6     3     0     4     4        33    51    49     0     0     1\n\u001b[90m 74\u001b[39m 63045 6     3     0     4     5        33    51    50     0     0     1\n\u001b[90m 75\u001b[39m 63046 6     3     0     4     6        33    51    51     0     0     1\n\u001b[90m 76\u001b[39m 63047 6     3     0     4     7        33    51    52     0     0     1\n\u001b[90m 77\u001b[39m 63048 6     3     0     4     8        33    51    53     0     0     1\n\u001b[90m 78\u001b[39m 64421 6     4     4     2     1        34    52    54     1     1     1\n\u001b[90m 79\u001b[39m 64480 6     4     4     8     0        34    53    55     0     1     1\n\u001b[90m 80\u001b[39m 64484 6     4     4     8     4        34    53    56     0     0     1\n\u001b[90m 81\u001b[39m 64491 6     4     4     9     1        34    54    57     0     1     1\n\u001b[90m 82\u001b[39m 64492 6     4     4     9     2        34    54    58     0     0     1\n\u001b[90m 83\u001b[39m 64494 6     4     4     9     4        34    54    59     0     0     1\n\u001b[90m 84\u001b[39m 64495 6     4     4     9     5        34    54    60     0     0     1\n\u001b[90m 85\u001b[39m 64634 6     4     6     3     4        35    55    61     1     1     1\n\u001b[90m 86\u001b[39m 64636 6     4     6     3     6        35    55    62     0     0     1\n\u001b[90m 87\u001b[39m 76514 7     6     5     1     4        36    56    63     1     1     1\n\u001b[90m 88\u001b[39m 92025 9     2     0     2     5        37    57    64     1     1     1\n\u001b[90m 89\u001b[39m 92081 9     2     0     8     1        37    58    65     0     1     1\n\u001b[90m 90\u001b[39m 92082 9     2     0     8     2        37    58    66     0     0     1\n\u001b[90m 91\u001b[39m 92083 9     2     0     8     3        37    58    67     0     0     1\n\u001b[90m 92\u001b[39m 92132 9     2     1     3     2        38    59    68     1     1     1\n\u001b[90m 93\u001b[39m 92133 9     2     1     3     3        38    59    69     0     0     1\n\u001b[90m 94\u001b[39m 92134 9     2     1     3     4        38    59    70     0     0     1\n\u001b[90m 95\u001b[39m 92145 9     2     1     4     5        38    60    71     0     1     1\n\u001b[90m 96\u001b[39m 92201 9     2     2     0     1        39    61    72     1     1     1\n\u001b[90m 97\u001b[39m 92202 9     2     2     0     2        39    61    73     0     0     1\n\u001b[90m 98\u001b[39m 92227 9     2     2     2     7        39    62    74     0     1     1\n\u001b[90m 99\u001b[39m 92228 9     2     2     2     8        39    62    75     0     0     1\n\u001b[90m100\u001b[39m 92229 9     2     2     2     9        39    62    76     0     0     1\n\u001b[90m# ℹ 16 more rows\u001b[39m\n```\n\n\n:::\n\n```{.r .cell-code}\n  # dplyr::add_count(a1, a2, a3, sort = TRUE, name = \"n3\") |> \n  # dplyr::add_count(a1, a2, a3, a4, sort = TRUE, name = \"n4\") |> \n  # dplyr::filter(n4 > 1) |> \n  # dplyr::select(x, id)\n\ny |> \n  dplyr::add_count(a1, a2, a3, a5, sort = TRUE, name = \"n5\") |> \n  dplyr::filter(n5 > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         x     a1     a2     a3     a4     a5    n5\n    <char> <char> <char> <char> <char> <char> <int>\n 1:  0214T      0      2      1      4      T     5\n 2:  0215T      0      2      1      5      T     5\n 3:  0217T      0      2      1      7      T     5\n 4:  0218T      0      2      1      8      T     5\n 5:  0219T      0      2      1      9      T     5\n 6:  0263T      0      2      6      3      T     4\n 7:  0265T      0      2      6      5      T     4\n 8:  0266T      0      2      6      6      T     4\n 9:  0269T      0      2      6      9      T     4\n10:  0220T      0      2      2      0      T     3\n11:  0221T      0      2      2      1      T     3\n12:  0222T      0      2      2      2      T     3\n13:  58900      5      8      9      0      0     3\n14:  58920      5      8      9      2      0     3\n15:  58940      5      8      9      4      0     3\n16:  0274T      0      2      7      4      T     2\n17:  0275T      0      2      7      5      T     2\n18:  0444T      0      4      4      4      T     2\n19:  0445T      0      4      4      5      T     2\n20:  0506T      0      5      0      6      T     2\n21:  0507T      0      5      0      7      T     2\n22:  54420      5      4      4      2      0     2\n23:  54430      5      4      4      3      0     2\n24:  55200      5      5      2      0      0     2\n25:  55250      5      5      2      5      0     2\n26:  58700      5      8      7      0      0     2\n27:  58720      5      8      7      2      0     2\n28:  63035      6      3      0      3      5     2\n29:  63045      6      3      0      4      5     2\n30:  64421      6      4      4      2      1     2\n31:  64484      6      4      4      8      4     2\n32:  64491      6      4      4      9      1     2\n33:  64494      6      4      4      9      4     2\n34:  92202      9      2      2      0      2     2\n35:  92242      9      2      2      4      2     2\n         x     a1     a2     a3     a4     a5    n5\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x) {\n  \n  x <- get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(code = num, lump = lump(as.integer(num)))\n  # 32:  55200     19\n  # 33:  55250     20\n  dchr <- as.integer(str_remove_all(chr, \"^[A-Z]|[A-Z]$\"))\n  \n  dchr <- ifelse(dchr %% 10 == 0, dchr + max(dchr), dchr)\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(dchr))\n  \n  # str_replace_all(str_remove_all(chr, \"[A-Z]$\"), \"[A-Z]\", let2num)\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  out\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"15777\"\n\n[[2]]\n[1] \"20939\"\n\n[[3]]\n[1] \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n\n[[4]]\n[1] \"22526\" \"22527\"\n\n[[5]]\n[1] \"27197\" \"27198\"\n\n[[6]]\n[1] \"30801\" \"30802\"\n\n[[7]]\n[1] \"31231\"\n\n[[8]]\n[1] \"32673\"\n\n[[9]]\n[1] \"34713\" \"34714\" \"34715\" \"34716\" \"34717\"\n\n[[10]]\n[1] \"34812\"\n\n[[11]]\n[1] \"34820\"\n\n[[12]]\n[1] \"34833\" \"34834\"\n\n[[13]]\n[1] \"35572\"\n\n[[14]]\n[1] \"36221\"\n\n[[15]]\n[1] \"50300\"\n\n[[16]]\n[1] \"50540\"\n\n[[17]]\n[1] \"54420\"\n\n[[18]]\n[1] \"54430\"\n\n[[19]]\n[1] \"55200\"\n\n[[20]]\n[1] \"55250\"\n\n[[21]]\n[1] \"55300\"\n\n[[22]]\n[1] \"58575\"\n\n[[23]]\n[1] \"58600\"\n\n[[24]]\n[1] \"58605\"\n\n[[25]]\n[1] \"58700\"\n\n[[26]]\n[1] \"58720\"\n\n[[27]]\n[1] \"58800\"\n\n[[28]]\n[1] \"58805\"\n\n[[29]]\n[1] \"58900\"\n\n[[30]]\n[1] \"58920\"\n\n[[31]]\n[1] \"58925\"\n\n[[32]]\n[1] \"58940\"\n\n[[33]]\n[1] \"58943\"\n\n[[34]]\n[1] \"61000\" \"61001\"\n\n[[35]]\n[1] \"61253\"\n\n[[36]]\n[1] \"63035\"\n\n[[37]]\n[1] \"63043\" \"63044\" \"63045\" \"63046\" \"63047\" \"63048\"\n\n[[38]]\n[1] \"64421\"\n\n[[39]]\n[1] \"64480\"\n\n[[40]]\n[1] \"64484\"\n\n[[41]]\n[1] \"64491\" \"64492\" \"64494\" \"64495\"\n\n[[42]]\n[1] \"64634\" \"64636\"\n\n[[43]]\n[1] \"76514\"\n\n[[44]]\n[1] \"92025\"\n\n[[45]]\n[1] \"92081\" \"92082\" \"92083\"\n\n[[46]]\n[1] \"92132\" \"92133\" \"92134\"\n\n[[47]]\n[1] \"92145\"\n\n[[48]]\n[1] \"92201\" \"92202\"\n\n[[49]]\n[1] \"92227\" \"92228\" \"92229\"\n\n[[50]]\n[1] \"92235\"\n\n[[51]]\n[1] \"92240\" \"92242\"\n\n[[52]]\n[1] \"95870\"\n\n[[53]]\n[1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\"\n\n[[54]]\n[1] \"0221T\" \"0222T\" \"0263T\"\n\n[[55]]\n[1] \"0265T\"\n\n[[56]]\n[1] \"0266T\" \"0269T\"\n\n[[57]]\n[1] \"0274T\"\n\n[[58]]\n[1] \"0275T\"\n\n[[59]]\n[1] \"0329T\"\n\n[[60]]\n[1] \"0330T\" \"0422T\"\n\n[[61]]\n[1] \"0444T\"\n\n[[62]]\n[1] \"0445T\"\n\n[[63]]\n[1] \"0506T\" \"0507T\" \"C7501\"\n\n[[64]]\n[1] \"C7502\"\n\n[[65]]\n[1] \"C7504\"\n\n[[66]]\n[1] \"C7505\"\n\n[[67]]\n[1] \"C9771\"\n\n[[68]]\n[1] \"E0675\"\n\n[[69]]\n[1] \"G0279\" \"G0412\"\n\n[[70]]\n[1] \"G0413\"\n\n[[71]]\n[1] \"G0414\"\n\n[[72]]\n[1] \"G0415\"\n\n[[73]]\n[1] \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n## Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  g <- x |> \n    split_lengths() |> \n    remove_redundant()\n  \n  list(\n    g1 = g1(g),\n    g2 = g2(g),\n    g3 = g3(g),\n    g4 = g4(g),\n    g5 = g5(g)\n  )\n}\n\nhcpcs_tests |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n$g2\n$g2[[1]]\n[1] \"30\" \"31\" \"32\"\n\n\n$g3\n$g3[[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n$g4\ncharacter(0)\n\n$g5\n$g5[[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n$g2\ncharacter(0)\n\n$g3\ncharacter(0)\n\n$g4\ncharacter(0)\n\n$g5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n$g2\n$g2[[1]]\n[1] \"15\"\n\n$g2[[2]]\n[1] \"20\" \"22\" \"27\"\n\n$g2[[3]]\n[1] \"30\" \"31\" \"32\" \"34\" \"35\" \"36\"\n\n$g2[[4]]\n[1] \"76\"\n\n$g2[[5]]\n[1] \"92\" \"95\"\n\n$g2[[6]]\n[1] \"C7\" \"C9\"\n\n$g2[[7]]\n[1] \"E0\"\n\n$g2[[8]]\n[1] \"S2\"\n\n\n$g3\n$g3[[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n$g4\ncharacter(0)\n\n$g5\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n#### Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  if (x == paste0(ad, collapse = \"\")) return(\"[A-Z0-9]\")\n  \n  vec  <- set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## Groups of 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  g1 <- get_elem(x, \"g1\")\n  \n  if (empty(g1)) return(NULL)\n  \n  re <- sort_order(g1) |> reduce_runs()\n  \n  # POSTFIX PROBLEM BEGINS RIGHT HERE\n  \n  if (re == \"[A-Z0-9]\") return(paste0(\"(^\", re, \"{5}$)\"))\n  \n  return(paste0(\"(^\", re, \"[A-Z0-9]{4}$)\"))\n}\n\nhcpcs_tests |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[A-Z0-9]{5}$)\"\n```\n\n\n:::\n:::\n\n\n\n\n### Groups > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(NULL)\n  \n  vecs <- str_split_fixed(x, \"\", fmax(vlengths(x))) |> as.data.frame()\n  \n  to_brackets <- vecs |>\n    purrr::map(fuimus::uniq_rmna) |>\n    purrr::map(sort_order)\n  \n  to_vec <- to_brackets |>\n    purrr::map(reduce_runs)\n  \n  multi_chars <- unname(nchar(to_vec) > 1)\n  \n  nobrack <- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n  \n  to_vec[multi_chars] <- ifelse(\n    any(nobrack), \n    purrr::map_chr(to_vec[multi_chars], \\(x) paste0(\"[\", x, \"]\")), \n    to_vec[multi_chars])\n\n  purrr::list_c(to_vec) |> \n    fuimus::collapser()\n}\n```\n:::\n\n\n\n\n### Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvrg <- function(x, n) {\n  \n  if (is.null(x)) return(NULL)\n  \n  postfix <- ifelse(\n    sf_grepl(x, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- ifelse(\n    n == 0, \n    paste0(\"(^\", x, \"$)\"),                \n    paste0(\"(^\", x, postfix, \"{\", n, \"}$)\")) \n    \n  paste0(x , collapse = \"|\")\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = map_vec(x$g2, p2) |> vrg(3),\n    g3 = map_vec(x$g3, p2) |> vrg(2),\n    g4 = map_vec(x$g4, p2) |> vrg(1),\n    g5 = map_vec(x$g5, p2) |> vrg(0)\n  ) |> \n    compact() |> \n    paste0(collapse = \"|\")\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in g4(g): object 'let2num' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  process_groups() |>\n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)|(^3[0-2][A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)|(^9201[5-9]$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |>\n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 4] |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in g4(g): object 'let2num' not found\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x) {\n  x |> \n    process_groups() |> \n    reduce_groups()\n}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\nmedrex(long_test2[nchar(long_test2) > 3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in g4(g): object 'let2num' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# length(\n  vec_slice(\n    hcpcs, \n    sf_grepl(\n      hcpcs, \n      medrex(long_test2[nchar(long_test2) > 3])\n      ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in g4(g): object 'let2num' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n  # )\n```\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0)_, _cheapr(v.0.9.9)_, _collapse(v.2.0.16)_, _tidyfast(v.0.4.0)_, _data.table(v.1.16.99)_, _re2r(v.1.0.0)_, _re2(v.0.1.3)_, _stringfish(v.0.16.0)_, _fuimus(v.0.0.2)_, _gt(v.0.11.1)_, _emphatic(v.0.1.8)_, _crayon(v.1.5.3)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_gtable(v.0.3.5)_, _xfun(v.0.48)_, _htmlwidgets(v.1.6.4)_, _RApiSerialize(v.0.1.4)_, _tzdb(v.0.4.0)_, _tools(v.4.4.1)_, _generics(v.0.1.3)_, _parallel(v.4.4.1)_, _fansi(v.1.0.6)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _lifecycle(v.1.0.4)_, _farver(v.2.1.2)_, _textshaping(v.0.4.0)_, _munsell(v.0.5.1)_, _qs(v.0.27.2)_, _htmltools(v.0.5.8.1)_, _yaml(v.2.3.10)_, _pillar(v.1.9.0)_, _tidyselect(v.1.2.1)_, _digest(v.0.6.37)_, _stringi(v.1.8.4)_, _pander(v.0.6.5)_, _labeling(v.0.4.3)_, _pins(v.1.4.0)_, _fastmap(v.1.2.0)_, _grid(v.4.4.1)_, _colorspace(v.2.1-1)_, _magrittr(v.2.0.3)_, _utf8(v.1.2.4)_, _withr(v.3.0.1)_, _scales(v.1.3.0)_, _rappdirs(v.0.3.3)_, _cpp11(v.0.5.0)_, _timechange(v.0.3.0)_, _rmarkdown(v.2.28)_, _ragg(v.1.3.3)_, _hms(v.1.1.3)_, _evaluate(v.1.0.1)_, _knitr(v.1.48)_, _viridisLite(v.0.4.2)_, _Rcpp(v.1.0.13)_, _glue(v.1.8.0)_, _xml2(v.1.3.6)_, _rstudioapi(v.0.17.1)_, _jsonlite(v.1.8.9)_, _R6(v.2.5.1)_, _northstar(v.0.0.7)_, _systemfonts(v.1.1.0)_ and _fs(v.1.6.4)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}