{
  "hash": "6b2f02e26c3c3055ee822e6c2f4bdf23",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>                 Count                                 Regex</span><br/>All             <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> ^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$</span></span><br/>-Level I        <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  ^[0-9]{4}[AFMTU0-9]$</span></span><br/>--Category I    <span style='color:#ffffff;'><span style='background-color:#7f7f7f;'>  9990</span></span><span><span>                    ^[0-9]{4}[AMU0-9]$</span></span><br/>--Category II   <span style='color:#000000;'><span style='background-color:#cccccc;'>   565</span></span><span><span>                           ^[0-9]{4}F$</span></span><br/>--Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   430</span></span><span><span>                           ^[0-9]{4}T$</span></span><br/>-Level II       <span style='color:#ffffff;'><span style='background-color:#333333;'>  7918</span></span><span><span>              ^[A-CEGHJ-MP-V][0-9]{4}$</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n# TODO\n\n   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [ ] `process_groups()`\n   -   [X] `g1()`\n   -   [X] `g2()`\n   -   [ ] `g3()`\n   -   [ ] `g4()`\n   -   [ ] `g5()`\n-   [ ] `reduce_groups()`\n\n# Helpers\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff <- \\(x) stringr::str_trunc(string = x, width = 40, side = \"right\")\nwrap   <- \\(x) stringr::str_wrap(string = x, width = 60, exdent = 5, whitespace_only = FALSE)\n\nview <- \\(x) {\n  idx  <- seq_along(x)\n  len  <- vlen(x)\n  tree <- unname(purrr::map_vec(x, paste0, collapse = \" \")) |> purrr::map_vec(cutoff)\n  \n    glue::glue(\"{format(idx)}: \", \n               \"{format(len)}|\", \n               \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\")\n}\n\nview_remove <- \\(x) {\n  \n  len  <- length(x)\n  tree <- unname(paste0(x, collapse = \" \")) |> purrr::map_vec(cutoff)\n  \n  glue::glue(\"Removed \", \n             \"{format(len, justify = 'left')}|\", \n             \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\")\n}\n```\n:::\n\n\n\n\n# Preprocessing\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x, verbose = FALSE) {\n  \n  stopifnot(is.character(x))\n  \n  x <- sf_remove(x, \"\\\\*|\\\\s\") |> \n    unique_narm() |> \n    stringr::str_sort()\n  \n  l <- vlen(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{cli::symbol$stop} Split By Lengths\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |>\n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n[1] \"3\" \"4\"\n\n$x2\n [1] \"20\" \"43\" \"62\" \"80\" \"92\" \"A5\" \"C1\" \"E0\" \"G9\" \"J7\"\n\n$x3\n [1] \"053\" \"732\" \"821\" \"824\" \"825\" \"E23\" \"G40\" \"G86\" \"G90\" \"K07\"\n\n$x4\n [1] \"0093\" \"0352\" \"2751\" \"4201\" \"4223\" \"6304\" \"6703\" \"9226\" \"E023\" \"G993\"\n\n$x5\n [1] \"01360\" \"33321\" \"35621\" \"45136\" \"80179\" \"80190\" \"85366\" \"G9290\" \"K0814\"\n[10] \"S0177\"\n```\n\n\n:::\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`, i.e., remove longer codes that share a common sub-string with shorter codes.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nremove_redundant <- function(x, verbose = FALSE) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{strrep(cli::symbol$stop, 2)} Remove Redundancies\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n\n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n[1] \"6\"\n\n$x2\n[1] \"27\" \"88\" \"D2\" \"G8\" \"G9\" \"J9\" \"L0\" \"L6\"\n\n$x3\n[1] \"213\" \"226\" \"261\" \"490\" \"C90\" \"G05\" \"G20\" \"L18\" \"Q40\"\n\n$x4\n[1] \"0063\" \"3216\" \"3415\" \"3621\" \"3821\" \"4513\" \"E078\" \"G028\" \"Q421\"\n\n$x5\n[1] \"0539T\" \"1101F\" \"20693\" \"26742\" \"57230\" \"93653\" \"A5062\"\n```\n\n\n:::\n:::\n\n\n\n\n## `split_first()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nspf <- \\(x) collapse::rsplit(x, take_at(x, 1), use.names = FALSE)\n\nsplit_first <- function(x, verbose = FALSE) {\n  \n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = list(x1),\n    x2 = spf(x2),\n    x3 = spf(x3),\n    x4 = spf(x4),\n    x5 = spf(x5))\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{strrep(cli::symbol$stop, 3)} Split At First\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n$x1[[1]]\n[1] \"C\" \"E\"\n\n\n$x2\n$x2[[1]]\n[1] \"01\" \"02\"\n\n$x2[[2]]\n[1] \"25\" \"28\"\n\n$x2[[3]]\n[1] \"50\" \"54\"\n\n$x2[[4]]\n[1] \"63\"\n\n$x2[[5]]\n[1] \"87\"\n\n$x2[[6]]\n[1] \"G8\"\n\n$x2[[7]]\n[1] \"L3\"\n\n\n$x3\n$x3[[1]]\n[1] \"158\"\n\n$x3[[2]]\n[1] \"365\" \"368\"\n\n$x3[[3]]\n[1] \"776\"\n\n$x3[[4]]\n[1] \"830\" \"842\"\n\n$x3[[5]]\n[1] \"G91\"\n\n$x3[[6]]\n[1] \"T20\"\n\n\n$x4\n$x4[[1]]\n[1] \"3724\"\n\n$x4[[2]]\n[1] \"5194\"\n\n$x4[[3]]\n[1] \"6964\"\n\n$x4[[4]]\n[1] \"8029\"\n\n$x4[[5]]\n[1] \"9206\" \"9936\"\n\n$x4[[6]]\n[1] \"A956\"\n\n$x4[[7]]\n[1] \"J155\"\n\n$x4[[8]]\n[1] \"L243\"\n\n$x4[[9]]\n[1] \"M118\"\n\n\n$x5\n$x5[[1]]\n[1] \"1111F\"\n\n$x5[[2]]\n[1] \"31635\"\n\n$x5[[3]]\n[1] \"43887\"\n\n$x5[[4]]\n[1] \"59866\"\n\n$x5[[5]]\n[1] \"81164\"\n\n$x5[[6]]\n[1] \"G9091\"\n\n$x5[[7]]\n[1] \"K0853\"\n\n$x5[[8]]\n[1] \"L5856\"\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns. Deal with groups containing letters separately.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# $r\n# [1] \"L80\"\n# $f\n# [1] \"L56\" \"L59\"\n# \n# ^L(5[69]|80)$\n\nlcodes <- c(\"L6789\", \"L8000\", \"L5600\", \"L5900\")\n\nlcodes[\n  sf_detect(\n    lcodes, \n    \"^L(5[69]|80)[0-9]{2}$\"\n    )\n  ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"L8000\" \"L5600\" \"L5900\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.panel-tabset}\n\n## [g3]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_3 <- function(x) {\n\n  x <- collapse::get_elem(x, \"x3\")\n  \n  if (empty(x)) return(x)\n  \n  l     <- vlen(x)\n  leave <- x[l < 3]\n  test  <- x[l >= 3]\n  \n  if (empty(test)) return(x)\n  \n  process_3 <- \\(test) {\n\n  indices <- data.table::data.table(\n    code = test,\n    a1 = take_at(test),\n    a2 = take_at(test, 2),\n    a3 = take_at(test, 3)) |>\n    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |>\n    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |>\n    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2))\n\n  orphans <- indices |>\n    dplyr::add_count(i1, name = \"n1\", sort = TRUE) |>\n    dplyr::filter((i2 + i3 + n1) == 3) |>\n    dplyr::pull(code)\n\n  last <- indices |>\n    dplyr::filter(code %!in% orphans) |>\n    dplyr::select(code, a1:a3) |>\n    fuimus::combine(group_id, columns = c(\"a1\"), sep = \"\")\n\n  last <- dplyr::left_join(\n    last |> dplyr::count(group_id, a2),\n    last |> dplyr::count(group_id, name = \"g\"),\n    by = dplyr::join_by(group_id)) |>\n    dplyr::filter(n == g) |>\n    dplyr::right_join(last, by = dplyr::join_by(group_id, a2)) |>\n    dplyr::filter(!is.na(n))\n\n  rest <- indices |>\n    dplyr::filter(code %!in% c(orphans, dplyr::pull(last, code))) |>\n    fuimus::combine(group_id, columns = c(\"a1\", \"a2\"), sep = \"\")\n\n  vctrs::vec_c(\n    if (empty(orphans)) NULL else list(orphans),\n    if (empty(last)) NULL else chop(last$code, last$group_id),\n    if (empty(rest)) NULL else chop(rest$code, rest$group_id))\n  }\n  vctrs::vec_c(leave, purrr::map(test, process_3))\n}\n\nlong_test2[nchar(long_test2) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"157\"\n\n[[2]]\n[1] \"765\"\n\n[[3]]\n[1] \"C75\" \"C97\"\n\n[[4]]\n[1] \"E06\"\n\n[[5]]\n[1] \"G02\" \"G04\"\n\n[[6]]\n[1] \"S23\"\n\n[[7]]\n[[7]][[1]]\n[1] \"021\" \"022\" \"026\" \"027\"\n\n[[7]][[2]]\n[1] \"032\" \"033\"\n\n[[7]][[3]]\n[1] \"042\" \"044\"\n\n[[7]][[4]]\n[1] \"050\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"209\"\n\n[[8]][[2]]\n[1] \"225\"\n\n[[8]][[3]]\n[1] \"271\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"308\"\n\n[[9]][[2]]\n[1] \"312\"\n\n[[9]][[3]]\n[1] \"326\"\n\n[[9]][[4]]\n[1] \"347\" \"348\"\n\n[[9]][[5]]\n[1] \"355\"\n\n[[9]][[6]]\n[1] \"362\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"503\" \"505\"\n\n[[10]][[2]]\n[1] \"544\"\n\n[[10]][[3]]\n[1] \"552\" \"553\"\n\n[[10]][[4]]\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"610\" \"612\"\n\n[[11]][[2]]\n[1] \"630\"\n\n[[11]][[3]]\n[1] \"644\" \"646\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"920\" \"921\" \"922\"\n\n[[12]][[2]]\n[1] \"958\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"495\"\n\n[[2]]\n[1] \"541\"\n\n[[3]]\n[1] \"770\"\n\n[[4]]\n[1] \"A95\"\n\n[[5]]\n[1] \"E25\" \"E26\"\n\n[[6]]\n[1] \"J89\"\n\n[[7]]\n[1] \"M10\"\n\n[[8]]\n[1] \"S21\"\n\n[[9]]\n[[9]][[1]]\n[1] \"042\"\n\n[[9]][[2]]\n[1] \"057\"\n\n[[9]][[3]]\n[1] \"084\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"211\" \"212\"\n\n[[10]][[2]]\n[1] \"225\"\n\n[[10]][[3]]\n[1] \"236\"\n\n[[10]][[4]]\n[1] \"283\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"310\" \"315\" \"316\"\n\n[[11]][[2]]\n[1] \"365\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"G40\"\n\n[[12]][[2]]\n[1] \"G95\" \"G98\"\n```\n\n\n:::\n:::\n\n\n\n\n## [All]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  list(\n    g1 = x$x1,\n    g2 = x$x2,\n    g3 = group_3(x)\n    # ,\n    # g4 = g4(x, verbose = verbose),\n    # g5 = g5(x, verbose = verbose)\n    )\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  # remove_redundant() |> \n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n\n$g2\n$g2[[1]]\n[1] \"30\" \"31\" \"32\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  split_first() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n\n$g2\n$g2[[1]]\n[1] \"02\" \"03\" \"04\" \"05\"\n\n$g2[[2]]\n[1] \"15\"\n\n$g2[[3]]\n[1] \"20\" \"22\" \"27\"\n\n$g2[[4]]\n[1] \"30\" \"31\" \"32\" \"34\" \"35\" \"36\"\n\n$g2[[5]]\n[1] \"50\" \"54\" \"55\" \"58\"\n\n$g2[[6]]\n[1] \"61\" \"63\" \"64\"\n\n$g2[[7]]\n[1] \"76\"\n\n$g2[[8]]\n[1] \"92\" \"95\"\n\n$g2[[9]]\n[1] \"C7\" \"C9\"\n\n$g2[[10]]\n[1] \"E0\"\n\n$g2[[11]]\n[1] \"G0\"\n\n$g2[[12]]\n[1] \"S2\"\n\n\n$g3\n$g3[[1]]\n[1] \"157\"\n\n$g3[[2]]\n[1] \"765\"\n\n$g3[[3]]\n[1] \"C75\" \"C97\"\n\n$g3[[4]]\n[1] \"E06\"\n\n$g3[[5]]\n[1] \"G02\" \"G04\"\n\n$g3[[6]]\n[1] \"S23\"\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"021\" \"022\" \"026\" \"027\"\n\n$g3[[7]][[2]]\n[1] \"032\" \"033\"\n\n$g3[[7]][[3]]\n[1] \"042\" \"044\"\n\n$g3[[7]][[4]]\n[1] \"050\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"209\"\n\n$g3[[8]][[2]]\n[1] \"225\"\n\n$g3[[8]][[3]]\n[1] \"271\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"308\"\n\n$g3[[9]][[2]]\n[1] \"312\"\n\n$g3[[9]][[3]]\n[1] \"326\"\n\n$g3[[9]][[4]]\n[1] \"347\" \"348\"\n\n$g3[[9]][[5]]\n[1] \"355\"\n\n$g3[[9]][[6]]\n[1] \"362\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"503\" \"505\"\n\n$g3[[10]][[2]]\n[1] \"544\"\n\n$g3[[10]][[3]]\n[1] \"552\" \"553\"\n\n$g3[[10]][[4]]\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"610\" \"612\"\n\n$g3[[11]][[2]]\n[1] \"630\"\n\n$g3[[11]][[3]]\n[1] \"644\" \"646\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"920\" \"921\" \"922\"\n\n$g3[[12]][[2]]\n[1] \"958\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n[1] \"7\" \"G\" \"S\"\n\n\n$g2\n$g2[[1]]\n[1] \"01\" \"02\" \"04\"\n\n$g2[[2]]\n[1] \"25\" \"26\" \"29\"\n\n$g2[[3]]\n[1] \"32\" \"33\" \"37\"\n\n$g2[[4]]\n[1] \"44\" \"49\"\n\n$g2[[5]]\n[1] \"60\" \"63\" \"64\" \"65\" \"67\" \"69\"\n\n$g2[[6]]\n[1] \"81\" \"82\" \"83\" \"84\" \"85\" \"86\" \"87\" \"88\"\n\n$g2[[7]]\n[1] \"91\" \"92\"\n\n$g2[[8]]\n[1] \"A6\" \"A9\"\n\n$g2[[9]]\n[1] \"B4\"\n\n$g2[[10]]\n[1] \"C1\" \"C8\"\n\n$g2[[11]]\n[1] \"J1\" \"J3\"\n\n$g2[[12]]\n[1] \"K0\"\n\n$g2[[13]]\n[1] \"L3\" \"L4\"\n\n$g2[[14]]\n[1] \"P9\"\n\n\n$g3\n$g3[[1]]\n[1] \"006\" \"031\"\n\n$g3[[2]]\n[1] \"400\"\n\n$g3[[3]]\n[1] \"566\"\n\n$g3[[4]]\n[1] \"C94\"\n\n$g3[[5]]\n[1] \"D51\"\n\n$g3[[6]]\n[1] \"E02\"\n\n$g3[[7]]\n[1] \"J76\"\n\n$g3[[8]]\n[1] \"M10\" \"M11\"\n\n$g3[[9]]\n[1] \"Q01\" \"Q41\"\n\n$g3[[10]]\n[1] \"V27\"\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"100\"\n\n$g3[[11]][[2]]\n[1] \"111\"\n\n$g3[[11]][[3]]\n[1] \"173\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"209\"\n\n$g3[[12]][[2]]\n[1] \"216\"\n\n$g3[[12]][[3]]\n[1] \"271\"\n\n$g3[[12]][[4]]\n[1] \"280\" \"282\"\n\n\n$g3[[13]]\n$g3[[13]][[1]]\n[1] \"902\"\n\n$g3[[13]][[2]]\n[1] \"935\"\n\n$g3[[13]][[3]]\n[1] \"993\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n# Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  if (nchar(x) == 1) return(x)\n\n  # poss <- c(LETTERS, 0:9)\n  poss <- c(0:9, \"&\", LETTERS)\n  \n  test <- setNames(rep(0, 37), poss)\n  \n  vctr <- test[c(splitter(x), \"&\")]\n  \n  vctr <- vctr[!is.na(vctr)]\n  \n  test[names(vctr)] <- 1\n  \n  test[names(test) == \"&\"] <- 0\n\n  groups <- data.table::data.table(\n    value = names(test),\n    keys = test,\n    group = dplyr::consecutive_id(test)) |>\n    dplyr::mutate(size = dplyr::n(), .by = group) |> \n    dplyr::filter(keys == 1, size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(groups)) return(x)\n  \n  xgroups <- chop(groups$value, groups$group) |>\n    purrr::map(smush) |>\n    purrr::list_c()\n  \n  if (all(xgroups == smush(poss))) return(\"[A-Z0-9]\")\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(groups, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(groups, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  bracket(res)\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(character(0))\n  \n  x <- collapse::get_elem(x, \"g1\")[[1]]\n  \n  re <- sort_order(x) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(glue::glue(\"^{re}{{5}}$\"))\n  \n  postfix <- ifelse(sf_detect(re, \"\\\\[?[0-9]{1}\"), \"[A-Z0-9]\", \"[0-9]\")\n  \n  glue::glue(\"^{re}{postfix}{{4}}$\")\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  reduce_1()\n\n\nc(LETTERS[1:5], 0:9) |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  reduce_1()\n\nlong_test2 |>\n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  reduce_1()\n\nlist(g1 = list(c(0:9, LETTERS))) |> reduce_1()\n\nlist(g1 = list(c(LETTERS[1:5], 0:9))) |> reduce_1()\n```\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_2 <- function(x, nm = \"g2\") {\n  \n  if (empty(x[[nm]])) return(character(0))\n  \n  x <- collapse::get_elem(x, nm)\n  l <- vlen(x)\n  leave <- x[l == 1]\n  test  <- x[l > 1]\n  \n  process_parts <- \\(x) {\n  \n  parts <- stringr::str_split_fixed(x, \"\", max_vlen(x)) |> \n    as.data.frame() |>\n    purrr::map(unique_narm) |> \n    purrr::map(sort_order) |>\n    purrr::map(reduce_runs) |> \n    delist()\n  \n  multi   <- stringfish::sf_nchar(parts, nthreads = 4L) > 1\n  nobrk <- !stringfish::sf_grepl(parts[multi], \"\\\\[|\\\\]\", nthreads = 4L)\n  \n  \n  parts[multi] <- ifelse(\n    any(nobrk), \n    purrr::map_chr(parts[multi], bracket), \n    parts[multi])\n\n  smush(parts)\n  }\n  vctrs::vec_c(leave, purrr::map(test, process_parts))\n}\n\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  reduce_2(\"g2\")\n\nhcpcs_tests |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_2(\"g3\")\n\nx <- paste0(\"A\", c(0:5, LETTERS)) |> \n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  reduce_2(\"g2\")\n```\n:::\n\n\n\n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- vrg <- function(x, n) {\n  \n  if (empty(x)) return(character(0))\n  \n  post <- ifelse(sf_detect(x, \"^\\\\[?[A-Z]\\\\-?\"), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- data.table::fcase(\n    n == 0, glue::glue(\"^{x}$\"),                \n    n == 1, glue::glue(\"^{x}{post}$\"),\n    n == 2, glue::glue(\"^{x}{post}{{2}}$\"),\n    n == 3, glue::glue(\"^{x}{post}{{3}}$\")\n    )\n    \n  glue::glue_collapse(x)\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = purrr::map_chr(x$g2, p2) |> purrr::map_chr(vrg, n = 3) |> glue::as_glue(),\n    g3 = purrr::map_chr(x$g3, p2) |> purrr::map_chr(vrg, n = 2) |> glue::as_glue(),\n    g4 = purrr::map_chr(x$g4, p2) |> purrr::map_chr(vrg, n = 1) |> glue::as_glue(),\n    g5 = purrr::map_chr(x$g5, p2) |> purrr::map_chr(vrg, n = 0) |> glue::as_glue()\n  )\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\n# long_test2[nchar(long_test2) == 4]\n\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x, verbose = TRUE) {\n  x |> \n    split_lengths(verbose = verbose) |> \n    remove_redundant(verbose = verbose) |> \n    process_groups(verbose = verbose) |> \n    reduce_groups() |> \n    unlist(use.names = FALSE) |> \n    glue::glue_collapse(sep = \"|\")\n}\n\nlong_test2[nchar(long_test2) > 4]\n\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\n\nmedrex(long_test2[nchar(long_test2) > 4])\n\nvctrs::vec_slice(\n  hcpcs, \n  stringfish::sf_grepl(\n    hcpcs, \n    medrex(\n      long_test2[nchar(long_test2) > 4],\n      verbose = FALSE\n      )\n    )\n  )\n```\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_emphatic(v.0.1.8)_, _fuimus(v.0.0.2)_, _collapse(v.2.0.17)_, _data.table(v.1.16.99)_, _codex(v.0.0.0.9000)_, _stringfish(v.0.16.0)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _hms(v.1.1.3)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _grid(v.4.4.1)_, _timechange(v.0.3.0)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _scales(v.1.3.0)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _munsell(v.0.5.1)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _qs(v.0.27.2)_, _tools(v.4.4.1)_, _parallel(v.4.4.1)_, _tzdb(v.0.4.0)_, _colorspace(v.2.1-1)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _cheapr(v.0.9.9)_, _fs(v.1.6.5)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _gtable(v.0.3.6)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13)_, _systemfonts(v.1.1.0)_, _xfun(v.0.48)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.48)_, _htmltools(v.0.5.8.1)_, _rmarkdown(v.2.29)_ and _compiler(v.4.4.1)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}