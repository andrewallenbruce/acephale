{
  "hash": "e30430fa1c397013b2738ae329b40868",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"ghoqevlwqz\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#ghoqevlwqz table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ghoqevlwqz thead, #ghoqevlwqz tbody, #ghoqevlwqz tfoot, #ghoqevlwqz tr, #ghoqevlwqz td, #ghoqevlwqz th {\n  border-style: none;\n}\n\n#ghoqevlwqz p {\n  margin: 0;\n  padding: 0;\n}\n\n#ghoqevlwqz .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ghoqevlwqz .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ghoqevlwqz .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ghoqevlwqz .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ghoqevlwqz .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ghoqevlwqz .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ghoqevlwqz .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ghoqevlwqz .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ghoqevlwqz .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ghoqevlwqz .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ghoqevlwqz .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ghoqevlwqz .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ghoqevlwqz .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ghoqevlwqz .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ghoqevlwqz .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ghoqevlwqz .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ghoqevlwqz .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ghoqevlwqz .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ghoqevlwqz .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ghoqevlwqz .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ghoqevlwqz .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ghoqevlwqz .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ghoqevlwqz .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ghoqevlwqz .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ghoqevlwqz .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ghoqevlwqz .gt_left {\n  text-align: left;\n}\n\n#ghoqevlwqz .gt_center {\n  text-align: center;\n}\n\n#ghoqevlwqz .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ghoqevlwqz .gt_font_normal {\n  font-weight: normal;\n}\n\n#ghoqevlwqz .gt_font_bold {\n  font-weight: bold;\n}\n\n#ghoqevlwqz .gt_font_italic {\n  font-style: italic;\n}\n\n#ghoqevlwqz .gt_super {\n  font-size: 65%;\n}\n\n#ghoqevlwqz .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ghoqevlwqz .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ghoqevlwqz .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ghoqevlwqz .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ghoqevlwqz .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ghoqevlwqz .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ghoqevlwqz .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#ghoqevlwqz .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#ghoqevlwqz div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"HCPCS\">HCPCS</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Count\">Count</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Regex\">Regex</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">Total</td>\n<td headers=\"Count\" class=\"gt_row gt_right\">18,903</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\">(^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">Level I (CPT)</td>\n<td headers=\"Count\" class=\"gt_row gt_right\">10,985</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\">(^[0-9]{4}[AFMTU0-9]$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">CPT Category I</td>\n<td headers=\"Count\" class=\"gt_row gt_right\">9,990</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\">(^[0-9]{4}[AMU0-9]$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">CPT Category II</td>\n<td headers=\"Count\" class=\"gt_row gt_right\">565</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\">(^[0-9]{4}F$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">CPT Category III</td>\n<td headers=\"Count\" class=\"gt_row gt_right\">430</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\">(^[0-9]{4}T$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">Level I (CPT)</td>\n<td headers=\"Count\" class=\"gt_row gt_right\">7,918</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\">(^[A-CEGHJ-MP-V][0-9]{4}$)</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n# TODOs\n\n   * If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.\n   * Eliminate `g1()` step in grouping.\n   * `remove_redundant()`: Don't use `zeallot` infix, try pmap for `rr()` step.\n\n## Preprocess\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n`%notin%` <- data.table::`%notin%`\ntake      <- \\(x, i = 1) stringfish::sf_substr(x, start = i, stop = i, nthreads = 4L)\nempty     <- \\(x) vctrs::vec_is_empty(x)\n```\n:::\n\n\n\n\n### 1. `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x) {\n  \n  stopifnot(is.character(x))\n  \n  x <- stringfish::sf_gsub(x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n      fuimus::uniq_rmna() |> \n    stringr::str_sort()\n  \n  l <- collapse::vlengths(x)\n  \n  list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5]\n  )\n}\n```\n:::\n\n\n\n\n### 2. `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Why? A user may input complete and incomplete HCPCS codes alongside each other. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrr <- \\(x, y, n = 1) {\n  if (empty(x)) return(character(0))\n  x <- x[stringfish::sf_substr(x, 1, n, nthreads = 4L) %notin% y]\n  if (empty(x)) return(character(0))\n  x\n}\n\nremove_redundant <- function(x) {\n\n  c(x1, x2, x3, x4, x5) %<-% x\n  \n  list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2, 2),\n    x4 = rr(x4, x1) |> rr(x2, 2) |> rr(x3, 3),\n    x5 = rr(x5, x1) |> rr(x2, 2) |> rr(x3, 3) |> rr(x4, 4)\n  )\n  \n}\n```\n:::\n\n\n\n\n# Grouping\n\nGroups each set of vectors into groupable regex patterns.\n\n::: {.panel-tabset}\n\n## Groups 1 & 2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x) {\n  \n  if (empty(x[[\"x1\"]])) return(character(0))\n  \n  x[[\"x1\"]]\n\n}\n\ng2 <- function(x) {\n  \n  if (empty(x[[\"x2\"]])) return(character(0))\n  \n  collapse::rsplit(x[[\"x2\"]], take(x[[\"x2\"]]), use.names = FALSE)\n  \n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |>\n  split_lengths() |> \n  remove_redundant() |> \n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"30\" \"31\" \"32\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"15\"\n\n[[2]]\n[1] \"20\" \"22\" \"27\"\n\n[[3]]\n[1] \"30\" \"31\" \"32\" \"34\" \"35\" \"36\"\n\n[[4]]\n[1] \"76\"\n\n[[5]]\n[1] \"92\" \"95\"\n\n[[6]]\n[1] \"C7\" \"C9\"\n\n[[7]]\n[1] \"E0\"\n\n[[8]]\n[1] \"S2\"\n```\n\n\n:::\n:::\n\n\n\n\n## Groups 3-5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x) {\n  \n  if (empty(x[[\"x3\"]])) return(character(0))\n  \n  idx <- data.table(\n    c1 = x[[\"x3\"]],\n    a1 = take(x[[\"x3\"]]),\n    a2 = take(x[[\"x3\"]], 2),\n    a3 = take(x[[\"x3\"]], 3)) |> \n    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |> \n    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |> \n    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2)) |> \n    collapse::fcount(i1, add = TRUE, name = \"G\")\n\n  orphans <- idx[i2 + i3 + G == 3, c1]\n  idx     <- idx[c1 %notin% orphans]\n    \n  last <- collapse::fcount(idx, a1, a2) |> \n    dplyr::left_join(collapse::funique(\n      idx[, .(a1, G)]), \n      by = dplyr::join_by(a1)) |> \n    dplyr::filter(N == G) |> \n    dplyr::right_join(\n      idx[, .(c1, a1, a2)], \n      by = dplyr::join_by(a1, a2)) |> \n    dplyr::filter(!is.na(N))\n  \n  idx <- idx[c1 %notin% last$c1]\n\n  out <- vctrs::vec_c(\n    if (empty(orphans)) NULL else as.list(orphans),\n    if (empty(last)) NULL else vctrs::vec_chop(last$c1, sizes = vctrs::vec_run_sizes(last$a1)),\n    if (empty(idx)) NULL else vctrs::vec_chop(idx$c1, sizes = vctrs::vec_run_sizes(idx$a1))\n  )\n  \n  if (empty(out)) return(character(0))\n\n  return(out)\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x) {\n  \n  if (empty(x[[\"x4\"]])) return(character(0))\n  \n  indices <- dplyr::tibble(\n    code = x[[\"x4\"]],\n    a1 = take(code),\n    a2 = take(code, 2),\n    a3 = take(code, 3),\n    a4 = take(code, 4)) |> \n    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |> \n    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |> \n    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2)) |> \n    dplyr::mutate(i4 = dplyr::consecutive_id(a4), .by = c(a1, a2, a3)) |> \n    collapse::fcount(i1, add = TRUE, name = \"G\")\n  \n  orphans <- indices[(indices$i2 + indices$i3 + indices$i4 + indices$G == 4), ]$code\n    \n  last <- fuimus::combine(indices[(!indices$code %in% orphans), c(1:5)], group_id, columns = c(\"a1\", \"a2\"), sep = \"\")\n    \n  last <- collapse::fcount(last, group_id, a3) |> \n    dplyr::left_join(collapse::fcount(last, group_id, name = \"G\"), by = dplyr::join_by(group_id)) |> \n    dplyr::filter(N == G) |> \n    dplyr::right_join(last, by = dplyr::join_by(group_id, a3)) |> \n    dplyr::filter(!is.na(N))\n\n  rest <- indices[(!indices$code %in% c(orphans, last$code)), ] |> \n    fuimus::combine(group_id, columns = c(\"a1\", \"a2\", \"a3\"), sep = \"\")\n\n  out <- vctrs::vec_c(\n    if (empty(orphans)) NULL else as.list(orphans),\n    if (empty(last)) NULL else vctrs::vec_chop(last$code, sizes = vctrs::vec_run_sizes(last$group_id)),\n    if (empty(rest)) NULL else vctrs::vec_chop(rest$code, sizes = vctrs::vec_run_sizes(rest$group_id))\n  )\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"5203\" \"5204\" \"5205\" \"5206\" \"5207\" \"5208\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x) {\n  \n  if (empty(x[[\"x5\"]])) return(character(0))\n  \n  indices <- dplyr::tibble(\n    code = x[[\"x5\"]],\n    a1 = take(code),\n    a2 = take(code, 2),\n    a3 = take(code, 3),\n    a4 = take(code, 4),\n    a5 = take(code, 5)) |> \n    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |> \n    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |> \n    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2)) |> \n    dplyr::mutate(i4 = dplyr::consecutive_id(a4), .by = c(a1, a2, a3)) |> \n    dplyr::mutate(i5 = dplyr::consecutive_id(a5), .by = c(a1, a2, a3, a4)) |>\n    collapse::fcount(i1, add = TRUE, name = \"G\")\n  \n  orphans <- indices[(indices$i2 + indices$i3 + indices$i4 + indices$i5 + indices$G == 5), ]$code\n  \n  last <- fuimus::combine(\n    indices[(!indices$code %in% orphans), c(1:4, 6)], \n    group_id, columns = c(\"a1\", \"a2\", \"a3\"), sep = \"\")\n  \n  last <- collapse::fcount(last, group_id, a5) |> \n    dplyr::left_join(collapse::fcount(last, group_id, name = \"G\"), by = dplyr::join_by(group_id)) |> \n    dplyr::filter(N == G) |> \n    dplyr::right_join(last, by = dplyr::join_by(group_id, a5)) |> \n    dplyr::filter(!is.na(N))\n\n  rest <- indices[(!indices$code %in% c(orphans, last$code)), ] |> \n    fuimus::combine(group_id, columns = c(\"a1\", \"a2\", \"a3\", \"a4\"), sep = \"\")\n\n  out <- vctrs::vec_c(\n    if (empty(orphans)) NULL else as.list(orphans),\n    if (empty(last)) NULL else vctrs::vec_chop(last$code, sizes = vctrs::vec_run_sizes(last$group_id)),\n    if (empty(rest)) NULL else vctrs::vec_chop(rest$code, sizes = vctrs::vec_run_sizes(rest$group_id))\n  )\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n### Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  g <- x |> \n    split_lengths() |> \n    remove_redundant()\n  \n  list(\n    g1 = g1(g),\n    g2 = g2(g),\n    g3 = g3(g),\n    g4 = g4(g),\n    g5 = g5(g)\n  )\n}\n\nhcpcs_tests |> \n  process_groups() |> \n  lobstr::tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<list>\n├─g1<chr [6]>: \"0\", \"4\", \"5\", \"6\", \"G\", \"J\"\n├─g2: <list>\n│ └─<chr [3]>\"30\", \"31\", \"32\"\n├─g3: <list>\n│ └─<chr [9]>\"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\"\n├─g4<chr [0]>: \"\"\n└─g5: <list>\n  └─<chr [5]>\"92015\", \"92016\", \"92017\", \"92018\", \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |> \n  lobstr::tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<list>\n├─g1<chr [12]>: \"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", \"9\", \"C\", \"E\", ...\n├─g2<chr [0]>: \"\"\n├─g3<chr [0]>: \"\"\n├─g4<chr [0]>: \"\"\n└─g5<chr [0]>: \"\"\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  process_groups() |> \n  lobstr::tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<list>\n├─g1<chr [6]>: \"0\", \"4\", \"5\", \"6\", \"G\", \"J\"\n├─g2: <list>\n│ ├─\"15\"\n│ ├─<chr [3]>\"20\", \"22\", \"27\"\n│ ├─<chr [6]>\"30\", \"31\", \"32\", \"34\", \"35\", \"36\"\n│ ├─\"76\"\n│ ├─<chr [2]>\"92\", \"95\"\n│ ├─<chr [2]>\"C7\", \"C9\"\n│ ├─\"E0\"\n│ └─\"S2\"\n├─g3: <list>\n│ └─<chr [9]>\"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\"\n├─g4<chr [0]>: \"\"\n└─g5<chr [0]>: \"\"\n```\n\n\n:::\n:::\n\n\n\n\n\n### Internal 2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nget_char <- \\(x) x[stringfish::sf_grepl(x, \"[A-Z]\", nthreads = 4L)]\nget_numb <- \\(x) x[stringfish::sf_grepl(x, \"[0-9]\", nthreads = 4L)]\n\nsort_order <- function(x) {\n  \n  sorted   <- stringr::str_sort(x, numeric = TRUE)\n  alphabet <- get_char(sorted)\n  numbers  <- get_numb(sorted)\n  \n  paste0(\n    fuimus::collapser(alphabet), \n    fuimus::collapser(numbers)\n    )\n}\n```\n:::\n\n\n\n\n#### Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  if (x == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\") return(\"[A-Z0-9]\")\n  \n  vec  <- rlang::set_names(rep(0, 36), c(LETTERS, 0:9))\n  vec2 <- vec[fuimus::splitter(x)]\n  vec2 <- vec2[!is.na(vec2)]\n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- vctrs::vec_chop(\n    vec_group$value, \n    sizes = vctrs::vec_run_sizes(vec_group$group)) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## Groups of 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(NULL)\n  \n  re <- sort_order(x[[\"g1\"]]) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(paste0(\"(^\", re, \"{5}$)\"))\n  \n  return(paste0(\"(^\", re, \"[A-Z0-9]{4}$)\"))\n}\n\nall_tests |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[A-Z0-9]{5}$)\"\n```\n\n\n:::\n:::\n\n\n\n\n### Groups > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(NULL)\n  \n  vecs <- stringr::str_split_fixed(\n    x, \"\", collapse::fmax(collapse::vlengths(x))) |>\n    as.data.frame()\n  \n  to_brackets <- vecs |>\n    purrr::map(fuimus::uniq_rmna) |>\n    purrr::map(sort_order)\n  \n  to_vec <- to_brackets |>\n    purrr::map(reduce_runs)\n  \n  multi_chars <- unname(nchar(to_vec) > 1)\n  \n  nobrack <- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n  \n  to_vec[multi_chars] <- ifelse(\n    any(nobrack), \n    purrr::map_chr(to_vec[multi_chars], \\(x) paste0(\"[\", x, \"]\")), \n    to_vec[multi_chars])\n\n  purrr::list_c(to_vec) |> \n    fuimus::collapser()\n}\n```\n:::\n\n\n\n\n### Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvrg <- function(x, n) {\n  \n  if (is.null(x)) return(NULL)\n  \n  postfix <- ifelse(\n    stringfish::sf_starts(x, \"[A-Z]\", nthreads = 4L), \n    \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- ifelse(\n    n == 0, \n    paste0(\"(^\", x, \"$)\"),                \n    paste0(\"(^\", x, postfix, \"{\", n, \"}$)\")) \n    \n  paste0(x , collapse = \"|\")\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = purrr::map_vec(x$g2, p2) |> vrg(3),\n    g3 = purrr::map_vec(x$g3, p2) |> vrg(2),\n    g4 = purrr::map_vec(x$g4, p2) |> vrg(1),\n    g5 = purrr::map_vec(x$g5, p2) |> vrg(0)\n  ) |> \n    purrr::compact() |> \n    paste0(collapse = \"|\")\n}\n\nall_tests |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)|(^15[A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  process_groups() |>\n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)|(^3[0-2][A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)|(^9201[5-9]$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |>\n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) > 4] |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^15777$)\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x) {\n  x |> \n    process_groups() |> \n    reduce_groups()\n}\n\nmedrex(all_tests)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)|(^15[A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 7123\n# vector_length(\n#   vec_slice(\n#     hcpcs_codes, \n#     sf_grepl(\n#       hcpcs_codes, \n#       medrex(all_tests)\n#       )\n#     )\n#   )\n\nvec_slice(\n  hcpcs_codes, \n  sf_grepl(\n    hcpcs_codes, \n    medrex(\n      long_test2[nchar(long_test2) > 3]\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"15770\" \"15771\" \"15772\" \"15773\" \"15774\" \"15775\" \"15776\" \"15777\" \"15778\"\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n# Session Information\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package       * version date (UTC) lib source\n   cheapr        * 0.9.9   2024-10-14 [1] RSPM (R 4.4.0)\n   cli           * 3.6.3   2024-06-21 [1] RSPM (R 4.4.0)\n   collapse      * 2.0.16  2024-08-21 [1] RSPM (R 4.4.0)\n   colorspace      2.1-1   2024-07-26 [1] RSPM (R 4.4.0)\n   crayon          1.5.3   2024-06-20 [1] RSPM (R 4.4.0)\n   data.table    * 1.16.2  2024-10-10 [1] RSPM (R 4.4.0)\n   digest          0.6.37  2024-08-19 [1] RSPM (R 4.4.0)\n   dplyr         * 1.1.4   2023-11-17 [1] RSPM (R 4.4.0)\n   evaluate        1.0.1   2024-10-10 [1] RSPM (R 4.4.0)\n   fansi           1.0.6   2023-12-08 [1] RSPM (R 4.4.0)\n   fastmap         1.2.0   2024-05-15 [1] RSPM (R 4.4.0)\n   fastplyr      * 0.3.0   2024-10-20 [1] CRAN (R 4.4.1)\n   forcats       * 1.0.0   2023-01-29 [1] RSPM (R 4.4.0)\n   fs              1.6.4   2024-04-25 [1] RSPM (R 4.4.0)\n   fuimus          0.0.2   2024-10-15 [1] local\n   generics        0.1.3   2022-07-05 [1] RSPM (R 4.4.0)\n   ggplot2       * 3.5.1   2024-04-23 [1] RSPM (R 4.4.0)\n   glue            1.8.0   2024-09-30 [1] RSPM (R 4.4.0)\n   gt              0.11.1  2024-10-04 [1] RSPM (R 4.4.0)\n   gtable          0.3.5   2024-04-22 [1] RSPM (R 4.4.0)\n   hms             1.1.3   2023-03-21 [1] RSPM (R 4.4.0)\n   htmltools       0.5.8.1 2024-04-04 [1] RSPM (R 4.4.0)\n   htmlwidgets     1.6.4   2023-12-06 [1] RSPM (R 4.4.0)\n   jsonlite        1.8.9   2024-09-20 [1] RSPM (R 4.4.0)\n   knitr           1.48    2024-07-07 [1] CRAN (R 4.4.1)\n   lifecycle       1.0.4   2023-11-07 [1] RSPM (R 4.4.0)\n   lobstr          1.1.2   2022-06-22 [1] RSPM (R 4.4.0)\n   lubridate     * 1.9.3   2023-09-27 [1] RSPM (R 4.4.0)\n   magrittr        2.0.3   2022-03-30 [1] RSPM (R 4.4.0)\n   munsell         0.5.1   2024-04-01 [1] RSPM (R 4.4.0)\n   northstar       0.0.7   2024-07-30 [1] Github (andrewallenbruce/northstar@5c01119)\n   pillar          1.9.0   2023-03-22 [1] RSPM (R 4.4.0)\n   pins            1.4.0   2024-10-07 [1] RSPM (R 4.4.0)\n   pkgconfig       2.0.3   2019-09-22 [1] RSPM (R 4.4.0)\n   purrr         * 1.0.2   2023-08-10 [1] RSPM (R 4.4.0)\n   qs              0.27.2  2024-10-01 [1] RSPM (R 4.4.0)\n   R6              2.5.1   2021-08-19 [1] RSPM (R 4.4.0)\n   ragg            1.3.3   2024-09-11 [1] RSPM (R 4.4.0)\n   RApiSerialize   0.1.4   2024-09-28 [1] RSPM (R 4.4.0)\n   rappdirs        0.3.3   2021-01-31 [1] RSPM (R 4.4.0)\n   Rcpp            1.0.13  2024-07-17 [1] RSPM (R 4.4.0)\n D RcppParallel    5.1.9   2024-08-19 [1] RSPM (R 4.4.0)\n   re2           * 0.1.3   2023-11-29 [1] RSPM (R 4.4.0)\n   re2r          * 1.0.0   2024-10-16 [1] Github (qinwf/re2r@6744c37)\n   readr         * 2.1.5   2024-01-10 [1] RSPM (R 4.4.0)\n   rlang         * 1.1.4   2024-06-04 [1] RSPM (R 4.4.0)\n   rmarkdown       2.28    2024-08-17 [1] CRAN (R 4.4.1)\n   rstudioapi      0.17.0  2024-10-16 [1] RSPM (R 4.4.0)\n   sass            0.4.9   2024-03-15 [1] RSPM (R 4.4.0)\n   scales          1.3.0   2023-11-28 [1] RSPM (R 4.4.0)\n   sessioninfo     1.2.2   2021-12-06 [1] RSPM (R 4.4.0)\n   stringfish    * 0.16.0  2023-11-28 [1] RSPM (R 4.4.0)\n   stringi         1.8.4   2024-05-06 [1] RSPM (R 4.4.0)\n   stringr       * 1.5.1   2023-11-14 [1] RSPM (R 4.4.0)\n   systemfonts     1.1.0   2024-05-15 [1] RSPM (R 4.4.0)\n   textshaping     0.4.0   2024-05-24 [1] RSPM (R 4.4.0)\n   tibble        * 3.2.1   2023-03-20 [1] RSPM (R 4.4.0)\n   tidyr         * 1.3.1   2024-01-24 [1] RSPM (R 4.4.0)\n   tidyselect      1.2.1   2024-03-11 [1] RSPM (R 4.4.0)\n   tidyverse     * 2.0.0   2023-02-22 [1] RSPM (R 4.4.0)\n   timechange      0.3.0   2024-01-18 [1] RSPM (R 4.4.0)\n   tzdb            0.4.0   2023-05-12 [1] RSPM (R 4.4.0)\n   utf8            1.2.4   2023-10-22 [1] RSPM (R 4.4.0)\n   vctrs         * 0.6.5   2023-12-01 [1] RSPM (R 4.4.0)\n   withr           3.0.1   2024-07-31 [1] RSPM (R 4.4.0)\n   xfun            0.48    2024-10-03 [1] RSPM (R 4.4.0)\n   xml2            1.3.6   2023-12-04 [1] RSPM (R 4.4.0)\n   yaml            2.3.10  2024-07-26 [1] RSPM (R 4.4.0)\n   zeallot       * 0.1.0   2018-01-28 [1] RSPM\n\n [1] C:/Users/Andrew/AppData/Local/R/win-library/4.4\n [2] C:/Program Files/R/R-4.4.1/library\n\n D ── DLL MD5 mismatch, broken installation.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}