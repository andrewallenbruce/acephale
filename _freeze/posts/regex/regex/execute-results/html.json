{
  "hash": "9c1968f55992233dc419b203081251c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>                 Count                                   Regex</span><br/>All             <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/> Level I        <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>  Category I    <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>  Category II   <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>  Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/> Level II       <span style='color:#ffffff;'><span style='background-color:#333333;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n# TODO\n\n   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [ ] `process_groups()`\n   -   [X] `g1()`\n   -   [X] `g2()`\n   -   [ ] `g3()`\n   -   [ ] `g4()`\n   -   [ ] `g5()`\n-   [ ] `reduce_groups()`\n\n# Helpers\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsort_order <- \\(x) {\n\n  sort <- stringr::str_sort(x, numeric = TRUE)\n  alph <- stringr::str_extract_all(sort, stringr::regex(\"[A-Z]\"))\n  numb <- stringr::str_extract_all(sort, stringr::regex(\"[0-9]\"))\n  alph <- purrr::list_c(alph)\n  numb <- purrr::list_c(numb)\n\n  paste0(\n    paste0(alph, collapse = \"\"),\n    paste0(numb, collapse = \"\")\n  )\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# collapse\nunique_vlength <- \\(x) collapse::funique(collapse::vlengths(x, use.names = FALSE))\nunique_narm    <- \\(x) collapse::funique(collapse::na_rm(x))\nmax_vlength    <- \\(x) collapse::fmax(collapse::vlengths(x, use.names = FALSE))\n\n# vctrs\nempty <- \\(x) vctrs::vec_is_empty(x)\nchop  <- \\(v, g) vctrs::vec_chop(v, sizes = vctrs::vec_run_sizes(g))\n\n# stringfish\ntake_at   <- \\(x, i = 1) stringfish::sf_substr(x, start = i, stop = i, nthreads = 4L)\ndetect_az <- \\(x) x[stringfish::sf_grepl(x, \"[A-Z]{1}\", nthreads = 4L)]\n```\n:::\n\n\n\n\n## View\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff <- \\(x) stringr::str_trunc(string = x, width = 40, side = \"right\")\nwrap   <- \\(x) stringr::str_wrap(string = x, width = 60, exdent = 5, whitespace_only = FALSE)\n\nview <- \\(x) {\n  idx  <- seq_along(x)\n  len  <- collapse::vlengths(x, use.names = FALSE)\n  tree <- unname(purrr::map_vec(x, paste0, collapse = \" \")) |> purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"{format(idx)}: \", \n      \"{format(len)}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n\nview_remove <- \\(x) {\n  \n  len  <- length(x)\n  tree <- unname(paste0(x, collapse = \" \")) |> purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"Removed \", \n      \"{format(len, justify = 'left')}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n\n\n\n# Preprocessing\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x, verbose = TRUE) {\n  \n  stopifnot(is.character(x))\n  \n  x <- stringfish::sf_gsub(x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n    unique_narm() |> \n    stringr::str_sort()\n  \n  l <- collapse::vlengths(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  if (verbose) {\n    \n    cat(\"*  Split By Lengths:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\ncodex::random_hcpcs(n = 5) |> \n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 5|--[0 B F G K]\n2: 5|--[41 80 90 G9 J9]\n3: 5|--[033 813 836 843 J05]\n4: 5|--[1101 2648 3367 5664 8141]\n5: 5|--[35518 38100 58562 66988 L8682]\n```\n\n\n:::\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncontrast <- \\(long, short) {\n  \n  if (empty(long))  return(character(0))\n  if (empty(short)) return(long)\n\n  end <- unique_vlength(short)\n  \n  ldx <- stringfish::sf_substr(long, 1, end, nthreads = 4L)\n  \n  long[!ldx %in% short]\n}\nrr <- contrast\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nremove_redundant <- function(x, verbose = TRUE) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  if (verbose) {\n    \n    cat(\"<===||Remove Redundancies||:::||\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")\n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\ncodex::random_hcpcs(15) |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  1|--[U]\n2: 15|--[00 11 26 28 44 67 68 97 A7 G0 J1 L2 L...]\n3: 15|--[131 222 273 283 331 417 502 526 541 6...]\n4: 15|--[0585 3120 3250 6510 6618 8306 8838 97...]\n5: 15|--[17280 26055 27610 31527 50980 84105 8...]\n\n<===||Remove Redundancies||:::||\n1:  1|--[U]\n2: 15|--[00 11 26 28 44 67 68 97 A7 G0 J1 L2 L...]\n3: 14|--[131 222 273 331 417 502 526 541 646 7...]\n4: 13|--[0585 3120 3250 6510 6618 8306 8838 C9...]\n5: 14|--[17280 27610 31527 50980 84105 88249 9...]\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlump <- function(x, threshold = 3) {\n  \n  stopifnot(is.numeric(x))\n\n  xo <- order(x)\n\n  xs <- x[xo]\n  \n  dlag <- abs(c(0, xs[-1] - xs[seq_along(xs) - 1]))\n\n  bi <- ifelse(dlag >= threshold, 1, 0)\n\n  id <- cumsum(bi) + 1\n  \n  id[xo]\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nletters_2_numbers <- \\(x) {\n  \n  look <- rlang::set_names(\n    seq_along(LETTERS), \n    LETTERS)\n  \n  unname(look[detect_az(x)])\n}\n```\n:::\n\n\n\n\n\n::: {.panel-tabset}\n\n## [g1|g2]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  out <- list(x)\n  \n  if (verbose) {\n    \n    cat(\"** Group 1:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\ng2 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  out <- collapse::rsplit(x, take_at(x, 1), use.names = FALSE)\n  \n  if (verbose) {\n    \n    cat(\"** Group 2:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\ncodex::random_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  1|--[8]\n2: 10|--[01 27 36 44 49 86 93 E0 M1 T1]\n3: 10|--[019 031 254 333 385 853 926 G01 G21 L86]\n4: 10|--[0010 0208 3723 4400 7575 8509 8801 93...]\n5: 10|--[0334U 50549 81221 84439 C1751 C7902 G...]\n\n<===||Remove Redundancies||:::||\n1: 1|--[8]\n2: 9|--[01 27 36 44 49 93 E0 M1 T1]\n3: 8|--[031 254 333 385 926 G01 G21 L86]\n4: 6|--[0010 0208 3723 7575 G913 G929]\n5: 7|--[0334U 50549 C1751 C7902 G8416 K0824 S...]\n\n** Group 1:\n1: 1|--[8]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs(25) |>\n  split_lengths() |> \n  remove_redundant() |> \n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  3|--[0 B K]\n2: 18|--[01 03 04 05 27 31 32 33 43 49 50 80 8...]\n3: 25|--[020 120 192 235 302 308 350 356 432 6...]\n4: 25|--[0471 0625 0848 3336 3352 4754 5741 73...]\n5: 25|--[0419U 1100F 11011 1121F 2019F 25535 2...]\n\n<===||Remove Redundancies||:::||\n1:  3|--[0 B K]\n2: 14|--[27 31 32 33 43 49 50 80 82 90 A9 E2 G...]\n3: 19|--[120 192 235 302 308 350 356 615 647 6...]\n4: 18|--[4754 5741 7320 7685 7738 8140 8372 97...]\n5: 21|--[1100F 11011 1121F 2019F 25535 42999 5...]\n\n** Group 2:\n 1: 1|--[27]\n 2: 3|--[31 32 33]\n 3: 2|--[43 49]\n 4: 1|--[50]\n 5: 2|--[80 82]\n 6: 1|--[90]\n 7: 1|--[A9]\n 8: 1|--[E2]\n 9: 1|--[G8]\n10: 1|--[M1]\n```\n\n\n:::\n:::\n\n\n\n\n## [g3]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- all_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n<===||Remove Redundancies||:::||\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- codex::random_hcpcs(25) |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  4|--[0 A K Q]\n2: 22|--[01 03 20 25 26 29 38 45 47 50 52 53 7...]\n3: 25|--[050 051 070 209 272 285 315 317 325 3...]\n4: 25|--[0230 0313 2450 2642 3322 3778 4250 43...]\n5: 25|--[0551T 11047 26230 40510 41100 56800 5...]\n\n<===||Remove Redundancies||:::||\n1:  4|--[0 A K Q]\n2: 19|--[20 25 26 29 38 45 47 50 52 53 70 82 8...]\n3: 17|--[272 285 315 317 325 331 339 615 623 8...]\n4: 17|--[2450 3322 3778 4250 4388 4431 5512 61...]\n5: 15|--[11047 40510 41100 56800 56810 92355 C...]\n```\n\n\n:::\n\n```{.r .cell-code}\ngroup_hcpcs_3 <- function(x) {\n\n  x <- collapse::get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n\n  indices <- data.table::data.table(\n    code = x,\n    group_id = stringfish::sf_substr(x, 1, 2, nthreads = 4L),\n    a1 = take_at(x, 1),\n    a2 = take_at(x, 2),\n    a3 = take_at(x, 3),\n    i1 = data.table::rleid(take_at(x, 1))) |>\n    dplyr::mutate(i2 = data.table::rleid(a2), .by = a1) |>\n    dplyr::mutate(i3 = data.table::rleid(a3), .by = c(a1, a2))\n\n  orphans <- indices |>\n    dplyr::add_count(i1) |>\n    dplyr::filter((i2 + i3 + n) == 3) |>\n    dplyr::pull(code)\n\n  last <- indices[code %notin% orphans]\n\n  last <- dplyr::left_join(\n    last |> dplyr::count(group_id, a2),\n    last |> dplyr::count(group_id, name = \"g\"),\n    by = dplyr::join_by(group_id)) |>\n    dplyr::filter(n == g) |>\n    dplyr::right_join(last, by = dplyr::join_by(group_id, a2)) |>\n    dplyr::filter(!is.na(n))\n\n  rest <- indices |>\n    dplyr::filter(!code %in% c(orphans, dplyr::pull(last, code))) |>\n    fuimus::combine(group_id, columns = c(\"a1\", \"a2\"), sep = \"\")\n\n  grouped <- vctrs::vec_c(\n    as.list(orphans),\n    vctrs::vec_chop(last$code, sizes = vctrs::vec_run_sizes(last$group_id)),\n    vctrs::vec_chop(rest$code, sizes = vctrs::vec_run_sizes(rest$group_id))\n  )\n  grouped[collapse::radixorderv(collapse::vlengths(grouped), sort = TRUE)]\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- detect_az(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table::data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(as.integer(stringr::str_replace_all(chr, \"[A-Z]\", letters_2_numbers))))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  if (verbose) {\n    \n    cat(\"** Group 3:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nall_tests[nchar(all_tests) < 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  6|--[0 4 5 6 G J]\n2: 29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n<===||Remove Redundancies||:::||\n1:  6|--[0 4 5 6 G J]\n2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 9...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n<===||Remove Redundancies||:::||\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n** Group 3:\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  5|--[0 9 A H Q]\n2: 28|--[03 19 20 24 34 38 53 60 64 67 73 76 7...]\n3: 28|--[211 256 274 351 803 815 826 882 910 9...]\n4: 30|--[0121 0390 1144 2118 2135 3014 3138 31...]\n5: 30|--[0348U 0802T 27198 28470 29906 32551 4...]\n\n<===||Remove Redundancies||:::||\n1:  5|--[0 9 A H Q]\n2: 23|--[19 20 24 34 38 53 60 64 67 73 76 77 8...]\n3: 18|--[211 256 274 351 803 815 826 C75 E01 E...]\n4: 18|--[1144 2135 3014 3138 3162 3231 4550 47...]\n5: 13|--[27198 28470 29906 32551 4556F 51798 5...]\n\n** Group 3:\n 1: 1|--[211]\n 2: 1|--[256]\n 3: 1|--[274]\n 4: 1|--[351]\n 5: 1|--[803]\n 6: 1|--[815]\n 7: 1|--[826]\n 8: 1|--[C75]\n 9: 1|--[E01]\n10: 1|--[E06]\n11: 1|--[E26]\n12: 1|--[G05]\n13: 1|--[G84]\n14: 1|--[G89]\n15: 1|--[L32]\n16: 1|--[L69]\n17: 1|--[M11]\n18: 1|--[S93]\n```\n\n\n:::\n:::\n\n\n\n\n## [4]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- detect_az(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table::data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        stringr::str_replace_all(chr, \"[A-Z]\", letters_2_numbers)\n        )))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  if (verbose) {\n    \n    cat(\"** Group 4:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n<===||Remove Redundancies||:::||\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n** Group 4:\n1: 6|--[5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n<===||Remove Redundancies||:::||\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  5|--[5 7 8 P R]\n2: 26|--[00 01 02 07 23 33 47 53 80 86 95 96 9...]\n3: 30|--[100 146 212 213 256 372 404 491 534 5...]\n4: 28|--[2155 2160 2990 3301 3853 4053 4124 44...]\n5: 30|--[11771 17003 21073 27176 31360 32673 3...]\n\n<===||Remove Redundancies||:::||\n1:  5|--[5 7 8 P R]\n2: 23|--[00 01 02 07 23 33 47 95 96 99 A5 B4 D...]\n3: 17|--[100 146 212 213 256 372 404 491 674 9...]\n4: 15|--[2155 2160 2990 3853 4053 4124 4462 61...]\n5: 20|--[11771 17003 21073 27176 31360 32673 4...]\n\n** Group 4:\n 1: 1|--[2155]\n 2: 1|--[2160]\n 3: 1|--[2990]\n 4: 1|--[3853]\n 5: 1|--[4053]\n 6: 1|--[4124]\n 7: 1|--[4462]\n 8: 1|--[6134]\n 9: 1|--[6580]\n10: 1|--[A435]\n11: 1|--[G862]\n12: 1|--[J766]\n13: 1|--[K100]\n14: 1|--[Q999]\n15: 1|--[S944]\n```\n\n\n:::\n:::\n\n\n\n\n## [5]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- detect_az(x)\n  num <- x[!x %in% chr]\n  \n  num  <- data.table::data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        stringr::str_remove_all(chr, \"[A-Z]\")\n        )))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  if (verbose) {\n    \n    cat(\"** Group 5:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n<===||Remove Redundancies||:::||\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n** Group 5:\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n<===||Remove Redundancies||:::||\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |>\n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n<===||Remove Redundancies||:::||\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n** Group 5:\n 1: 2|--[90460 90461]\n 2: 1|--[90471]\n 3: 1|--[90474]\n 4: 1|--[90619]\n 5: 1|--[90633]\n 6: 1|--[90647]\n 7: 2|--[90670 90672]\n 8: 2|--[90681 90682]\n 9: 2|--[90687 90688]\n10: 2|--[90698 90700]\n11: 1|--[90710]\n12: 1|--[90713]\n13: 1|--[90716]\n14: 1|--[90723]\n15: 1|--[90740]\n16: 1|--[90743]\n17: 2|--[90747 90749]\n18: 1|--[90756]\n19: 1|--[A4467]\n20: 1|--[A9283]\n21: 1|--[A9285]\n22: 2|--[L1904 L1906]\n23: 1|--[L1920]\n24: 1|--[L1930]\n25: 1|--[L1945]\n26: 1|--[L1950]\n27: 2|--[L1970 L1971]\n28: 1|--[L2000]\n29: 1|--[L2005]\n30: 2|--[L2020 L2030]\n31: 1|--[L2036]\n32: 1|--[L2037]\n33: 2|--[L2108 L2112]\n34: 1|--[L2126]\n35: 1|--[L2128]\n36: 1|--[L2136]\n37: 1|--[L2180]\n38: 1|--[L2186]\n39: 1|--[L2188]\n40: 1|--[L2200]\n41: 1|--[L2210]\n42: 1|--[L2232]\n43: 1|--[L2240]\n44: 1|--[L2265]\n45: 1|--[L2270]\n46: 1|--[L2300]\n47: 1|--[L2310]\n48: 1|--[L2335]\n49: 1|--[L2340]\n50: 1|--[L2370]\n51: 1|--[L2375]\n52: 2|--[L2387 L2390]\n53: 1|--[L2405]\n54: 1|--[L2415]\n55: 1|--[L2492]\n56: 1|--[L2500]\n57: 1|--[L2525]\n58: 1|--[L2526]\n59: 1|--[L2550]\n60: 1|--[L2750]\n61: 1|--[L2768]\n62: 1|--[L2780]\n63: 1|--[L2800]\n64: 1|--[L2810]\n65: 1|--[L2840]\n66: 1|--[L2850]\n67: 1|--[L4010]\n68: 1|--[L4020]\n69: 1|--[L4045]\n70: 1|--[L4050]\n71: 2|--[L4070 L4080]\n72: 2|--[L4110 L4130]\n73: 1|--[L4350]\n74: 2|--[L4360 L4386]\n75: 2|--[L4387 L4396]\n76: 1|--[L4397]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  4|--[1 9 H P]\n2: 28|--[04 23 27 28 32 43 46 61 65 74 75 83 8...]\n3: 29|--[069 120 159 243 246 263 286 337 355 4...]\n4: 30|--[0021 1160 1203 1602 2124 2671 3104 35...]\n5: 30|--[0201U 0575F 0634T 24126 27842 38740 5...]\n\n<===||Remove Redundancies||:::||\n1:  4|--[1 9 H P]\n2: 27|--[04 23 27 28 32 43 46 61 65 74 75 83 8...]\n3: 14|--[069 243 246 263 337 355 443 519 670 6...]\n4: 19|--[0021 2124 2671 3104 3568 4000 6214 62...]\n5: 21|--[0201U 0575F 0634T 24126 38740 50780 5...]\n\n** Group 5:\n 1: 1|--[24126]\n 2: 1|--[38740]\n 3: 1|--[50780]\n 4: 1|--[55840]\n 5: 1|--[59897]\n 6: 1|--[64420]\n 7: 1|--[67917]\n 8: 1|--[70450]\n 9: 1|--[78190]\n10: 1|--[78315]\n11: 1|--[80422]\n12: 1|--[81194]\n13: 1|--[0201U]\n14: 1|--[0575F]\n15: 1|--[0634T]\n16: 1|--[D6055]\n17: 1|--[E1352]\n18: 1|--[G4016]\n19: 1|--[S0271]\n20: 1|--[S9439]\n21: 1|--[V2630]\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n# Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x, verbose = TRUE) {\n  \n    out <- list(\n      g1 = g1(x, verbose = verbose),\n      g2 = g2(x, verbose = verbose),\n      g3 = g3(x, verbose = verbose),\n      g4 = g4(x, verbose = verbose),\n      g5 = g5(x, verbose = verbose)\n      )\n  \n  if (verbose) {\n    return(invisible(out))\n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n<===||Remove Redundancies||:::||\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n** Group 1:\n1: 6|--[0 4 5 6 G J]\n\n** Group 2:\n1: 3|--[30 31 32]\n\n** Group 3:\n1: 9|--[721 722 723 724 725 726 727 728 729]\n\n** Group 5:\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n<===||Remove Redundancies||:::||\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n** Group 1:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:   6|--[0 4 5 6 G J]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n<===||Remove Redundancies||:::||\n1:  6|--[0 4 5 6 G J]\n2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 9...]\n3:  9|--[721 722 723 724 725 726 727 728 729]\n4:  0|--[]\n5:  0|--[]\n\n** Group 1:\n1: 6|--[0 4 5 6 G J]\n\n** Group 2:\n1: 1|--[15]\n2: 3|--[20 22 27]\n3: 6|--[30 31 32 34 35 36]\n4: 1|--[76]\n5: 2|--[92 95]\n6: 2|--[C7 C9]\n7: 1|--[E0]\n8: 1|--[S2]\n\n** Group 3:\n1: 9|--[721 722 723 724 725 726 727 728 729]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  5|--[5 A B C K]\n2: 27|--[03 07 20 22 27 31 35 47 50 58 64 65 6...]\n3: 30|--[017 159 214 301 355 365 424 432 438 5...]\n4: 30|--[0809 1000 2285 2303 2704 4627 5038 57...]\n5: 30|--[0416T 26442 26676 27043 33266 33471 3...]\n\n<===||Remove Redundancies||:::||\n1:  5|--[5 A B C K]\n2: 23|--[03 07 20 22 27 31 35 47 64 65 68 74 7...]\n3: 20|--[017 159 214 301 365 424 432 438 871 8...]\n4: 18|--[0809 1000 2303 4627 7026 7204 7776 86...]\n5: 22|--[0416T 26442 26676 33266 33471 33478 3...]\n\n** Group 1:\n1: 5|--[5 A B C K]\n\n** Group 2:\n 1: 2|--[03 07]\n 2: 3|--[20 22 27]\n 3: 2|--[31 35]\n 4: 1|--[47]\n 5: 3|--[64 65 68]\n 6: 2|--[74 76]\n 7: 1|--[96]\n 8: 3|--[G2 G8 G9]\n 9: 3|--[J0 J8 J9]\n10: 1|--[L7]\n11: 2|--[Q0 Q9]\n\n** Group 3:\n 1: 1|--[017]\n 2: 1|--[159]\n 3: 1|--[214]\n 4: 1|--[301]\n 5: 1|--[365]\n 6: 1|--[424]\n 7: 1|--[432]\n 8: 1|--[438]\n 9: 1|--[871]\n10: 1|--[881]\n11: 1|--[907]\n12: 1|--[913]\n13: 1|--[E06]\n14: 1|--[G04]\n15: 1|--[J14]\n16: 1|--[J25]\n17: 1|--[L59]\n18: 1|--[S24]\n19: 1|--[S40]\n20: 1|--[S81]\n\n** Group 4:\n 1: 1|--[0809]\n 2: 1|--[1000]\n 3: 1|--[2303]\n 4: 1|--[4627]\n 5: 1|--[7026]\n 6: 1|--[7204]\n 7: 1|--[7776]\n 8: 1|--[8696]\n 9: 1|--[8755]\n10: 1|--[D795]\n11: 1|--[G018]\n12: 1|--[G101]\n13: 1|--[G402]\n14: 1|--[L017]\n15: 1|--[L561]\n16: 1|--[M101]\n17: 1|--[Q415]\n18: 1|--[S019]\n\n** Group 5:\n 1: 1|--[26442]\n 2: 1|--[26676]\n 3: 1|--[33266]\n 4: 1|--[33471]\n 5: 1|--[33478]\n 6: 1|--[36831]\n 7: 1|--[43405]\n 8: 1|--[69100]\n 9: 1|--[82810]\n10: 1|--[94750]\n11: 1|--[95830]\n12: 1|--[0416T]\n13: 1|--[E0470]\n14: 1|--[E1230]\n15: 1|--[G0054]\n16: 1|--[G0101]\n17: 1|--[G0505]\n18: 1|--[J1560]\n19: 1|--[J2250]\n20: 1|--[L2830]\n21: 1|--[L5643]\n22: 1|--[T4530]\n```\n\n\n:::\n:::\n\n\n\n\n## Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  # if (x == paste0(ad, collapse = \"\")) return(\"[A-Z0-9]\")\n  \n  vec  <- rlang::set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[fuimus::splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(character(0))\n  \n  g1 <- collapse::get_elem(x, \"g1\")[[1]]\n  \n  re <- sort_order(g1) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(paste0(\"^\", re, \"{5}$\"))\n  \n  postfix <- ifelse(\n    stringfish::sf_grepl(re, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  glue::glue(\"^{re}{postfix}{{4}}$\")\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n<===||Remove Redundancies||:::||\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n** Group 1:\n1: 6|--[0 4 5 6 G J]\n\n** Group 2:\n1: 3|--[30 31 32]\n\n** Group 3:\n1: 9|--[721 722 723 724 725 726 727 728 729]\n\n** Group 5:\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[GJ04-6][0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n<===||Remove Redundancies||:::||\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n** Group 1:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[CEGS0-35-79][0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^0[A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(LETTERS[1:5], 0:9)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^A[0-9]{4}$\n```\n\n\n:::\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(character(0))\n  \n  vec <- stringr::str_split_fixed(x, \"\", max_vlength(x)) |> \n    as.data.frame() |> \n    purrr::map(unique_narm) |> \n    purrr::map(sort_order) |>\n    purrr::map(reduce_runs)\n  \n  multi <- unname(nchar(vec) > 1)\n  \n  nobrack <- stringr::str_detect(vec[multi], \"\\\\[|\\\\]\", TRUE)\n  \n  vec[multi] <- ifelse(any(nobrack), purrr::map_chr(vec[multi], \\(x) paste0(\"[\", x, \"]\")), vec[multi])\n\n  paste0(purrr::list_c(vec), collapse = \"\")\n}\n```\n:::\n\n\n\n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- function(x, n) {\n  \n  if (empty(x)) return(character(0))\n  \n  postfix <- ifelse(\n    stringfish::sf_grepl(\n      x, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \n    \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- data.table::fcase(\n    n == 0, paste0(\"^\", x, \"$\"),                \n    n == 1, paste0(\"^\", x, postfix, \"$\"),\n    default = paste0(\"^\", x, postfix, \"{\", n, \"}$\"))\n    \n  paste0(x , collapse = \"\")\n}\n\nvrg <- vec_to_regex\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = purrr::map_chr(x$g2, p2) |> purrr::map_chr(vrg, n = 3),\n    g3 = purrr::map_chr(x$g3, p2) |> purrr::map_chr(vrg, n = 2),\n    g4 = purrr::map_chr(x$g4, p2) |> purrr::map_chr(vrg, n = 1),\n    g5 = purrr::map_chr(x$g5, p2) |> purrr::map_chr(vrg, n = 0)\n  )\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:   0|--[]\n2:   0|--[]\n3:  55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n<===||Remove Redundancies||:::||\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  7|--[5202 5203 5204 5205 5206 5207 5208]\n5:  0|--[]\n\n** Group 3:\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n\n** Group 4:\n1: 7|--[5202 5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\ncharacter(0)\n\n$g2\ncharacter(0)\n\n$g3\n [1] \"^02[12][A-Z0-9]{2}$\"  \"^02[67][A-Z0-9]{2}$\"  \"^03[23][A-Z0-9]{2}$\" \n [4] \"^04[24][A-Z0-9]{2}$\"  \"^050[A-Z0-9]{2}$\"     \"^157[A-Z0-9]{2}$\"    \n [7] \"^209[A-Z0-9]{2}$\"     \"^225[A-Z0-9]{2}$\"     \"^271[A-Z0-9]{2}$\"    \n[10] \"^308[A-Z0-9]{2}$\"     \"^312[A-Z0-9]{2}$\"     \"^326[A-Z0-9]{2}$\"    \n[13] \"^34[78][A-Z0-9]{2}$\"  \"^355[A-Z0-9]{2}$\"     \"^362[A-Z0-9]{2}$\"    \n[16] \"^50[35][A-Z0-9]{2}$\"  \"^544[A-Z0-9]{2}$\"     \"^55[23][A-Z0-9]{2}$\" \n[19] \"^58[5-9][A-Z0-9]{2}$\" \"^61[02][A-Z0-9]{2}$\"  \"^630[A-Z0-9]{2}$\"    \n[22] \"^64[46][A-Z0-9]{2}$\"  \"^72[1-9][A-Z0-9]{2}$\" \"^765[A-Z0-9]{2}$\"    \n[25] \"^92[0-2][A-Z0-9]{2}$\" \"^958[A-Z0-9]{2}$\"     \"^C75[0-9]{2}$\"       \n[28] \"^C97[0-9]{2}$\"        \"^E06[0-9]{2}$\"        \"^G0[24][0-9]{2}$\"    \n[31] \"^S23[0-9]{2}$\"       \n\n$g4\n[1] \"^520[2-8][A-Z0-9]$\"\n\n$g5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n<===||Remove Redundancies||:::||\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n** Group 1:\n1: 6|--[0 4 5 6 G J]\n\n** Group 2:\n1: 3|--[30 31 32]\n\n** Group 3:\n1: 9|--[721 722 723 724 725 726 727 728 729]\n\n** Group 5:\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^[GJ04-6][0-9]{4}$\n\n$g2\n[1] \"^3[0-2][A-Z0-9]{3}$\"\n\n$g3\n[1] \"^72[1-9][A-Z0-9]{2}$\"\n\n$g4\ncharacter(0)\n\n$g5\n[1] \"^9201[5-9]$\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n<===||Remove Redundancies||:::||\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n** Group 1:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^[CEGS0-35-79][0-9]{4}$\n\n$g2\ncharacter(0)\n\n$g3\ncharacter(0)\n\n$g4\ncharacter(0)\n\n$g5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\n# long_test2[nchar(long_test2) == 4]\n\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n<===||Remove Redundancies||:::||\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n** Group 5:\n 1: 2|--[90460 90461]\n 2: 1|--[90471]\n 3: 1|--[90474]\n 4: 1|--[90619]\n 5: 1|--[90633]\n 6: 1|--[90647]\n 7: 2|--[90670 90672]\n 8: 2|--[90681 90682]\n 9: 2|--[90687 90688]\n10: 2|--[90698 90700]\n11: 1|--[90710]\n12: 1|--[90713]\n13: 1|--[90716]\n14: 1|--[90723]\n15: 1|--[90740]\n16: 1|--[90743]\n17: 2|--[90747 90749]\n18: 1|--[90756]\n19: 1|--[A4467]\n20: 1|--[A9283]\n21: 1|--[A9285]\n22: 2|--[L1904 L1906]\n23: 1|--[L1920]\n24: 1|--[L1930]\n25: 1|--[L1945]\n26: 1|--[L1950]\n27: 2|--[L1970 L1971]\n28: 1|--[L2000]\n29: 1|--[L2005]\n30: 2|--[L2020 L2030]\n31: 1|--[L2036]\n32: 1|--[L2037]\n33: 2|--[L2108 L2112]\n34: 1|--[L2126]\n35: 1|--[L2128]\n36: 1|--[L2136]\n37: 1|--[L2180]\n38: 1|--[L2186]\n39: 1|--[L2188]\n40: 1|--[L2200]\n41: 1|--[L2210]\n42: 1|--[L2232]\n43: 1|--[L2240]\n44: 1|--[L2265]\n45: 1|--[L2270]\n46: 1|--[L2300]\n47: 1|--[L2310]\n48: 1|--[L2335]\n49: 1|--[L2340]\n50: 1|--[L2370]\n51: 1|--[L2375]\n52: 2|--[L2387 L2390]\n53: 1|--[L2405]\n54: 1|--[L2415]\n55: 1|--[L2492]\n56: 1|--[L2500]\n57: 1|--[L2525]\n58: 1|--[L2526]\n59: 1|--[L2550]\n60: 1|--[L2750]\n61: 1|--[L2768]\n62: 1|--[L2780]\n63: 1|--[L2800]\n64: 1|--[L2810]\n65: 1|--[L2840]\n66: 1|--[L2850]\n67: 1|--[L4010]\n68: 1|--[L4020]\n69: 1|--[L4045]\n70: 1|--[L4050]\n71: 2|--[L4070 L4080]\n72: 2|--[L4110 L4130]\n73: 1|--[L4350]\n74: 2|--[L4360 L4386]\n75: 2|--[L4387 L4396]\n76: 1|--[L4397]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\ncharacter(0)\n\n$g2\ncharacter(0)\n\n$g3\ncharacter(0)\n\n$g4\ncharacter(0)\n\n$g5\n [1] \"^9046[01]$\"       \"^90471$\"          \"^90474$\"          \"^90619$\"         \n [5] \"^90633$\"          \"^90647$\"          \"^9067[02]$\"       \"^9068[12]$\"      \n [9] \"^9068[78]$\"       \"^90[67][67][67]$\" \"^90710$\"          \"^90713$\"         \n[13] \"^90716$\"          \"^90723$\"          \"^90740$\"          \"^90743$\"         \n[17] \"^9074[79]$\"       \"^90756$\"          \"^A4467$\"          \"^A9283$\"         \n[21] \"^A9285$\"          \"^L190[46]$\"       \"^L1920$\"          \"^L1930$\"         \n[25] \"^L1945$\"          \"^L1950$\"          \"^L197[01]$\"       \"^L2000$\"         \n[29] \"^L2005$\"          \"^L20[23]0$\"       \"^L2036$\"          \"^L2037$\"         \n[33] \"^L21[01][01]$\"    \"^L2126$\"          \"^L2128$\"          \"^L2136$\"         \n[37] \"^L2180$\"          \"^L2186$\"          \"^L2188$\"          \"^L2200$\"         \n[41] \"^L2210$\"          \"^L2232$\"          \"^L2240$\"          \"^L2265$\"         \n[45] \"^L2270$\"          \"^L2300$\"          \"^L2310$\"          \"^L2335$\"         \n[49] \"^L2340$\"          \"^L2370$\"          \"^L2375$\"          \"^L23[89][89]$\"   \n[53] \"^L2405$\"          \"^L2415$\"          \"^L2492$\"          \"^L2500$\"         \n[57] \"^L2525$\"          \"^L2526$\"          \"^L2550$\"          \"^L2750$\"         \n[61] \"^L2768$\"          \"^L2780$\"          \"^L2800$\"          \"^L2810$\"         \n[65] \"^L2840$\"          \"^L2850$\"          \"^L4010$\"          \"^L4020$\"         \n[69] \"^L4045$\"          \"^L4050$\"          \"^L40[78]0$\"       \"^L41[13]0$\"      \n[73] \"^L4350$\"          \"^L43[68][68]$\"    \"^L43[89][89]$\"    \"^L4397$\"         \n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:  5|--[1 3 7 P U]\n2: 27|--[00 01 03 04 05 15 19 27 29 50 51 55 6...]\n3: 30|--[100 214 228 272 334 339 360 522 525 6...]\n4: 30|--[0093 0234 0239 0264 0518 1576 2456 32...]\n5: 30|--[0714T 15157 23655 25810 27326 28047 2...]\n\n<===||Remove Redundancies||:::||\n1:  5|--[1 3 7 P U]\n2: 23|--[00 01 03 04 05 27 29 50 51 55 60 88 9...]\n3: 19|--[214 228 522 525 688 803 844 950 959 A...]\n4: 15|--[0234 0239 0264 2456 4083 4500 5856 64...]\n5: 17|--[0714T 23655 25810 28047 28299 57421 6...]\n\n** Group 1:\n1: 5|--[1 3 7 P U]\n\n** Group 2:\n 1: 5|--[00 01 03 04 05]\n 2: 2|--[27 29]\n 3: 3|--[50 51 55]\n 4: 1|--[60]\n 5: 1|--[88]\n 6: 1|--[96]\n 7: 1|--[A6]\n 8: 2|--[C1 C9]\n 9: 2|--[E1 E2]\n10: 1|--[G9]\n11: 1|--[J1]\n12: 1|--[K0]\n13: 1|--[L3]\n14: 1|--[S2]\n\n** Group 3:\n 1: 1|--[214]\n 2: 1|--[228]\n 3: 1|--[522]\n 4: 1|--[525]\n 5: 1|--[688]\n 6: 1|--[803]\n 7: 1|--[844]\n 8: 1|--[950]\n 9: 1|--[959]\n10: 1|--[A43]\n11: 1|--[C75]\n12: 1|--[E06]\n13: 1|--[G21]\n14: 1|--[G84]\n15: 1|--[J33]\n16: 1|--[J75]\n17: 1|--[L06]\n18: 1|--[L66]\n19: 1|--[M11]\n\n** Group 4:\n 1: 1|--[0234]\n 2: 1|--[0239]\n 3: 1|--[0264]\n 4: 1|--[2456]\n 5: 1|--[4083]\n 6: 1|--[4500]\n 7: 1|--[5856]\n 8: 1|--[6474]\n 9: 1|--[9259]\n10: 1|--[A420]\n11: 1|--[E085]\n12: 1|--[J735]\n13: 1|--[J924]\n14: 1|--[L553]\n15: 1|--[S013]\n\n** Group 5:\n 1: 1|--[23655]\n 2: 1|--[25810]\n 3: 1|--[28047]\n 4: 1|--[28299]\n 5: 1|--[57421]\n 6: 1|--[61333]\n 7: 1|--[63702]\n 8: 1|--[64912]\n 9: 1|--[80179]\n10: 1|--[82965]\n11: 1|--[89356]\n12: 1|--[93272]\n13: 1|--[0714T]\n14: 1|--[G0180]\n15: 1|--[H2032]\n16: 1|--[Q4014]\n17: 1|--[Q4149]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^PU137[0-9]{4}$\n\n$g2\n [1] \"^0[013-5][A-Z0-9]{3}$\" \"^2[79][A-Z0-9]{3}$\"    \"^5[015][A-Z0-9]{3}$\"  \n [4] \"^60[A-Z0-9]{3}$\"       \"^88[A-Z0-9]{3}$\"       \"^96[A-Z0-9]{3}$\"      \n [7] \"^A6[0-9]{3}$\"          \"^C[19][0-9]{3}$\"       \"^E[12][0-9]{3}$\"      \n[10] \"^G9[0-9]{3}$\"          \"^J1[0-9]{3}$\"          \"^K0[0-9]{3}$\"         \n[13] \"^L3[0-9]{3}$\"          \"^S2[0-9]{3}$\"         \n\n$g3\n [1] \"^214[A-Z0-9]{2}$\" \"^228[A-Z0-9]{2}$\" \"^522[A-Z0-9]{2}$\" \"^525[A-Z0-9]{2}$\"\n [5] \"^688[A-Z0-9]{2}$\" \"^803[A-Z0-9]{2}$\" \"^844[A-Z0-9]{2}$\" \"^950[A-Z0-9]{2}$\"\n [9] \"^959[A-Z0-9]{2}$\" \"^A43[0-9]{2}$\"    \"^C75[0-9]{2}$\"    \"^E06[0-9]{2}$\"   \n[13] \"^G21[0-9]{2}$\"    \"^G84[0-9]{2}$\"    \"^J33[0-9]{2}$\"    \"^J75[0-9]{2}$\"   \n[17] \"^L06[0-9]{2}$\"    \"^L66[0-9]{2}$\"    \"^M11[0-9]{2}$\"   \n\n$g4\n [1] \"^0234[A-Z0-9]$\" \"^0239[A-Z0-9]$\" \"^0264[A-Z0-9]$\" \"^2456[A-Z0-9]$\"\n [5] \"^4083[A-Z0-9]$\" \"^4500[A-Z0-9]$\" \"^5856[A-Z0-9]$\" \"^6474[A-Z0-9]$\"\n [9] \"^9259[A-Z0-9]$\" \"^A420[0-9]$\"    \"^E085[0-9]$\"    \"^J735[0-9]$\"   \n[13] \"^J924[0-9]$\"    \"^L553[0-9]$\"    \"^S013[0-9]$\"   \n\n$g5\n [1] \"^23655$\" \"^25810$\" \"^28047$\" \"^28299$\" \"^57421$\" \"^61333$\" \"^63702$\"\n [8] \"^64912$\" \"^80179$\" \"^82965$\" \"^89356$\" \"^93272$\" \"^0714T$\" \"^G0180$\"\n[15] \"^H2032$\" \"^Q4014$\" \"^Q4149$\"\n```\n\n\n:::\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x, verbose = TRUE) {\n  x |> \n    split_lengths(verbose = verbose) |> \n    remove_redundant(verbose = verbose) |> \n    process_groups(verbose = verbose) |> \n    reduce_groups() |> \n    unlist(use.names = FALSE) |> \n    glue::glue_collapse(sep = \"|\")\n}\n\nlong_test2[nchar(long_test2) > 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\" \"0221T\" \"0222T\" \"0263T\"\n [10] \"0265T\" \"0266T\" \"0269T\" \"0274T\" \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\"\n [19] \"0445T\" \"0506T\" \"0507T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\"\n [28] \"22514\" \"22515\" \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\"\n [37] \"32673\" \"34713\" \"34714\" \"34715\" \"34716\" \"34717\" \"36221\" \"34812\" \"34820\"\n [46] \"34833\" \"34834\" \"35572\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\"\n [55] \"55300\" \"58575\" \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\"\n [64] \"58920\" \"58925\" \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\"\n [73] \"63044\" \"63045\" \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\"\n [82] \"64492\" \"64494\" \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\"\n [91] \"92083\" \"92132\" \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\"\n[100] \"92229\" \"92235\" \"92240\" \"92242\" \"95870\" \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n[109] \"C9771\" \"E0675\" \"G0279\" \"G0412\" \"G0413\" \"G0414\" \"G0415\" \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\n\nmedrex(long_test2[nchar(long_test2) > 4])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n*  Split By Lengths:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n<===||Remove Redundancies||:::||\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n** Group 5:\n 1: 1|--[15777]\n 2: 1|--[20939]\n 3: 6|--[22510 22511 22512 22513 22514 22515]\n 4: 2|--[22526 22527]\n 5: 2|--[27197 27198]\n 6: 2|--[30801 30802]\n 7: 1|--[31231]\n 8: 1|--[32673]\n 9: 5|--[34713 34714 34715 34716 34717]\n10: 1|--[34812]\n11: 1|--[34820]\n12: 2|--[34833 34834]\n13: 1|--[35572]\n14: 1|--[36221]\n15: 1|--[50300]\n16: 1|--[50540]\n17: 1|--[54420]\n18: 1|--[54430]\n19: 1|--[55200]\n20: 1|--[55250]\n21: 1|--[55300]\n22: 1|--[58575]\n23: 1|--[58600]\n24: 1|--[58605]\n25: 1|--[58700]\n26: 1|--[58720]\n27: 1|--[58800]\n28: 1|--[58805]\n29: 1|--[58900]\n30: 1|--[58920]\n31: 1|--[58925]\n32: 1|--[58940]\n33: 1|--[58943]\n34: 2|--[61000 61001]\n35: 1|--[61253]\n36: 1|--[63035]\n37: 6|--[63043 63044 63045 63046 63047 63048]\n38: 1|--[64421]\n39: 1|--[64480]\n40: 1|--[64484]\n41: 4|--[64491 64492 64494 64495]\n42: 2|--[64634 64636]\n43: 1|--[76514]\n44: 1|--[92025]\n45: 3|--[92081 92082 92083]\n46: 3|--[92132 92133 92134]\n47: 1|--[92145]\n48: 2|--[92201 92202]\n49: 3|--[92227 92228 92229]\n50: 1|--[92235]\n51: 2|--[92240 92242]\n52: 1|--[95870]\n53: 8|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n54: 3|--[0263T 0265T 0266T]\n55: 1|--[0269T]\n56: 2|--[0274T 0275T]\n57: 1|--[0329T]\n58: 1|--[0330T]\n59: 1|--[0422T]\n60: 4|--[0444T 0445T 0506T 0507T]\n61: 1|--[C7501]\n62: 4|--[C7502 C7504 C7505 C9771]\n63: 1|--[E0675]\n64: 1|--[G0279]\n65: 1|--[G0412]\n66: 2|--[G0413 G0414]\n67: 2|--[G0415 S2342]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^15777$|^20939$|^2251[0-5]$|^2252[67]$|^2719[78]$|^3080[12]$|^31231$|^32673$|^3471[3-7]$|^34812$|^34820$|^3483[34]$|^35572$|^36221$|^50300$|^50540$|^54420$|^54430$|^55200$|^55250$|^55300$|^58575$|^58600$|^58605$|^58700$|^58720$|^58800$|^58805$|^58900$|^58920$|^58925$|^58940$|^58943$|^6100[01]$|^61253$|^63035$|^6304[3-8]$|^64421$|^64480$|^64484$|^6449[1245]$|^6463[46]$|^76514$|^92025$|^9208[1-3]$|^9213[2-4]$|^92145$|^9220[12]$|^9222[7-9]$|^92235$|^9224[02]$|^95870$|^02[12][12]T$|^026[356]T$|^0269T$|^027[45]T$|^0329T$|^0330T$|^0422T$|^0[45][45][45]T$|^C7501$|^C[79][79][79][79]$|^E0675$|^G0279$|^G0412$|^G041[34]$|^[GS][GS][GS][GS][GS]$\n```\n\n\n:::\n\n```{.r .cell-code}\nvctrs::vec_slice(\n  hcpcs, \n  stringfish::sf_grepl(\n    hcpcs, \n    medrex(\n      long_test2[nchar(long_test2) > 4],\n      verbose = FALSE\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0211T\" \"0212T\" \"0221T\" \"0222T\" \"0263T\" \"0265T\" \"0266T\" \"0269T\" \"0274T\"\n [10] \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\" \"0445T\" \"0544T\" \"0545T\" \"0554T\"\n [19] \"0555T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n [28] \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\" \"32673\" \"34713\"\n [37] \"34714\" \"34715\" \"34716\" \"34717\" \"34812\" \"34820\" \"34833\" \"34834\" \"35572\"\n [46] \"36221\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\" \"55300\" \"58575\"\n [55] \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\" \"58920\" \"58925\"\n [64] \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\" \"63044\" \"63045\"\n [73] \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\" \"64492\" \"64494\"\n [82] \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\" \"92083\" \"92132\"\n [91] \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\" \"92229\" \"92235\"\n[100] \"92240\" \"92242\" \"95870\" \"C7501\" \"C9777\" \"C9779\" \"C9797\" \"E0675\" \"G0279\"\n[109] \"G0412\" \"G0413\" \"G0414\"\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0)_, _cheapr(v.0.9.9)_, _collapse(v.2.0.16)_, _tidyfast(v.0.4.0)_, _data.table(v.1.16.99)_, _re2r(v.1.0.0)_, _re2(v.0.1.3)_, _stringfish(v.0.16.0)_, _fuimus(v.0.0.2)_, _emphatic(v.0.1.8)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_gtable(v.0.3.6)_, _xfun(v.0.48)_, _htmlwidgets(v.1.6.4)_, _RApiSerialize(v.0.1.4)_, _tzdb(v.0.4.0)_, _tools(v.4.4.1)_, _generics(v.0.1.3)_, _parallel(v.4.4.1)_, _fansi(v.1.0.6)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _lifecycle(v.1.0.4)_, _textshaping(v.0.4.0)_, _codex(v.0.0.0.9000)_, _munsell(v.0.5.1)_, _qs(v.0.27.2)_, _htmltools(v.0.5.8.1)_, _yaml(v.2.3.10)_, _pillar(v.1.9.0)_, _crayon(v.1.5.3)_, _tidyselect(v.1.2.1)_, _digest(v.0.6.37)_, _stringi(v.1.8.4)_, _pander(v.0.6.5)_, _pins(v.1.4.0)_, _rprojroot(v.2.0.4)_, _fastmap(v.1.2.0)_, _grid(v.4.4.1)_, _here(v.1.0.1)_, _colorspace(v.2.1-1)_, _magrittr(v.2.0.3)_, _utf8(v.1.2.4)_, _withr(v.3.0.2)_, _scales(v.1.3.0)_, _rappdirs(v.0.3.3)_, _cpp11(v.0.5.0)_, _timechange(v.0.3.0)_, _rmarkdown(v.2.28)_, _ragg(v.1.3.3)_, _hms(v.1.1.3)_, _evaluate(v.1.0.1)_, _knitr(v.1.48)_, _Rcpp(v.1.0.13)_, _glue(v.1.8.0)_, _rstudioapi(v.0.17.1)_, _jsonlite(v.1.8.9)_, _R6(v.2.5.1)_, _northstar(v.0.0.7)_, _systemfonts(v.1.1.0)_ and _fs(v.1.6.5)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}