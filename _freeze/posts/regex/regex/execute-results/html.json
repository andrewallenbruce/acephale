{
  "hash": "8859d44535d719fb7dc5802854b6f08d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>               Count                                   Regex</span><br/>All           <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/>Level I       <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>Category I    <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/>Category II   <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>Level II      <span style='color:#ffffff;'><span style='background-color:#333333;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n# TODO\n\n   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [ ] `process_groups()`\n   -   [X] `g1()`\n   -   [X] `g2()`\n   -   [ ] `g3()`\n   -   [ ] `g4()`\n   -   [ ] `g5()`\n-   [ ] `reduce_groups()`\n\n# Helpers\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nempty <- \\(x) vctrs::vec_is_empty(x)\n\n# Returns character at position `i`\ntakei <- \\(x, i = 1) stringfish::sf_substr(x, start = i, stop = i, nthreads = 4L)\n\nchop <- \\(v, g) vctrs::vec_chop(v, sizes = vctrs::vec_run_sizes(g))\n```\n:::\n\n\n\n\n\n## `p0()`\n\n`paste0()` that collapses wrapper\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np0 <- \\(..., sep = \"\") paste0(..., collapse = sep)\n\np0(c(LETTERS, 0:9, letters))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\"\n```\n\n\n:::\n:::\n\n\n\n\n## `grabaz()`\n\nExtracts vector if it contains ONE uppercase letter\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrabaz <- \\(x) { \n  \n  x[stringfish::sf_grepl(x, \"[A-Z]{1}\", nthreads = 4L)] \n\n}\n\ngrabaz(c(LETTERS, 0:9, letters))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n```\n\n\n:::\n:::\n\n\n\n\n## `sorder()`\n\nSorts vector, then relocates letters to the front\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsorder <- \\(x) {\n  \n  st <- stringr::str_sort(x)\n  \n  az <- grabaz(st)\n  \n  p0(p0(az), p0(st[!st %in% az]))\n\n}\n\nsorder(c(0:9, LETTERS))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n```\n\n\n:::\n:::\n\n\n\n\n## View\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff <- \\(x) stringr::str_trunc(string = x, width = 40, side = \"right\")\n\ncutoff(p0(LETTERS, LETTERS))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRS...\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwrap <- \\(x) stringr::str_wrap(string = x, width = 40, indent = 5)\n\nwrap(p0(LETTERS, LETTERS))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"     AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYZZ\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview <- \\(x) {\n  \n  idx  <- seq_along(x)\n  len  <- collapse::vlengths(x, use.names = FALSE)\n  tree <- unname(purrr::map_vec(x, p0, sep = \" \")) |> purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"{format(idx)}: \", \n      \"{format(len)}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview_remove <- \\(x) {\n  \n  len  <- length(x)\n  tree <- unname(paste0(x, collapse = \" \")) |> \n    purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"Removed \", \n      \"{format(len, justify = 'left')}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n\n\n\n# Preprocessing\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x, verbose = TRUE) {\n  \n  stopifnot(is.character(x))\n  \n  x <- stringfish::sf_gsub(x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n    fuimus::uniq_rmna() |> \n    stringr::str_sort()\n  \n  l <- collapse::vlengths(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  if (verbose) {\n    \n    cat(\"   Split by Length:\", sep = \"\\n\")\n    # cat(\"\\n\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\ncodex::random_hcpcs_vec(n = 5) |> \n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 5|--[2 5 B M T]\n2: 5|--[25 51 72 81 C9]\n3: 5|--[007 241 312 811 A64]\n4: 5|--[0121 3326 G225 J145 L367]\n5: 5|--[21610 28570 86652 J7674 M1201]\n```\n\n\n:::\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Shortens `long` to length of `short` then\n# Returns characters in `long` that are not in `short`\n\ncontrast <- \\(long, short) {\n\n  end <- collapse::funique(\n    collapse::vlengths(\n      short, \n      use.names = FALSE))\n  \n  l2s <- stringfish::sf_substr(\n    long, \n    start = 1, \n    stop = end, \n    nthreads = 4L)\n  \n  long[!l2s %in% short]\n}\n\nx <- codex::random_hcpcs_vec(25) |> \n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[0 2 3 C E G H J M V]\n2: 20|--[00 01 27 30 35 40 43 44 46 96 99 E1 G...]\n3: 24|--[007 033 070 261 315 334 406 613 647 6...]\n4: 25|--[0086 0196 0775 2342 2756 2990 4144 47...]\n5: 25|--[1502F 28675 33976 35372 4011F 42300 4...]\n```\n\n\n:::\n\n```{.r .cell-code}\nx$x1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"0\" \"2\" \"3\" \"C\" \"E\" \"G\" \"H\" \"J\" \"M\" \"V\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx$x2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"00\" \"01\" \"27\" \"30\" \"35\" \"40\" \"43\" \"44\" \"46\" \"96\" \"99\" \"E1\" \"G0\" \"G4\" \"G6\"\n[16] \"G9\" \"K0\" \"L1\" \"L6\" \"S9\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncontrast(x$x2, x$x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"40\" \"43\" \"44\" \"46\" \"96\" \"99\" \"K0\" \"L1\" \"L6\" \"S9\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrr <- \\(x, y) {\n  \n  if (empty(x)) return(character(0))\n  \n  if (empty(y)) return(x)\n\n  contrast(long = x, short = y)\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nremove_redundant <- function(x, verbose = TRUE) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  if (verbose) {\n    \n    cat(\"   Remove Redundancies:\", sep = \"\\n\")\n    cat(view(out), sep = \"\\n\")\n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\ncodex::random_hcpcs_vec(25) |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[2 3 6 7 B F G K Q R]\n2: 18|--[19 22 26 44 55 65 76 77 78 81 86 87 E...]\n3: 25|--[151 160 233 271 274 278 317 338 424 4...]\n4: 25|--[1162 2712 2990 3164 3376 4320 6694 81...]\n5: 25|--[0120U 21145 21198 21811 22585 24505 2...]\n\n   Remove Redundancies:\n1: 10|--[2 3 6 7 B F G K Q R]\n2: 10|--[19 44 55 81 86 87 E0 E1 L6 M1]\n3:  8|--[151 160 424 431 961 J10 J90 S55]\n4: 11|--[1162 4320 A042 J089 J284 L011 L439 L5...]\n5:  5|--[0120U 56631 90680 A5114 L3650]\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlump <- function(x, threshold = 3) {\n  \n  stopifnot(is.numeric(x))\n\n  xo <- order(x)\n\n  xs <- x[xo]\n  \n  dlag <- abs(c(0, xs[-1] - xs[seq_along(xs) - 1]))\n\n  bi <- ifelse(dlag >= threshold, 1, 0)\n\n  id <- cumsum(bi) + 1\n  \n  id[xo]\n  \n}\n\ndata.table::data.table(\n  code = c(1, 1, 2, 5, 5 ,6 , 1, 12, 12),\n  group = lump(c(1, 1, 2, 5, 5 ,6 , 1, 12, 12))\n)\n```\n\n::: {.cell-output-display}\n|code |group |\n|:----|:-----|\n|1    |1     |\n|1    |1     |\n|2    |2     |\n|5    |1     |\n|5    |1     |\n|6    |2     |\n|1    |2     |\n|12   |3     |\n|12   |3     |\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nletters_2_numbers <- \\(x) {\n  \n  look <- rlang::set_names(seq_along(LETTERS), LETTERS)\n  unname(look[grabaz(x)])\n}\n\nletters_2_numbers(c(LETTERS, 0:9))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.panel-tabset}\n\n## [g1|g2]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x) {\n  \n  x <- collapse::get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  list(x)\n}\n\ng2 <- function(x) {\n  \n  x <- collapse::get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  collapse::rsplit(x, takei(x, 1), use.names = FALSE)\n}\n\ncodex::random_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[3 4 9 A C E K P Q S]\n2:  9|--[53 71 81 84 85 93 A0 E1 Q9]\n3: 10|--[026 275 644 696 865 C94 G09 J90 M11 Q99]\n4: 10|--[0341 5710 8349 8501 8633 8730 9301 95...]\n5: 10|--[27742 32851 37200 58540 81232 87206 9...]\n\n   Remove Redundancies:\n1: 10|--[3 4 9 A C E K P Q S]\n2:  5|--[53 71 81 84 85]\n3:  8|--[026 275 644 696 865 G09 J90 M11]\n4:  7|--[0341 5710 8349 8633 8730 J917 M128]\n5:  3|--[27742 58540 87206]\n\n1: 10|--[3 4 9 A C E K P Q S]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs_vec(25) |>\n  split_lengths() |> \n  remove_redundant() |>\n  g2() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[1 2 4 7 8 E G M P S]\n2: 19|--[00 05 12 19 20 33 47 59 61 63 67 80 A...]\n3: 25|--[011 103 119 295 326 436 444 473 815 8...]\n4: 25|--[0113 0186 1100 1182 2132 2706 3161 45...]\n5: 25|--[0661T 15276 24371 33330 33418 34833 3...]\n\n   Remove Redundancies:\n1: 10|--[1 2 4 7 8 E G M P S]\n2: 11|--[00 05 33 59 61 63 67 A9 C1 J8 L5]\n3:  8|--[011 326 C26 J17 J71 J73 L10 V52]\n4:  9|--[0186 3161 5725 6458 A435 J324 L262 L3...]\n5:  9|--[0661T 34833 3495F 3500F 36215 90875 9...]\n\n1: 2|--[00 05]\n2: 1|--[33]\n3: 1|--[59]\n4: 3|--[61 63 67]\n5: 1|--[A9]\n6: 1|--[C1]\n7: 1|--[J8]\n8: 1|--[L5]\n```\n\n\n:::\n:::\n\n\n\n\n## [g3]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x) {\n  \n  x <- get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(as.integer(str_replace_all(chr, \"[A-Z]\", letters_2_numbers))))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  out\n}\n\nall_tests[nchar(all_tests) < 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  6|--[0 4 5 6 G J]\n2: 29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n   Remove Redundancies:\n1:  6|--[0 4 5 6 G J]\n2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 9...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n   Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs_vec(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[0 4 C F G J K M R S]\n2: 25|--[15 27 28 30 33 36 58 59 67 69 78 88 8...]\n3: 28|--[010 019 157 276 282 332 368 825 863 8...]\n4: 30|--[0060 0217 2407 3376 3682 4125 5025 54...]\n5: 30|--[0017M 0569T 11772 21077 24342 24500 2...]\n\n   Remove Redundancies:\n1: 10|--[0 4 C F G J K M R S]\n2: 22|--[15 27 28 30 33 36 58 59 67 69 78 88 8...]\n3:  6|--[825 863 935 936 A95 T45]\n4: 13|--[2407 5025 5434 5740 6875 7054 7474 81...]\n5: 10|--[11772 21077 24342 24500 26490 77089 9...]\n\n1: 1|--[825]\n2: 1|--[863]\n3: 2|--[935 936]\n4: 1|--[A95]\n5: 1|--[T45]\n```\n\n\n:::\n:::\n\n\n\n\n## [4]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x) {\n  \n  x <- collapse::get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_replace_all(chr, \"[A-Z]\", letters_2_numbers)\n        )))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n   Remove Redundancies:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n1: 6|--[5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[1 5 7 8 F G J K M T]\n2: 10|--[00 20 26 47 66 86 87 93 E2 J7]\n3: 10|--[347 631 695 865 996 A44 G05 L59 S95 V27]\n4: 10|--[2738 7031 7302 8641 9917 A018 G979 G9...]\n5: 10|--[15121 50957 61343 81510 86485 86910 E...]\n\n   Remove Redundancies:\n1: 10|--[1 5 7 8 F G J K M T]\n2:  7|--[00 20 26 47 66 93 E2]\n3:  8|--[347 631 695 996 A44 L59 S95 V27]\n4:  4|--[2738 9917 A018 P901]\n5:  2|--[61343 E1810]\n\n1: 1|--[2738]\n2: 1|--[9917]\n3: 1|--[A018]\n4: 1|--[P901]\n```\n\n\n:::\n:::\n\n\n\n\n## [5]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x) {\n  \n  x <- collapse::get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num  <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_remove_all(chr, \"[A-Z]\")\n        )))\n  \n  # dchr <- as.integer(str_remove_all(chr, \"^[A-Z]|[A-Z]$\"))\n  # \n  # dchr <- ifelse(dchr %% 10 == 0, dchr + max(dchr), dchr)\n  # \n  # chr <- data.table(\n  #   code = chr, \n  #   lump = lump(dchr))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  out\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n   Remove Redundancies:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |>\n  split_lengths() |> \n  remove_redundant() |>\n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n   Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n 1: 2|--[90460 90461]\n 2: 1|--[90471]\n 3: 1|--[90474]\n 4: 1|--[90619]\n 5: 1|--[90633]\n 6: 1|--[90647]\n 7: 2|--[90670 90672]\n 8: 2|--[90681 90682]\n 9: 2|--[90687 90688]\n10: 2|--[90698 90700]\n11: 1|--[90710]\n12: 1|--[90713]\n13: 1|--[90716]\n14: 1|--[90723]\n15: 1|--[90740]\n16: 1|--[90743]\n17: 2|--[90747 90749]\n18: 1|--[90756]\n19: 1|--[A4467]\n20: 1|--[A9283]\n21: 1|--[A9285]\n22: 2|--[L1904 L1906]\n23: 1|--[L1920]\n24: 1|--[L1930]\n25: 1|--[L1945]\n26: 1|--[L1950]\n27: 2|--[L1970 L1971]\n28: 1|--[L2000]\n29: 1|--[L2005]\n30: 2|--[L2020 L2030]\n31: 1|--[L2036]\n32: 1|--[L2037]\n33: 2|--[L2108 L2112]\n34: 1|--[L2126]\n35: 1|--[L2128]\n36: 1|--[L2136]\n37: 1|--[L2180]\n38: 1|--[L2186]\n39: 1|--[L2188]\n40: 1|--[L2200]\n41: 1|--[L2210]\n42: 1|--[L2232]\n43: 1|--[L2240]\n44: 1|--[L2265]\n45: 1|--[L2270]\n46: 1|--[L2300]\n47: 1|--[L2310]\n48: 1|--[L2335]\n49: 1|--[L2340]\n50: 1|--[L2370]\n51: 1|--[L2375]\n52: 2|--[L2387 L2390]\n53: 1|--[L2405]\n54: 1|--[L2415]\n55: 1|--[L2492]\n56: 1|--[L2500]\n57: 1|--[L2525]\n58: 1|--[L2526]\n59: 1|--[L2550]\n60: 1|--[L2750]\n61: 1|--[L2768]\n62: 1|--[L2780]\n63: 1|--[L2800]\n64: 1|--[L2810]\n65: 1|--[L2840]\n66: 1|--[L2850]\n67: 1|--[L4010]\n68: 1|--[L4020]\n69: 1|--[L4045]\n70: 1|--[L4050]\n71: 2|--[L4070 L4080]\n72: 2|--[L4110 L4130]\n73: 1|--[L4350]\n74: 2|--[L4360 L4386]\n75: 2|--[L4387 L4396]\n76: 1|--[L4397]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[0 4 5 6 C E G H J K]\n2: 10|--[05 29 42 43 75 90 96 B4 G0 S8]\n3: 10|--[022 050 355 697 C90 G01 G87 G94 M11 Q41]\n4: 10|--[0095 0469 3129 3370 4241 4534 4810 93...]\n5: 10|--[21143 56620 81253 86344 A4604 A9531 C...]\n\n   Remove Redundancies:\n1: 10|--[0 4 5 6 C E G H J K]\n2:  6|--[29 75 90 96 B4 S8]\n3:  3|--[355 M11 Q41]\n4:  3|--[3129 3370 9361]\n5:  5|--[21143 81253 86344 A4604 A9531]\n\n1: 1|--[21143]\n2: 1|--[81253]\n3: 1|--[86344]\n4: 1|--[A4604]\n5: 1|--[A9531]\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n# Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  list(\n    g1 = g1(x),\n    g2 = g2(x),\n    g3 = g3(x),\n    g4 = g4(x),\n    g5 = g5(x)\n  )\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n   Remove Redundancies:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 1|--[c(\"0\", \"4\", \"5\", \"6\", \"G\", \"J\")]\n2: 1|--[c(\"30\", \"31\", \"32\")]\n3: 1|--[c(\"721\", \"722\", \"723\", \"724\", \"725\", ...]\n4: 0|--[]\n5: 1|--[c(\"92015\", \"92016\", \"92017\", \"92018\",...]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n1: 1|--[c(\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", ...]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:   6|--[0 4 5 6 G J]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1:  6|--[0 4 5 6 G J]\n2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 9...]\n3:  9|--[721 722 723 724 725 726 727 728 729]\n4:  0|--[]\n5:  0|--[]\n\n1: 1|--[c(\"0\", \"4\", \"5\", \"6\", \"G\", \"J\")]\n2: 8|--[15 c(\"20\", \"22\", \"27\") c(\"30\", \"31\", ...]\n3: 1|--[c(\"721\", \"722\", \"723\", \"724\", \"725\", ...]\n4: 0|--[]\n5: 0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |>\n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[3 5 6 7 A C E M S V]\n2:  9|--[36 73 85 86 C1 J7 J8 Q4 S0]\n3: 10|--[254 259 264 432 758 G91 J70 K06 M12 V23]\n4: 10|--[2155 3361 4415 8523 A506 E234 E239 J0...]\n5: 10|--[0345T 26121 29750 34702 58752 82370 8...]\n\n   Remove Redundancies:\n1: 10|--[3 5 6 7 A C E M S V]\n2:  5|--[85 86 J7 J8 Q4]\n3:  6|--[254 259 264 432 G91 K06]\n4:  5|--[2155 4415 J038 J145 L559]\n5:  7|--[0345T 26121 29750 82370 G9937 Q0485 T...]\n\n1: 1|--[c(\"3\", \"5\", \"6\", \"7\", \"A\", \"C\", \"E\", ...]\n2: 3|--[c(\"85\", \"86\") c(\"J7\", \"J8\") Q4]\n3: 6|--[254 259 264 432 G91 K06]\n4: 5|--[2155 4415 J038 J145 L559]\n5: 7|--[26121 29750 82370 0345T G9937 Q0485 T...]\n```\n\n\n:::\n:::\n\n\n\n\n## Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  if (x == paste0(ad, collapse = \"\")) return(\"[A-Z0-9]\")\n  \n  vec  <- rlang::set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[fuimus::splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(NULL)\n  \n  g1 <- collapse::get_elem(x, \"g1\")[[1]]\n  \n  re <- sorder(g1) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(p0(\"(^\", re, \"{5}$)\"))\n  \n  postfix <- ifelse(\n    stringfish::sf_grepl(re, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  return(p0(\"(^\", re, postfix, \"{4}$)\"))\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n   Remove Redundancies:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^0[A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(LETTERS[1:5], 0:9)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^A[0-9]{4}$)\"\n```\n\n\n:::\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(NULL)\n  \n  vecs <- stringr::str_split_fixed(\n    x, \"\", collapse::fmax(collapse::vlengths(x))) |> \n    as.data.frame()\n  \n  to_brackets <- vecs |>\n    purrr::map(fuimus::uniq_rmna) |>\n    purrr::map(sorder)\n  \n  to_vec <- to_brackets |>\n    purrr::map(reduce_runs)\n  \n  multi_chars <- unname(nchar(to_vec) > 1)\n  \n  nobrack <- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n  \n  to_vec[multi_chars] <- ifelse(\n    any(nobrack), \n    purrr::map_chr(to_vec[multi_chars], \\(x) p0(\"[\", x, \"]\")), \n    to_vec[multi_chars])\n\n  p0(purrr::list_c(to_vec))\n}\n```\n:::\n\n\n\n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvrg <- function(x, n) {\n  \n  if (is.null(x)) return(NULL)\n  \n  postfix <- ifelse(\n    stringfish::sf_grepl(\n      x, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \n    \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- ifelse(\n    n == 0, \n    p0(\"(^\", x, \"$)\"),                \n    p0(\"(^\", x, postfix, \"{\", n, \"}$)\")) \n    \n  p0(x , sep = \"|\")\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = map_vec(x$g2, p2) |> vrg(3),\n    g3 = map_vec(x$g3, p2) |> vrg(2),\n    g4 = map_vec(x$g4, p2) |> vrg(1),\n    g5 = map_vec(x$g5, p2) |> vrg(0)\n  ) |> \n    compact() |> \n    p0(sep = \"|\")\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:   0|--[]\n2:   0|--[]\n3:  55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  7|--[5202 5203 5204 5205 5206 5207 5208]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][A-Z0-9]{2}$)(^02[67][A-Z0-9]{2}$)(^03[23][A-Z0-9]{2}$)(^04[24][A-Z0-9]{2}$)(^050[A-Z0-9]{2}$)(^157[A-Z0-9]{2}$)(^209[A-Z0-9]{2}$)(^225[A-Z0-9]{2}$)(^271[A-Z0-9]{2}$)(^308[A-Z0-9]{2}$)(^312[A-Z0-9]{2}$)(^326[A-Z0-9]{2}$)(^34[78][A-Z0-9]{2}$)(^355[A-Z0-9]{2}$)(^362[A-Z0-9]{2}$)(^50[35][A-Z0-9]{2}$)(^544[A-Z0-9]{2}$)(^55[23][A-Z0-9]{2}$)(^58[5-9][A-Z0-9]{2}$)(^61[02][A-Z0-9]{2}$)(^630[A-Z0-9]{2}$)(^64[46][A-Z0-9]{2}$)(^72[1-9][A-Z0-9]{2}$)(^765[A-Z0-9]{2}$)(^92[0-2][A-Z0-9]{2}$)(^958[A-Z0-9]{2}$)(^C75[0-9]{2}$)(^C97[0-9]{2}$)(^E06[0-9]{2}$)(^G0[24][0-9]{2}$)(^S23[0-9]{2}$)|(^520[2-8][A-Z0-9]{1}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n   Remove Redundancies:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][0-9]{4}$)|(^3[0-2][A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)|(^9201[5-9]$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 4] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5:  0|--[]\n\n   Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][12][A-Z0-9]{1}$)(^026[356][A-Z0-9]{1}$)(^0269[A-Z0-9]{1}$)(^027[45][A-Z0-9]{1}$)(^03[23][23][A-Z0-9]{1}$)(^0422[A-Z0-9]{1}$)(^044[45][A-Z0-9]{1}$)(^050[67][A-Z0-9]{1}$)(^1577[A-Z0-9]{1}$)(^2093[A-Z0-9]{1}$)(^225[12][A-Z0-9]{1}$)(^2719[A-Z0-9]{1}$)(^3080[A-Z0-9]{1}$)(^3123[A-Z0-9]{1}$)(^3267[A-Z0-9]{1}$)(^3471[A-Z0-9]{1}$)(^348[1-3][A-Z0-9]{1}$)(^3557[A-Z0-9]{1}$)(^3622[A-Z0-9]{1}$)(^5030[A-Z0-9]{1}$)(^5054[A-Z0-9]{1}$)(^544[23][A-Z0-9]{1}$)(^5520[A-Z0-9]{1}$)(^5525[A-Z0-9]{1}$)(^5530[A-Z0-9]{1}$)(^5857[A-Z0-9]{1}$)(^5860[A-Z0-9]{1}$)(^587[02][A-Z0-9]{1}$)(^5880[A-Z0-9]{1}$)(^589[024][A-Z0-9]{1}$)(^6100[A-Z0-9]{1}$)(^6125[A-Z0-9]{1}$)(^630[34][A-Z0-9]{1}$)(^6442[A-Z0-9]{1}$)(^644[89][A-Z0-9]{1}$)(^6463[A-Z0-9]{1}$)(^7651[A-Z0-9]{1}$)(^9202[A-Z0-9]{1}$)(^9208[A-Z0-9]{1}$)(^921[34][A-Z0-9]{1}$)(^922[02-4][A-Z0-9]{1}$)(^9587[A-Z0-9]{1}$)(^C750[0-9]{1}$)(^C977[0-9]{1}$)(^E067[0-9]{1}$)(^G027[0-9]{1}$)(^G041[0-9]{1}$)(^S234[0-9]{1}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n   Remove Redundancies:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^9046[01]$)(^90471$)(^90474$)(^90619$)(^90633$)(^90647$)(^9067[02]$)(^9068[12]$)(^9068[78]$)(^90[67][67][67]$)(^90710$)(^90713$)(^90716$)(^90723$)(^90740$)(^90743$)(^9074[79]$)(^90756$)(^A4467$)(^A9283$)(^A9285$)(^L190[46]$)(^L1920$)(^L1930$)(^L1945$)(^L1950$)(^L197[01]$)(^L2000$)(^L2005$)(^L20[23]0$)(^L2036$)(^L2037$)(^L21[01][01]$)(^L2126$)(^L2128$)(^L2136$)(^L2180$)(^L2186$)(^L2188$)(^L2200$)(^L2210$)(^L2232$)(^L2240$)(^L2265$)(^L2270$)(^L2300$)(^L2310$)(^L2335$)(^L2340$)(^L2370$)(^L2375$)(^L23[89][89]$)(^L2405$)(^L2415$)(^L2492$)(^L2500$)(^L2525$)(^L2526$)(^L2550$)(^L2750$)(^L2768$)(^L2780$)(^L2800$)(^L2810$)(^L2840$)(^L2850$)(^L4010$)(^L4020$)(^L4045$)(^L4050$)(^L40[78]0$)(^L41[13]0$)(^L4350$)(^L43[68][68]$)(^L43[89][89]$)(^L4397$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncodex::random_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1: 10|--[0 1 3 8 9 A E L Q S]\n2:  9|--[01 30 63 76 90 L2 L5 M1 S9]\n3: 10|--[027 678 804 844 E04 E15 G20 G86 G92 J25]\n4: 10|--[1100 1577 4120 5941 7860 G841 J155 J1...]\n5: 10|--[33225 80150 93297 C1815 E1235 J0900 J...]\n\n   Remove Redundancies:\n1: 10|--[0 1 3 8 9 A E L Q S]\n2:  3|--[63 76 M1]\n3:  5|--[678 G20 G86 G92 J25]\n4:  7|--[4120 5941 7860 G841 J155 J158 V212]\n5:  4|--[C1815 J0900 J1560 K0831]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^AELQS01389[0-9]{4}$)|(^63[A-Z0-9]{3}$)(^76[A-Z0-9]{3}$)(^M1[0-9]{3}$)|(^678[A-Z0-9]{2}$)(^G20[0-9]{2}$)(^G86[0-9]{2}$)(^G92[0-9]{2}$)(^J25[0-9]{2}$)|(^4120[A-Z0-9]{1}$)(^5941[A-Z0-9]{1}$)(^7860[A-Z0-9]{1}$)(^G841[0-9]{1}$)(^J155[0-9]{1}$)(^J158[0-9]{1}$)(^V212[0-9]{1}$)|(^C1815$)(^J0900$)(^J1560$)(^K0831$)\"\n```\n\n\n:::\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x) {\n  x |> \n    split_lengths() |> \n    remove_redundant() |> \n    process_groups() |> \n    reduce_groups()\n}\n\nlong_test2[nchar(long_test2) > 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\" \"0221T\" \"0222T\" \"0263T\"\n [10] \"0265T\" \"0266T\" \"0269T\" \"0274T\" \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\"\n [19] \"0445T\" \"0506T\" \"0507T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\"\n [28] \"22514\" \"22515\" \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\"\n [37] \"32673\" \"34713\" \"34714\" \"34715\" \"34716\" \"34717\" \"36221\" \"34812\" \"34820\"\n [46] \"34833\" \"34834\" \"35572\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\"\n [55] \"55300\" \"58575\" \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\"\n [64] \"58920\" \"58925\" \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\"\n [73] \"63044\" \"63045\" \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\"\n [82] \"64492\" \"64494\" \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\"\n [91] \"92083\" \"92132\" \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\"\n[100] \"92229\" \"92235\" \"92240\" \"92242\" \"95870\" \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n[109] \"C9771\" \"E0675\" \"G0279\" \"G0412\" \"G0413\" \"G0414\" \"G0415\" \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\nmedrex(long_test2[nchar(long_test2) > 4])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^15777$)(^20939$)(^2251[0-5]$)(^2252[67]$)(^2719[78]$)(^3080[12]$)(^31231$)(^32673$)(^3471[3-7]$)(^34812$)(^34820$)(^3483[34]$)(^35572$)(^36221$)(^50300$)(^50540$)(^54420$)(^54430$)(^55200$)(^55250$)(^55300$)(^58575$)(^58600$)(^58605$)(^58700$)(^58720$)(^58800$)(^58805$)(^58900$)(^58920$)(^58925$)(^58940$)(^58943$)(^6100[01]$)(^61253$)(^63035$)(^6304[3-8]$)(^64421$)(^64480$)(^64484$)(^6449[1245]$)(^6463[46]$)(^76514$)(^92025$)(^9208[1-3]$)(^9213[2-4]$)(^92145$)(^9220[12]$)(^9222[7-9]$)(^92235$)(^9224[02]$)(^95870$)(^02[12][12]T$)(^026[356]T$)(^0269T$)(^027[45]T$)(^0329T$)(^0330T$)(^0422T$)(^0[45][45][45]T$)(^C7501$)(^C[79][79][79][79]$)(^E0675$)(^G0279$)(^G0412$)(^G041[34]$)(^[GS][GS][GS][GS][GS]$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nvec_slice(hcpcs, sf_grepl(hcpcs, medrex(long_test2[nchar(long_test2) > 4])))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Split by Length:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n   Remove Redundancies:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0)_, _cheapr(v.0.9.9)_, _collapse(v.2.0.16)_, _tidyfast(v.0.4.0)_, _data.table(v.1.16.99)_, _re2r(v.1.0.0)_, _re2(v.0.1.3)_, _stringfish(v.0.16.0)_, _fuimus(v.0.0.2)_, _emphatic(v.0.1.8)_, _colortable(v.0.3.0)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_gtable(v.0.3.6)_, _xfun(v.0.48)_, _htmlwidgets(v.1.6.4)_, _RApiSerialize(v.0.1.4)_, _tzdb(v.0.4.0)_, _tools(v.4.4.1)_, _generics(v.0.1.3)_, _parallel(v.4.4.1)_, _fansi(v.1.0.6)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _lifecycle(v.1.0.4)_, _textshaping(v.0.4.0)_, _codex(v.0.0.0.9000)_, _munsell(v.0.5.1)_, _qs(v.0.27.2)_, _htmltools(v.0.5.8.1)_, _yaml(v.2.3.10)_, _pillar(v.1.9.0)_, _tidyselect(v.1.2.1)_, _digest(v.0.6.37)_, _stringi(v.1.8.4)_, _pander(v.0.6.5)_, _pins(v.1.4.0)_, _rprojroot(v.2.0.4)_, _fastmap(v.1.2.0)_, _grid(v.4.4.1)_, _here(v.1.0.1)_, _colorspace(v.2.1-1)_, _magrittr(v.2.0.3)_, _utf8(v.1.2.4)_, _withr(v.3.0.2)_, _scales(v.1.3.0)_, _rappdirs(v.0.3.3)_, _cpp11(v.0.5.0)_, _timechange(v.0.3.0)_, _rmarkdown(v.2.28)_, _ragg(v.1.3.3)_, _hms(v.1.1.3)_, _evaluate(v.1.0.1)_, _knitr(v.1.48)_, _Rcpp(v.1.0.13)_, _glue(v.1.8.0)_, _rstudioapi(v.0.17.1)_, _jsonlite(v.1.8.9)_, _R6(v.2.5.1)_, _northstar(v.0.0.7)_, _systemfonts(v.1.1.0)_ and _fs(v.1.6.4)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}