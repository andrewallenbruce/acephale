{
  "hash": "0ed76ad4afabaeeb064092872174a151",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"vqelvnxlhq\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>@import url(\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n#vqelvnxlhq table {\n  font-family: Roboto, system-ui, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#vqelvnxlhq thead, #vqelvnxlhq tbody, #vqelvnxlhq tfoot, #vqelvnxlhq tr, #vqelvnxlhq td, #vqelvnxlhq th {\n  border-style: none;\n}\n\n#vqelvnxlhq p {\n  margin: 0;\n  padding: 0;\n}\n\n#vqelvnxlhq .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: 100%;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #027101;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #027101;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#vqelvnxlhq .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#vqelvnxlhq .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#vqelvnxlhq .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 1px;\n  padding-bottom: 3px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#vqelvnxlhq .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vqelvnxlhq .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #038901;\n}\n\n#vqelvnxlhq .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #038901;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #038901;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vqelvnxlhq .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 2.5px;\n  padding-bottom: 3.5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#vqelvnxlhq .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#vqelvnxlhq .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#vqelvnxlhq .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#vqelvnxlhq .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #038901;\n  vertical-align: bottom;\n  padding-top: 2.5px;\n  padding-bottom: 2.5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#vqelvnxlhq .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#vqelvnxlhq .gt_group_heading {\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #038901;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #038901;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#vqelvnxlhq .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #038901;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #038901;\n  vertical-align: middle;\n}\n\n#vqelvnxlhq .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#vqelvnxlhq .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#vqelvnxlhq .gt_row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #CAFFAF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #CAFFAF;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #CAFFAF;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#vqelvnxlhq .gt_stub {\n  color: #FFFFFF;\n  background-color: #038901;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #038901;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vqelvnxlhq .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#vqelvnxlhq .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#vqelvnxlhq .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#vqelvnxlhq .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vqelvnxlhq .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #038901;\n}\n\n#vqelvnxlhq .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#vqelvnxlhq .gt_last_summary_row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #038901;\n}\n\n#vqelvnxlhq .gt_grand_summary_row {\n  color: #333333;\n  background-color: #CAFFAF;\n  text-transform: inherit;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vqelvnxlhq .gt_first_grand_summary_row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #038901;\n}\n\n#vqelvnxlhq .gt_last_grand_summary_row_top {\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #038901;\n}\n\n#vqelvnxlhq .gt_striped {\n  background-color: #F4F4F4;\n}\n\n#vqelvnxlhq .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #038901;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #038901;\n}\n\n#vqelvnxlhq .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vqelvnxlhq .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vqelvnxlhq .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vqelvnxlhq .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vqelvnxlhq .gt_left {\n  text-align: left;\n}\n\n#vqelvnxlhq .gt_center {\n  text-align: center;\n}\n\n#vqelvnxlhq .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#vqelvnxlhq .gt_font_normal {\n  font-weight: normal;\n}\n\n#vqelvnxlhq .gt_font_bold {\n  font-weight: bold;\n}\n\n#vqelvnxlhq .gt_font_italic {\n  font-style: italic;\n}\n\n#vqelvnxlhq .gt_super {\n  font-size: 65%;\n}\n\n#vqelvnxlhq .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#vqelvnxlhq .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#vqelvnxlhq .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#vqelvnxlhq .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#vqelvnxlhq .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#vqelvnxlhq .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#vqelvnxlhq .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#vqelvnxlhq .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#vqelvnxlhq div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"true\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-family: Roboto; font-weight: bold;\" scope=\"col\" id=\"HCPCS\">HCPCS</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-family: Roboto; font-weight: bold;\" scope=\"col\" id=\"Count\">Count</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-family: Roboto; font-weight: bold;\" scope=\"col\" id=\"Regex\">Regex</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">All</td>\n<td headers=\"Count\" class=\"gt_row gt_right\" style=\"background-color: #B71C1C; color: #FFFFFF;\">18,903</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\" style=\"font-family: 'JetBrains Mono'; text-align: left;\">(^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left gt_striped\">Level I</td>\n<td headers=\"Count\" class=\"gt_row gt_right gt_striped\" style=\"background-color: #F24236; color: #FFFFFF;\">10,985</td>\n<td headers=\"Regex\" class=\"gt_row gt_left gt_striped\" style=\"font-family: 'JetBrains Mono'; text-align: left;\">(^[0-9]{4}[AFMTU0-9]$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">Category I</td>\n<td headers=\"Count\" class=\"gt_row gt_right\" style=\"background-color: #F2493F; color: #FFFFFF;\">9,990</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\" style=\"font-family: 'JetBrains Mono'; text-align: left;\">(^[0-9]{4}[AMU0-9]$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left gt_striped\">Category II</td>\n<td headers=\"Count\" class=\"gt_row gt_right gt_striped\" style=\"background-color: #FFE9EC; color: #000000;\">565</td>\n<td headers=\"Regex\" class=\"gt_row gt_left gt_striped\" style=\"font-family: 'JetBrains Mono'; text-align: left;\">(^[0-9]{4}F$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left\">Category III</td>\n<td headers=\"Count\" class=\"gt_row gt_right\" style=\"background-color: #FFEBEE; color: #000000;\">430</td>\n<td headers=\"Regex\" class=\"gt_row gt_left\" style=\"font-family: 'JetBrains Mono'; text-align: left;\">(^[0-9]{4}T$)</td></tr>\n    <tr><td headers=\"HCPCS\" class=\"gt_row gt_left gt_striped\">Level II</td>\n<td headers=\"Count\" class=\"gt_row gt_right gt_striped\" style=\"background-color: #EC5F5C; color: #FFFFFF;\">7,918</td>\n<td headers=\"Regex\" class=\"gt_row gt_left gt_striped\" style=\"font-family: 'JetBrains Mono'; text-align: left;\">(^[A-CEGHJ-MP-V][0-9]{4}$)</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n# TODOs\n\n   * If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n## Preprocess\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntake  <- \\(x, i = 1) stringfish::sf_substr(x, start = i, stop = i, nthreads = 4L)\nempty <- \\(x)        vctrs::vec_is_empty(x)\nchop  <- \\(v, g)     vctrs::vec_chop(v, sizes = vctrs::vec_run_sizes(g))\n```\n:::\n\n\n\n\n### 1. `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x) {\n  \n  stopifnot(is.character(x))\n  \n  x <- stringfish::sf_gsub(\n    x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n      fuimus::uniq_rmna() |> \n    stringr::str_sort()\n  \n  l <- collapse::vlengths(x)\n  \n  list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5]\n  )\n}\n```\n:::\n\n\n\n\n### 2. `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Why? A user may input complete and incomplete HCPCS codes alongside each other. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrr <- \\(x, y) {\n  \n  if (empty(x)) return(character(0))\n  if (empty(y)) return(x)\n  \n  x <- x[sf_substr(x, 1,\n    funique(vlengths(y, use.names = FALSE)), \n    nthreads = 4L) %!in% y]\n  \n  if (empty(x)) return(character(0))\n  \n  x\n}\n\nremove_redundant <- function(x) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n}\n\nlong_test |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\ncharacter(0)\n\n$x2\ncharacter(0)\n\n$x3\ncharacter(0)\n\n$x4\ncharacter(0)\n\n$x5\n  [1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\" \"0221T\" \"0222T\" \"0263T\"\n [10] \"0265T\" \"0266T\" \"0269T\" \"0274T\" \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\"\n [19] \"0445T\" \"0506T\" \"0507T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\"\n [28] \"22514\" \"22515\" \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\"\n [37] \"32673\" \"34713\" \"34714\" \"34715\" \"34716\" \"34717\" \"34812\" \"34820\" \"34833\"\n [46] \"34834\" \"35572\" \"36221\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\"\n [55] \"55300\" \"58575\" \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\"\n [64] \"58920\" \"58925\" \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\"\n [73] \"63044\" \"63045\" \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\"\n [82] \"64492\" \"64494\" \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\"\n [91] \"92083\" \"92132\" \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\"\n[100] \"92229\" \"92235\" \"92240\" \"92242\" \"95870\" \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n[109] \"C9771\" \"E0675\" \"G0279\" \"G0412\" \"G0413\" \"G0414\" \"G0415\" \"S2342\"\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroups each set of vectors into groupable regex patterns.\n\n::: {.panel-tabset}\n\n## Groups 1 & 2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x) {\n  \n  x1 <- get_elem(x, \"x1\")\n  \n  if (empty(x1)) return(character(0))\n  \n  x1\n\n}\n\ng2 <- function(x) {\n  \n  x2 <- get_elem(x, \"x2\")\n  \n  if (empty(x2)) return(character(0))\n  \n  collapse::rsplit(x2, take(x2), use.names = FALSE)\n}\n\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"02\" \"03\" \"04\" \"05\"\n\n[[2]]\n[1] \"15\"\n\n[[3]]\n[1] \"20\" \"22\" \"27\"\n\n[[4]]\n[1] \"30\" \"31\" \"32\" \"34\" \"35\" \"36\"\n\n[[5]]\n[1] \"50\" \"54\" \"55\" \"58\"\n\n[[6]]\n[1] \"61\" \"63\" \"64\"\n\n[[7]]\n[1] \"76\"\n\n[[8]]\n[1] \"92\" \"95\"\n\n[[9]]\n[1] \"C7\" \"C9\"\n\n[[10]]\n[1] \"E0\"\n\n[[11]]\n[1] \"G0\"\n\n[[12]]\n[1] \"S2\"\n```\n\n\n:::\n:::\n\n\n\n\n## Groups 3-5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlet2num <- \\(x) {\n  \n  lets <- stringr::str_extract(x, \"[A-Z]\")\n  \n  look <- rlang::set_names(as.character(1:26), LETTERS)\n  \n  unname(look[lets])\n}\n\ng3 <- function(x) {\n  \n  x3 <- get_elem(x, \"x3\")\n  \n  if (empty(x3)) return(character(0))\n  \n  num <- x3[!sf_grepl(x3, \"[A-Z]\")]\n  chr <- x3[sf_grepl(x3, \"[A-Z]\")]\n  \n  num <- data.table(\n    code = num, \n    lump = dumblump::dumblump(\n      as.integer(num), \n      threshold = 3, \n      group_prefix = NULL, \n      group_sep = NULL))\n  \n  chr <- data.table(\n    code = chr, \n    lump = dumblump::dumblump(\n      as.integer(stringr::str_replace_all(chr, \"[A-Z]\", let2num)), \n      threshold = 3, \n      group_prefix = NULL, \n      group_sep = NULL))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  return(out)\n}\n\nall_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"021\" \"022\"\n\n[[2]]\n[1] \"026\" \"027\"\n\n[[3]]\n[1] \"032\" \"033\"\n\n[[4]]\n[1] \"042\" \"044\"\n\n[[5]]\n[1] \"050\"\n\n[[6]]\n[1] \"157\"\n\n[[7]]\n[1] \"209\"\n\n[[8]]\n[1] \"225\"\n\n[[9]]\n[1] \"271\"\n\n[[10]]\n[1] \"308\"\n\n[[11]]\n[1] \"312\"\n\n[[12]]\n[1] \"326\"\n\n[[13]]\n[1] \"347\" \"348\"\n\n[[14]]\n[1] \"355\"\n\n[[15]]\n[1] \"362\"\n\n[[16]]\n[1] \"503\" \"505\"\n\n[[17]]\n[1] \"544\"\n\n[[18]]\n[1] \"552\" \"553\"\n\n[[19]]\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n[[20]]\n[1] \"610\" \"612\"\n\n[[21]]\n[1] \"630\"\n\n[[22]]\n[1] \"644\" \"646\"\n\n[[23]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n[[24]]\n[1] \"765\"\n\n[[25]]\n[1] \"920\" \"921\" \"922\"\n\n[[26]]\n[1] \"958\"\n\n[[27]]\n[1] \"C75\"\n\n[[28]]\n[1] \"C97\"\n\n[[29]]\n[1] \"E06\"\n\n[[30]]\n[1] \"G02\" \"G04\"\n\n[[31]]\n[1] \"S23\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x) {\n  \n  x4 <- get_elem(x, \"x4\")\n  \n  if (empty(x4)) return(character(0))\n  \n  indices <- dplyr::tibble(\n    code = x4,\n    a1 = take(code),\n    a2 = take(code, 2),\n    a3 = take(code, 3),\n    a4 = take(code, 4)) |> \n    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |> \n    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |> \n    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2)) |> \n    dplyr::mutate(i4 = dplyr::consecutive_id(a4), .by = c(a1, a2, a3)) |> \n    collapse::fcount(i1, add = TRUE, name = \"G\")\n  \n  orphans <- indices[(indices$i2 + indices$i3 + indices$i4 + indices$G == 4), ]$code\n    \n  last <- fuimus::combine(indices[(!indices$code %in% orphans), c(1:5)], group_id, columns = c(\"a1\", \"a2\"), sep = \"\")\n    \n  last <- collapse::fcount(last, group_id, a3) |> \n    dplyr::left_join(collapse::fcount(last, group_id, name = \"G\"), by = dplyr::join_by(group_id)) |> \n    dplyr::filter(N == G) |> \n    dplyr::right_join(last, by = dplyr::join_by(group_id, a3)) |> \n    dplyr::filter(!is.na(N))\n\n  rest <- indices[(!indices$code %in% c(orphans, last$code)), ] |> \n    fuimus::combine(group_id, columns = c(\"a1\", \"a2\", \"a3\"), sep = \"\")\n\n  out <- vctrs::vec_c(\n    if (empty(orphans)) NULL else as.list(orphans),\n    if (empty(last)) NULL else chop(last$code, last$group_id),\n    if (empty(rest)) NULL else chop(rest$code, rest$group_id))\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"5203\" \"5204\" \"5205\" \"5206\" \"5207\" \"5208\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x) {\n  \n  x5 <- get_elem(x, \"x5\")\n  \n  if (empty(x5)) return(character(0))\n  \n  indices <- dplyr::tibble(\n    code = x5,\n    a1 = take(code),\n    a2 = take(code, 2),\n    a3 = take(code, 3),\n    a4 = take(code, 4),\n    a5 = take(code, 5)) |> \n    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |> \n    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |> \n    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2)) |> \n    dplyr::mutate(i4 = dplyr::consecutive_id(a4), .by = c(a1, a2, a3)) |> \n    dplyr::mutate(i5 = dplyr::consecutive_id(a5), .by = c(a1, a2, a3, a4)) |>\n    collapse::fcount(i1, add = TRUE, name = \"G\")\n  \n  orphans <- indices[(indices$i2 + indices$i3 + indices$i4 + indices$i5 + indices$G == 5), ]$code\n  \n  last <- fuimus::combine(\n    indices[(!indices$code %in% orphans), c(1:4, 6)], \n    group_id, columns = c(\"a1\", \"a2\", \"a3\"), sep = \"\")\n  \n  last <- collapse::fcount(last, group_id, a5) |> \n    dplyr::left_join(collapse::fcount(last, group_id, name = \"G\"), by = dplyr::join_by(group_id)) |> \n    dplyr::filter(N == G) |> \n    dplyr::right_join(last, by = dplyr::join_by(group_id, a5)) |> \n    dplyr::filter(!is.na(N))\n\n  rest <- indices[(!indices$code %in% c(orphans, last$code)), ] |> \n    fuimus::combine(group_id, columns = c(\"a1\", \"a2\", \"a3\", \"a4\"), sep = \"\")\n\n  out <- vctrs::vec_c(\n    if (empty(orphans)) NULL else as.list(orphans),\n    if (empty(last)) NULL else chop(last$code, last$group_id),\n    if (empty(rest)) NULL else chop(rest$code, rest$group_id)\n  )\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n### Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  g <- x |> \n    split_lengths() |> \n    remove_redundant()\n  \n  list(\n    g1 = g1(g),\n    g2 = g2(g),\n    g3 = g3(g),\n    g4 = g4(g),\n    g5 = g5(g)\n  )\n}\n\nhcpcs_tests |> \n  process_groups() |> \n  str(give.attr = FALSE, give.head = FALSE, no.list = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n $ g1:\"0\" \"4\" \"5\" \"6\" ...\n $ g2:List of 1\n  ..$ :\"30\" \"31\" \"32\"\n $ g3:List of 1\n  ..$ :\"721\" \"722\" \"723\" \"724\" ...\n $ g4:\n $ g5:List of 1\n  ..$ :\"92015\" \"92016\" \"92017\" \"92018\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |> \n  str(give.attr = FALSE, give.head = FALSE, no.list = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n $ g1:\"0\" \"1\" \"2\" \"3\" ...\n $ g2:\n $ g3:\n $ g4:\n $ g5:\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  process_groups() |> \n  str(give.attr = FALSE, give.head = FALSE, no.list = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n $ g1:\"0\" \"4\" \"5\" \"6\" ...\n $ g2:List of 8\n  ..$ :\"15\"\n  ..$ :\"20\" \"22\" \"27\"\n  ..$ :\"30\" \"31\" \"32\" \"34\" ...\n  ..$ :\"76\"\n  ..$ :\"92\" \"95\"\n  ..$ :\"C7\" \"C9\"\n  ..$ :\"E0\"\n  ..$ :\"S2\"\n $ g3:List of 1\n  ..$ :\"721\" \"722\" \"723\" \"724\" ...\n $ g4:\n $ g5:\n```\n\n\n:::\n:::\n\n\n\n\n\n### Internal 2\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nget_char <- \\(x) x[sf_grepl(x, \"[A-Z]\", nthreads = 4L)]\nget_numb <- \\(x) x[sf_grepl(x, \"[0-9]\", nthreads = 4L)]\n\nsort_order <- function(x) {\n  \n  sorted   <- str_sort(x, numeric = TRUE)\n  alphabet <- get_char(sorted)\n  numbers  <- get_numb(sorted)\n  \n  paste0(\n    fuimus::collapser(alphabet), \n    fuimus::collapser(numbers)\n    )\n}\n```\n:::\n\n\n\n\n#### Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  if (x == paste0(ad, collapse = \"\")) return(\"[A-Z0-9]\")\n  \n  vec  <- rlang::set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[fuimus::splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## Groups of 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  g1 <- get_elem(x, \"g1\")\n  \n  if (empty(g1)) return(NULL)\n  \n  re <- sort_order(g1) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(paste0(\"(^\", re, \"{5}$)\"))\n  \n  return(paste0(\"(^\", re, \"[A-Z0-9]{4}$)\"))\n}\n\nall_tests |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[A-Z0-9]{5}$)\"\n```\n\n\n:::\n:::\n\n\n\n\n### Groups > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(NULL)\n  \n  vecs <- stringr::str_split_fixed(\n    x, \"\", collapse::fmax(collapse::vlengths(x))) |>\n    as.data.frame()\n  \n  to_brackets <- vecs |>\n    purrr::map(fuimus::uniq_rmna) |>\n    purrr::map(sort_order)\n  \n  to_vec <- to_brackets |>\n    purrr::map(reduce_runs)\n  \n  multi_chars <- unname(nchar(to_vec) > 1)\n  \n  nobrack <- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n  \n  to_vec[multi_chars] <- ifelse(\n    any(nobrack), \n    purrr::map_chr(to_vec[multi_chars], \\(x) paste0(\"[\", x, \"]\")), \n    to_vec[multi_chars])\n\n  purrr::list_c(to_vec) |> \n    fuimus::collapser()\n}\n```\n:::\n\n\n\n\n### Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvrg <- function(x, n) {\n  \n  if (is.null(x)) return(NULL)\n  \n  postfix <- ifelse(\n    sf_starts(x, \"[A-Z]\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- ifelse(\n    n == 0, \n    paste0(\"(^\", x, \"$)\"),                \n    paste0(\"(^\", x, postfix, \"{\", n, \"}$)\")) \n    \n  paste0(x , collapse = \"|\")\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = map_vec(x$g2, p2) |> vrg(3),\n    g3 = map_vec(x$g3, p2) |> vrg(2),\n    g4 = map_vec(x$g4, p2) |> vrg(1),\n    g5 = map_vec(x$g5, p2) |> vrg(0)\n  ) |> \n    compact() |> \n    paste0(collapse = \"|\")\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][A-Z0-9]{2}$)|(^520[2-8][A-Z0-9]{1}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  process_groups() |>\n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)|(^3[0-2][A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)|(^9201[5-9]$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |>\n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) > 4] |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^15777$)\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x) {\n  x |> \n    process_groups() |> \n    reduce_groups()\n}\n\nmedrex(all_tests)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][A-Z0-9]{4}$)|(^15[A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nvec_slice(\n  hcpcs_codes, \n  sf_grepl(\n    hcpcs_codes, \n    medrex(\n      long_test2[nchar(long_test2) > 3]\n      ))) |> \n  str()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:9] \"15770\" \"15771\" \"15772\" \"15773\" \"15774\" \"15775\" \"15776\" \"15777\" ...\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0)_, _cheapr(v.0.9.9)_, _collapse(v.2.0.16)_, _tidyfast(v.0.4.0)_, _data.table(v.1.16.99)_, _re2r(v.1.0.0)_, _re2(v.0.1.3)_, _stringfish(v.0.16.0)_, _zeallot(v.0.1.0)_, _gt(v.0.11.1)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_gtable(v.0.3.5)_, _xfun(v.0.48)_, _htmlwidgets(v.1.6.4)_, _RApiSerialize(v.0.1.4)_, _paletteer(v.1.6.0)_, _tzdb(v.0.4.0)_, _tools(v.4.4.1)_, _generics(v.0.1.3)_, _dumblump(v.0.0.0.9000)_, _parallel(v.4.4.1)_, _fansi(v.1.0.6)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _lifecycle(v.1.0.4)_, _farver(v.2.1.2)_, _textshaping(v.0.4.0)_, _munsell(v.0.5.1)_, _qs(v.0.27.2)_, _sass(v.0.4.9)_, _htmltools(v.0.5.8.1)_, _yaml(v.2.3.10)_, _pillar(v.1.9.0)_, _tidyselect(v.1.2.1)_, _digest(v.0.6.37)_, _stringi(v.1.8.4)_, _pander(v.0.6.5)_, _rematch2(v.2.1.2)_, _fuimus(v.0.0.2)_, _pins(v.1.4.0)_, _fastmap(v.1.2.0)_, _grid(v.4.4.1)_, _colorspace(v.2.1-1)_, _magrittr(v.2.0.3)_, _utf8(v.1.2.4)_, _withr(v.3.0.1)_, _scales(v.1.3.0)_, _rappdirs(v.0.3.3)_, _cpp11(v.0.5.0)_, _timechange(v.0.3.0)_, _rmarkdown(v.2.28)_, _ragg(v.1.3.3)_, _hms(v.1.1.3)_, _evaluate(v.1.0.1)_, _knitr(v.1.48)_, _Rcpp(v.1.0.13)_, _glue(v.1.8.0)_, _xml2(v.1.3.6)_, _rstudioapi(v.0.17.0)_, _jsonlite(v.1.8.9)_, _R6(v.2.5.1)_, _northstar(v.0.0.7)_, _systemfonts(v.1.1.0)_, _fs(v.1.6.4)_ and _prismatic(v.1.1.2)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}