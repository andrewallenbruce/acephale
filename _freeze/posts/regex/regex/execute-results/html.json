{
  "hash": "7b64d7fedd199b4c7b3ef2293dde328e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>                 Count                                   Regex</span><br/>All             <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/> Level I        <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>  Category I    <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>  Category II   <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>  Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/> Level II       <span style='color:#ffffff;'><span style='background-color:#333333;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n# TODO\n\n   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [ ] `process_groups()`\n   -   [X] `g1()`\n   -   [X] `g2()`\n   -   [ ] `g3()`\n   -   [ ] `g4()`\n   -   [ ] `g5()`\n-   [ ] `reduce_groups()`\n\n# Helpers\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff <- \\(x) stringr::str_trunc(string = x, width = 40, side = \"right\")\nwrap   <- \\(x) stringr::str_wrap(string = x, width = 60, exdent = 5, whitespace_only = FALSE)\n\nview <- \\(x) {\n  idx  <- seq_along(x)\n  len  <- vlen(x)\n  tree <- unname(purrr::map_vec(x, paste0, collapse = \" \")) |> purrr::map_vec(cutoff)\n  \n    glue::glue(\n      \"{format(idx)}: \", \n      \"{format(len)}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      )\n}\n\nview_remove <- \\(x) {\n  \n  len  <- length(x)\n  tree <- unname(paste0(x, collapse = \" \")) |> \n    purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"Removed \", \n      \"{format(len, justify = 'left')}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n\n\n\n# Preprocessing\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x, verbose = TRUE) {\n  \n  stopifnot(is.character(x))\n  \n  x <- sf_remove(x, \"\\\\*|\\\\s\") |> \n    unique_narm() |> \n    stringr::str_sort()\n  \n  l <- vlen(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{cli::symbol$stop} Split By Lengths\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |> \n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  4|--[2 6 K T]                                  │\n│ 2: 10|--[07 15 25 27 36 40 58 A6 G9 Q4]            │\n│ 3: 10|--[017 228 587 594 697 855 A70 C94 G00 L33]  │\n│ 4: 10|--[0072 1579 1908 2672 4325 4965 6236 A9...] │\n│ 5: 10|--[32655 4000F 51702 61313 G9547 J0180 J...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nremove_redundant <- function(x, verbose = TRUE) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{strrep(cli::symbol$stop, 2)} Remove Redundancies\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n\n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs(15) |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  3|--[3 J U]                                    │\n│ 2: 15|--[20 26 27 32 36 43 80 84 92 G2 G8 H2 L...] │\n│ 3: 15|--[017 033 229 285 312 427 470 644 908 B...] │\n│ 4: 14|--[0021 0042 0290 0315 0732 1105 3622 50...] │\n│ 5: 15|--[00846 01920 15950 25071 44602 50236 7...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  3|--[3 J U]                                    │\n│ 2: 13|--[20 26 27 43 80 84 92 G2 G8 H2 L2 L8 M1]   │\n│ 3: 11|--[017 033 229 285 427 470 644 908 B41 D...] │\n│ 4: 12|--[0021 0042 0290 0315 0732 1105 5097 54...] │\n│ 5: 13|--[00846 01920 15950 25071 44602 50236 7...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns.\n\n::: {.panel-tabset}\n\n## [g1]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  out <- list(x)\n  \n  if (verbose) {\n    \n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 1\"))\n    cat(view(out), sep = \"\\n\")\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  5|--[1 3 7 9 R]                                │\n│ 2: 10|--[00 01 05 51 54 64 76 99 A5 G8]            │\n│ 3: 10|--[019 075 417 441 696 800 838 E04 J71 J89]  │\n│ 4: 10|--[0566 4932 5192 7743 8005 E091 G218 G9...] │\n│ 5: 10|--[20827 3200F 3491F 43237 50620 54332 6...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ──────────────────────┐\n│ 1: 5|--[1 3 7 9 R]                           │\n│ 2: 8|--[00 01 05 51 54 64 A5 G8]             │\n│ 3: 9|--[075 417 441 696 800 838 E04 J71 J89] │\n│ 4: 6|--[4932 E091 G218 G952 L362 S936]       │\n│ 5: 6|--[20827 43237 50620 66982 A9274 L2760] │\n└──────────────────────────────────────────────┘\n■ Group 1\n1: 5|--[1 3 7 9 R]\n```\n\n\n:::\n:::\n\n\n\n\n## [g2]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng2 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  out <- collapse::rsplit(x, take_at(x, 1), use.names = FALSE)\n  \n  if (verbose) {\n    \n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 2\"), col = \"orange\")\n    cat(view(out), sep = \"\\n\")\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs(25) |>\n  split_lengths() |> \n  remove_redundant() |> \n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  5|--[5 F G H S]                                │\n│ 2: 23|--[00 01 03 24 33 35 41 51 56 59 61 82 8...] │\n│ 3: 24|--[077 158 253 355 428 453 585 586 590 6...] │\n│ 4: 24|--[0808 1071 2066 2139 2711 2740 3215 33...] │\n│ 5: 25|--[0013M 0333T 0791T 11201 28160 29822 3...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  5|--[5 F G H S]                                │\n│ 2: 19|--[00 01 03 24 33 35 41 61 82 84 96 A6 E...] │\n│ 3: 15|--[077 158 253 428 453 623 783 815 873 9...] │\n│ 4: 16|--[0808 1071 2066 2139 2711 2740 3215 36...] │\n│ 5: 12|--[0791T 11201 28160 29822 3160F 32671 6...] │\n└────────────────────────────────────────────────────┘\n■ Group 2\n 1: 3|--[00 01 03]\n 2: 1|--[24]\n 3: 2|--[33 35]\n 4: 1|--[41]\n 5: 1|--[61]\n 6: 2|--[82 84]\n 7: 1|--[96]\n 8: 1|--[A6]\n 9: 1|--[E0]\n10: 4|--[J1 J2 J3 J7]\n11: 2|--[L1 L4]\n```\n\n\n:::\n:::\n\n\n\n\n## [g3]\n\nDeal with groups containing letters separately\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# $r\n# [1] \"L80\"\n# $f\n# [1] \"L56\" \"L59\"\n# \n# ^L(5[69]|80)$\n\nl_test <- c(\"L6789\", \"L8000\", \"L5600\", \"L5900\")\n\nsf_detect(l_test, \"^L(5[69]|80)[0-9]{2}$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_hcpcs_3 <- function(x) {\n\n  x <- collapse::get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n\n  base <- data.table::data.table(\n    code = x,\n    a1 = take_at(x, 1),\n    a2 = take_at(x, 2),\n    a3 = take_at(x, 3))\n\n  indices <- base |>\n    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |>\n    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |>\n    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2))\n\n  orphans <- indices |>\n    dplyr::add_count(i1, name = \"n1\", sort = TRUE) |>\n    dplyr::filter((i2 + i3 + n1) == 3) |>\n    dplyr::pull(code)\n\n  last <- indices |>\n    dplyr::filter(!code %in% orphans) |>\n    dplyr::select(code, a1:a3) |>\n    fuimus::combine(group_id, columns = c(\"a1\"), sep = \"\")\n\n  last <- dplyr::left_join(\n    last |> dplyr::count(group_id, a2),\n    last |> dplyr::count(group_id, name = \"g\"),\n    by = dplyr::join_by(group_id)) |>\n    dplyr::filter(n == g) |>\n    dplyr::right_join(last, by = dplyr::join_by(group_id, a2)) |>\n    dplyr::filter(!is.na(n))\n\n  rest <- indices |>\n    dplyr::filter(!code %in% c(orphans, dplyr::pull(last, code))) |>\n    fuimus::combine(group_id, columns = c(\"a1\", \"a2\"), sep = \"\")\n\n  grouped <- vctrs::vec_c(\n    chop(last$code, last$group_id),\n    chop(rest$code, rest$group_id)\n  )\n  \n  o <- unlist(grouped[which(collapse::vlengths(grouped) == 1)])\n  \n  out <- vctrs::vec_c(\n    set_names(as.list(orphans), rep(\"o\", length(orphans))),\n    set_names(chop(o, dplyr::consecutive_id(take_at(o, 1))), rep(\"r\", length(chop(o, dplyr::consecutive_id(take_at(o, 1)))))),\n    set_names(grouped[which(collapse::vlengths(grouped) != 1)], rep(\"f\", length(grouped[which(collapse::vlengths(grouped) != 1)])))\n  )\n  \n  out[collapse::radixorderv(collapse::vlengths(out), sort = TRUE)]\n  \n}\n\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  group_hcpcs_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  4|--[8 C K L]                                  │\n│ 2: 27|--[08 11 20 21 25 30 33 35 49 61 64 72 7...] │\n│ 3: 30|--[019 241 266 271 274 282 332 338 358 5...] │\n│ 4: 30|--[0269 2457 2544 2704 2804 3339 4260 42...] │\n│ 5: 30|--[0550T 10160 15822 16020 23140 26553 2...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  4|--[8 C K L]                                  │\n│ 2: 25|--[08 11 20 21 25 30 33 35 49 61 64 72 7...] │\n│ 3: 19|--[019 241 266 271 274 282 583 593 632 6...] │\n│ 4: 22|--[0269 2457 2704 2804 4260 4286 5895 58...] │\n│ 5: 21|--[0550T 10160 15822 16020 23140 26553 2...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$o\n[1] \"019\"\n\n$o\n[1] \"947\"\n\n$o\n[1] \"J05\"\n\n$o\n[1] \"Q42\"\n\n$o\n[1] \"T20\"\n\n$r\n[1] \"583\" \"593\"\n\n$r\n[1] \"774\" \"787\"\n\n$r\n[1] \"A46\" \"A95\"\n\n$f\n[1] \"271\" \"274\"\n\n$r\n[1] \"241\" \"266\" \"282\"\n\n$r\n[1] \"632\" \"661\" \"674\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- sf_extract(x, \"[A-Z]{1}\")\n  num <- x[x %!in% chr]\n  \n  num <- data.table::data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(as.integer(stringr::str_replace_all(chr, \"[A-Z]\", letters_to_numbers))))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  if (verbose) {\n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 3\"), col = \"orange\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nall_tests[nchar(all_tests) < 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  6|--[0 4 5 6 G J]                              │\n│ 2: 29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5:  0|--[]                                         │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  6|--[0 4 5 6 G J]                              │\n│ 2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 9...] │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5:  0|--[]                                         │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3: 55|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  0|--[]                                         │\n│ 5:  0|--[]                                         │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3: 55|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  0|--[]                                         │\n│ 5:  0|--[]                                         │\n└────────────────────────────────────────────────────┘\n■ Group 3\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  4|--[0 5 8 F]                                  │\n│ 2: 27|--[02 04 05 07 22 25 36 37 42 43 49 59 8...] │\n│ 3: 28|--[017 023 027 083 120 228 251 443 469 6...] │\n│ 4: 30|--[0094 0430 2136 2433 2612 2773 4049 46...] │\n│ 5: 30|--[0357U 20555 21025 27641 28899 29846 4...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  4|--[0 5 8 F]                                  │\n│ 2: 18|--[22 25 36 37 42 43 49 91 92 95 A9 C1 C...] │\n│ 3: 12|--[120 443 469 618 661 736 971 993 D54 G...] │\n│ 4: 19|--[2136 2433 2612 2773 4049 6663 7113 77...] │\n│ 5: 22|--[20555 21025 27641 28899 29846 40700 4...] │\n└────────────────────────────────────────────────────┘\n■ Group 3\n 1: 1|--[120]\n 2: 1|--[443]\n 3: 1|--[469]\n 4: 1|--[618]\n 5: 1|--[661]\n 6: 1|--[736]\n 7: 1|--[971]\n 8: 1|--[993]\n 9: 1|--[D54]\n10: 1|--[G86]\n11: 1|--[J93]\n12: 1|--[L53]\n```\n\n\n:::\n:::\n\n\n\n\n## [4]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- sf_extract(x, \"[A-Z]{1}\")\n  num <- x[x %!in% chr]\n  \n  num <- data.table::data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        stringr::str_replace_all(chr, \"[A-Z]\", letters_to_numbers)\n        )))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  if (verbose) {\n    \n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 4\"), col = \"orange\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────┐\n│ 1: 0|--[]                              │\n│ 2: 0|--[]                              │\n│ 3: 0|--[]                              │\n│ 4: 6|--[5203 5204 5205 5206 5207 5208] │\n│ 5: 0|--[]                              │\n└────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────┐\n│ 1: 0|--[]                              │\n│ 2: 0|--[]                              │\n│ 3: 0|--[]                              │\n│ 4: 6|--[5203 5204 5205 5206 5207 5208] │\n│ 5: 0|--[]                              │\n└────────────────────────────────────────┘\n■ Group 4\n1: 6|--[5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ───────────┐\n│ 1: 12|--[0 1 2 3 5 6 7 9 C E G S] │\n│ 2:  0|--[]                        │\n│ 3:  0|--[]                        │\n│ 4:  0|--[]                        │\n│ 5:  0|--[]                        │\n└───────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  5|--[0 C L P S]                                │\n│ 2: 10|--[00 15 27 31 43 67 C1 G9 H1 M1]            │\n│ 3: 10|--[054 302 317 438 490 874 G21 L59 Q42 V22]  │\n│ 4: 10|--[2124 3099 3336 4000 6744 8125 8834 A6...] │\n│ 5: 10|--[3321F 36245 36479 43241 44238 64583 8...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ───────────────────────────┐\n│ 1: 5|--[0 C L P S]                                │\n│ 2: 8|--[15 27 31 43 67 G9 H1 M1]                  │\n│ 3: 6|--[302 490 874 G21 Q42 V22]                  │\n│ 4: 9|--[2124 3099 3336 4000 8125 8834 A658 G0...] │\n│ 5: 7|--[3321F 36245 36479 44238 64583 85652 J...] │\n└───────────────────────────────────────────────────┘\n■ Group 4\n1: 1|--[2124]\n2: 1|--[3099]\n3: 1|--[3336]\n4: 1|--[4000]\n5: 1|--[8125]\n6: 1|--[8834]\n7: 1|--[A658]\n8: 1|--[G024]\n9: 1|--[V231]\n```\n\n\n:::\n:::\n\n\n\n\n## [5]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- sf_extract(x, \"[A-Z]{1}\")\n  num <- x[x %!in% chr]\n  \n  num  <- data.table::data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        stringr::str_remove_all(chr, \"[A-Z]\")\n        )))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  if (verbose) {\n    \n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 5\"), col = \"orange\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────┐\n│ 1: 0|--[]                              │\n│ 2: 0|--[]                              │\n│ 3: 0|--[]                              │\n│ 4: 0|--[]                              │\n│ 5: 5|--[92015 92016 92017 92018 92019] │\n└────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────┐\n│ 1: 0|--[]                              │\n│ 2: 0|--[]                              │\n│ 3: 0|--[]                              │\n│ 4: 0|--[]                              │\n│ 5: 5|--[92015 92016 92017 92018 92019] │\n└────────────────────────────────────────┘\n■ Group 5\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ───────────┐\n│ 1: 12|--[0 1 2 3 5 6 7 9 C E G S] │\n│ 2:  0|--[]                        │\n│ 3:  0|--[]                        │\n│ 4:  0|--[]                        │\n│ 5:  0|--[]                        │\n└───────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |>\n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5: 91|--[90460 90461 90471 90474 90619 90633 9...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5: 91|--[90460 90461 90471 90474 90619 90633 9...] │\n└────────────────────────────────────────────────────┘\n■ Group 5\n 1: 2|--[90460 90461]\n 2: 1|--[90471]\n 3: 1|--[90474]\n 4: 1|--[90619]\n 5: 1|--[90633]\n 6: 1|--[90647]\n 7: 2|--[90670 90672]\n 8: 2|--[90681 90682]\n 9: 2|--[90687 90688]\n10: 2|--[90698 90700]\n11: 1|--[90710]\n12: 1|--[90713]\n13: 1|--[90716]\n14: 1|--[90723]\n15: 1|--[90740]\n16: 1|--[90743]\n17: 2|--[90747 90749]\n18: 1|--[90756]\n19: 1|--[A4467]\n20: 1|--[A9283]\n21: 1|--[A9285]\n22: 2|--[L1904 L1906]\n23: 1|--[L1920]\n24: 1|--[L1930]\n25: 1|--[L1945]\n26: 1|--[L1950]\n27: 2|--[L1970 L1971]\n28: 1|--[L2000]\n29: 1|--[L2005]\n30: 2|--[L2020 L2030]\n31: 1|--[L2036]\n32: 1|--[L2037]\n33: 2|--[L2108 L2112]\n34: 1|--[L2126]\n35: 1|--[L2128]\n36: 1|--[L2136]\n37: 1|--[L2180]\n38: 1|--[L2186]\n39: 1|--[L2188]\n40: 1|--[L2200]\n41: 1|--[L2210]\n42: 1|--[L2232]\n43: 1|--[L2240]\n44: 1|--[L2265]\n45: 1|--[L2270]\n46: 1|--[L2300]\n47: 1|--[L2310]\n48: 1|--[L2335]\n49: 1|--[L2340]\n50: 1|--[L2370]\n51: 1|--[L2375]\n52: 2|--[L2387 L2390]\n53: 1|--[L2405]\n54: 1|--[L2415]\n55: 1|--[L2492]\n56: 1|--[L2500]\n57: 1|--[L2525]\n58: 1|--[L2526]\n59: 1|--[L2550]\n60: 1|--[L2750]\n61: 1|--[L2768]\n62: 1|--[L2780]\n63: 1|--[L2800]\n64: 1|--[L2810]\n65: 1|--[L2840]\n66: 1|--[L2850]\n67: 1|--[L4010]\n68: 1|--[L4020]\n69: 1|--[L4045]\n70: 1|--[L4050]\n71: 2|--[L4070 L4080]\n72: 2|--[L4110 L4130]\n73: 1|--[L4350]\n74: 2|--[L4360 L4386]\n75: 2|--[L4387 L4396]\n76: 1|--[L4397]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  3|--[5 8 T]                                    │\n│ 2:  9|--[01 57 64 67 80 86 C9 E0 V2]               │\n│ 3: 10|--[039 140 228 362 A92 E22 G84 G87 S05 V23]  │\n│ 4: 10|--[0583 2972 3347 4538 6459 7574 G856 G9...] │\n│ 5: 10|--[0179T 21510 36625 4014F 43333 92286 9...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ───────────────────────────┐\n│ 1: 3|--[5 8 T]                                    │\n│ 2: 6|--[01 64 67 C9 E0 V2]                        │\n│ 3: 9|--[039 140 228 362 A92 E22 G84 G87 S05]      │\n│ 4: 9|--[0583 2972 3347 4538 7574 G856 G925 J0...] │\n│ 5: 8|--[21510 36625 4014F 43333 92286 99318 G...] │\n└───────────────────────────────────────────────────┘\n■ Group 5\n1: 1|--[21510]\n2: 1|--[36625]\n3: 1|--[43333]\n4: 1|--[92286]\n5: 1|--[99318]\n6: 1|--[4014F]\n7: 1|--[G9303]\n8: 1|--[Q4148]\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n# Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x, verbose = TRUE) {\n  \n    out <- list(\n      g1 = g1(x, verbose = verbose),\n      g2 = g2(x, verbose = verbose),\n      g3 = g3(x, verbose = verbose),\n      g4 = g4(x, verbose = verbose),\n      g5 = g5(x, verbose = verbose)\n      )\n  \n  if (verbose) {\n    return(invisible(out))\n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ──────────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 7|--[5202 5203 5204 5205 5206 5207 5208]  │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ──────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 0|--[]                                    │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n■ Group 1\n1: 6|--[0 4 5 6 G J]\n■ Group 2\n1: 3|--[30 31 32]\n■ Group 3\n1: 9|--[721 722 723 724 725 726 727 728 729]\n■ Group 5\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ───────────┐\n│ 1: 12|--[0 1 2 3 5 6 7 9 C E G S] │\n│ 2:  0|--[]                        │\n│ 3:  0|--[]                        │\n│ 4:  0|--[]                        │\n│ 5:  0|--[]                        │\n└───────────────────────────────────┘\n■ Group 1\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:   6|--[0 4 5 6 G J]                              │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  55|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  6|--[0 4 5 6 G J]                              │\n│ 2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 9...] │\n│ 3:  9|--[721 722 723 724 725 726 727 728 729]      │\n│ 4:  0|--[]                                         │\n│ 5:  0|--[]                                         │\n└────────────────────────────────────────────────────┘\n■ Group 1\n1: 6|--[0 4 5 6 G J]\n■ Group 2\n1: 1|--[15]\n2: 3|--[20 22 27]\n3: 6|--[30 31 32 34 35 36]\n4: 1|--[76]\n5: 2|--[92 95]\n6: 2|--[C7 C9]\n7: 1|--[E0]\n8: 1|--[S2]\n■ Group 3\n1: 9|--[721 722 723 724 725 726 727 728 729]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  5|--[7 A C P Q]                                │\n│ 2: 10|--[50 81 84 89 A6 C9 G2 G8 J9 L5]            │\n│ 3: 10|--[013 172 339 356 546 957 962 E26 G00 G88]  │\n│ 4: 10|--[0418 0464 2135 3502 7832 A423 G890 J2...] │\n│ 5: 10|--[20501 63003 65273 92072 B4160 G0444 J...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  5|--[7 A C P Q]                                │\n│ 2:  8|--[50 81 84 89 G2 G8 J9 L5]                  │\n│ 3:  9|--[013 172 339 356 546 957 962 E26 G00]      │\n│ 4:  6|--[0418 0464 2135 3502 J299 L867]            │\n│ 5: 10|--[20501 63003 65273 92072 B4160 G0444 J...] │\n└────────────────────────────────────────────────────┘\n■ Group 1\n1: 5|--[7 A C P Q]\n■ Group 2\n1: 1|--[50]\n2: 3|--[81 84 89]\n3: 2|--[G2 G8]\n4: 1|--[J9]\n5: 1|--[L5]\n■ Group 3\n1: 1|--[013]\n2: 1|--[172]\n3: 1|--[339]\n4: 1|--[356]\n5: 1|--[546]\n6: 1|--[957]\n7: 1|--[962]\n8: 1|--[E26]\n9: 1|--[G00]\n■ Group 4\n1: 1|--[0418]\n2: 1|--[0464]\n3: 1|--[2135]\n4: 1|--[3502]\n5: 1|--[J299]\n6: 1|--[L867]\n■ Group 5\n 1: 1|--[20501]\n 2: 1|--[63003]\n 3: 1|--[65273]\n 4: 1|--[92072]\n 5: 1|--[B4160]\n 6: 1|--[G0444]\n 7: 1|--[J3310]\n 8: 1|--[L2210]\n 9: 1|--[M1017]\n10: 1|--[M1148]\n```\n\n\n:::\n:::\n\n\n\n\n## Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  vec  <- rlang::set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[fuimus::splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  if (all(xgroups == paste0(ad, collapse = \"\"))) return(\"[A-Z0-9]\")\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(character(0))\n  \n  x <- collapse::get_elem(x, \"g1\")[[1]]\n  \n  re <- sort_order(x) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(glue::glue(\"^{re}{{5}}$\"))\n  \n  postfix <- ifelse(sf_detect(re, \"\\\\[?[0-9]{1}\"), \"[A-Z0-9]\", \"[0-9]\")\n  \n  glue::glue(\"^{re}{postfix}{{4}}$\")\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ──────────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 7|--[5202 5203 5204 5205 5206 5207 5208]  │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ──────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 0|--[]                                    │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n■ Group 1\n1: 6|--[0 4 5 6 G J]\n■ Group 2\n1: 3|--[30 31 32]\n■ Group 3\n1: 9|--[721 722 723 724 725 726 727 728 729]\n■ Group 5\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[GJ04-6][A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ───────────┐\n│ 1: 12|--[0 1 2 3 5 6 7 9 C E G S] │\n│ 2:  0|--[]                        │\n│ 3:  0|--[]                        │\n│ 4:  0|--[]                        │\n│ 5:  0|--[]                        │\n└───────────────────────────────────┘\n■ Group 1\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[CEGS0-35-79][A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(0:9, LETTERS))) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-Z0-9]{5}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(LETTERS[1:5], 0:9))) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}$\n```\n\n\n:::\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(character(0))\n  \n  vec <- stringr::str_split_fixed(x, \"\", max_vlength(x)) |> \n    as.data.frame() |> \n    purrr::map(unique_narm) |> \n    purrr::map(sort_order) |>\n    purrr::map(reduce_runs)\n  \n  multi <- unname(nchar(vec) > 1)\n  \n  nobrack <- stringr::str_detect(vec[multi], \"\\\\[|\\\\]\", TRUE)\n  \n  vec[multi] <- ifelse(any(nobrack), purrr::map_chr(vec[multi], \\(x) paste0(\"[\", x, \"]\")), vec[multi])\n\n  paste0(purrr::list_c(vec), collapse = \"\")\n}\n\n# hcpcs_tests |> \n#   split_lengths() |> \n#   remove_redundant() |> \n#   process_groups() |>\n#   map(p2)\n# \n# list(g2 = list(c(0:9, LETTERS))) |> p2()\n# \n# list(g2 = list(c(LETTERS[1:5], 0:9))) |> p2()\n```\n:::\n\n\n\n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- vrg <- function(x, n) {\n  \n  if (empty(x)) return(character(0))\n  \n  post <- ifelse(sf_detect(x, \"^\\\\[?[A-Z]\\\\-?\"), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- data.table::fcase(\n    n == 0, glue::glue(\"^{x}$\"),                \n    n == 1, glue::glue(\"^{x}{post}$\"),\n    n == 2, glue::glue(\"^{x}{post}{{2}}$\"),\n    n == 3, glue::glue(\"^{x}{post}{{3}}$\")\n    )\n    \n  glue::glue_collapse(x)\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = purrr::map_chr(x$g2, p2) |> purrr::map_chr(vrg, n = 3) |> glue::as_glue(),\n    g3 = purrr::map_chr(x$g3, p2) |> purrr::map_chr(vrg, n = 2) |> glue::as_glue(),\n    g4 = purrr::map_chr(x$g4, p2) |> purrr::map_chr(vrg, n = 1) |> glue::as_glue(),\n    g5 = purrr::map_chr(x$g5, p2) |> purrr::map_chr(vrg, n = 0) |> glue::as_glue()\n  )\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:   0|--[]                                         │\n│ 2:   0|--[]                                         │\n│ 3:  55|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3: 55|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  7|--[5202 5203 5204 5205 5206 5207 5208]       │\n│ 5:  0|--[]                                         │\n└────────────────────────────────────────────────────┘\n■ Group 3\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n■ Group 4\n1: 7|--[5202 5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\ncharacter(0)\n\n$g2\n\n$g3\n^02[12][A-Z0-9]{2}$\n^02[67][A-Z0-9]{2}$\n^03[23][A-Z0-9]{2}$\n^04[24][A-Z0-9]{2}$\n^050[A-Z0-9]{2}$\n^157[A-Z0-9]{2}$\n^209[A-Z0-9]{2}$\n^225[A-Z0-9]{2}$\n^271[A-Z0-9]{2}$\n^308[A-Z0-9]{2}$\n^312[A-Z0-9]{2}$\n^326[A-Z0-9]{2}$\n^34[78][A-Z0-9]{2}$\n^355[A-Z0-9]{2}$\n^362[A-Z0-9]{2}$\n^50[35][A-Z0-9]{2}$\n^544[A-Z0-9]{2}$\n^55[23][A-Z0-9]{2}$\n^58[5-9][A-Z0-9]{2}$\n^61[02][A-Z0-9]{2}$\n^630[A-Z0-9]{2}$\n^64[46][A-Z0-9]{2}$\n^72[1-9][A-Z0-9]{2}$\n^765[A-Z0-9]{2}$\n^92[0-2][A-Z0-9]{2}$\n^958[A-Z0-9]{2}$\n^C75[0-9]{2}$\n^C97[0-9]{2}$\n^E06[0-9]{2}$\n^G0[24][0-9]{2}$\n^S23[0-9]{2}$\n\n$g4\n^520[2-8][A-Z0-9]$\n\n$g5\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ──────────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 7|--[5202 5203 5204 5205 5206 5207 5208]  │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ──────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 0|--[]                                    │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n■ Group 1\n1: 6|--[0 4 5 6 G J]\n■ Group 2\n1: 3|--[30 31 32]\n■ Group 3\n1: 9|--[721 722 723 724 725 726 727 728 729]\n■ Group 5\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^[GJ04-6][A-Z0-9]{4}$\n\n$g2\n^3[0-2][A-Z0-9]{3}$\n\n$g3\n^72[1-9][A-Z0-9]{2}$\n\n$g4\n\n$g5\n^9201[5-9]$\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ───────────┐\n│ 1: 12|--[0 1 2 3 5 6 7 9 C E G S] │\n│ 2:  0|--[]                        │\n│ 3:  0|--[]                        │\n│ 4:  0|--[]                        │\n│ 5:  0|--[]                        │\n└───────────────────────────────────┘\n■ Group 1\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^[CEGS0-35-79][A-Z0-9]{4}$\n\n$g2\n\n$g3\n\n$g4\n\n$g5\n```\n\n\n:::\n\n```{.r .cell-code}\n# long_test2[nchar(long_test2) == 4]\n\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5: 91|--[90460 90461 90471 90474 90619 90633 9...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5: 91|--[90460 90461 90471 90474 90619 90633 9...] │\n└────────────────────────────────────────────────────┘\n■ Group 5\n 1: 2|--[90460 90461]\n 2: 1|--[90471]\n 3: 1|--[90474]\n 4: 1|--[90619]\n 5: 1|--[90633]\n 6: 1|--[90647]\n 7: 2|--[90670 90672]\n 8: 2|--[90681 90682]\n 9: 2|--[90687 90688]\n10: 2|--[90698 90700]\n11: 1|--[90710]\n12: 1|--[90713]\n13: 1|--[90716]\n14: 1|--[90723]\n15: 1|--[90740]\n16: 1|--[90743]\n17: 2|--[90747 90749]\n18: 1|--[90756]\n19: 1|--[A4467]\n20: 1|--[A9283]\n21: 1|--[A9285]\n22: 2|--[L1904 L1906]\n23: 1|--[L1920]\n24: 1|--[L1930]\n25: 1|--[L1945]\n26: 1|--[L1950]\n27: 2|--[L1970 L1971]\n28: 1|--[L2000]\n29: 1|--[L2005]\n30: 2|--[L2020 L2030]\n31: 1|--[L2036]\n32: 1|--[L2037]\n33: 2|--[L2108 L2112]\n34: 1|--[L2126]\n35: 1|--[L2128]\n36: 1|--[L2136]\n37: 1|--[L2180]\n38: 1|--[L2186]\n39: 1|--[L2188]\n40: 1|--[L2200]\n41: 1|--[L2210]\n42: 1|--[L2232]\n43: 1|--[L2240]\n44: 1|--[L2265]\n45: 1|--[L2270]\n46: 1|--[L2300]\n47: 1|--[L2310]\n48: 1|--[L2335]\n49: 1|--[L2340]\n50: 1|--[L2370]\n51: 1|--[L2375]\n52: 2|--[L2387 L2390]\n53: 1|--[L2405]\n54: 1|--[L2415]\n55: 1|--[L2492]\n56: 1|--[L2500]\n57: 1|--[L2525]\n58: 1|--[L2526]\n59: 1|--[L2550]\n60: 1|--[L2750]\n61: 1|--[L2768]\n62: 1|--[L2780]\n63: 1|--[L2800]\n64: 1|--[L2810]\n65: 1|--[L2840]\n66: 1|--[L2850]\n67: 1|--[L4010]\n68: 1|--[L4020]\n69: 1|--[L4045]\n70: 1|--[L4050]\n71: 2|--[L4070 L4080]\n72: 2|--[L4110 L4130]\n73: 1|--[L4350]\n74: 2|--[L4360 L4386]\n75: 2|--[L4387 L4396]\n76: 1|--[L4397]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\ncharacter(0)\n\n$g2\n\n$g3\n\n$g4\n\n$g5\n^9046[01]$\n^90471$\n^90474$\n^90619$\n^90633$\n^90647$\n^9067[02]$\n^9068[12]$\n^9068[78]$\n^90[67][67][67]$\n^90710$\n^90713$\n^90716$\n^90723$\n^90740$\n^90743$\n^9074[79]$\n^90756$\n^A4467$\n^A9283$\n^A9285$\n^L190[46]$\n^L1920$\n^L1930$\n^L1945$\n^L1950$\n^L197[01]$\n^L2000$\n^L2005$\n^L20[23]0$\n^L2036$\n^L2037$\n^L21[01][01]$\n^L2126$\n^L2128$\n^L2136$\n^L2180$\n^L2186$\n^L2188$\n^L2200$\n^L2210$\n^L2232$\n^L2240$\n^L2265$\n^L2270$\n^L2300$\n^L2310$\n^L2335$\n^L2340$\n^L2370$\n^L2375$\n^L23[89][89]$\n^L2405$\n^L2415$\n^L2492$\n^L2500$\n^L2525$\n^L2526$\n^L2550$\n^L2750$\n^L2768$\n^L2780$\n^L2800$\n^L2810$\n^L2840$\n^L2850$\n^L4010$\n^L4020$\n^L4045$\n^L4050$\n^L40[78]0$\n^L41[13]0$\n^L4350$\n^L43[68][68]$\n^L43[89][89]$\n^L4397$\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  4|--[3 G K Q]                                  │\n│ 2: 10|--[02 03 34 58 73 81 93 95 C9 M1]            │\n│ 3: 10|--[035 214 372 432 518 545 632 821 L39 P90]  │\n│ 4: 10|--[0236 2565 2706 4539 4800 G202 G208 K0...] │\n│ 5: 10|--[0843T 22224 42210 45395 63276 73552 9...] │\n└────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ──────────────────┐\n│ 1: 4|--[3 G K Q]                         │\n│ 2: 9|--[02 03 58 73 81 93 95 C9 M1]      │\n│ 3: 8|--[214 432 518 545 632 821 L39 P90] │\n│ 4: 4|--[2565 2706 4539 4800]             │\n│ 5: 5|--[0843T 22224 42210 J2793 J7340]   │\n└──────────────────────────────────────────┘\n■ Group 1\n1: 4|--[3 G K Q]\n■ Group 2\n1: 2|--[02 03]\n2: 1|--[58]\n3: 1|--[73]\n4: 1|--[81]\n5: 2|--[93 95]\n6: 1|--[C9]\n7: 1|--[M1]\n■ Group 3\n1: 1|--[214]\n2: 1|--[432]\n3: 1|--[518]\n4: 1|--[545]\n5: 1|--[632]\n6: 1|--[821]\n7: 1|--[L39]\n8: 1|--[P90]\n■ Group 4\n1: 1|--[2565]\n2: 1|--[2706]\n3: 1|--[4539]\n4: 1|--[4800]\n■ Group 5\n1: 1|--[22224]\n2: 1|--[42210]\n3: 1|--[0843T]\n4: 1|--[J2793]\n5: 1|--[J7340]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n^GKQ3[A-Z0-9]{4}$\n\n$g2\n^0[23][A-Z0-9]{3}$\n^58[A-Z0-9]{3}$\n^73[A-Z0-9]{3}$\n^81[A-Z0-9]{3}$\n^9[35][A-Z0-9]{3}$\n^C9[0-9]{3}$\n^M1[0-9]{3}$\n\n$g3\n^214[A-Z0-9]{2}$\n^432[A-Z0-9]{2}$\n^518[A-Z0-9]{2}$\n^545[A-Z0-9]{2}$\n^632[A-Z0-9]{2}$\n^821[A-Z0-9]{2}$\n^L39[0-9]{2}$\n^P90[0-9]{2}$\n\n$g4\n^2565[A-Z0-9]$\n^2706[A-Z0-9]$\n^4539[A-Z0-9]$\n^4800[A-Z0-9]$\n\n$g5\n^22224$\n^42210$\n^0843T$\n^J2793$\n^J7340$\n```\n\n\n:::\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x, verbose = TRUE) {\n  x |> \n    split_lengths(verbose = verbose) |> \n    remove_redundant(verbose = verbose) |> \n    process_groups(verbose = verbose) |> \n    reduce_groups() |> \n    unlist(use.names = FALSE) |> \n    glue::glue_collapse(sep = \"|\")\n}\n\nlong_test2[nchar(long_test2) > 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\" \"0221T\" \"0222T\" \"0263T\"\n [10] \"0265T\" \"0266T\" \"0269T\" \"0274T\" \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\"\n [19] \"0445T\" \"0506T\" \"0507T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\"\n [28] \"22514\" \"22515\" \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\"\n [37] \"32673\" \"34713\" \"34714\" \"34715\" \"34716\" \"34717\" \"36221\" \"34812\" \"34820\"\n [46] \"34833\" \"34834\" \"35572\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\"\n [55] \"55300\" \"58575\" \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\"\n [64] \"58920\" \"58925\" \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\"\n [73] \"63044\" \"63045\" \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\"\n [82] \"64492\" \"64494\" \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\"\n [91] \"92083\" \"92132\" \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\"\n[100] \"92229\" \"92235\" \"92240\" \"92242\" \"95870\" \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n[109] \"C9771\" \"E0675\" \"G0279\" \"G0412\" \"G0413\" \"G0414\" \"G0415\" \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\n\nmedrex(long_test2[nchar(long_test2) > 4])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:   0|--[]                                         │\n│ 2:   0|--[]                                         │\n│ 3:   0|--[]                                         │\n│ 4:   0|--[]                                         │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n┌ ■■ Remove Redundancies ─────────────────────────────┐\n│ 1:   0|--[]                                         │\n│ 2:   0|--[]                                         │\n│ 3:   0|--[]                                         │\n│ 4:   0|--[]                                         │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n■ Group 5\n 1: 1|--[15777]\n 2: 1|--[20939]\n 3: 6|--[22510 22511 22512 22513 22514 22515]\n 4: 2|--[22526 22527]\n 5: 2|--[27197 27198]\n 6: 2|--[30801 30802]\n 7: 1|--[31231]\n 8: 1|--[32673]\n 9: 5|--[34713 34714 34715 34716 34717]\n10: 1|--[34812]\n11: 1|--[34820]\n12: 2|--[34833 34834]\n13: 1|--[35572]\n14: 1|--[36221]\n15: 1|--[50300]\n16: 1|--[50540]\n17: 1|--[54420]\n18: 1|--[54430]\n19: 1|--[55200]\n20: 1|--[55250]\n21: 1|--[55300]\n22: 1|--[58575]\n23: 1|--[58600]\n24: 1|--[58605]\n25: 1|--[58700]\n26: 1|--[58720]\n27: 1|--[58800]\n28: 1|--[58805]\n29: 1|--[58900]\n30: 1|--[58920]\n31: 1|--[58925]\n32: 1|--[58940]\n33: 1|--[58943]\n34: 2|--[61000 61001]\n35: 1|--[61253]\n36: 1|--[63035]\n37: 6|--[63043 63044 63045 63046 63047 63048]\n38: 1|--[64421]\n39: 1|--[64480]\n40: 1|--[64484]\n41: 4|--[64491 64492 64494 64495]\n42: 2|--[64634 64636]\n43: 1|--[76514]\n44: 1|--[92025]\n45: 3|--[92081 92082 92083]\n46: 3|--[92132 92133 92134]\n47: 1|--[92145]\n48: 2|--[92201 92202]\n49: 3|--[92227 92228 92229]\n50: 1|--[92235]\n51: 2|--[92240 92242]\n52: 1|--[95870]\n53: 8|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n54: 3|--[0263T 0265T 0266T]\n55: 1|--[0269T]\n56: 2|--[0274T 0275T]\n57: 1|--[0329T]\n58: 1|--[0330T]\n59: 1|--[0422T]\n60: 4|--[0444T 0445T 0506T 0507T]\n61: 1|--[C7501]\n62: 4|--[C7502 C7504 C7505 C9771]\n63: 1|--[E0675]\n64: 1|--[G0279]\n65: 1|--[G0412]\n66: 2|--[G0413 G0414]\n67: 2|--[G0415 S2342]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^15777$|^20939$|^2251[0-5]$|^2252[67]$|^2719[78]$|^3080[12]$|^31231$|^32673$|^3471[3-7]$|^34812$|^34820$|^3483[34]$|^35572$|^36221$|^50300$|^50540$|^54420$|^54430$|^55200$|^55250$|^55300$|^58575$|^58600$|^58605$|^58700$|^58720$|^58800$|^58805$|^58900$|^58920$|^58925$|^58940$|^58943$|^6100[01]$|^61253$|^63035$|^6304[3-8]$|^64421$|^64480$|^64484$|^6449[1245]$|^6463[46]$|^76514$|^92025$|^9208[1-3]$|^9213[2-4]$|^92145$|^9220[12]$|^9222[7-9]$|^92235$|^9224[02]$|^95870$|^02[12][12]T$|^026[356]T$|^0269T$|^027[45]T$|^0329T$|^0330T$|^0422T$|^0[45][45][45]T$|^C7501$|^C[79][79][79][79]$|^E0675$|^G0279$|^G0412$|^G041[34]$|^[GS][GS][GS][GS][GS]$\n```\n\n\n:::\n\n```{.r .cell-code}\nvctrs::vec_slice(\n  hcpcs, \n  stringfish::sf_grepl(\n    hcpcs, \n    medrex(\n      long_test2[nchar(long_test2) > 4],\n      verbose = FALSE\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0211T\" \"0212T\" \"0221T\" \"0222T\" \"0263T\" \"0265T\" \"0266T\" \"0269T\" \"0274T\"\n [10] \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\" \"0445T\" \"0544T\" \"0545T\" \"0554T\"\n [19] \"0555T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n [28] \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\" \"32673\" \"34713\"\n [37] \"34714\" \"34715\" \"34716\" \"34717\" \"34812\" \"34820\" \"34833\" \"34834\" \"35572\"\n [46] \"36221\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\" \"55300\" \"58575\"\n [55] \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\" \"58920\" \"58925\"\n [64] \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\" \"63044\" \"63045\"\n [73] \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\" \"64492\" \"64494\"\n [82] \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\" \"92083\" \"92132\"\n [91] \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\" \"92229\" \"92235\"\n[100] \"92240\" \"92242\" \"95870\" \"C7501\" \"C9777\" \"C9779\" \"C9797\" \"E0675\" \"G0279\"\n[109] \"G0412\" \"G0413\" \"G0414\"\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_emphatic(v.0.1.8)_, _fuimus(v.0.0.2)_, _collapse(v.2.0.17)_, _data.table(v.1.16.99)_, _codex(v.0.0.0.9000)_, _stringfish(v.0.16.0)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _hms(v.1.1.3)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _grid(v.4.4.1)_, _timechange(v.0.3.0)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _scales(v.1.3.0)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _crayon(v.1.5.3)_, _munsell(v.0.5.1)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _qs(v.0.27.2)_, _tools(v.4.4.1)_, _parallel(v.4.4.1)_, _tzdb(v.0.4.0)_, _colorspace(v.2.1-1)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _cheapr(v.0.9.9)_, _fs(v.1.6.5)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _gtable(v.0.3.6)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13)_, _systemfonts(v.1.1.0)_, _xfun(v.0.48)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.48)_, _htmltools(v.0.5.8.1)_, _rmarkdown(v.2.29)_ and _compiler(v.4.4.1)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}