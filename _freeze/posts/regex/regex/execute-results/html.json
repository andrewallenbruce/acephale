{
  "hash": "5f1e0086eae9007ad639c737e0ed35c9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>                 Count                                 Regex</span><br/>All             <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> ^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$</span></span><br/>-Level I        <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  ^[0-9]{4}[AFMTU0-9]$</span></span><br/>--Category I    <span style='color:#ffffff;'><span style='background-color:#7f7f7f;'>  9990</span></span><span><span>                    ^[0-9]{4}[AMU0-9]$</span></span><br/>--Category II   <span style='color:#000000;'><span style='background-color:#cccccc;'>   565</span></span><span><span>                           ^[0-9]{4}F$</span></span><br/>--Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   430</span></span><span><span>                           ^[0-9]{4}T$</span></span><br/>-Level II       <span style='color:#ffffff;'><span style='background-color:#333333;'>  7918</span></span><span><span>              ^[A-CEGHJ-MP-V][0-9]{4}$</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n# TODO\n\n   * If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n   - `contrast()`\n-   [X] `split_first()`\n   - `spf()`\n-   [ ] `process_groups()`\n   - `g1()`\n   - `g2()`\n   - `group_3()`\n   - `group_4()`\n   - `group_5()`\n-   [ ] `reduce_groups()`\n   - `reduce_runs()`\n   - `vec_to_regex()`\n   - `red1()`\n   - `red2()`\n   - `red3()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n# `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x, verbose = FALSE) {\n  \n  stopifnot(is.character(x))\n  \n  x <- sf_remove(x, \"\\\\*|\\\\s\") |> \n    unique_narm() |> \n    stringr::str_sort()\n  \n  l <- vlen(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{cli::symbol$stop} Split By Lengths\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |>\n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n[1] \"1\" \"3\" \"M\" \"V\"\n\n$x2\n[1] \"01\" \"15\" \"47\" \"50\" \"57\" \"G0\" \"J9\" \"P9\" \"Q4\"\n\n$x3\n [1] \"240\" \"448\" \"747\" \"933\" \"A20\" \"B41\" \"E06\" \"G00\" \"G03\" \"J71\"\n\n$x4\n [1] \"0019\" \"0384\" \"0842\" \"2067\" \"2671\" \"3266\" \"5159\" \"8679\" \"9942\" \"V528\"\n\n$x5\n [1] \"01939\" \"65780\" \"G8841\" \"G9563\" \"J2310\" \"J3570\" \"J9058\" \"L8509\" \"S0030\"\n[10] \"S9473\"\n```\n\n\n:::\n:::\n\n\n\n\n# `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`, i.e., remove longer codes that share a common sub-string with shorter codes.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nremove_redundant <- function(x, verbose = FALSE) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{strrep(cli::symbol$stop, 2)} Remove Redundancies\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n\n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n[1] \"U\"\n\n$x2\n [1] \"03\" \"26\" \"31\" \"77\" \"93\" \"C9\" \"E2\" \"G0\" \"J9\" \"T4\"\n\n$x3\n[1] \"014\" \"516\" \"583\" \"758\" \"G84\" \"G91\" \"G95\" \"G98\" \"M12\"\n\n$x4\n [1] \"0173\" \"2151\" \"4058\" \"6744\" \"6832\" \"7355\" \"7612\" \"9068\" \"A426\" \"L333\"\n\n$x5\n[1] \"1030F\" \"6101F\" \"E0232\" \"J1439\" \"T1021\"\n```\n\n\n:::\n:::\n\n\n\n\n# `split_first()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nspf <- \\(x, z = 1) collapse::rsplit(x, sf_sub(x, i = 1, z = z), use.names = FALSE, flatten = FALSE)\n\nsplit_first <- function(x, verbose = FALSE) {\n  \n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = list(x1),\n    x2 = spf(x2),\n    x3 = spf(x3),\n    x4 = spf(x4),\n    x5 = spf(x5))\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{strrep(cli::symbol$stop, 3)} Split At First\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n$x1[[1]]\n[1] \"8\"\n\n\n$x2\n$x2[[1]]\n[1] \"00\" \"01\" \"03\" \"06\"\n\n$x2[[2]]\n[1] \"20\" \"26\" \"27\"\n\n$x2[[3]]\n[1] \"31\" \"33\" \"35\"\n\n$x2[[4]]\n[1] \"42\" \"44\" \"49\"\n\n$x2[[5]]\n[1] \"63\" \"67\"\n\n$x2[[6]]\n[1] \"72\" \"76\" \"77\"\n\n$x2[[7]]\n[1] \"90\" \"93\" \"94\"\n\n$x2[[8]]\n[1] \"A6\"\n\n$x2[[9]]\n[1] \"E2\"\n\n$x2[[10]]\n[1] \"G0\" \"G4\" \"G6\" \"G8\" \"G9\"\n\n$x2[[11]]\n[1] \"H0\"\n\n$x2[[12]]\n[1] \"J2\" \"J7\"\n\n$x2[[13]]\n[1] \"L0\" \"L5\"\n\n\n$x3\n$x3[[1]]\n[1] \"080\"\n\n$x3[[2]]\n[1] \"158\" \"190\"\n\n$x3[[3]]\n[1] \"236\" \"243\"\n\n$x3[[4]]\n[1] \"365\"\n\n$x3[[5]]\n[1] \"412\" \"438\" \"477\"\n\n$x3[[6]]\n[1] \"500\" \"523\" \"524\"\n\n$x3[[7]]\n[1] \"623\" \"658\"\n\n$x3[[8]]\n[1] \"705\" \"735\" \"743\"\n\n$x3[[9]]\n[1] \"925\" \"963\"\n\n$x3[[10]]\n[1] \"A49\"\n\n$x3[[11]]\n[1] \"C75\" \"C94\"\n\n$x3[[12]]\n[1] \"D91\"\n\n$x3[[13]]\n[1] \"E04\" \"E09\"\n\n$x3[[14]]\n[1] \"J34\"\n\n$x3[[15]]\n[1] \"M10\"\n\n$x3[[16]]\n[1] \"Q05\" \"Q40\"\n\n$x3[[17]]\n[1] \"S23\" \"S82\" \"S89\"\n\n\n$x4\n$x4[[1]]\n[1] \"1201\" \"1202\" \"1524\" \"1728\"\n\n$x4[[2]]\n[1] \"2251\" \"2834\" \"2873\"\n\n$x4[[3]]\n[1] \"3221\" \"3753\"\n\n$x4[[4]]\n[1] \"4323\"\n\n$x4[[5]]\n[1] \"5717\" \"5742\" \"5856\" \"5895\"\n\n$x4[[6]]\n[1] \"6211\" \"6455\" \"6881\"\n\n$x4[[7]]\n[1] \"C915\"\n\n$x4[[8]]\n[1] \"G214\"\n\n$x4[[9]]\n[1] \"J027\" \"J144\"\n\n$x4[[10]]\n[1] \"L195\" \"L605\" \"L667\" \"L843\"\n\n$x4[[11]]\n[1] \"M121\" \"M133\"\n\n$x4[[12]]\n[1] \"Q425\"\n\n$x4[[13]]\n[1] \"S402\"\n\n\n$x5\n$x5[[1]]\n[1] \"0434T\"\n\n$x5[[2]]\n[1] \"21602\" \"24546\" \"25230\"\n\n$x5[[3]]\n[1] \"34708\"\n\n$x5[[4]]\n[1] \"57545\" \"58321\" \"59430\"\n\n$x5[[5]]\n[1] \"64736\"\n\n$x5[[6]]\n[1] \"95117\" \"99245\"\n\n$x5[[7]]\n[1] \"A4606\" \"A9536\"\n\n$x5[[8]]\n[1] \"B5000\"\n\n$x5[[9]]\n[1] \"C1779\" \"C9399\"\n\n$x5[[10]]\n[1] \"E0780\"\n\n$x5[[11]]\n[1] \"J9052\"\n\n$x5[[12]]\n[1] \"L6905\"\n\n$x5[[13]]\n[1] \"M1295\"\n\n$x5[[14]]\n[1] \"Q2055\" \"Q4298\"\n\n$x5[[15]]\n[1] \"S0516\" \"S0618\"\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns. Deal with groups containing letters separately.\n\n::: {.panel-tabset}\n\n## Edge Cases\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#---------- 1\n## Problem\nlist(\"L80\", c(\"L56\", \"L59\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"L80\"\n\n[[2]]\n[1] \"L56\" \"L59\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Solution\n\"^L(5[69]|80)$\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"^L(5[69]|80)$\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Test\nsf_extract(hcpcs, \"^L(5[69]|80)[0-9]{2}$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"L5600\" \"L5610\" \"L5611\" \"L5613\" \"L5614\" \"L5615\" \"L5616\" \"L5617\" \"L5618\"\n [10] \"L5620\" \"L5622\" \"L5624\" \"L5626\" \"L5628\" \"L5629\" \"L5630\" \"L5631\" \"L5632\"\n [19] \"L5634\" \"L5636\" \"L5637\" \"L5638\" \"L5639\" \"L5640\" \"L5642\" \"L5643\" \"L5644\"\n [28] \"L5645\" \"L5646\" \"L5647\" \"L5648\" \"L5649\" \"L5650\" \"L5651\" \"L5652\" \"L5653\"\n [37] \"L5654\" \"L5655\" \"L5656\" \"L5658\" \"L5661\" \"L5665\" \"L5666\" \"L5668\" \"L5670\"\n [46] \"L5671\" \"L5672\" \"L5673\" \"L5676\" \"L5677\" \"L5678\" \"L5679\" \"L5680\" \"L5681\"\n [55] \"L5682\" \"L5683\" \"L5684\" \"L5685\" \"L5686\" \"L5688\" \"L5690\" \"L5692\" \"L5694\"\n [64] \"L5695\" \"L5696\" \"L5697\" \"L5698\" \"L5699\" \"L5910\" \"L5920\" \"L5925\" \"L5926\"\n [73] \"L5930\" \"L5940\" \"L5950\" \"L5960\" \"L5961\" \"L5962\" \"L5964\" \"L5966\" \"L5968\"\n [82] \"L5969\" \"L5970\" \"L5971\" \"L5972\" \"L5973\" \"L5974\" \"L5975\" \"L5976\" \"L5978\"\n [91] \"L5979\" \"L5980\" \"L5981\" \"L5982\" \"L5984\" \"L5985\" \"L5986\" \"L5987\" \"L5988\"\n[100] \"L5990\" \"L5991\" \"L5999\" \"L8000\" \"L8001\" \"L8002\" \"L8010\" \"L8015\" \"L8020\"\n[109] \"L8030\" \"L8031\" \"L8032\" \"L8033\" \"L8035\" \"L8039\" \"L8040\" \"L8041\" \"L8042\"\n[118] \"L8043\" \"L8044\" \"L8045\" \"L8046\" \"L8047\" \"L8048\" \"L8049\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#---------- 2\n## Problem\nlist(c(\"021\", \"022\", \"026\", \"027\"), c(\"032\", \"033\"), c(\"042\", \"044\"), \"050\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"021\" \"022\" \"026\" \"027\"\n\n[[2]]\n[1] \"032\" \"033\"\n\n[[3]]\n[1] \"042\" \"044\"\n\n[[4]]\n[1] \"050\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Solution\n\"^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Test\nsf_extract(hcpcs, \"^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0210T\" \"0210U\" \"0211T\" \"0211U\" \"0212T\" \"0212U\" \"0213T\" \"0213U\" \"0214T\"\n [10] \"0214U\" \"0215T\" \"0215U\" \"0216T\" \"0216U\" \"0217T\" \"0217U\" \"0218T\" \"0218U\"\n [19] \"0219T\" \"0219U\" \"0220T\" \"0220U\" \"0221T\" \"0221U\" \"0222T\" \"0222U\" \"0223U\"\n [28] \"0224U\" \"0225U\" \"0226U\" \"0227U\" \"0228U\" \"0229U\" \"0260U\" \"0261U\" \"0262U\"\n [37] \"0263T\" \"0263U\" \"0264T\" \"0264U\" \"0265T\" \"0265U\" \"0266T\" \"0266U\" \"0267T\"\n [46] \"0267U\" \"0268T\" \"0268U\" \"0269T\" \"0269U\" \"0270T\" \"0270U\" \"0271T\" \"0271U\"\n [55] \"0272T\" \"0272U\" \"0273T\" \"0273U\" \"0274T\" \"0274U\" \"0275T\" \"0275U\" \"0276U\"\n [64] \"0277U\" \"0278T\" \"0278U\" \"0279U\" \"0320U\" \"0321U\" \"0322U\" \"0323U\" \"0324U\"\n [73] \"0325U\" \"0326U\" \"0327U\" \"0328U\" \"0329T\" \"0329U\" \"0330T\" \"0330U\" \"0331T\"\n [82] \"0331U\" \"0332T\" \"0332U\" \"0333T\" \"0333U\" \"0334U\" \"0335T\" \"0335U\" \"0336U\"\n [91] \"0337U\" \"0338T\" \"0338U\" \"0339T\" \"0339U\" \"0420T\" \"0421T\" \"0422T\" \"0424T\"\n[100] \"0425T\" \"0426T\" \"0427T\" \"0428T\" \"0429T\" \"0440T\" \"0441T\" \"0442T\" \"0443T\"\n[109] \"0444T\" \"0445T\" \"0446T\" \"0447T\" \"0448T\" \"0449T\" \"0500F\" \"0500T\" \"0501F\"\n[118] \"0501T\" \"0502F\" \"0502T\" \"0503F\" \"0503T\" \"0504T\" \"0505F\" \"0505T\" \"0506T\"\n[127] \"0507F\" \"0507T\" \"0508T\" \"0509F\" \"0509T\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#---------- 3\n# How do you tell the difference?\n\n## Problem\nlist(c(\"C75\", \"C97\"), c(\"G02\", \"G04\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"C75\" \"C97\"\n\n[[2]]\n[1] \"G02\" \"G04\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Solution\n\"^C(75|97)[A-Z0-9]{2}$\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"^C(75|97)[A-Z0-9]{2}$\"\n```\n\n\n:::\n\n```{.r .cell-code}\n\"^G0[24][A-Z0-9]{2}$\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"^G0[24][A-Z0-9]{2}$\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Test\nsf_extract(hcpcs, \"^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"C7500\" \"C7501\" \"C7502\" \"C7503\" \"C7504\" \"C7505\" \"C7506\" \"C7507\" \"C7508\"\n [10] \"C7509\" \"C7510\" \"C7511\" \"C7512\" \"C7513\" \"C7514\" \"C7515\" \"C7516\" \"C7517\"\n [19] \"C7518\" \"C7519\" \"C7520\" \"C7521\" \"C7522\" \"C7523\" \"C7524\" \"C7525\" \"C7526\"\n [28] \"C7527\" \"C7528\" \"C7529\" \"C7530\" \"C7531\" \"C7532\" \"C7533\" \"C7534\" \"C7535\"\n [37] \"C7537\" \"C7538\" \"C7539\" \"C7540\" \"C7541\" \"C7542\" \"C7543\" \"C7544\" \"C7545\"\n [46] \"C7546\" \"C7547\" \"C7548\" \"C7549\" \"C7550\" \"C7551\" \"C7552\" \"C7553\" \"C7554\"\n [55] \"C7555\" \"C7556\" \"C7557\" \"C7558\" \"C7560\" \"C9724\" \"C9725\" \"C9726\" \"C9727\"\n [64] \"C9728\" \"C9733\" \"C9734\" \"C9735\" \"C9737\" \"C9738\" \"C9739\" \"C9740\" \"C9741\"\n [73] \"C9742\" \"C9743\" \"C9744\" \"C9745\" \"C9746\" \"C9747\" \"C9748\" \"C9749\" \"C9750\"\n [82] \"C9751\" \"C9752\" \"C9753\" \"C9754\" \"C9755\" \"C9756\" \"C9757\" \"C9758\" \"C9759\"\n [91] \"C9760\" \"C9761\" \"C9762\" \"C9763\" \"C9764\" \"C9765\" \"C9766\" \"C9767\" \"C9768\"\n[100] \"C9769\" \"C9770\" \"C9771\" \"C9772\" \"C9773\" \"C9774\" \"C9775\" \"C9776\" \"C9777\"\n[109] \"C9778\" \"C9779\" \"C9780\" \"C9781\" \"C9782\" \"C9783\" \"C9784\" \"C9785\" \"C9786\"\n[118] \"C9787\" \"C9788\" \"C9789\" \"C9790\" \"C9791\" \"C9792\" \"C9793\" \"C9794\" \"C9795\"\n[127] \"C9796\" \"C9797\" \"G0202\" \"G0204\" \"G0206\" \"G0219\" \"G0235\" \"G0237\" \"G0238\"\n[136] \"G0239\" \"G0245\" \"G0246\" \"G0247\" \"G0248\" \"G0249\" \"G0250\" \"G0251\" \"G0252\"\n[145] \"G0255\" \"G0257\" \"G0259\" \"G0260\" \"G0268\" \"G0269\" \"G0270\" \"G0271\" \"G0276\"\n[154] \"G0277\" \"G0278\" \"G0279\" \"G0281\" \"G0282\" \"G0283\" \"G0288\" \"G0289\" \"G0293\"\n[163] \"G0294\" \"G0295\" \"G0296\" \"G0297\" \"G0299\" \"G0400\" \"G0402\" \"G0403\" \"G0404\"\n[172] \"G0405\" \"G0406\" \"G0407\" \"G0408\" \"G0409\" \"G0410\" \"G0411\" \"G0412\" \"G0413\"\n[181] \"G0414\" \"G0415\" \"G0416\" \"G0417\" \"G0418\" \"G0419\" \"G0420\" \"G0421\" \"G0422\"\n[190] \"G0423\" \"G0424\" \"G0425\" \"G0426\" \"G0427\" \"G0428\" \"G0429\" \"G0431\" \"G0432\"\n[199] \"G0433\" \"G0434\" \"G0435\" \"G0436\" \"G0437\" \"G0438\" \"G0439\" \"G0442\" \"G0443\"\n[208] \"G0444\" \"G0445\" \"G0446\" \"G0447\" \"G0448\" \"G0451\" \"G0452\" \"G0453\" \"G0454\"\n[217] \"G0455\" \"G0456\" \"G0457\" \"G0458\" \"G0459\" \"G0460\" \"G0461\" \"G0462\" \"G0463\"\n[226] \"G0464\" \"G0465\" \"G0466\" \"G0467\" \"G0468\" \"G0469\" \"G0470\" \"G0471\" \"G0472\"\n[235] \"G0473\" \"G0475\" \"G0476\" \"G0477\" \"G0478\" \"G0479\" \"G0480\" \"G0481\" \"G0482\"\n[244] \"G0483\" \"G0490\" \"G0491\" \"G0492\" \"G0493\" \"G0494\" \"G0495\" \"G0496\" \"G0498\"\n[253] \"G0499\"\n```\n\n\n:::\n:::\n\n\n\n\n## Group 3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_3 <- function(x) {\n\n  x <- collapse::get_elem(x, \"x3\")\n  \n  if (empty(x)) return(x)\n  \n  purrr::map(x, function(x) {\n    \n    idx <- data.table::data.table(\n        code = x,\n        a1 = take_at(x),\n        a2 = take_at(x, 2),\n        a3 = take_at(x, 3)) |>\n        dplyr::mutate(i1 = fastplyr::f_consecutive_id(a1)) |>\n        dplyr::mutate(i2 = fastplyr::f_consecutive_id(a2), .by = a1) |>\n        dplyr::mutate(i3 = fastplyr::f_consecutive_id(a3), .by = c(a1, a2))\n      \n      lone <- idx |>\n        fastplyr::f_add_count(i1, name = \"n1\") |>\n        fastplyr::f_filter((i2 + i3 + n1) == 3)\n      \n      last <- idx |>\n        fastplyr::f_filter(code %!in% lone[[\"code\"]]) |>\n        fastplyr::f_select(code, group_id = a1, a2:a3)\n\n      last <- fastplyr::f_left_join(\n        fastplyr::f_count(last, group_id, a2),\n        fastplyr::f_count(last, group_id, name = \"g\"), by = \"group_id\") |>\n        fastplyr::f_filter(n == g) |>\n        fastplyr::f_right_join(last, by = c(\"group_id\", \"a2\")) |>\n        fastplyr::f_filter(!cheapr::is_na(n))\n      \n      rest <- idx |>\n        fastplyr::f_filter(code %!in% c(lone[[\"code\"]], last[[\"code\"]])) |>\n        fuimus::combine(group_id, columns = c(\"a1\", \"a2\"), sep = \"\")\n      \n      c(if (empty(lone)) NULL else list(lone[[\"code\"]]),\n        if (empty(last)) NULL else codex::chop(last[[\"code\"]], last[[\"group_id\"]]),\n        if (empty(rest)) NULL else codex::chop(rest[[\"code\"]], rest[[\"group_id\"]]))\n    })\n}\n\nc(\"C75\", \"C97\", \"G02\", \"G04\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C75\"\n\n[[1]][[2]]\n[1] \"C97\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G02\" \"G04\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"021\" \"022\" \"026\" \"027\"\n\n[[1]][[2]]\n[1] \"032\" \"033\"\n\n[[1]][[3]]\n[1] \"042\" \"044\"\n\n[[1]][[4]]\n[1] \"050\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"157\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"209\"\n\n[[3]][[2]]\n[1] \"225\"\n\n[[3]][[3]]\n[1] \"271\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"308\"\n\n[[4]][[2]]\n[1] \"312\"\n\n[[4]][[3]]\n[1] \"326\"\n\n[[4]][[4]]\n[1] \"347\" \"348\"\n\n[[4]][[5]]\n[1] \"355\"\n\n[[4]][[6]]\n[1] \"362\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"503\" \"505\"\n\n[[5]][[2]]\n[1] \"544\"\n\n[[5]][[3]]\n[1] \"552\" \"553\"\n\n[[5]][[4]]\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"610\" \"612\"\n\n[[6]][[2]]\n[1] \"630\"\n\n[[6]][[3]]\n[1] \"644\" \"646\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"765\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"920\" \"921\" \"922\"\n\n[[8]][[2]]\n[1] \"958\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C75\"\n\n[[9]][[2]]\n[1] \"C97\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E06\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G02\" \"G04\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S23\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"231\"\n\n[[1]][[2]]\n[1] \"270\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"534\"\n\n[[2]][[2]]\n[1] \"543\"\n\n[[2]][[3]]\n[1] \"582\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"646\"\n\n[[3]][[2]]\n[1] \"697\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"881\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"941\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"G03\"\n\n[[6]][[2]]\n[1] \"G22\"\n\n[[6]][[3]]\n[1] \"G93\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"J24\"\n\n[[7]][[2]]\n[1] \"J90\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"L19\"\n\n[[8]][[2]]\n[1] \"L56\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"T10\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Group 4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_4 <- function(x) {\n\n  x <- collapse::get_elem(x, \"x4\")\n  \n  if (empty(x)) return(x)\n  \n  purrr::map(x, function(x) {\n    \n    idx <- data.table::data.table(\n      code = x,\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4)) |>\n      dplyr::mutate(i1 = fastplyr::f_consecutive_id(a1)) |>\n      dplyr::mutate(i2 = fastplyr::f_consecutive_id(a2), .by = a1) |>\n      dplyr::mutate(i3 = fastplyr::f_consecutive_id(a3), .by = c(a1, a2)) |>\n      dplyr::mutate(i4 = fastplyr::f_consecutive_id(a4), .by = c(a1, a2, a3))\n      \n      lone <- idx |>\n        fastplyr::f_add_count(i1, name = \"n1\") |>\n        fastplyr::f_filter((i2 + i3 + i4 + n1) == 4)\n      \n      last <- idx |>\n        fastplyr::f_filter(code %!in% lone[[\"code\"]]) |>\n        fastplyr::f_select(code, a1:a4) |>\n        fuimus::combine(group_id, columns = c(\"a1\", \"a2\"), sep = \"\")\n      \n      last_1 <- fastplyr::f_left_join(\n        fastplyr::f_count(last, group_id, a3),\n        fastplyr::f_count(last, group_id, name = \"g\"), by = \"group_id\") |>\n        fastplyr::f_filter(n == g)\n      \n      if (empty(last_1)) {\n        last <- list(code = character(0), group_id = character(0))\n      } else {\n        last <- last_1 |> \n          fastplyr::f_right_join(last, by = c(\"group_id\", \"a3\")) |> \n          fastplyr::f_filter(!cheapr::is_na(n))\n        }\n      \n      rest <- idx |>\n        fastplyr::f_filter(code %!in% c(lone[[\"code\"]], last[[\"code\"]])) |>\n        fuimus::combine(group_id, columns = c(\"a1\", \"a2\", \"a3\"), sep = \"\")\n      \n      c(if (empty(lone)) NULL else list(lone[[\"code\"]]),\n        if (empty(last)) NULL else codex::chop(last[[\"code\"]], last[[\"group_id\"]]),\n        if (empty(rest)) NULL else codex::chop(rest[[\"code\"]], rest[[\"group_id\"]]))\n    })\n}\n\nc(\"C751\", \"C970\", \"G020\", \"G040\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C751\"\n\n[[1]][[2]]\n[1] \"C970\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G020\"\n\n[[2]][[2]]\n[1] \"G040\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 4] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"0506\" \"0507\"\n\n[[1]][[2]]\n[1] \"0214\" \"0215\" \"0217\" \"0218\" \"0219\"\n\n[[1]][[3]]\n[1] \"0220\" \"0221\" \"0222\"\n\n[[1]][[4]]\n[1] \"0263\" \"0265\" \"0266\" \"0269\"\n\n[[1]][[5]]\n[1] \"0274\" \"0275\"\n\n[[1]][[6]]\n[1] \"0329\"\n\n[[1]][[7]]\n[1] \"0330\"\n\n[[1]][[8]]\n[1] \"0422\"\n\n[[1]][[9]]\n[1] \"0444\" \"0445\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"1577\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"2093\"\n\n[[3]][[2]]\n[1] \"2251\" \"2252\"\n\n[[3]][[3]]\n[1] \"2719\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"3080\"\n\n[[4]][[2]]\n[1] \"3123\"\n\n[[4]][[3]]\n[1] \"3267\"\n\n[[4]][[4]]\n[1] \"3557\"\n\n[[4]][[5]]\n[1] \"3622\"\n\n[[4]][[6]]\n[1] \"3471\"\n\n[[4]][[7]]\n[1] \"3481\" \"3482\" \"3483\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"5442\" \"5443\"\n\n[[5]][[2]]\n[1] \"5030\"\n\n[[5]][[3]]\n[1] \"5054\"\n\n[[5]][[4]]\n[1] \"5520\" \"5525\"\n\n[[5]][[5]]\n[1] \"5530\"\n\n[[5]][[6]]\n[1] \"5857\"\n\n[[5]][[7]]\n[1] \"5860\"\n\n[[5]][[8]]\n[1] \"5870\" \"5872\"\n\n[[5]][[9]]\n[1] \"5880\"\n\n[[5]][[10]]\n[1] \"5890\" \"5892\" \"5894\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"6303\" \"6304\"\n\n[[6]][[2]]\n[1] \"6100\"\n\n[[6]][[3]]\n[1] \"6125\"\n\n[[6]][[4]]\n[1] \"6442\" \"6448\" \"6449\"\n\n[[6]][[5]]\n[1] \"6463\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"7651\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"9587\"\n\n[[8]][[2]]\n[1] \"9202\" \"9208\"\n\n[[8]][[3]]\n[1] \"9213\" \"9214\"\n\n[[8]][[4]]\n[1] \"9220\" \"9222\" \"9223\" \"9224\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C750\"\n\n[[9]][[2]]\n[1] \"C977\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E067\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G027\"\n\n[[11]][[2]]\n[1] \"G041\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S234\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"2420\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"3646\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"5432\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"6855\"\n\n[[4]][[2]]\n[1] \"6964\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"8120\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"A430\"\n\n[[6]][[2]]\n[1] \"A701\" \"A704\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"D048\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"E122\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"G053\"\n\n[[9]][[2]]\n[1] \"G870\" \"G875\"\n\n[[9]][[3]]\n[1] \"G951\"\n\n[[9]][[4]]\n[1] \"G972\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"J339\"\n\n[[10]][[2]]\n[1] \"J224\"\n\n[[10]][[3]]\n[1] \"J250\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"L501\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"Q049\"\n\n[[12]][[2]]\n[1] \"Q512\"\n```\n\n\n:::\n:::\n\n\n\n\n## Group 5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5 <- function(x) {\n\n  x <- collapse::get_elem(x, \"x5\")\n  \n  if (empty(x)) return(x)\n  \n  purrr::map(x, function(x) {\n    \n    indices <- data.table::data.table(\n      code = x,\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      a5 = take_at(x, 5)) |>\n      dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |>\n      dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |>\n      dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2)) |>\n      dplyr::mutate(i4 = dplyr::consecutive_id(a4), .by = c(a1, a2, a3)) |> \n      dplyr::mutate(i5 = dplyr::consecutive_id(a5), .by = c(a1, a2, a3, a4))\n      \n      orphans <- indices |>\n        dplyr::add_count(i1, name = \"n1\", sort = TRUE) |>\n        dplyr::filter((i2 + i3 + i4 + i5 + n1) == 5) |>\n        dplyr::pull(code)\n      \n      last <- indices |>\n        dplyr::filter(code %!in% orphans) |>\n        dplyr::select(code, a1:a5) |>\n        fuimus::combine(group_id, columns = c(\"a1\", \"a2\", \"a3\"), sep = \"\")\n      \n      last <- dplyr::left_join(\n        last |> dplyr::count(group_id, a4),\n        last |> dplyr::count(group_id, name = \"g\"),\n        by = dplyr::join_by(group_id)) |>\n        dplyr::filter(n == g) |>\n        dplyr::right_join(last, by = dplyr::join_by(group_id, a4)) |>\n        dplyr::filter(!is.na(n))\n      \n      rest <- indices |>\n        dplyr::filter(code %!in% c(orphans, dplyr::pull(last, code))) |>\n        fuimus::combine(group_id, columns = c(\"a1\", \"a2\", \"a3\", \"a4\"), sep = \"\")\n      \n      vctrs::vec_c(\n        if (empty(orphans)) NULL else list(orphans),\n        if (empty(last)) NULL else chop(last$code, last$group_id),\n        if (empty(rest)) NULL else chop(rest$code, rest$group_id))\n    })\n}\n\nc(\"C7510\", \"C9701\", \"G0200\", \"G0400\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C7510\"\n\n[[1]][[2]]\n[1] \"C9701\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G0200\"\n\n[[2]][[2]]\n[1] \"G0400\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 5] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"0329T\"\n\n[[1]][[2]]\n[1] \"0330T\"\n\n[[1]][[3]]\n[1] \"0422T\"\n\n[[1]][[4]]\n[1] \"0214T\"\n\n[[1]][[5]]\n[1] \"0215T\"\n\n[[1]][[6]]\n[1] \"0217T\"\n\n[[1]][[7]]\n[1] \"0218T\"\n\n[[1]][[8]]\n[1] \"0219T\"\n\n[[1]][[9]]\n[1] \"0220T\"\n\n[[1]][[10]]\n[1] \"0221T\"\n\n[[1]][[11]]\n[1] \"0222T\"\n\n[[1]][[12]]\n[1] \"0263T\"\n\n[[1]][[13]]\n[1] \"0265T\"\n\n[[1]][[14]]\n[1] \"0266T\"\n\n[[1]][[15]]\n[1] \"0269T\"\n\n[[1]][[16]]\n[1] \"0274T\"\n\n[[1]][[17]]\n[1] \"0275T\"\n\n[[1]][[18]]\n[1] \"0444T\"\n\n[[1]][[19]]\n[1] \"0445T\"\n\n[[1]][[20]]\n[1] \"0506T\"\n\n[[1]][[21]]\n[1] \"0507T\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"15777\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"20939\"\n\n[[3]][[2]]\n[1] \"27197\" \"27198\"\n\n[[3]][[3]]\n[1] \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n\n[[3]][[4]]\n[1] \"22526\" \"22527\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"30801\" \"30802\"\n\n[[4]][[2]]\n[1] \"31231\"\n\n[[4]][[3]]\n[1] \"32673\"\n\n[[4]][[4]]\n[1] \"34713\" \"34714\" \"34715\" \"34716\" \"34717\"\n\n[[4]][[5]]\n[1] \"35572\"\n\n[[4]][[6]]\n[1] \"36221\"\n\n[[4]][[7]]\n[1] \"34812\"\n\n[[4]][[8]]\n[1] \"34820\"\n\n[[4]][[9]]\n[1] \"34833\" \"34834\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"50300\"\n\n[[5]][[2]]\n[1] \"50540\"\n\n[[5]][[3]]\n[1] \"55300\"\n\n[[5]][[4]]\n[1] \"58575\"\n\n[[5]][[5]]\n[1] \"58600\" \"58605\"\n\n[[5]][[6]]\n[1] \"58800\" \"58805\"\n\n[[5]][[7]]\n[1] \"54420\"\n\n[[5]][[8]]\n[1] \"54430\"\n\n[[5]][[9]]\n[1] \"55200\"\n\n[[5]][[10]]\n[1] \"55250\"\n\n[[5]][[11]]\n[1] \"58700\"\n\n[[5]][[12]]\n[1] \"58720\"\n\n[[5]][[13]]\n[1] \"58900\"\n\n[[5]][[14]]\n[1] \"58920\" \"58925\"\n\n[[5]][[15]]\n[1] \"58940\" \"58943\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"61000\" \"61001\"\n\n[[6]][[2]]\n[1] \"61253\"\n\n[[6]][[3]]\n[1] \"64634\" \"64636\"\n\n[[6]][[4]]\n[1] \"63035\"\n\n[[6]][[5]]\n[1] \"63043\" \"63044\" \"63045\" \"63046\" \"63047\" \"63048\"\n\n[[6]][[6]]\n[1] \"64421\"\n\n[[6]][[7]]\n[1] \"64480\" \"64484\"\n\n[[6]][[8]]\n[1] \"64491\" \"64492\" \"64494\" \"64495\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"76514\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"95870\"\n\n[[8]][[2]]\n[1] \"92025\"\n\n[[8]][[3]]\n[1] \"92081\" \"92082\" \"92083\"\n\n[[8]][[4]]\n[1] \"92132\" \"92133\" \"92134\"\n\n[[8]][[5]]\n[1] \"92145\"\n\n[[8]][[6]]\n[1] \"92201\" \"92202\"\n\n[[8]][[7]]\n[1] \"92227\" \"92228\" \"92229\"\n\n[[8]][[8]]\n[1] \"92235\"\n\n[[8]][[9]]\n[1] \"92240\" \"92242\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n\n[[9]][[2]]\n[1] \"C9771\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E0675\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G0279\"\n\n[[11]][[2]]\n[1] \"G0412\" \"G0413\" \"G0414\" \"G0415\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"00868\"\n\n[[1]][[2]]\n[1] \"0409T\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"31296\"\n\n[[2]][[2]]\n[1] \"33272\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"58267\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"62252\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"85170\"\n\n[[5]][[2]]\n[1] \"86654\"\n\n[[5]][[3]]\n[1] \"87279\"\n\n[[5]][[4]]\n[1] \"87804\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"A5051\"\n\n[[6]][[2]]\n[1] \"A6021\"\n\n[[6]][[3]]\n[1] \"A9577\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"C1832\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"E0627\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"G2094\"\n\n[[9]][[2]]\n[1] \"G8649\"\n```\n\n\n:::\n:::\n\n\n\n\n## All\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  list(\n    g1 = x$x1,\n    g2 = x$x2,\n    g3 = group_3(x),\n    g4 = group_4(x),\n    g5 = group_5(x)\n    )\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  # remove_redundant() |> \n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n\n$g2\n$g2[[1]]\n[1] \"30\" \"31\" \"32\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"5202\" \"5203\" \"5204\" \"5205\" \"5206\" \"5207\" \"5208\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  split_first() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n\n$g2\n$g2[[1]]\n[1] \"02\" \"03\" \"04\" \"05\"\n\n$g2[[2]]\n[1] \"15\"\n\n$g2[[3]]\n[1] \"20\" \"22\" \"27\"\n\n$g2[[4]]\n[1] \"30\" \"31\" \"32\" \"34\" \"35\" \"36\"\n\n$g2[[5]]\n[1] \"50\" \"54\" \"55\" \"58\"\n\n$g2[[6]]\n[1] \"61\" \"63\" \"64\"\n\n$g2[[7]]\n[1] \"76\"\n\n$g2[[8]]\n[1] \"92\" \"95\"\n\n$g2[[9]]\n[1] \"C7\" \"C9\"\n\n$g2[[10]]\n[1] \"E0\"\n\n$g2[[11]]\n[1] \"G0\"\n\n$g2[[12]]\n[1] \"S2\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"021\" \"022\" \"026\" \"027\"\n\n$g3[[1]][[2]]\n[1] \"032\" \"033\"\n\n$g3[[1]][[3]]\n[1] \"042\" \"044\"\n\n$g3[[1]][[4]]\n[1] \"050\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"157\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"209\"\n\n$g3[[3]][[2]]\n[1] \"225\"\n\n$g3[[3]][[3]]\n[1] \"271\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"308\"\n\n$g3[[4]][[2]]\n[1] \"312\"\n\n$g3[[4]][[3]]\n[1] \"326\"\n\n$g3[[4]][[4]]\n[1] \"347\" \"348\"\n\n$g3[[4]][[5]]\n[1] \"355\"\n\n$g3[[4]][[6]]\n[1] \"362\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"503\" \"505\"\n\n$g3[[5]][[2]]\n[1] \"544\"\n\n$g3[[5]][[3]]\n[1] \"552\" \"553\"\n\n$g3[[5]][[4]]\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"610\" \"612\"\n\n$g3[[6]][[2]]\n[1] \"630\"\n\n$g3[[6]][[3]]\n[1] \"644\" \"646\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"765\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"920\" \"921\" \"922\"\n\n$g3[[8]][[2]]\n[1] \"958\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"C75\"\n\n$g3[[9]][[2]]\n[1] \"C97\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"E06\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"G02\" \"G04\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"S23\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"0506\" \"0507\"\n\n$g4[[1]][[2]]\n[1] \"0214\" \"0215\" \"0217\" \"0218\" \"0219\"\n\n$g4[[1]][[3]]\n[1] \"0220\" \"0221\" \"0222\"\n\n$g4[[1]][[4]]\n[1] \"0263\" \"0265\" \"0266\" \"0269\"\n\n$g4[[1]][[5]]\n[1] \"0274\" \"0275\"\n\n$g4[[1]][[6]]\n[1] \"0329\"\n\n$g4[[1]][[7]]\n[1] \"0330\"\n\n$g4[[1]][[8]]\n[1] \"0422\"\n\n$g4[[1]][[9]]\n[1] \"0444\" \"0445\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"1577\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"2093\"\n\n$g4[[3]][[2]]\n[1] \"2251\" \"2252\"\n\n$g4[[3]][[3]]\n[1] \"2719\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"3080\"\n\n$g4[[4]][[2]]\n[1] \"3123\"\n\n$g4[[4]][[3]]\n[1] \"3267\"\n\n$g4[[4]][[4]]\n[1] \"3557\"\n\n$g4[[4]][[5]]\n[1] \"3622\"\n\n$g4[[4]][[6]]\n[1] \"3471\"\n\n$g4[[4]][[7]]\n[1] \"3481\" \"3482\" \"3483\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"5442\" \"5443\"\n\n$g4[[5]][[2]]\n[1] \"5030\"\n\n$g4[[5]][[3]]\n[1] \"5054\"\n\n$g4[[5]][[4]]\n[1] \"5520\" \"5525\"\n\n$g4[[5]][[5]]\n[1] \"5530\"\n\n$g4[[5]][[6]]\n[1] \"5857\"\n\n$g4[[5]][[7]]\n[1] \"5860\"\n\n$g4[[5]][[8]]\n[1] \"5870\" \"5872\"\n\n$g4[[5]][[9]]\n[1] \"5880\"\n\n$g4[[5]][[10]]\n[1] \"5890\" \"5892\" \"5894\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"6303\" \"6304\"\n\n$g4[[6]][[2]]\n[1] \"6100\"\n\n$g4[[6]][[3]]\n[1] \"6125\"\n\n$g4[[6]][[4]]\n[1] \"6442\" \"6448\" \"6449\"\n\n$g4[[6]][[5]]\n[1] \"6463\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"7651\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"9587\"\n\n$g4[[8]][[2]]\n[1] \"9202\" \"9208\"\n\n$g4[[8]][[3]]\n[1] \"9213\" \"9214\"\n\n$g4[[8]][[4]]\n[1] \"9220\" \"9222\" \"9223\" \"9224\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"C750\"\n\n$g4[[9]][[2]]\n[1] \"C977\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"E067\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"G027\"\n\n$g4[[11]][[2]]\n[1] \"G041\"\n\n\n$g4[[12]]\n$g4[[12]][[1]]\n[1] \"S234\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"0329T\"\n\n$g5[[1]][[2]]\n[1] \"0330T\"\n\n$g5[[1]][[3]]\n[1] \"0422T\"\n\n$g5[[1]][[4]]\n[1] \"0214T\"\n\n$g5[[1]][[5]]\n[1] \"0215T\"\n\n$g5[[1]][[6]]\n[1] \"0217T\"\n\n$g5[[1]][[7]]\n[1] \"0218T\"\n\n$g5[[1]][[8]]\n[1] \"0219T\"\n\n$g5[[1]][[9]]\n[1] \"0220T\"\n\n$g5[[1]][[10]]\n[1] \"0221T\"\n\n$g5[[1]][[11]]\n[1] \"0222T\"\n\n$g5[[1]][[12]]\n[1] \"0263T\"\n\n$g5[[1]][[13]]\n[1] \"0265T\"\n\n$g5[[1]][[14]]\n[1] \"0266T\"\n\n$g5[[1]][[15]]\n[1] \"0269T\"\n\n$g5[[1]][[16]]\n[1] \"0274T\"\n\n$g5[[1]][[17]]\n[1] \"0275T\"\n\n$g5[[1]][[18]]\n[1] \"0444T\"\n\n$g5[[1]][[19]]\n[1] \"0445T\"\n\n$g5[[1]][[20]]\n[1] \"0506T\"\n\n$g5[[1]][[21]]\n[1] \"0507T\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"15777\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"20939\"\n\n$g5[[3]][[2]]\n[1] \"27197\" \"27198\"\n\n$g5[[3]][[3]]\n[1] \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n\n$g5[[3]][[4]]\n[1] \"22526\" \"22527\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"30801\" \"30802\"\n\n$g5[[4]][[2]]\n[1] \"31231\"\n\n$g5[[4]][[3]]\n[1] \"32673\"\n\n$g5[[4]][[4]]\n[1] \"34713\" \"34714\" \"34715\" \"34716\" \"34717\"\n\n$g5[[4]][[5]]\n[1] \"35572\"\n\n$g5[[4]][[6]]\n[1] \"36221\"\n\n$g5[[4]][[7]]\n[1] \"34812\"\n\n$g5[[4]][[8]]\n[1] \"34820\"\n\n$g5[[4]][[9]]\n[1] \"34833\" \"34834\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"50300\"\n\n$g5[[5]][[2]]\n[1] \"50540\"\n\n$g5[[5]][[3]]\n[1] \"55300\"\n\n$g5[[5]][[4]]\n[1] \"58575\"\n\n$g5[[5]][[5]]\n[1] \"58600\" \"58605\"\n\n$g5[[5]][[6]]\n[1] \"58800\" \"58805\"\n\n$g5[[5]][[7]]\n[1] \"54420\"\n\n$g5[[5]][[8]]\n[1] \"54430\"\n\n$g5[[5]][[9]]\n[1] \"55200\"\n\n$g5[[5]][[10]]\n[1] \"55250\"\n\n$g5[[5]][[11]]\n[1] \"58700\"\n\n$g5[[5]][[12]]\n[1] \"58720\"\n\n$g5[[5]][[13]]\n[1] \"58900\"\n\n$g5[[5]][[14]]\n[1] \"58920\" \"58925\"\n\n$g5[[5]][[15]]\n[1] \"58940\" \"58943\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"61000\" \"61001\"\n\n$g5[[6]][[2]]\n[1] \"61253\"\n\n$g5[[6]][[3]]\n[1] \"64634\" \"64636\"\n\n$g5[[6]][[4]]\n[1] \"63035\"\n\n$g5[[6]][[5]]\n[1] \"63043\" \"63044\" \"63045\" \"63046\" \"63047\" \"63048\"\n\n$g5[[6]][[6]]\n[1] \"64421\"\n\n$g5[[6]][[7]]\n[1] \"64480\" \"64484\"\n\n$g5[[6]][[8]]\n[1] \"64491\" \"64492\" \"64494\" \"64495\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"76514\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"95870\"\n\n$g5[[8]][[2]]\n[1] \"92025\"\n\n$g5[[8]][[3]]\n[1] \"92081\" \"92082\" \"92083\"\n\n$g5[[8]][[4]]\n[1] \"92132\" \"92133\" \"92134\"\n\n$g5[[8]][[5]]\n[1] \"92145\"\n\n$g5[[8]][[6]]\n[1] \"92201\" \"92202\"\n\n$g5[[8]][[7]]\n[1] \"92227\" \"92228\" \"92229\"\n\n$g5[[8]][[8]]\n[1] \"92235\"\n\n$g5[[8]][[9]]\n[1] \"92240\" \"92242\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n\n$g5[[9]][[2]]\n[1] \"C9771\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"E0675\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"G0279\"\n\n$g5[[11]][[2]]\n[1] \"G0412\" \"G0413\" \"G0414\" \"G0415\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n[1] \"9\"\n\n\n$g2\n$g2[[1]]\n[1] \"02\" \"05\" \"07\" \"08\"\n\n$g2[[2]]\n[1] \"14\"\n\n$g2[[3]]\n[1] \"21\" \"27\" \"29\"\n\n$g2[[4]]\n[1] \"33\" \"34\" \"35\"\n\n$g2[[5]]\n[1] \"40\" \"44\"\n\n$g2[[6]]\n[1] \"54\"\n\n$g2[[7]]\n[1] \"62\" \"64\"\n\n$g2[[8]]\n[1] \"77\"\n\n$g2[[9]]\n[1] \"82\" \"87\" \"88\"\n\n$g2[[10]]\n[1] \"A4\"\n\n$g2[[11]]\n[1] \"C9\"\n\n$g2[[12]]\n[1] \"E0\" \"E2\"\n\n$g2[[13]]\n[1] \"G2\" \"G9\"\n\n$g2[[14]]\n[1] \"J2\" \"J9\"\n\n$g2[[15]]\n[1] \"L1\" \"L3\" \"L5\"\n\n$g2[[16]]\n[1] \"M1\"\n\n$g2[[17]]\n[1] \"Q4\" \"Q9\"\n\n$g2[[18]]\n[1] \"R0\"\n\n$g2[[19]]\n[1] \"S0\" \"S9\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"012\" \"013\" \"016\"\n\n$g3[[1]][[2]]\n[1] \"036\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"119\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"206\"\n\n$g3[[3]][[2]]\n[1] \"249\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"376\"\n\n$g3[[4]][[2]]\n[1] \"387\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"424\"\n\n$g3[[5]][[2]]\n[1] \"453\"\n\n$g3[[5]][[3]]\n[1] \"466\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"503\"\n\n$g3[[6]][[2]]\n[1] \"522\"\n\n$g3[[6]][[3]]\n[1] \"585\"\n\n$g3[[6]][[4]]\n[1] \"598\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"704\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"839\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"C17\"\n\n$g3[[9]][[2]]\n[1] \"C75\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"G00\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"J01\" \"J03\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"K10\"\n\n\n$g3[[13]]\n$g3[[13]][[1]]\n[1] \"S40\"\n\n\n$g3[[14]]\n$g3[[14]][[1]]\n[1] \"V21\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"0498\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"1031\"\n\n$g4[[2]][[2]]\n[1] \"1522\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"2022\"\n\n$g4[[3]][[2]]\n[1] \"2641\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"3117\"\n\n$g4[[4]][[2]]\n[1] \"3163\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"4274\"\n\n$g4[[5]][[2]]\n[1] \"4336\"\n\n$g4[[5]][[3]]\n[1] \"4852\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"5525\"\n\n$g4[[6]][[2]]\n[1] \"5880\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"6543\"\n\n$g4[[7]][[2]]\n[1] \"6900\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"7681\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"8133\"\n\n$g4[[9]][[2]]\n[1] \"8635\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"A960\"\n\n$g4[[10]][[2]]\n[1] \"A626\"\n\n$g4[[10]][[3]]\n[1] \"A652\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"D521\"\n\n\n$g4[[12]]\n$g4[[12]][[1]]\n[1] \"G846\"\n\n$g4[[12]][[2]]\n[1] \"G027\"\n\n$g4[[12]][[3]]\n[1] \"G037\"\n\n\n$g4[[13]]\n$g4[[13]][[1]]\n[1] \"J027\"\n\n$g4[[13]][[2]]\n[1] \"J721\"\n\n\n$g4[[14]]\n$g4[[14]][[1]]\n[1] \"P902\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"01732\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"37181\"\n\n$g5[[2]][[2]]\n[1] \"37221\"\n\n$g5[[2]][[3]]\n[1] \"3758F\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"4150F\"\n\n$g5[[3]][[2]]\n[1] \"41820\"\n\n$g5[[3]][[3]]\n[1] \"47145\"\n\n$g5[[3]][[4]]\n[1] \"48140\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"50825\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"66220\"\n\n$g5[[5]][[2]]\n[1] \"69145\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"72128\"\n\n$g5[[6]][[2]]\n[1] \"76125\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"81309\"\n\n$g5[[7]][[2]]\n[1] \"84085\"\n\n$g5[[7]][[3]]\n[1] \"86784\"\n\n$g5[[7]][[4]]\n[1] \"89353\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"A6540\"\n\n$g5[[8]][[2]]\n[1] \"A9507\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"E1390\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"G1017\"\n\n$g5[[10]][[2]]\n[1] \"G8894\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"J0791\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"K0822\"\n\n\n$g5[[13]]\n$g5[[13]][[1]]\n[1] \"L2861\"\n\n$g5[[13]][[2]]\n[1] \"L7520\"\n\n$g5[[13]][[3]]\n[1] \"L8628\"\n\n\n$g5[[14]]\n$g5[[14]][[1]]\n[1] \"Q2042\"\n\n\n$g5[[15]]\n$g5[[15]][[1]]\n[1] \"T1009\"\n\n\n$g5[[16]]\n$g5[[16]][[1]]\n[1] \"V2610\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n# `reduce_runs()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  if (nchar(x) == 1) return(x)\n\n  # poss <- c(LETTERS, 0:9)\n  poss <- c(0:9, \"&\", LETTERS)\n  \n  test <- setNames(rep(0, 37), poss)\n  \n  vctr <- test[c(splitter(x), \"&\")]\n  \n  vctr <- vctr[!is.na(vctr)]\n  \n  test[names(vctr)] <- 1\n  \n  test[names(test) == \"&\"] <- 0\n\n  groups <- data.table::data.table(\n    value = names(test),\n    keys = test,\n    group = dplyr::consecutive_id(test)) |>\n    dplyr::mutate(size = dplyr::n(), .by = group) |> \n    dplyr::filter(keys == 1, size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(groups)) return(x)\n  \n  xgroups <- chop(groups$value, groups$group) |>\n    purrr::map(smush) |>\n    purrr::list_c()\n  \n  if (all(xgroups == smush(poss))) return(\"[A-Z0-9]\")\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(groups, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(groups, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  bracket(res)\n}\n```\n:::\n\n\n\n\n\n::: {.panel-tabset}\n\n## `red1()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(character(0))\n  \n  x <- collapse::get_elem(x, \"g1\")[[1]]\n  \n  re <- sort_order(x) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(glue::glue(\"^{re}{{5}}$\"))\n  \n  post <- ifelse(sf_detect(re, \"\\\\[?[0-9]{1}\"), \"[A-Z0-9]\", \"[0-9]\")\n  \n  glue::glue(\"^{re}{post}{{4}}$\")\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[GJ04-6][A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nc(LETTERS[1:5], 0:9) |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |>\n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[CEGS0-35-79][A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(0:9, LETTERS))) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-Z0-9]{5}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(LETTERS[1:5], 0:9))) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}$\n```\n\n\n:::\n:::\n\n\n\n\n## `red2()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred2 <- function(x) {\n  \n  if (empty(x[[\"g2\"]])) return(character(0))\n  \n  x <- collapse::get_elem(x, \"g2\")\n  l <- vlen(x)\n  \n  c(x[l == 1], \n    purrr::map(x[l > 1], \\(x) {\n    \n    parts <- stringr::str_split_fixed(x, \"\", max_vlen(x)) |> \n    as.data.frame() |>\n    purrr::map(unique_narm) |>\n    purrr::map(sort_order) |>\n    purrr::map(reduce_runs) |>\n    delist()\n  \n  multi <- stringfish::sf_nchar(parts, nthreads = 4L) > 1\n  nobrk <- !sf_detect(parts[multi], \"\\\\[|\\\\]\")\n  \n  parts[multi] <- ifelse(any(nobrk), purrr::map_chr(parts[multi], bracket), parts[multi])\n  \n  smush(parts)\n    \n  })\n  )\n}\n\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"15\"\n\n[[2]]\n[1] \"76\"\n\n[[3]]\n[1] \"E0\"\n\n[[4]]\n[1] \"S2\"\n\n[[5]]\n[1] \"2[027]\"\n\n[[6]]\n[1] \"3[0-24-6]\"\n\n[[7]]\n[1] \"9[25]\"\n\n[[8]]\n[1] \"C[79]\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"3[0-2]\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"A\", c(0:5, LETTERS)) |> \n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"A[A-Z0-5]\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## `red3()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred3 <- function(x) {\n  \n  if (empty(x[[\"g3\"]])) return(character(0))\n  \n  x <- collapse::get_elem(x, \"g3\")\n  d <- purrr::map_int(x, purrr::pluck_depth)\n  \n  top   <- x[d == 1]\n  leave <- top[vlen(top) == 1]\n  top   <- top[vlen(top) > 1]\n  nest  <- x[d > 1]\n  \n  first <- purrr::map_chr(nest[[1]], function(x) take_at(purrr::pluck(x, 1, 1)[1])) |> collapse::funique()\n  \n  rest <- purrr::map(nest[[1]], function(x) sf_remove(x, glue::glue(\"^{first}\")))\n  \n  vctrs::vec_c(\n    leave, \n    purrr::map(top, function(x) {\n      x <- top[[1]]\n      x <- top[[2]]\n      \n      parts <- stringr::str_split_fixed(x, \"\", n = max_vlen(x)) |> \n        as.data.frame() |>\n        purrr::map(unique_narm) |> \n        purrr::map(sort_order) |>\n        purrr::map(reduce_runs) |> \n        delist()\n      \n      multi <- stringfish::sf_nchar(parts, nthreads = 4L) > 1\n      \n      if (any(multi)) parts[multi] <- parent(paste0(parts[multi], collapse = \"|\"))\n      \n      smush(unique_narm(parts))\n    })\n  )\n}\n```\n:::\n\n\n\n\n::: \n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- vrg <- \\(x, n) {\n  \n  if (empty(x)) return(character(0))\n  \n  post <- ifelse(sf_detect(x, \"^\\\\[?[A-Z]\\\\-?\"), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- data.table::fcase(\n    n == 0, glue::glue(\"^{x}$\"),                \n    n == 1, glue::glue(\"^{x}{post}$\"),\n    n == 2, glue::glue(\"^{x}{post}{{2}}$\"),\n    n == 3, glue::glue(\"^{x}{post}{{3}}$\")\n    )\n    \n  glue::glue_collapse(x)\n}\n\nreduce_groups <- \\(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = purrr::map_chr(x$g2, p2) |> purrr::map_chr(vrg, n = 3) |> glue::as_glue(),\n    g3 = purrr::map_chr(x$g3, p2) |> purrr::map_chr(vrg, n = 2) |> glue::as_glue(),\n    g4 = purrr::map_chr(x$g4, p2) |> purrr::map_chr(vrg, n = 1) |> glue::as_glue(),\n    g5 = purrr::map_chr(x$g5, p2) |> purrr::map_chr(vrg, n = 0) |> glue::as_glue()\n  )\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\n# long_test2[nchar(long_test2) == 4]\n\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0.9000)_, _cheapr(v.0.9.9.9000)_, _emphatic(v.0.1.8)_, _collapse(v.2.0.17)_, _data.table(v.1.16.99)_, _stringfish(v.0.16.0)_, _codex(v.0.0.0.9000)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_, _tidyverse(v.2.0.0)_ and _fuimus(v.0.0.2)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _hms(v.1.1.3)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _grid(v.4.4.1)_, _timechange(v.0.3.0)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _scales(v.1.3.0)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _crayon(v.1.5.3)_, _munsell(v.0.5.1)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _qs(v.0.27.2)_, _tools(v.4.4.1)_, _parallel(v.4.4.1)_, _tzdb(v.0.4.0)_, _colorspace(v.2.1-1)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _fs(v.1.6.5)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _gtable(v.0.3.6)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13)_, _systemfonts(v.1.1.0)_, _xfun(v.0.48)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.48)_, _htmltools(v.0.5.8.1)_ and _rmarkdown(v.2.29)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}