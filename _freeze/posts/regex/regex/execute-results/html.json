{
  "hash": "211a50df9e60ca6396c5850baea66a37",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS Overview\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>                 Count                                 Regex</span><br/>All             <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> ^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$</span></span><br/>-Level I        <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  ^[0-9]{4}[AFMTU0-9]$</span></span><br/>--Category I    <span style='color:#ffffff;'><span style='background-color:#7f7f7f;'>  9990</span></span><span><span>                    ^[0-9]{4}[AMU0-9]$</span></span><br/>--Category II   <span style='color:#000000;'><span style='background-color:#cccccc;'>   565</span></span><span><span>                           ^[0-9]{4}F$</span></span><br/>--Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   430</span></span><span><span>                           ^[0-9]{4}T$</span></span><br/>-Level II       <span style='color:#ffffff;'><span style='background-color:#333333;'>  7918</span></span><span><span>              ^[A-CEGHJ-MP-V][0-9]{4}$</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n### Letters\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n\n```\nHCPCS Ending with Letter:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA : 33\nF : 565\nM : 13\nT : 430\nU : 337\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTotal: 1378\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nHCPCS Beginning with Letter:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA : 793\nB : 51\nC : 548\nE : 639\nG : 1939\nH : 89\nJ : 1068\nK : 175\nL : 913\nM : 360\nP : 57\nQ : 462\nR : 3\nS : 500\nT : 113\nU : 5\nV : 203\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTotal:7918\n```\n\n\n:::\n:::\n\n\n\n\n# TODO\n\n   * If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [X] `split_first()`\n-   [ ] `process_groups()`\n   - `group_3()`\n   - `group_4()`\n   - `group_5()`\n-   [ ] `reduce_groups()`\n   - `reduce_runs()`\n   - `vec_to_regex()`\n   - `red1()`\n   - `red2()`\n   - `red3()`\n\n# Preprocessing\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(x <- random_hcpcs())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1\"     \"M\"     \"A\"     \"6\"     \"H0\"    \"G6\"    \"09\"    \"96\"    \"S8\"   \n[10] \"86\"    \"01\"    \"J9\"    \"C9\"    \"28\"    \"157\"   \"827\"   \"H20\"   \"356\"  \n[19] \"E23\"   \"018\"   \"C26\"   \"030\"   \"965\"   \"616\"   \"5680\"  \"S950\"  \"S109\" \n[28] \"5326\"  \"9232\"  \"3328\"  \"2529\"  \"4200\"  \"9359\"  \"2341\"  \"G0491\" \"36810\"\n[37] \"T1019\" \"26478\" \"25922\" \"S3849\" \"81408\" \"H0035\" \"86762\" \"C9094\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx |> split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n[1] \"1\" \"6\" \"A\" \"M\"\n\n$x2\n [1] \"01\" \"09\" \"28\" \"86\" \"96\" \"C9\" \"G6\" \"H0\" \"J9\" \"S8\"\n\n$x3\n [1] \"018\" \"030\" \"157\" \"356\" \"616\" \"827\" \"965\" \"C26\" \"E23\" \"H20\"\n\n$x4\n [1] \"2341\" \"2529\" \"3328\" \"4200\" \"5326\" \"5680\" \"9232\" \"9359\" \"S109\" \"S950\"\n\n$x5\n [1] \"25922\" \"26478\" \"36810\" \"81408\" \"86762\" \"C9094\" \"G0491\" \"H0035\" \"S3849\"\n[10] \"T1019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx |>\n  split_lengths() |>\n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n[1] \"1\" \"6\" \"A\" \"M\"\n\n$x2\n [1] \"01\" \"09\" \"28\" \"86\" \"96\" \"C9\" \"G6\" \"H0\" \"J9\" \"S8\"\n\n$x3\n[1] \"030\" \"356\" \"827\" \"C26\" \"E23\" \"H20\"\n\n$x4\n [1] \"2341\" \"2529\" \"3328\" \"4200\" \"5326\" \"5680\" \"9232\" \"9359\" \"S109\" \"S950\"\n\n$x5\n[1] \"25922\" \"26478\" \"36810\" \"81408\" \"G0491\" \"S3849\" \"T1019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n$x1[[1]]\n[1] \"1\" \"6\" \"A\" \"M\"\n\n\n$x2\n$x2[[1]]\n[1] \"01\" \"09\"\n\n$x2[[2]]\n[1] \"28\"\n\n$x2[[3]]\n[1] \"86\"\n\n$x2[[4]]\n[1] \"96\"\n\n$x2[[5]]\n[1] \"C9\"\n\n$x2[[6]]\n[1] \"G6\"\n\n$x2[[7]]\n[1] \"H0\"\n\n$x2[[8]]\n[1] \"J9\"\n\n$x2[[9]]\n[1] \"S8\"\n\n\n$x3\n$x3[[1]]\n[1] \"030\"\n\n$x3[[2]]\n[1] \"356\"\n\n$x3[[3]]\n[1] \"827\"\n\n$x3[[4]]\n[1] \"C26\"\n\n$x3[[5]]\n[1] \"E23\"\n\n$x3[[6]]\n[1] \"H20\"\n\n\n$x4\n$x4[[1]]\n[1] \"2341\" \"2529\"\n\n$x4[[2]]\n[1] \"3328\"\n\n$x4[[3]]\n[1] \"4200\"\n\n$x4[[4]]\n[1] \"5326\" \"5680\"\n\n$x4[[5]]\n[1] \"9232\" \"9359\"\n\n$x4[[6]]\n[1] \"S109\" \"S950\"\n\n\n$x5\n$x5[[1]]\n[1] \"25922\" \"26478\"\n\n$x5[[2]]\n[1] \"36810\"\n\n$x5[[3]]\n[1] \"81408\"\n\n$x5[[4]]\n[1] \"G0491\"\n\n$x5[[5]]\n[1] \"S3849\"\n\n$x5[[6]]\n[1] \"T1019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx |> \n  split_lengths() |>\n  remove_redundant() |>\n  split_first()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\n$x1[[1]]\n[1] \"1\" \"6\" \"A\" \"M\"\n\n\n$x2\n$x2[[1]]\n[1] \"01\" \"09\"\n\n$x2[[2]]\n[1] \"28\"\n\n$x2[[3]]\n[1] \"86\"\n\n$x2[[4]]\n[1] \"96\"\n\n$x2[[5]]\n[1] \"C9\"\n\n$x2[[6]]\n[1] \"G6\"\n\n$x2[[7]]\n[1] \"H0\"\n\n$x2[[8]]\n[1] \"J9\"\n\n$x2[[9]]\n[1] \"S8\"\n\n\n$x3\n$x3[[1]]\n[1] \"030\"\n\n$x3[[2]]\n[1] \"356\"\n\n$x3[[3]]\n[1] \"827\"\n\n$x3[[4]]\n[1] \"C26\"\n\n$x3[[5]]\n[1] \"E23\"\n\n$x3[[6]]\n[1] \"H20\"\n\n\n$x4\n$x4[[1]]\n[1] \"2341\" \"2529\"\n\n$x4[[2]]\n[1] \"3328\"\n\n$x4[[3]]\n[1] \"4200\"\n\n$x4[[4]]\n[1] \"5326\" \"5680\"\n\n$x4[[5]]\n[1] \"9232\" \"9359\"\n\n$x4[[6]]\n[1] \"S109\" \"S950\"\n\n\n$x5\n$x5[[1]]\n[1] \"25922\" \"26478\"\n\n$x5[[2]]\n[1] \"36810\"\n\n$x5[[3]]\n[1] \"81408\"\n\n$x5[[4]]\n[1] \"G0491\"\n\n$x5[[5]]\n[1] \"S3849\"\n\n$x5[[6]]\n[1] \"T1019\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns. Deal with groups containing letters separately.\n\n::: {.panel-tabset}\n\n## Group 3\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(\"C75\", \"C97\", \"G02\", \"G04\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C75\"\n\n[[1]][[2]]\n[1] \"C97\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G02\" \"G04\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"021\" \"022\" \"026\" \"027\"\n\n[[1]][[2]]\n[1] \"032\" \"033\"\n\n[[1]][[3]]\n[1] \"042\" \"044\"\n\n[[1]][[4]]\n[1] \"050\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"157\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"209\"\n\n[[3]][[2]]\n[1] \"225\"\n\n[[3]][[3]]\n[1] \"271\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"308\"\n\n[[4]][[2]]\n[1] \"312\"\n\n[[4]][[3]]\n[1] \"326\"\n\n[[4]][[4]]\n[1] \"347\" \"348\"\n\n[[4]][[5]]\n[1] \"355\"\n\n[[4]][[6]]\n[1] \"362\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"503\" \"505\"\n\n[[5]][[2]]\n[1] \"544\"\n\n[[5]][[3]]\n[1] \"552\" \"553\"\n\n[[5]][[4]]\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"610\" \"612\"\n\n[[6]][[2]]\n[1] \"630\"\n\n[[6]][[3]]\n[1] \"644\" \"646\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"765\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"920\" \"921\" \"922\"\n\n[[8]][[2]]\n[1] \"958\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C75\"\n\n[[9]][[2]]\n[1] \"C97\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E06\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G02\" \"G04\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S23\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"228\"\n\n[[1]][[2]]\n[1] \"280\"\n\n[[1]][[3]]\n[1] \"290\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"438\"\n\n[[2]][[2]]\n[1] \"467\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"613\"\n\n[[3]][[2]]\n[1] \"631\"\n\n[[3]][[3]]\n[1] \"690\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"786\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"871\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"909\"\n\n[[6]][[2]]\n[1] \"989\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"C92\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"E11\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"G20\"\n\n[[9]][[2]]\n[1] \"G60\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"J76\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"L39\"\n\n[[11]][[2]]\n[1] \"L59\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"M11\"\n\n\n[[13]]\n[[13]][[1]]\n[1] \"S51\"\n```\n\n\n:::\n:::\n\n\n\n\n## Group 4\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_4 <- function(x) {\n\n  x <- getelem(x, \"x4\")\n  \n  if (empty(x)) return(x)\n  \n  map(x, function(x) {\n    \n    idx <- data.table(\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      i1 = groupid(take_at(x))) |>\n      fgroup_by(a1) |>\n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |>\n      fmutate(i3 = groupid(a3)) |> \n      fgroup_by(a1, a2, a3) |>\n      fmutate(i4 = groupid(a4)) |> \n      fungroup()\n    \n    lone <- fcount(idx, i1, add = TRUE) |>\n        fsubset((i2 + i3 + i4 + N) == 4)\n    \n    last <- fsubset(idx, code %!in% lone[[\"code\"]])\n    \n    last <- join(\n        fcount(last, grp1, a3),\n        fcount(last, grp1, name = \"G\"), on = \"grp1\", verbose = 0) |>\n        fsubset(N == G) |>\n        join(last, on = c(\"grp1\", \"a3\"), how = \"right\", verbose = 0) |>\n        fsubset(not_na(N))\n    \n      rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n      \n      c(if (empty(lone)) NULL else list(lone[[\"code\"]]),\n        if (empty(last)) NULL else gchop(last[[\"code\"]], last[[\"grp1\"]]),\n        if (empty(rest)) NULL else gchop(rest[[\"code\"]], rest[[\"grp2\"]]))\n    })\n}\n\nc(\"C751\", \"C970\", \"G020\", \"G040\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C751\"\n\n[[1]][[2]]\n[1] \"C970\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G020\"\n\n[[2]][[2]]\n[1] \"G040\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 4] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"0506\" \"0507\"\n\n[[1]][[2]]\n[1] \"0214\" \"0215\" \"0217\" \"0218\" \"0219\"\n\n[[1]][[3]]\n[1] \"0220\" \"0221\" \"0222\"\n\n[[1]][[4]]\n[1] \"0263\" \"0265\" \"0266\" \"0269\"\n\n[[1]][[5]]\n[1] \"0274\" \"0275\"\n\n[[1]][[6]]\n[1] \"0329\"\n\n[[1]][[7]]\n[1] \"0330\"\n\n[[1]][[8]]\n[1] \"0422\"\n\n[[1]][[9]]\n[1] \"0444\" \"0445\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"1577\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"2093\"\n\n[[3]][[2]]\n[1] \"2251\" \"2252\"\n\n[[3]][[3]]\n[1] \"2719\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"3080\"\n\n[[4]][[2]]\n[1] \"3123\"\n\n[[4]][[3]]\n[1] \"3267\"\n\n[[4]][[4]]\n[1] \"3557\"\n\n[[4]][[5]]\n[1] \"3622\"\n\n[[4]][[6]]\n[1] \"3471\"\n\n[[4]][[7]]\n[1] \"3481\" \"3482\" \"3483\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"5442\" \"5443\"\n\n[[5]][[2]]\n[1] \"5030\"\n\n[[5]][[3]]\n[1] \"5054\"\n\n[[5]][[4]]\n[1] \"5520\" \"5525\"\n\n[[5]][[5]]\n[1] \"5530\"\n\n[[5]][[6]]\n[1] \"5857\"\n\n[[5]][[7]]\n[1] \"5860\"\n\n[[5]][[8]]\n[1] \"5870\" \"5872\"\n\n[[5]][[9]]\n[1] \"5880\"\n\n[[5]][[10]]\n[1] \"5890\" \"5892\" \"5894\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"6303\" \"6304\"\n\n[[6]][[2]]\n[1] \"6100\"\n\n[[6]][[3]]\n[1] \"6125\"\n\n[[6]][[4]]\n[1] \"6442\" \"6448\" \"6449\"\n\n[[6]][[5]]\n[1] \"6463\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"7651\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"9587\"\n\n[[8]][[2]]\n[1] \"9202\" \"9208\"\n\n[[8]][[3]]\n[1] \"9213\" \"9214\"\n\n[[8]][[4]]\n[1] \"9220\" \"9222\" \"9223\" \"9224\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"C750\"\n\n[[9]][[2]]\n[1] \"C977\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"E067\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"G027\"\n\n[[11]][[2]]\n[1] \"G041\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"S234\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"0354\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"1032\"\n\n[[2]][[2]]\n[1] \"1197\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"2210\"\n\n[[3]][[2]]\n[1] \"2304\"\n\n[[3]][[3]]\n[1] \"2940\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"4062\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"5002\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"7229\"\n\n[[6]][[2]]\n[1] \"7447\"\n\n[[6]][[3]]\n[1] \"7881\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"8352\"\n\n[[7]][[2]]\n[1] \"8230\"\n\n[[7]][[3]]\n[1] \"8295\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"9004\"\n\n[[8]][[2]]\n[1] \"9591\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"A619\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"H203\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"J088\"\n\n[[11]][[2]]\n[1] \"J731\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"K000\"\n\n\n[[13]]\n[[13]][[1]]\n[1] \"L065\"\n\n[[13]][[2]]\n[1] \"L213\"\n\n\n[[14]]\n[[14]][[1]]\n[1] \"Q510\"\n\n\n[[15]]\n[[15]][[1]]\n[1] \"T201\"\n```\n\n\n:::\n:::\n\n\n\n\n## Group 5\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_5 <- function(x) {\n\n  x <- getelem(x, \"x5\")\n  \n  if (empty(x)) return(x)\n  \n  # x <- x[[1]]\n  \n  map(x, function(x) {\n    \n    idx <- data.table(\n      code = x,\n      grp1 = sf_sub(x, 1, 2),\n      grp2 = sf_sub(x, 1, 3),\n      grp3 = sf_sub(x, 1, 4),\n      a1 = take_at(x),\n      a2 = take_at(x, 2),\n      a3 = take_at(x, 3),\n      a4 = take_at(x, 4),\n      a5 = take_at(x, 5),\n      i1 = groupid(take_at(x))) |>\n      fgroup_by(a1) |> \n      fmutate(i2 = groupid(a2)) |>\n      fgroup_by(a1, a2) |> \n      fmutate(i3 = groupid(a3)) |>\n      fgroup_by(a1, a2, a3) |> \n      fmutate(i4 = groupid(a4)) |>\n      fgroup_by(a1, a2, a3, a4) |> \n      fmutate(i5 = groupid(a5)) |> \n      fungroup()\n\n      lone <- fcount(idx, i1, add = TRUE) |> \n        fsubset((i2 + i3 + i4 + i5 + N) == 5)\n      \n      last <- fsubset(idx, code %!in% lone[[\"code\"]])\n      \n      last <- join(\n        fcount(last, grp2, a4),\n        fcount(last, grp2, name = \"G\"), on = \"grp2\", verbose = 0) |>\n        fsubset(N == G) |>\n        join(last, on = c(\"grp2\", \"a4\"), how = \"right\", verbose = 0) |> \n        fsubset(not_na(N))\n      \n      rest <- fsubset(idx, code %!in% c(lone[[\"code\"]], last[[\"code\"]]))\n      \n      c(if (empty(lone)) NULL else list(lone[[\"code\"]]),\n        if (empty(last)) NULL else gchop(last[[\"code\"]], last[[\"grp2\"]]),\n        if (empty(rest)) NULL else gchop(rest[[\"code\"]], rest[[\"grp3\"]]))\n    })\n}\n\nc(\"C7510\", \"C9701\", \"G0200\", \"G0400\") |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"C7510\"\n\n[[1]][[2]]\n[1] \"C9701\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"G0200\"\n\n[[2]][[2]]\n[1] \"G0400\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 5] |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"15777\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"20939\"\n\n[[2]][[2]]\n[1] \"27197\" \"27198\"\n\n[[2]][[3]]\n[1] \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n\n[[2]][[4]]\n[1] \"22526\" \"22527\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"30801\" \"30802\"\n\n[[3]][[2]]\n[1] \"31231\"\n\n[[3]][[3]]\n[1] \"32673\"\n\n[[3]][[4]]\n[1] \"34713\" \"34714\" \"34715\" \"34716\" \"34717\"\n\n[[3]][[5]]\n[1] \"35572\"\n\n[[3]][[6]]\n[1] \"36221\"\n\n[[3]][[7]]\n[1] \"34812\"\n\n[[3]][[8]]\n[1] \"34820\"\n\n[[3]][[9]]\n[1] \"34833\" \"34834\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"50300\"\n\n[[4]][[2]]\n[1] \"50540\"\n\n[[4]][[3]]\n[1] \"55300\"\n\n[[4]][[4]]\n[1] \"58575\"\n\n[[4]][[5]]\n[1] \"58600\" \"58605\"\n\n[[4]][[6]]\n[1] \"58800\" \"58805\"\n\n[[4]][[7]]\n[1] \"54420\"\n\n[[4]][[8]]\n[1] \"54430\"\n\n[[4]][[9]]\n[1] \"55200\"\n\n[[4]][[10]]\n[1] \"55250\"\n\n[[4]][[11]]\n[1] \"58700\"\n\n[[4]][[12]]\n[1] \"58720\"\n\n[[4]][[13]]\n[1] \"58900\"\n\n[[4]][[14]]\n[1] \"58920\" \"58925\"\n\n[[4]][[15]]\n[1] \"58940\" \"58943\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"61000\" \"61001\"\n\n[[5]][[2]]\n[1] \"61253\"\n\n[[5]][[3]]\n[1] \"64634\" \"64636\"\n\n[[5]][[4]]\n[1] \"63035\"\n\n[[5]][[5]]\n[1] \"63043\" \"63044\" \"63045\" \"63046\" \"63047\" \"63048\"\n\n[[5]][[6]]\n[1] \"64421\"\n\n[[5]][[7]]\n[1] \"64480\" \"64484\"\n\n[[5]][[8]]\n[1] \"64491\" \"64492\" \"64494\" \"64495\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"76514\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"95870\"\n\n[[7]][[2]]\n[1] \"92025\"\n\n[[7]][[3]]\n[1] \"92081\" \"92082\" \"92083\"\n\n[[7]][[4]]\n[1] \"92132\" \"92133\" \"92134\"\n\n[[7]][[5]]\n[1] \"92145\"\n\n[[7]][[6]]\n[1] \"92201\" \"92202\"\n\n[[7]][[7]]\n[1] \"92227\" \"92228\" \"92229\"\n\n[[7]][[8]]\n[1] \"92235\"\n\n[[7]][[9]]\n[1] \"92240\" \"92242\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n\n[[8]][[2]]\n[1] \"C9771\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"E0675\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"G0279\"\n\n[[10]][[2]]\n[1] \"G0412\" \"G0413\" \"G0414\" \"G0415\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"S2342\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"0329T\"\n\n[[12]][[2]]\n[1] \"0330T\"\n\n[[12]][[3]]\n[1] \"0422T\"\n\n[[12]][[4]]\n[1] \"0214T\"\n\n[[12]][[5]]\n[1] \"0215T\"\n\n[[12]][[6]]\n[1] \"0217T\"\n\n[[12]][[7]]\n[1] \"0218T\"\n\n[[12]][[8]]\n[1] \"0219T\"\n\n[[12]][[9]]\n[1] \"0220T\"\n\n[[12]][[10]]\n[1] \"0221T\"\n\n[[12]][[11]]\n[1] \"0222T\"\n\n[[12]][[12]]\n[1] \"0263T\"\n\n[[12]][[13]]\n[1] \"0265T\"\n\n[[12]][[14]]\n[1] \"0266T\"\n\n[[12]][[15]]\n[1] \"0269T\"\n\n[[12]][[16]]\n[1] \"0274T\"\n\n[[12]][[17]]\n[1] \"0275T\"\n\n[[12]][[18]]\n[1] \"0444T\"\n\n[[12]][[19]]\n[1] \"0445T\"\n\n[[12]][[20]]\n[1] \"0506T\"\n\n[[12]][[21]]\n[1] \"0507T\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  group_5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]][[1]]\n[1] \"15937\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"21820\"\n\n[[2]][[2]]\n[1] \"22904\"\n\n[[2]][[3]]\n[1] \"25805\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"36510\"\n\n[[3]][[2]]\n[1] \"39561\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"50620\"\n\n[[4]][[2]]\n[1] \"50694\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"78804\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"A7507\"\n\n\n[[7]]\n[[7]][[1]]\n[1] \"G6038\"\n\n\n[[8]]\n[[8]][[1]]\n[1] \"J2001\"\n\n[[8]][[2]]\n[1] \"J2794\"\n\n\n[[9]]\n[[9]][[1]]\n[1] \"L3916\"\n\n\n[[10]]\n[[10]][[1]]\n[1] \"S5110\"\n\n\n[[11]]\n[[11]][[1]]\n[1] \"0748T\"\n\n\n[[12]]\n[[12]][[1]]\n[1] \"0172U\"\n```\n\n\n:::\n:::\n\n\n\n\n## process_groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  list(\n    g1 = x$x1,\n    g2 = x$x2,\n    g3 = group_3(x),\n    g4 = group_4(x),\n    g5 = group_5(x)\n    )\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n\n$g2\n$g2[[1]]\n[1] \"30\" \"31\" \"32\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n\n$g4\nlist()\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n\n$g2\nlist()\n\n$g3\nlist()\n\n$g4\nlist()\n\n$g5\nlist()\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(50) |> \n  split_lengths() |> \n  remove_redundant() |>\n  split_first() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n$g1[[1]]\n[1] \"1\" \"3\" \"5\" \"G\" \"H\"\n\n\n$g2\n$g2[[1]]\n[1] \"00\" \"04\" \"07\"\n\n$g2[[2]]\n[1] \"25\" \"26\" \"27\"\n\n$g2[[3]]\n[1] \"40\" \"42\" \"47\"\n\n$g2[[4]]\n[1] \"63\" \"64\"\n\n$g2[[5]]\n[1] \"74\" \"76\"\n\n$g2[[6]]\n[1] \"80\" \"81\"\n\n$g2[[7]]\n[1] \"94\"\n\n$g2[[8]]\n[1] \"A6\"\n\n$g2[[9]]\n[1] \"C1\" \"C8\"\n\n$g2[[10]]\n[1] \"E0\" \"E1\"\n\n$g2[[11]]\n[1] \"J1\" \"J3\" \"J9\"\n\n$g2[[12]]\n[1] \"L1\" \"L6\"\n\n$g2[[13]]\n[1] \"Q4\"\n\n\n$g3\n$g3[[1]]\n$g3[[1]][[1]]\n[1] \"019\"\n\n$g3[[1]][[2]]\n[1] \"024\"\n\n$g3[[1]][[3]]\n[1] \"036\"\n\n$g3[[1]][[4]]\n[1] \"069\"\n\n\n$g3[[2]]\n$g3[[2]][[1]]\n[1] \"210\"\n\n$g3[[2]][[2]]\n[1] \"282\"\n\n\n$g3[[3]]\n$g3[[3]][[1]]\n[1] \"621\" \"623\"\n\n$g3[[3]][[2]]\n[1] \"657\"\n\n$g3[[3]][[3]]\n[1] \"696\"\n\n\n$g3[[4]]\n$g3[[4]][[1]]\n[1] \"770\"\n\n$g3[[4]][[2]]\n[1] \"791\"\n\n\n$g3[[5]]\n$g3[[5]][[1]]\n[1] \"862\"\n\n$g3[[5]][[2]]\n[1] \"871\" \"873\" \"878\"\n\n$g3[[5]][[3]]\n[1] \"880\"\n\n\n$g3[[6]]\n$g3[[6]][[1]]\n[1] \"925\"\n\n$g3[[6]][[2]]\n[1] \"939\"\n\n$g3[[6]][[3]]\n[1] \"969\"\n\n$g3[[6]][[4]]\n[1] \"994\"\n\n\n$g3[[7]]\n$g3[[7]][[1]]\n[1] \"A20\"\n\n$g3[[7]][[2]]\n[1] \"A42\"\n\n\n$g3[[8]]\n$g3[[8]][[1]]\n[1] \"C75\" \"C79\"\n\n\n$g3[[9]]\n$g3[[9]][[1]]\n[1] \"K08\"\n\n\n$g3[[10]]\n$g3[[10]][[1]]\n[1] \"L86\"\n\n\n$g3[[11]]\n$g3[[11]][[1]]\n[1] \"M10\"\n\n\n$g3[[12]]\n$g3[[12]][[1]]\n[1] \"S05\"\n\n\n$g3[[13]]\n$g3[[13]][[1]]\n[1] \"T10\"\n\n\n$g3[[14]]\n$g3[[14]][[1]]\n[1] \"V23\"\n\n\n\n$g4\n$g4[[1]]\n$g4[[1]][[1]]\n[1] \"0230\"\n\n$g4[[1]][[2]]\n[1] \"0385\"\n\n$g4[[1]][[3]]\n[1] \"0808\"\n\n$g4[[1]][[4]]\n[1] \"0123\"\n\n$g4[[1]][[5]]\n[1] \"0170\"\n\n\n$g4[[2]]\n$g4[[2]][[1]]\n[1] \"2390\"\n\n$g4[[2]][[2]]\n[1] \"2434\"\n\n$g4[[2]][[3]]\n[1] \"2806\"\n\n$g4[[2]][[4]]\n[1] \"2984\"\n\n\n$g4[[3]]\n$g4[[3]][[1]]\n[1] \"4326\"\n\n$g4[[3]][[2]]\n[1] \"4965\"\n\n\n$g4[[4]]\n$g4[[4]][[1]]\n[1] \"7220\"\n\n\n$g4[[5]]\n$g4[[5]][[1]]\n[1] \"8224\"\n\n$g4[[5]][[2]]\n[1] \"8546\"\n\n$g4[[5]][[3]]\n[1] \"8600\"\n\n$g4[[5]][[4]]\n[1] \"8830\" \"8831\" \"8837\"\n\n\n$g4[[6]]\n$g4[[6]][[1]]\n[1] \"9776\"\n\n$g4[[6]][[2]]\n[1] \"9920\"\n\n\n$g4[[7]]\n$g4[[7]][[1]]\n[1] \"E210\"\n\n\n$g4[[8]]\n$g4[[8]][[1]]\n[1] \"J224\"\n\n\n$g4[[9]]\n$g4[[9]][[1]]\n[1] \"M113\" \"M119\"\n\n\n$g4[[10]]\n$g4[[10]][[1]]\n[1] \"Q500\"\n\n\n$g4[[11]]\n$g4[[11]][[1]]\n[1] \"V241\"\n\n\n\n$g5\n$g5[[1]]\n$g5[[1]][[1]]\n[1] \"28475\"\n\n$g5[[1]][[2]]\n[1] \"28605\"\n\n$g5[[1]][[3]]\n[1] \"22802\"\n\n$g5[[1]][[4]]\n[1] \"22819\"\n\n\n$g5[[2]]\n$g5[[2]][[1]]\n[1] \"46257\"\n\n\n$g5[[3]]\n$g5[[3]][[1]]\n[1] \"60502\"\n\n\n$g5[[4]]\n$g5[[4]][[1]]\n[1] \"82441\"\n\n$g5[[4]][[2]]\n[1] \"83632\"\n\n$g5[[4]][[3]]\n[1] \"86710\"\n\n\n$g5[[5]]\n$g5[[5]][[1]]\n[1] \"96415\"\n\n$g5[[5]][[2]]\n[1] \"97162\"\n\n$g5[[5]][[3]]\n[1] \"92228\"\n\n$g5[[5]][[4]]\n[1] \"92242\"\n\n\n$g5[[6]]\n$g5[[6]][[1]]\n[1] \"A4510\"\n\n\n$g5[[7]]\n$g5[[7]][[1]]\n[1] \"C9899\"\n\n\n$g5[[8]]\n$g5[[8]][[1]]\n[1] \"D0272\"\n\n\n$g5[[9]]\n$g5[[9]][[1]]\n[1] \"L5430\"\n\n$g5[[9]][[2]]\n[1] \"L8465\"\n\n\n$g5[[10]]\n$g5[[10]][[1]]\n[1] \"M1305\"\n\n\n$g5[[11]]\n$g5[[11]][[1]]\n[1] \"U0001\"\n\n\n$g5[[12]]\n$g5[[12]][[1]]\n[1] \"V2785\"\n\n\n$g5[[13]]\n$g5[[13]][[1]]\n[1] \"0503F\"\n```\n\n\n:::\n:::\n\n\n\n\n### Problems\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#---------- 1\n## Problem\nlist(\"L80\", c(\"L56\", \"L59\"))\n\n## Solution\n\"^L(5[69]|80)$\"\n\n## Test\nsf_extract(hcpcs, \"^L(5[69]|80)[0-9]{2}$\")\n\n#---------- 2\n## Problem\nlist(c(\"021\", \"022\", \"026\", \"027\"), c(\"032\", \"033\"), c(\"042\", \"044\"), \"050\")\n\n## Solution\n\"^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$\"\n\n## Test\nsf_extract(hcpcs, \"^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$\")\n\n#---------- 3\n# How do you tell the difference?\n\n## Problem\nlist(c(\"C75\", \"C97\"), c(\"G02\", \"G04\"))\n\n## Solution\n\"^C(75|97)[A-Z0-9]{2}$\"\n\n\"^G0[24][A-Z0-9]{2}$\"\n\n## Test\nsf_extract(hcpcs, \"^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$\")\n```\n:::\n\n\n\n\n::: \n\n# Reduction\n\n::: {.panel-tabset}\n\n## `reduce_runs()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  if (nchar(x) == 1) return(x)\n\n  test <- setNames(rep(0, 37), c(0:9, \"&\", LETTERS))\n  \n  vec <- test[c(splits(x), \"&\")]\n  \n  vec <- vec[not_na(vec)]\n  \n  test[names(vec)] <- 1\n  \n  test[names(test) == \"&\"] <- 0\n\n  groups <- data.table(\n    value = names(test),\n    keys = test,\n    group = groupid(test)) |>\n    fgroup_by(group)\n  \n  groups <- join(\n    groups, \n    fcount(groups, group), \n    on = \"group\", \n    verbose = 0) |> \n    fungroup() |> \n    fsubset(keys == 1) |>\n    fsubset(N >= 3) |>\n    fselect(value, group)\n    \n  if (empty(groups)) return(x)\n  \n  xgroups <- gchop(groups$value, \n                   groups$group) |>\n    map(smush) |>\n    list_c()\n  \n  if (all(xgroups == smush(c(0:9, \"&\", LETTERS)))) return(\"[A-Z0-9]\")\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(groups, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(groups, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  bracket(res)\n}\n```\n:::\n\n\n\n\n## `red1()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred1 <- function(x) {\n  \n  x <- getelem(x, \"g1\")[[1]]\n  \n  if (empty(x)) return(character(0))\n  \n  re <- sort_order(x) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(glue::glue(\"^{re}{{5}}$\"))\n  # return(paste0(\"^\", re, \"{5}$\"))\n  \n  post <- iif_else(\n    sf_detect(\n      re, \n      \"\\\\[?[0-9]{1}\"), \n    \"[A-Z0-9]\", \n    \"[0-9]\")\n  \n  # paste0(\"^\", re, post, \"{4}\")\n  glue::glue(\"^{re}{post}{{4}}$\")\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[GJ04-6][A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nc(LETTERS[1:5], 0:9) |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |>\n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[CEGS0-35-79][A-Z0-9]{4}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(0:9, LETTERS))) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-Z0-9]{5}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(LETTERS[1:5], 0:9))) |> \n  red1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}$\n```\n\n\n:::\n:::\n\n\n\n\n## `red2()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred2 <- function(x) {\n  \n  x <- getelem(x, \"g2\")\n  \n  if (empty(x)) return(character(0))\n  \n  l <- vlen(x)\n  \n  c(x[l == 1], \n    map(x[l > 1], \\(x) {\n    \n    parts <- stringr::str_split_fixed(x, \"\", max_vlen(x)) |> \n    as.data.frame() |>\n    map(uniq_narm) |>\n    map(sort_order) |>\n    map(reduce_runs) |>\n    delist()\n\n  multi <- sf_nchar(parts) > 1\n  nobrk <- !sf_detect(parts[multi], \"\\\\[|\\\\]\")\n  \n  parts[multi] <- iif_else(\n    any(nobrk), \n    map_chr(parts[multi], bracket), \n    parts[multi])\n  \n  smush(parts)\n  })\n )\n}\n\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  split_first() |>\n  process_groups() |> \n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"15\"\n\n[[2]]\n[1] \"76\"\n\n[[3]]\n[1] \"E0\"\n\n[[4]]\n[1] \"S2\"\n\n[[5]]\n[1] \"2[027]\"\n\n[[6]]\n[1] \"3[0-24-6]\"\n\n[[7]]\n[1] \"9[25]\"\n\n[[8]]\n[1] \"C[79]\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"3[0-2]\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"A\", c(0:5, LETTERS)) |> \n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"A[A-Z0-5]\"\n```\n\n\n:::\n:::\n\n\n\n\n## `red3()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nred3 <- function(x) {\n  \n  x <- getelem(x, \"g3\")\n  \n  if (empty(x)) return(character(0))\n  \n  vlen(x)\n  \n  c(\n    leave, \n    map(top, function(x) {\n      x <- top[[1]]\n      x <- top[[2]]\n      \n      parts <- stringr::str_split_fixed(x, \"\", n = max_vlen(x)) |> \n        as.data.frame() |>\n        map(unique_narm) |> \n        map(sort_order) |>\n        map(reduce_runs) |> \n        delist()\n      \n      multi <- sf_nchr(parts) > 1\n      \n      if (any(multi)) parts[multi] <- parent(paste0(parts[multi], collapse = \"|\"))\n      \n      smush(unique_narm(parts))\n    })\n  )\n}\n\nx <- long_test2[sf_nchar(long_test2) == 3] |>\n  split_lengths() |>\n  remove_redundant() |>\n  split_first() |>\n  process_groups() |>\n  red3()\n```\n:::\n\n\n\n\n::: \n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- vrg <- \\(x, n) {\n  \n  if (empty(x)) return(character(0))\n  \n  post <- iif_else(sf_detect(x, \"^\\\\[?[A-Z]\\\\-?\"), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- data.table::fcase(\n    n == 0, glue::glue(\"^{x}$\"),                \n    n == 1, glue::glue(\"^{x}{post}$\"),\n    n == 2, glue::glue(\"^{x}{post}{{2}}$\"),\n    n == 3, glue::glue(\"^{x}{post}{{3}}$\")\n    )\n    \n  glue::glue_collapse(x)\n}\n\nreduce_groups <- \\(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = map_chr(x$g2, p2) |> map_chr(vrg, n = 3) |> glue::as_glue(),\n    g3 = map_chr(x$g3, p2) |> map_chr(vrg, n = 2) |> glue::as_glue(),\n    g4 = map_chr(x$g4, p2) |> map_chr(vrg, n = 1) |> glue::as_glue(),\n    g5 = map_chr(x$g5, p2) |> map_chr(vrg, n = 0) |> glue::as_glue()\n  )\n}\n\nall_tests[sf_nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\n# long_test2[nchar(long_test2) == 4]\n\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_codex(v.0.0.0.9000)_, _emphatic(v.0.1.8)_, _kit(v.0.0.19)_, _collapse(v.2.0.17)_, _data.table(v.1.16.99)_, _stringfish(v.0.16.0)_, _vctrs(v.0.6.5)_, _cli(v.3.6.3)_, _rlang(v.1.1.4)_, _stringr(v.1.5.1)_, _purrr(v.1.0.2)_, _dplyr(v.1.1.4)_ and _fuimus(v.0.0.2)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _crayon(v.1.5.3)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _tools(v.4.4.1)_, _qs(v.0.27.2)_, _parallel(v.4.4.1)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _cheapr(v.0.9.91)_, _fs(v.1.6.5)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13)_, _systemfonts(v.1.1.0)_, _xfun(v.0.48)_, _tibble(v.3.2.1)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.49)_, _htmltools(v.0.5.8.1)_ and _rmarkdown(v.2.29)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}