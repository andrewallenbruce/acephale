{
  "hash": "0e851bfc0bd9b0cb9f94f626c09d1e80",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>               Count                                   Regex</span><br/>All           <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/>Level I       <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>Category I    <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/>Category II   <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>Level II      <span style='color:#ffffff;'><span style='background-color:#333333;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n# TODO\n\n   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [ ] `process_groups()`\n   -   [X] `g1()`\n   -   [X] `g2()`\n   -   [ ] `g3()`\n   -   [ ] `g4()`\n   -   [ ] `g5()`\n-   [ ] `reduce_groups()`\n\n# Helpers\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np0 <- \\(..., sep = \"\") paste0(..., collapse = sep)\n\np0(\"A\", \"B\", \"C\", \"D\", \"E\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ABCDE\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsorder <- \\(x) {\n  \n  st <- stringr::str_sort(x)\n  \n  az <- grabaz(st)\n  \n  p0(p0(az), p0(st[!st %in% az]))\n\n}\n\nsorder(c(\"A\", \"B\", \"C\", \"D\", \"E\", \"1\", \"2\", \"3\", \"4\", \"5\", \"F\", \"T\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ABCDEFT12345\"\n```\n\n\n:::\n:::\n\n\n\n\n## Printing\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff <- \\(x) stringr::str_trunc(string = x, width = 40, side = \"right\")\nwrap <- \\(x) stringr::str_wrap(string = x, width = 40, indent = 5)\n\ncutoff(p0(LETTERS, LETTERS))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRS...\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwrap(p0(LETTERS, LETTERS))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"     AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYZZ\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview <- \\(x) {\n  \n  idx  <- seq_along(x)\n  len  <- collapse::vlengths(x, use.names = FALSE)\n  tree <- unname(purrr::map_vec(x, p0, sep = ' ')) |> purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"{format(idx)}: \", \n      \"{format(len)}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n\n\n\n# Preprocessing\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x) {\n  \n  stopifnot(is.character(x))\n  \n  x <- stringfish::sf_gsub(x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n    fuimus::uniq_rmna() |> \n    stringr::str_sort()\n  \n  l <- collapse::vlengths(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  cat(\"Split by Length:\", sep = \"\\n\")\n  # cat(\"\\n\")\n  cat(view(out), sep = \"\\n\")\n  \n  return(invisible(out))\n}\n\nrandom_hcpcs_vec(n = 5) |> \n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 5|--[0 1 6 B V]\n2: 5|--[00 62 84 93 G4]\n3: 5|--[066 262 353 515 882]\n4: 5|--[3778 7809 9715 G015 M024]\n5: 5|--[15792 21348 92609 93597 97140]\n```\n\n\n:::\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Why? A user may input complete and incomplete HCPCS codes alongside each other. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview_remove <- \\(x) {\n  \n  len  <- length(x)\n  tree <- unname(paste0(x, collapse = \" \")) |> \n    purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"Removed \", \n      \"{format(len, justify = 'left')}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n\nrr <- \\(x, y) {\n  \n  if (empty(x)) return(character(0))\n  \n  if (empty(y)) return(x)\n\n  contrast(x, y)\n}\n\nremove_redundant <- function(x) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  cat(view(out), sep = \"\\n\")\n  \n  return(invisible(out))\n}\n\nrandom_hcpcs_vec(25) |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 10|--[0 5 8 E F G H L Q T]\n2: 19|--[00 04 22 27 61 81 87 88 A4 A6 E0 G8 G...]\n3: 25|--[076 172 202 219 277 312 336 443 505 5...]\n4: 25|--[0120 0165 1101 2304 2753 3125 3369 35...]\n5: 25|--[24343 25260 25263 33507 41520 43763 4...]\n\n1: 10|--[0 5 8 E F G H L Q T]\n2:  1|--[22]\n3:  1|--[172]\n4:  1|--[1101]\n5:  1|--[24343]\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlump <- function(x, threshold = 3) {\n  \n  stopifnot(is.numeric(x))\n\n  xo <- order(x)\n\n  xs <- x[xo]\n  \n  dlag <- abs(c(0, xs[-1] - xs[seq_along(xs) - 1]))\n\n  bi <- ifelse(dlag >= threshold, 1, 0)\n\n  id <- cumsum(bi) + 1\n  \n  id[xo]\n  \n}\n\nletters_2_numbers <- \\(x) {\n  \n  hcpcs <- LETTERS[sf_grepl(LETTERS, \"[^DINOW-Z]\", nthreads = 4L)]\n  \n  look <- set_names(seq_along(hcpcs), hcpcs)\n  \n  unname(look[grabaz(x)])\n}\n```\n:::\n\n\n\n\n\n::: {.panel-tabset}\n\n## [g1|g2]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x) {\n  \n  x <- get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  list(x)\n}\n\ng2 <- function(x) {\n  \n  x <- get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  rsplit(x, takei(x, 1), use.names = FALSE)\n}\n\nrandom_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 10|--[0 1 3 4 7 C F J L M]\n2: 10|--[67 69 C9 G8 J1 J9 L2 M1 S2 S5]\n3:  9|--[432 646 784 823 992 A62 B90 G92 L24]\n4: 10|--[2543 4450 6158 8440 L321 L392 L662 L8...]\n5: 10|--[27656 50543 61070 88291 G9268 G9344 J...]\n\n1: 10|--[0 1 3 4 7 C F J L M]\n2:  1|--[67]\n3:  1|--[646]\n4:  1|--[2543]\n5:  1|--[27656]\n\n1: 10|--[0 1 3 4 7 C F J L M]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec(25) |>\n  split_lengths() |> \n  remove_redundant() |>\n  g2() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 10|--[1 5 6 7 9 G J L Q V]\n2: 21|--[31 33 40 65 83 86 93 96 98 A6 C7 C9 E...]\n3: 25|--[236 255 283 295 414 573 613 631 658 8...]\n4: 25|--[2111 2281 2623 2647 3323 3324 3376 44...]\n5: 25|--[0704T 15758 17315 19288 22116 27826 5...]\n\n1: 10|--[1 5 6 7 9 G J L Q V]\n2:  1|--[31]\n3:  1|--[236]\n4:  1|--[2111]\n5:  1|--[0704T]\n\n1: 1|--[31]\n```\n\n\n:::\n:::\n\n\n\n\n## [g3]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x) {\n  \n  x <- get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(as.integer(str_replace_all(chr, \"[A-Z]\", letters_2_numbers))))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  out\n}\n\nall_tests[nchar(all_tests) < 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  6|--[0 4 5 6 G J]\n2: 29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n1: 6|--[0 4 5 6 G J]\n2: 1|--[15]\n3: 0|--[]\n4: 0|--[]\n5: 0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  0|--[]\n5:  0|--[]\n\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 10|--[0 1 2 4 7 C G K R S]\n2: 27|--[01 06 27 28 35 41 42 43 45 47 49 54 6...]\n3: 29|--[191 274 298 335 339 420 543 613 652 8...]\n4: 30|--[0016 0666 0713 1035 1574 2761 2823 32...]\n5: 30|--[0029U 01392 0348T 0691T 11310 2018F 2...]\n\n1: 10|--[0 1 2 4 7 C G K R S]\n2:  1|--[35]\n3:  1|--[335]\n4:  1|--[3244]\n5:  1|--[33895]\n\n1: 1|--[335]\n```\n\n\n:::\n:::\n\n\n\n\n## [4]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x) {\n  \n  x <- get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_replace_all(chr, \"[A-Z]\", letters_2_numbers)\n        )))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n1: 6|--[5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  1|--[NA]\n3:  1|--[NA]\n4:  1|--[NA]\n5:  1|--[NA]\n\n1: 1|--[NA]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 10|--[0 1 3 5 8 A J Q R U]\n2: 10|--[27 41 50 57 59 92 A6 G8 J0 S5]\n3: 10|--[213 368 623 812 862 902 936 A43 G96 L32]\n4: 10|--[2500 2772 3810 5074 6478 7777 7801 G0...]\n5: 10|--[0129U 3267F 75635 A4313 G0480 G8483 J...]\n\n1: 10|--[0 1 3 5 8 A J Q R U]\n2:  1|--[27]\n3:  1|--[213]\n4:  1|--[2500]\n5:  1|--[75635]\n\n1: 1|--[2500]\n```\n\n\n:::\n:::\n\n\n\n\n## [5]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x) {\n  \n  x <- get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grabaz(x)\n  num <- x[!x %in% chr]\n  \n  num  <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_remove_all(chr, \"[A-Z]\")\n        )))\n  \n  # dchr <- as.integer(str_remove_all(chr, \"^[A-Z]|[A-Z]$\"))\n  # \n  # dchr <- ifelse(dchr %% 10 == 0, dchr + max(dchr), dchr)\n  # \n  # chr <- data.table(\n  #   code = chr, \n  #   lump = lump(dchr))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  out\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  1|--[NA]\n3:  1|--[NA]\n4:  1|--[NA]\n5:  1|--[NA]\n\n1: 1|--[NA]\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |>\n  split_lengths() |> \n  remove_redundant() |>\n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n 1: 2|--[90460 90461]\n 2: 1|--[90471]\n 3: 1|--[90474]\n 4: 1|--[90619]\n 5: 1|--[90633]\n 6: 1|--[90647]\n 7: 2|--[90670 90672]\n 8: 2|--[90681 90682]\n 9: 2|--[90687 90688]\n10: 2|--[90698 90700]\n11: 1|--[90710]\n12: 1|--[90713]\n13: 1|--[90716]\n14: 1|--[90723]\n15: 1|--[90740]\n16: 1|--[90743]\n17: 2|--[90747 90749]\n18: 1|--[90756]\n19: 1|--[A4467]\n20: 1|--[A9283]\n21: 1|--[A9285]\n22: 2|--[L1904 L1906]\n23: 1|--[L1920]\n24: 1|--[L1930]\n25: 1|--[L1945]\n26: 1|--[L1950]\n27: 2|--[L1970 L1971]\n28: 1|--[L2000]\n29: 1|--[L2005]\n30: 2|--[L2020 L2030]\n31: 1|--[L2036]\n32: 1|--[L2037]\n33: 2|--[L2108 L2112]\n34: 1|--[L2126]\n35: 1|--[L2128]\n36: 1|--[L2136]\n37: 1|--[L2180]\n38: 1|--[L2186]\n39: 1|--[L2188]\n40: 1|--[L2200]\n41: 1|--[L2210]\n42: 1|--[L2232]\n43: 1|--[L2240]\n44: 1|--[L2265]\n45: 1|--[L2270]\n46: 1|--[L2300]\n47: 1|--[L2310]\n48: 1|--[L2335]\n49: 1|--[L2340]\n50: 1|--[L2370]\n51: 1|--[L2375]\n52: 2|--[L2387 L2390]\n53: 1|--[L2405]\n54: 1|--[L2415]\n55: 1|--[L2492]\n56: 1|--[L2500]\n57: 1|--[L2525]\n58: 1|--[L2526]\n59: 1|--[L2550]\n60: 1|--[L2750]\n61: 1|--[L2768]\n62: 1|--[L2780]\n63: 1|--[L2800]\n64: 1|--[L2810]\n65: 1|--[L2840]\n66: 1|--[L2850]\n67: 1|--[L4010]\n68: 1|--[L4020]\n69: 1|--[L4045]\n70: 1|--[L4050]\n71: 2|--[L4070 L4080]\n72: 2|--[L4110 L4130]\n73: 1|--[L4350]\n74: 2|--[L4360 L4386]\n75: 2|--[L4387 L4396]\n76: 1|--[L4397]\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n# Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  list(\n    g1 = g1(x),\n    g2 = g2(x),\n    g3 = g3(x),\n    g4 = g4(x),\n    g5 = g5(x)\n  )\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 6|--[0 4 5 6 G J]\n2: 1|--[30]\n3: 1|--[721]\n4: 1|--[NA]\n5: 1|--[92015]\n\n1: 1|--[c(\"0\", \"4\", \"5\", \"6\", \"G\", \"J\")]\n2: 1|--[30]\n3: 1|--[721]\n4: 1|--[NA]\n5: 1|--[92015]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  1|--[NA]\n3:  1|--[NA]\n4:  1|--[NA]\n5:  1|--[NA]\n\n1: 1|--[c(\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", ...]\n2: 1|--[NA]\n3: 1|--[NA]\n4: 1|--[NA]\n5: 1|--[NA]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:   6|--[0 4 5 6 G J]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1: 6|--[0 4 5 6 G J]\n2: 1|--[15]\n3: 1|--[NA]\n4: 1|--[NA]\n5: 1|--[NA]\n\n1: 1|--[c(\"0\", \"4\", \"5\", \"6\", \"G\", \"J\")]\n2: 1|--[15]\n3: 1|--[NA]\n4: 1|--[NA]\n5: 1|--[NA]\n```\n\n\n:::\n:::\n\n\n\n\n## Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  if (x == paste0(ad, collapse = \"\")) return(\"[A-Z0-9]\")\n  \n  vec  <- set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(NULL)\n  \n  g1 <- get_elem(x, \"g1\")[[1]]\n  \n  re <- sorder(g1) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(p0(\"(^\", re, \"{5}$)\"))\n  \n  postfix <- ifelse(\n    sf_grepl(re, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  return(p0(\"(^\", re, postfix, \"{4}$)\"))\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 6|--[0 4 5 6 G J]\n2: 1|--[30]\n3: 1|--[721]\n4: 1|--[NA]\n5: 1|--[92015]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  1|--[NA]\n3:  1|--[NA]\n4:  1|--[NA]\n5:  1|--[NA]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^0[A-Z0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(LETTERS[1:5], 0:9)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^A[0-9]{4}$)\"\n```\n\n\n:::\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(NULL)\n  \n  vecs <- str_split_fixed(x, \"\", fmax(vlengths(x))) |> as.data.frame()\n  \n  to_brackets <- vecs |>\n    purrr::map(fuimus::uniq_rmna) |>\n    purrr::map(sorder)\n  \n  to_vec <- to_brackets |>\n    purrr::map(reduce_runs)\n  \n  multi_chars <- unname(nchar(to_vec) > 1)\n  \n  nobrack <- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n  \n  to_vec[multi_chars] <- ifelse(\n    any(nobrack), \n    purrr::map_chr(to_vec[multi_chars], \\(x) paste0(\"[\", x, \"]\")), \n    to_vec[multi_chars])\n\n  paste0(purrr::list_c(to_vec))\n}\n```\n:::\n\n\n\n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvrg <- function(x, n) {\n  \n  if (is.null(x)) return(NULL)\n  \n  postfix <- ifelse(\n    sf_grepl(x, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- ifelse(\n    n == 0, \n    p0(\"(^\", x, \"$)\"),                \n    p0(\"(^\", x, postfix, \"{\", n, \"}$)\")) \n    \n  paste0(x , collapse = \"|\")\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = map_vec(x$g2, p2) |> vrg(3),\n    g3 = map_vec(x$g3, p2) |> vrg(2),\n    g4 = map_vec(x$g4, p2) |> vrg(1),\n    g5 = map_vec(x$g5, p2) |> vrg(0)\n  ) |> \n    compact() |> \n    paste0(collapse = \"|\")\n}\n\nx <- all_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:   0|--[]\n2:   0|--[]\n3:  55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 1...]\n4:  1|--[5202]\n5:  1|--[NA]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_vec()`:\n! `out[[1]]` must have size 1, not size 3.\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 6|--[0 4 5 6 G J]\n2: 1|--[30]\n3: 1|--[721]\n4: 1|--[NA]\n5: 1|--[92015]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_vec()`:\n! `out[[1]]` must have size 1, not size 2.\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...]\n3:  46|--[021 022 026 027 032 033 042 044 050 1...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  1|--[NA]\n3:  1|--[NA]\n4:  1|--[NA]\n5:  1|--[NA]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_vec()`:\n! `out[[1]]` must have size 1, not size 2.\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 4] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5:  0|--[]\n\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_vec()`:\n! `out[[1]]` must have size 1, not size 4.\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5: 91|--[90460 90461 90471 90474 90619 90633 9...]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_vec()`:\n! `out[[1]]` must have size 1, not size 5.\n```\n\n\n:::\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x) {\n  x |> \n    split_lengths() |> \n    remove_redundant() |> \n    process_groups() |> \n    reduce_groups()\n}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\nmedrex(long_test2[nchar(long_test2) > 3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5:  1|--[NA]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_vec()`:\n! `out[[1]]` must have size 1, not size 4.\n```\n\n\n:::\n\n```{.r .cell-code}\nvec_slice(hcpcs, sf_grepl(hcpcs, medrex(long_test2[nchar(long_test2) > 3])))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSplit by Length:\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...]\n\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 02...]\n5:  1|--[NA]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_vec()`:\n! `out[[1]]` must have size 1, not size 4.\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0)_, _cheapr(v.0.9.9)_, _collapse(v.2.0.16)_, _tidyfast(v.0.4.0)_, _data.table(v.1.16.99)_, _re2r(v.1.0.0)_, _re2(v.0.1.3)_, _stringfish(v.0.16.0)_, _fuimus(v.0.0.2)_, _emphatic(v.0.1.8)_, _colortable(v.0.3.0)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _hms(v.1.1.3)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _grid(v.4.4.1)_, _timechange(v.0.3.0)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _cpp11(v.0.5.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _scales(v.1.3.0)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _munsell(v.0.5.1)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _qs(v.0.27.2)_, _parallel(v.4.4.1)_, _tools(v.4.4.1)_, _tzdb(v.0.4.0)_, _colorspace(v.2.1-1)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _fs(v.1.6.4)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _gtable(v.0.3.6)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13)_, _systemfonts(v.1.1.0)_, _xfun(v.0.48)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.48)_, _htmltools(v.0.5.8.1)_ and _rmarkdown(v.2.28)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}