{
  "hash": "5b9a9cb3d19c60644b11702b95aa79fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>               Count                                   Regex</span><br/>All           <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/>Level I       <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>Category I    <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/>Category II   <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>Level II      <span style='color:#ffffff;'><span style='background-color:#333333;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/>\n</pre>\n`````\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncolor_vctr(c(1, 2, 3, 4),\n           text_color = c(\"blue\", \"green\", \"yellow\", NA),\n           style = c(\"underline\", \"italic\", NA, \"bold\"),\n           background = c(NA, NA, \"blue\", NA))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<pre><code class = \"hljs\"><div class='remark-code-line'><span>## [1] <span style='text-decoration:underline;color:blue;'>1</span> <span style='font-style:italic;color:green;'>2</span> <span style='color:yellow;background:blue;'>3</span> <span style='font-weight:bold;'>4</span> </span></div></code></pre>\n`````\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata.frame(\n  text_color = sample(c(NA, valid_colors(\"html\")[, 2, drop = TRUE]), 10, replace = TRUE),\n  background = sample(c(NA, valid_colors(\"html\")[, 2, drop = TRUE]), 10, replace = TRUE),\n  style      = sample(c(NA, valid_style()), 10, replace = TRUE),\n  stringsAsFactors = FALSE\n  ) |> \n  dplyr::mutate(\n    background = ifelse(\n      text_color == background, \n      sample(c(NA, valid_colors(\"html\")[, 2, drop = TRUE]), 10, replace = TRUE), background)\n  ) |>  \n  dplyr::mutate(\n  example = color_vctr(runif(10),\n                       text_color = text_color,\n                       background = background,\n                       style = style)\n  )\n```\n\n::: {.cell-output-display}\n|text_color |background |style         |example                                                                                                                     |\n|:----------|:----------|:-------------|:---------------------------------------------------------------------------------------------------------------------------|\n|#483D8B    |#00FF7F    |italic        |<span style='font-style:italic;color:#483D8B;background:#00FF7F;'>0.8350165</span>                                          |\n|#FF8C00    |#B22222    |NA            |<span style='color:#FF8C00;background:#B22222;'>0.8309014</span>                                                            |\n|#6A5ACD    |#D3D3D3    |italic        |<span style='font-style:italic;color:#6A5ACD;background:#D3D3D3;'>0.3913764</span>                                          |\n|#EE82EE    |#F5FFFA    |strikethrough |<span style='text-decoration:line-through;color:#EE82EE;background:#F5FFFA;'>0.9058148</span>                               |\n|#3CB371    |#B8860B    |outline       |<span style='-webkit-text-stroke:1px black;text-shadow:0px 0px 0px #000;color:#3CB371;background:#B8860B;'>0.5674257</span> |\n|#FFFAF0    |#00008B    |bold          |<span style='font-weight:bold;color:#FFFAF0;background:#00008B;'>0.8048102</span>                                           |\n|#F08080    |#808080    |underline     |<span style='text-decoration:underline;color:#F08080;background:#808080;'>0.5593351</span>                                  |\n|#FFE4B5    |#A52A2A    |NA            |<span style='color:#FFE4B5;background:#A52A2A;'>0.8692209</span>                                                            |\n|#FFA07A    |#708090    |strikethrough |<span style='text-decoration:line-through;color:#FFA07A;background:#708090;'>0.4348051</span>                               |\n|#FFFFFF    |#2F4F4F    |strikethrough |<span style='text-decoration:line-through;color:#FFFFFF;background:#2F4F4F;'>0.8326059</span>                               |\n:::\n:::\n\n\n\n\n\n# TODOs\n\n   * If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n# Preprocessing\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntake     <- \\(x, i) stringfish::sf_substr(x, start = i, stop = i, nthreads = 4L)\nempty    <- \\(x)    vctrs::vec_is_empty(x)\nchop     <- \\(v, g) vctrs::vec_chop(v, sizes = vctrs::vec_run_sizes(g))\np        <- \\(...)  paste0(..., collapse = \"\")\ngrab     <- \\(x)    x[stringfish::sf_grepl(x, \"[A-Z]{1}\", nthreads = 4L)]\ncontrast <- \\(x, y) x[!stringfish::sf_substr(x, 1, collapse::funique(collapse::vlengths(y, use.names = FALSE)), nthreads = 4L) %in% y]\nsorder   <- \\(x)    p(p(grab(stringr::str_sort(x))), p(stringr::str_sort(x)[!stringr::str_sort(x) %in% grab(stringr::str_sort(x))]))\n```\n:::\n\n\n\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x) {\n  \n  stopifnot(is.character(x))\n  \n  x <- sf_gsub(x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n    uniq_rmna() |> \n    str_sort()\n  \n  l <- vlengths(x)\n  \n  list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5]\n  )\n}\n```\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Why? A user may input complete and incomplete HCPCS codes alongside each other. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrr <- \\(x, y) {\n  \n  if (empty(x)) {\n    cat(c(\"EMPTY: x | RETURN: character(0)\"), sep = \"\\n\")\n    return(character(0))\n  }\n  \n  if (empty(y)) {    \n    cat(c(\"EMPTY: y | RETURN: x\"), sep = \"\\n\")\n    return(x)\n  }\n  contrast(x, y)\n  }\n\nremove_redundant <- function(x) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n}\n\nnew_test |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x1\ncharacter(0)\n\n$x2\ncharacter(0)\n\n$x3\ncharacter(0)\n\n$x4\ncharacter(0)\n\n$x5\n  [1] \"90460\" \"90461\" \"90471\" \"90472\" \"90473\" \"90474\" \"90619\" \"90620\" \"90621\"\n [10] \"90633\" \"90647\" \"90648\" \"90651\" \"90670\" \"90672\" \"90674\" \"90680\" \"90681\"\n [19] \"90682\" \"90685\" \"90686\" \"90687\" \"90688\" \"90696\" \"90697\" \"90698\" \"90700\"\n [28] \"90702\" \"90707\" \"90710\" \"90713\" \"90714\" \"90715\" \"90716\" \"90723\" \"90732\"\n [37] \"90734\" \"90740\" \"90743\" \"90744\" \"90746\" \"90747\" \"90749\" \"90756\" \"A4467\"\n [46] \"A9283\" \"A9285\" \"L1900\" \"L1902\" \"L1904\" \"L1906\" \"L1907\" \"L1910\" \"L1920\"\n [55] \"L1930\" \"L1932\" \"L1940\" \"L1945\" \"L1950\" \"L1951\" \"L1960\" \"L1970\" \"L1971\"\n [64] \"L1980\" \"L1990\" \"L2000\" \"L2005\" \"L2006\" \"L2010\" \"L2020\" \"L2030\" \"L2034\"\n [73] \"L2035\" \"L2036\" \"L2037\" \"L2038\" \"L2106\" \"L2108\" \"L2112\" \"L2114\" \"L2116\"\n [82] \"L2126\" \"L2128\" \"L2132\" \"L2134\" \"L2136\" \"L2180\" \"L2182\" \"L2184\" \"L2186\"\n [91] \"L2188\" \"L2190\" \"L2192\" \"L2200\" \"L2210\" \"L2220\" \"L2230\" \"L2232\" \"L2240\"\n[100] \"L2250\" \"L2260\" \"L2265\" \"L2270\" \"L2275\" \"L2280\" \"L2300\" \"L2310\" \"L2320\"\n[109] \"L2330\" \"L2335\" \"L2340\" \"L2350\" \"L2360\" \"L2370\" \"L2375\" \"L2380\" \"L2385\"\n[118] \"L2387\" \"L2390\" \"L2395\" \"L2397\" \"L2405\" \"L2415\" \"L2425\" \"L2430\" \"L2492\"\n[127] \"L2500\" \"L2510\" \"L2520\" \"L2525\" \"L2526\" \"L2530\" \"L2540\" \"L2550\" \"L2750\"\n[136] \"L2755\" \"L2760\" \"L2768\" \"L2780\" \"L2785\" \"L2795\" \"L2800\" \"L2810\" \"L2820\"\n[145] \"L2830\" \"L2840\" \"L2850\" \"L2999\" \"L4002\" \"L4010\" \"L4020\" \"L4030\" \"L4040\"\n[154] \"L4045\" \"L4050\" \"L4055\" \"L4060\" \"L4070\" \"L4080\" \"L4090\" \"L4100\" \"L4110\"\n[163] \"L4130\" \"L4205\" \"L4210\" \"L4350\" \"L4360\" \"L4361\" \"L4370\" \"L4386\" \"L4387\"\n[172] \"L4392\" \"L4394\" \"L4396\" \"L4397\" \"L4398\" \"L4631\"\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlump <- function(x, thresh = 3){\n\n  xo <- order(x)\n\n  xs <- x[xo]\n  \n  diff_prev <- abs(c(0, xs[-1] - xs[seq_along(xs) - 1]))\n\n  binary <- ifelse(diff_prev >= thresh, 1, 0)\n\n  id <- cumsum(binary) + 1\n  \n  id[xo]\n  \n  }\n\nletters_2_numbers <- \\(x) {\n  \n  look <- set_names(as.character(1:26), LETTERS)\n  \n  unname(look[grab(x)])\n  \n  }\n```\n:::\n\n\n\n\n::: {.panel-tabset}\n\n## [1|2]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x) {\n  \n  x <- get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  x\n}\n\ng2 <- function(x) {\n  \n  x <- get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  rsplit(x, take(x, 1), use.names = FALSE)\n}\n\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n## [3]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x) {\n  \n  x <- get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(as.integer(str_replace_all(chr, \"[A-Z]\", letters_2_numbers))))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  out\n}\n\nthree <- all_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g3()\n\nthree   <- three[collapse::radixorder(collapse::vlengths(three), sort = FALSE)]\norphans <- three[collapse::vlengths(three) == 1] |> purrr::list_c()\ngroups  <- three[collapse::vlengths(three) > 1]\n\nmodifyList(\n  setNames(\n    groups, \n    paste0(\"group_\", collapse::vlengths(groups))\n    ), \n  list(orphans = orphans))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$group_2\n[1] \"021\" \"022\"\n\n$group_2\n[1] \"026\" \"027\"\n\n$group_2\n[1] \"032\" \"033\"\n\n$group_2\n[1] \"042\" \"044\"\n\n$group_2\n[1] \"347\" \"348\"\n\n$group_2\n[1] \"503\" \"505\"\n\n$group_2\n[1] \"552\" \"553\"\n\n$group_2\n[1] \"610\" \"612\"\n\n$group_2\n[1] \"644\" \"646\"\n\n$group_2\n[1] \"G02\" \"G04\"\n\n$group_3\n[1] \"920\" \"921\" \"922\"\n\n$group_5\n[1] \"585\" \"586\" \"587\" \"588\" \"589\"\n\n$group_9\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n$orphans\n [1] \"050\" \"157\" \"209\" \"225\" \"271\" \"308\" \"312\" \"326\" \"355\" \"362\" \"544\" \"630\"\n[13] \"765\" \"958\" \"C75\" \"C97\" \"E06\" \"S23\"\n```\n\n\n:::\n:::\n\n\n\n\n## [4]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x) {\n  \n  x <- get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_replace_all(chr, \"[A-Z]\", letters_2_numbers)\n        )))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"5203\" \"5204\" \"5205\" \"5206\" \"5207\" \"5208\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"0214\" \"0215\" \"0217\" \"0218\" \"0219\" \"0220\" \"0221\" \"0222\"\n\n[[2]]\n[1] \"0263\" \"0265\" \"0266\"\n\n[[3]]\n[1] \"0269\"\n\n[[4]]\n[1] \"0274\" \"0275\"\n\n[[5]]\n[1] \"0329\" \"0330\"\n\n[[6]]\n[1] \"0422\"\n\n[[7]]\n[1] \"0444\" \"0445\"\n\n[[8]]\n[1] \"0506\" \"0507\"\n\n[[9]]\n[1] \"1577\"\n\n[[10]]\n[1] \"2093\"\n\n[[11]]\n[1] \"2251\" \"2252\"\n\n[[12]]\n[1] \"2719\"\n\n[[13]]\n[1] \"3080\"\n\n[[14]]\n[1] \"3123\"\n\n[[15]]\n[1] \"3267\"\n\n[[16]]\n[1] \"3471\"\n\n[[17]]\n[1] \"3481\" \"3482\" \"3483\"\n\n[[18]]\n[1] \"3557\"\n\n[[19]]\n[1] \"3622\"\n\n[[20]]\n[1] \"5030\"\n\n[[21]]\n[1] \"5054\"\n\n[[22]]\n[1] \"5442\" \"5443\"\n\n[[23]]\n[1] \"5520\"\n\n[[24]]\n[1] \"5525\"\n\n[[25]]\n[1] \"5530\"\n\n[[26]]\n[1] \"5857\"\n\n[[27]]\n[1] \"5860\"\n\n[[28]]\n[1] \"5870\" \"5872\"\n\n[[29]]\n[1] \"5880\"\n\n[[30]]\n[1] \"5890\" \"5892\" \"5894\"\n\n[[31]]\n[1] \"6100\"\n\n[[32]]\n[1] \"6125\"\n\n[[33]]\n[1] \"6303\" \"6304\"\n\n[[34]]\n[1] \"6442\"\n\n[[35]]\n[1] \"6448\" \"6449\"\n\n[[36]]\n[1] \"6463\"\n\n[[37]]\n[1] \"7651\"\n\n[[38]]\n[1] \"9202\"\n\n[[39]]\n[1] \"9208\"\n\n[[40]]\n[1] \"9213\" \"9214\"\n\n[[41]]\n[1] \"9220\" \"9222\" \"9223\" \"9224\"\n\n[[42]]\n[1] \"9587\"\n\n[[43]]\n[1] \"C750\"\n\n[[44]]\n[1] \"C977\"\n\n[[45]]\n[1] \"E067\"\n\n[[46]]\n[1] \"G027\"\n\n[[47]]\n[1] \"G041\"\n\n[[48]]\n[1] \"S234\"\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n## [5]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x) {\n  \n  x <- get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num  <- data.table(code = num, lump = lump(as.integer(num)))\n  dchr <- as.integer(str_remove_all(chr, \"^[A-Z]|[A-Z]$\"))\n  \n  dchr <- ifelse(dchr %% 10 == 0, dchr + max(dchr), dchr)\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(dchr))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  out\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"15777\"\n\n[[2]]\n[1] \"20939\"\n\n[[3]]\n[1] \"22510\" \"22511\" \"22512\" \"22513\" \"22514\" \"22515\"\n\n[[4]]\n[1] \"22526\" \"22527\"\n\n[[5]]\n[1] \"27197\" \"27198\"\n\n[[6]]\n[1] \"30801\" \"30802\"\n\n[[7]]\n[1] \"31231\"\n\n[[8]]\n[1] \"32673\"\n\n[[9]]\n[1] \"34713\" \"34714\" \"34715\" \"34716\" \"34717\"\n\n[[10]]\n[1] \"34812\"\n\n[[11]]\n[1] \"34820\"\n\n[[12]]\n[1] \"34833\" \"34834\"\n\n[[13]]\n[1] \"35572\"\n\n[[14]]\n[1] \"36221\"\n\n[[15]]\n[1] \"50300\"\n\n[[16]]\n[1] \"50540\"\n\n[[17]]\n[1] \"54420\"\n\n[[18]]\n[1] \"54430\"\n\n[[19]]\n[1] \"55200\"\n\n[[20]]\n[1] \"55250\"\n\n[[21]]\n[1] \"55300\"\n\n[[22]]\n[1] \"58575\"\n\n[[23]]\n[1] \"58600\"\n\n[[24]]\n[1] \"58605\"\n\n[[25]]\n[1] \"58700\"\n\n[[26]]\n[1] \"58720\"\n\n[[27]]\n[1] \"58800\"\n\n[[28]]\n[1] \"58805\"\n\n[[29]]\n[1] \"58900\"\n\n[[30]]\n[1] \"58920\"\n\n[[31]]\n[1] \"58925\"\n\n[[32]]\n[1] \"58940\"\n\n[[33]]\n[1] \"58943\"\n\n[[34]]\n[1] \"61000\" \"61001\"\n\n[[35]]\n[1] \"61253\"\n\n[[36]]\n[1] \"63035\"\n\n[[37]]\n[1] \"63043\" \"63044\" \"63045\" \"63046\" \"63047\" \"63048\"\n\n[[38]]\n[1] \"64421\"\n\n[[39]]\n[1] \"64480\"\n\n[[40]]\n[1] \"64484\"\n\n[[41]]\n[1] \"64491\" \"64492\" \"64494\" \"64495\"\n\n[[42]]\n[1] \"64634\" \"64636\"\n\n[[43]]\n[1] \"76514\"\n\n[[44]]\n[1] \"92025\"\n\n[[45]]\n[1] \"92081\" \"92082\" \"92083\"\n\n[[46]]\n[1] \"92132\" \"92133\" \"92134\"\n\n[[47]]\n[1] \"92145\"\n\n[[48]]\n[1] \"92201\" \"92202\"\n\n[[49]]\n[1] \"92227\" \"92228\" \"92229\"\n\n[[50]]\n[1] \"92235\"\n\n[[51]]\n[1] \"92240\" \"92242\"\n\n[[52]]\n[1] \"95870\"\n\n[[53]]\n[1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\"\n\n[[54]]\n[1] \"0221T\" \"0222T\" \"0263T\"\n\n[[55]]\n[1] \"0265T\"\n\n[[56]]\n[1] \"0266T\" \"0269T\"\n\n[[57]]\n[1] \"0274T\"\n\n[[58]]\n[1] \"0275T\"\n\n[[59]]\n[1] \"0329T\"\n\n[[60]]\n[1] \"0330T\" \"0422T\"\n\n[[61]]\n[1] \"0444T\"\n\n[[62]]\n[1] \"0445T\"\n\n[[63]]\n[1] \"0506T\" \"0507T\" \"C7501\"\n\n[[64]]\n[1] \"C7502\"\n\n[[65]]\n[1] \"C7504\"\n\n[[66]]\n[1] \"C7505\"\n\n[[67]]\n[1] \"C9771\"\n\n[[68]]\n[1] \"E0675\"\n\n[[69]]\n[1] \"G0279\" \"G0412\"\n\n[[70]]\n[1] \"G0413\"\n\n[[71]]\n[1] \"G0414\"\n\n[[72]]\n[1] \"G0415\"\n\n[[73]]\n[1] \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n::: \n\n# Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  \n  g <- x |> \n    split_lengths() |> \n    remove_redundant()\n  \n  list(\n    g1 = g1(g),\n    g2 = g2(g),\n    g3 = g3(g),\n    g4 = g4(g),\n    g5 = g5(g)\n  )\n}\n\nhcpcs_tests |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n$g2\n$g2[[1]]\n[1] \"30\" \"31\" \"32\"\n\n\n$g3\n$g3[[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n$g4\ncharacter(0)\n\n$g5\n$g5[[1]]\n[1] \"92015\" \"92016\" \"92017\" \"92018\" \"92019\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n [1] \"0\" \"1\" \"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"C\" \"E\" \"G\" \"S\"\n\n$g2\ncharacter(0)\n\n$g3\ncharacter(0)\n\n$g4\ncharacter(0)\n\n$g5\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$g1\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n$g2\n$g2[[1]]\n[1] \"15\"\n\n$g2[[2]]\n[1] \"20\" \"22\" \"27\"\n\n$g2[[3]]\n[1] \"30\" \"31\" \"32\" \"34\" \"35\" \"36\"\n\n$g2[[4]]\n[1] \"76\"\n\n$g2[[5]]\n[1] \"92\" \"95\"\n\n$g2[[6]]\n[1] \"C7\" \"C9\"\n\n$g2[[7]]\n[1] \"E0\"\n\n$g2[[8]]\n[1] \"S2\"\n\n\n$g3\n$g3[[1]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\"\n\n\n$g4\ncharacter(0)\n\n$g5\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n## Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  if (x == paste0(ad, collapse = \"\")) return(\"[A-Z0-9]\")\n  \n  vec  <- set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  g1 <- get_elem(x, \"g1\")\n  \n  if (empty(g1)) return(NULL)\n  \n  re <- sorder(g1) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(paste0(\"(^\", re, \"{5}$)\"))\n  \n  postfix <- ifelse(\n    sf_grepl(re, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  return(paste0(\"(^\", re, postfix, \"{4}$)\"))\n}\n\nhcpcs_tests |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[A-Z0-9]{5}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(LETTERS[1:5], 0:9)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[A-E0-9][0-9]{4}$)\"\n```\n\n\n:::\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(NULL)\n  \n  vecs <- str_split_fixed(x, \"\", fmax(vlengths(x))) |> as.data.frame()\n  \n  to_brackets <- vecs |>\n    purrr::map(fuimus::uniq_rmna) |>\n    purrr::map(sorder)\n  \n  to_vec <- to_brackets |>\n    purrr::map(reduce_runs)\n  \n  multi_chars <- unname(nchar(to_vec) > 1)\n  \n  nobrack <- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n  \n  to_vec[multi_chars] <- ifelse(\n    any(nobrack), \n    purrr::map_chr(to_vec[multi_chars], \\(x) paste0(\"[\", x, \"]\")), \n    to_vec[multi_chars])\n\n  purrr::list_c(to_vec) |> \n    fuimus::collapser()\n}\n```\n:::\n\n\n\n\n## Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvrg <- function(x, n) {\n  \n  if (is.null(x)) return(NULL)\n  \n  postfix <- ifelse(\n    sf_grepl(x, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- ifelse(\n    n == 0, \n    paste0(\"(^\", x, \"$)\"),                \n    paste0(\"(^\", x, postfix, \"{\", n, \"}$)\")) \n    \n  paste0(x , collapse = \"|\")\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = map_vec(x$g2, p2) |> vrg(3),\n    g3 = map_vec(x$g3, p2) |> vrg(2),\n    g4 = map_vec(x$g4, p2) |> vrg(1),\n    g5 = map_vec(x$g5, p2) |> vrg(0)\n  ) |> \n    compact() |> \n    paste0(collapse = \"|\")\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][A-Z0-9]{2}$)|(^520[2-8][A-Z0-9]{1}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  process_groups() |>\n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][0-9]{4}$)|(^3[0-2][A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)|(^9201[5-9]$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  process_groups() |>\n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 4] |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][12][A-Z0-9]{1}$)\"\n```\n\n\n:::\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x) {\n  x |> \n    process_groups() |> \n    reduce_groups()\n}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\nmedrex(long_test2[nchar(long_test2) > 3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][12][A-Z0-9]{1}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# length(\n  vec_slice(\n    hcpcs, \n    sf_grepl(\n      hcpcs, \n      medrex(long_test2[nchar(long_test2) > 3])\n      ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: x | RETURN: character(0)\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\nEMPTY: y | RETURN: x\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"0211T\" \"0211U\" \"0212T\" \"0212U\" \"0221T\" \"0221U\" \"0222T\" \"0222U\"\n```\n\n\n:::\n\n```{.r .cell-code}\n  # )\n```\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0)_, _cheapr(v.0.9.9)_, _collapse(v.2.0.16)_, _tidyfast(v.0.4.0)_, _data.table(v.1.16.99)_, _re2r(v.1.0.0)_, _re2(v.0.1.3)_, _stringfish(v.0.16.0)_, _fuimus(v.0.0.2)_, _emphatic(v.0.1.8)_, _colortable(v.0.3.0)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _hms(v.1.1.3)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _grid(v.4.4.1)_, _timechange(v.0.3.0)_, _fastmap(v.1.2.0)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _cpp11(v.0.5.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _scales(v.1.3.0)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _munsell(v.0.5.1)_, _withr(v.3.0.1)_, _yaml(v.2.3.10)_, _qs(v.0.27.2)_, _parallel(v.4.4.1)_, _tools(v.4.4.1)_, _tzdb(v.0.4.0)_, _colorspace(v.2.1-1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _fs(v.1.6.4)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _gtable(v.0.3.5)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13)_, _systemfonts(v.1.1.0)_, _xfun(v.0.48)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.48)_, _htmltools(v.0.5.8.1)_ and _rmarkdown(v.2.28)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}