{
  "hash": "93dfc7496fcb2005fa79e495f4f9c6a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>               Count                                   Regex</span><br/>All           <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/>Level I       <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>Category I    <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/>Category II   <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>Level II      <span style='color:#ffffff;'><span style='background-color:#333333;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/>\n</pre>\n`````\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<pre><code class = \"hljs\"><div class='remark-code-line'><span>## [1] <span style=''>9</span> <span style='text-decoration:underline;color:blue;'>0</span> <span style='font-style:italic;color:green;'>4</span> <span style='font-weight:bold;color:black;background:white;'>6</span> <span style=''>0</span> </span></div></code></pre>\n`````\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n# TODO\n\n   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [ ] `process_groups()`\n   -   [X] `g1()`\n   -   [X] `g2()`\n   -   [ ] `g3()`\n   -   [ ] `g4()`\n   -   [ ] `g5()`\n-   [ ] `reduce_groups()`\n\n# Preprocessing\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntake     <- \\(x, i) stringfish::sf_substr(x, start = i, stop = i, nthreads = 4L)\nempty    <- \\(x)    vctrs::vec_is_empty(x)\nchop     <- \\(v, g) vctrs::vec_chop(v, sizes = vctrs::vec_run_sizes(g))\np        <- \\(..., sep = \"\")  paste0(..., collapse = sep)\ngrab     <- \\(x)    x[stringfish::sf_grepl(x, \"[A-Z]{1}\", nthreads = 4L)]\nsorder   <- \\(x)    p(p(grab(stringr::str_sort(x))), p(stringr::str_sort(x)[!stringr::str_sort(x) %in% grab(stringr::str_sort(x))]))\n\n\ncontrast <- \\(x, y) x[!stringfish::sf_substr(x, 1, collapse::funique(collapse::vlengths(y, use.names = FALSE)), nthreads = 4L) %in% y]\nremoved <- \\(x, y)  x[stringfish::sf_substr(x, 1, collapse::funique(collapse::vlengths(y, use.names = FALSE)), nthreads = 4L) %in% y]\n\ncutoff   <- \\(x) stringr::str_trunc(string = x, width = 50, side = \"right\")\n\nview <- \\(x) {\n  \n  idx  <- seq_along(x)\n  len  <- collapse::vlengths(x, use.names = FALSE)\n  tree <- unname(purrr::map_vec(x, p, sep = ' '))\n  \n  cat(\n    glue::glue(\n      \"{format(idx)}: \", \n      \"{format(len)}|\", \n      \"--[{format(purrr::map_vec(tree, cutoff), justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n\n\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x) {\n  \n  stopifnot(is.character(x))\n  \n  x <- sf_gsub(x, \"\\\\*|\\\\s\", \"\", nthreads = 4L) |> \n    uniq_rmna() |> \n    str_sort()\n  \n  l <- vlengths(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  cat(view(out), sep = \"\\n\")\n  \n  return(invisible(out))\n}\n\nrandom_hcpcs_vec(n = 25) |> \n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 10|--[4 5 A B C G H R S U]\n2: 22|--[01 25 26 27 30 43 50 52 60 76 77 78 87 89 92 95...]\n3: 25|--[058 120 202 243 270 316 509 862 869 893 920 936...]\n4: 25|--[0105 0662 1205 2104 2749 2776 3646 4345 8121 88...]\n5: 25|--[0219U 0556T 0781T 21452 24071 29862 33508 57170...]\n```\n\n\n:::\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Why? A user may input complete and incomplete HCPCS codes alongside each other. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nview_remove <- \\(x) {\n  \n  len  <- length(x)\n  tree <- unname(paste0(x, collapse = \" \"))\n  \n  cat(\n    glue::glue(\n      \"Removed \", \n      \"{format(len, justify = 'left')}|\", \n      \"--[{format(purrr::map_vec(tree, cutoff), justify = 'right')}]\"\n      ),\n    sep = \"\\n\")\n}\n\nrr <- \\(x, y) {\n  \n  if (empty(x)) return(character(0))\n  \n  if (empty(y)) return(x)\n  \n  # rem <- removed(x, y)\n  \n  # cat(view_remove(rem))\n  \n  # return(invisible(contrast(x, y)))\n  \n  contrast(x, y)\n}\n\nremove_redundant <- function(x) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  cat(view(out), sep = \"\\n\")\n  \n  return(invisible(out))\n}\nrandom_hcpcs_vec(25) |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 10|--[1 5 7 8 9 C J Q S V]\n2: 21|--[00 21 22 25 31 32 33 35 37 52 55 64 68 C7 G0 G9...]\n3: 24|--[009 027 131 212 251 264 265 395 422 453 489 721...]\n4: 25|--[0093 0138 2772 3159 3347 3852 4322 5054 5592 58...]\n5: 25|--[0093U 1461F 15845 25420 3091F 31370 36450 3753F...]\n\n1: 10|--[1 5 7 8 9 C J Q S V]\n2: 16|--[00 21 22 25 31 32 33 35 37 64 68 G0 G9 L0 L1 T4]\n3: 13|--[027 264 265 395 422 453 489 A42 A65 A95 G87 G89...]\n4:  8|--[0138 2772 3852 4322 A750 E124 E237 M022]\n5:  9|--[3091F 36450 40814 45020 E1195 E1636 G2079 G8583...]\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlump <- function(x, threshold = 3) {\n  \n  stopifnot(is.numeric(x))\n\n  xo <- order(x)\n\n  xs <- x[xo]\n  \n  dlag <- abs(c(0, xs[-1] - xs[seq_along(xs) - 1]))\n\n  bi <- ifelse(dlag >= threshold, 1, 0)\n\n  id <- cumsum(bi) + 1\n  \n  id[xo]\n  \n}\n\nletters_2_numbers <- \\(x) {\n  \n  hcpcs <- LETTERS[sf_grepl(LETTERS, \"[^DINOW-Z]\", nthreads = 4L)]\n  \n  look <- set_names(seq_along(hcpcs), hcpcs)\n  \n  unname(look[grab(x)])\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n\n::: {.panel-tabset}\n\n## [g1|g2]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x) {\n  \n  x <- get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  x\n}\n\ng2 <- function(x) {\n  \n  x <- get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  rsplit(x, take(x, 1), use.names = FALSE)\n}\n\nrandom_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 10|--[3 4 6 A F H M Q S T]\n2: 10|--[00 07 15 21 46 57 61 E0 L0 V5]\n3: 10|--[058 078 272 277 475 503 615 J15 J23 L39]\n4: 10|--[2725 4325 6449 9237 9326 9586 9931 G962 Q410 Q418]\n5: 10|--[32855 78122 95887 G0019 G2160 G9732 H0020 J0257...]\n\n1: 10|--[3 4 6 A F H M Q S T]\n2:  8|--[00 07 15 21 57 E0 L0 V5]\n3:  7|--[058 272 277 503 J15 J23 L39]\n4:  5|--[9237 9326 9586 9931 G962]\n5:  7|--[78122 95887 G0019 G2160 G9732 J0257 L5816]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"3\" \"4\" \"6\" \"A\" \"F\" \"H\" \"M\" \"Q\" \"S\" \"T\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec(20) |>\n  split_lengths() |> \n  remove_redundant() |>\n  g2() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 10|--[1 2 3 4 6 7 B E S V]\n2: 17|--[01 27 35 50 58 73 81 82 83 90 91 93 99 E1 H0 J0 S9]\n3: 20|--[271 329 332 382 504 784 787 811 820 844 925 929...]\n4: 20|--[2133 2789 3347 3821 4946 5050 5674 7825 7847 89...]\n5: 20|--[0347T 0495T 0603T 28114 28262 33266 44650 69641...]\n\n1: 10|--[1 2 3 4 6 7 B E S V]\n2: 12|--[01 50 58 81 82 83 90 91 93 99 H0 J0]\n3:  7|--[844 925 929 J24 M11 Q42 T10]\n4:  9|--[5674 8916 A438 A641 A951 G201 G891 J226 M126]\n5:  8|--[0347T 0495T 0603T 95810 A7038 C8912 G8627 L7180]\n\n1: 1|--[01]\n2: 2|--[50 58]\n3: 3|--[81 82 83]\n4: 4|--[90 91 93 99]\n5: 1|--[H0]\n6: 1|--[J0]\n```\n\n\n:::\n:::\n\n\n\n\n## [g3]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x) {\n  \n  x <- get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(as.integer(str_replace_all(chr, \"[A-Z]\", letters_2_numbers))))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  out\n}\n\nall_tests[nchar(all_tests) < 3] |> \n  split_lengths() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:  6|--[0 4 5 6 G J]\n2: 29|--[02 03 04 05 15 20 22 27 30 31 32 34 35 36 50 54...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n1:  6|--[0 4 5 6 G J]\n2: 29|--[02 03 04 05 15 20 22 27 30 31 32 34 35 36 50 54...]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  0|--[]\n5:  0|--[]\n\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  0|--[]\n5:  0|--[]\n\n 1: 2|--[021 022]\n 2: 2|--[026 027]\n 3: 2|--[032 033]\n 4: 2|--[042 044]\n 5: 1|--[050]\n 6: 1|--[157]\n 7: 1|--[209]\n 8: 1|--[225]\n 9: 1|--[271]\n10: 1|--[308]\n11: 1|--[312]\n12: 1|--[326]\n13: 2|--[347 348]\n14: 1|--[355]\n15: 1|--[362]\n16: 2|--[503 505]\n17: 1|--[544]\n18: 2|--[552 553]\n19: 5|--[585 586 587 588 589]\n20: 2|--[610 612]\n21: 1|--[630]\n22: 2|--[644 646]\n23: 9|--[721 722 723 724 725 726 727 728 729]\n24: 1|--[765]\n25: 3|--[920 921 922]\n26: 1|--[958]\n27: 1|--[C75]\n28: 1|--[C97]\n29: 1|--[E06]\n30: 2|--[G02 G04]\n31: 1|--[S23]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 10|--[4 5 6 8 B L M Q S U]\n2: 27|--[01 23 26 27 55 60 64 69 70 75 81 84 85 86 92 A4...]\n3: 30|--[037 046 241 243 256 324 351 360 405 443 455 564...]\n4: 30|--[0616 1034 1162 2020 3129 3272 3651 4270 5104 57...]\n5: 30|--[0581F 20955 21159 22864 26550 33523 33781 37237...]\n\n1: 10|--[4 5 6 8 B L M Q S U]\n2: 15|--[01 23 26 27 70 75 92 A4 A6 A9 E0 E1 G8 J1 J2]\n3: 16|--[037 046 241 243 256 324 351 360 965 A03 A70 G90...]\n4: 14|--[0616 1034 1162 2020 3129 3272 3651 7111 G216 G9...]\n5: 12|--[0581F 20955 21159 22864 33523 33781 37237 C1733...]\n\n 1: 1|--[037]\n 2: 1|--[046]\n 3: 2|--[241 243]\n 4: 1|--[256]\n 5: 1|--[324]\n 6: 1|--[351]\n 7: 1|--[360]\n 8: 1|--[965]\n 9: 1|--[A03]\n10: 1|--[A70]\n11: 1|--[G90]\n12: 1|--[G95]\n13: 1|--[J86]\n14: 1|--[T20]\n15: 1|--[T45]\n```\n\n\n:::\n:::\n\n\n\n\n## [4]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x) {\n  \n  x <- get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_replace_all(chr, \"[A-Z]\", letters_2_numbers)\n        )))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  return(out)\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 6|--[5203 5204 5205 5206 5207 5208]\n5: 0|--[]\n\n1: 6|--[5203 5204 5205 5206 5207 5208]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 35 36 50 54...]\n3:  46|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n 1: 8|--[0214 0215 0217 0218 0219 0220 0221 0222]\n 2: 3|--[0263 0265 0266]\n 3: 1|--[0269]\n 4: 2|--[0274 0275]\n 5: 2|--[0329 0330]\n 6: 1|--[0422]\n 7: 2|--[0444 0445]\n 8: 2|--[0506 0507]\n 9: 1|--[1577]\n10: 1|--[2093]\n11: 2|--[2251 2252]\n12: 1|--[2719]\n13: 1|--[3080]\n14: 1|--[3123]\n15: 1|--[3267]\n16: 1|--[3471]\n17: 3|--[3481 3482 3483]\n18: 1|--[3557]\n19: 1|--[3622]\n20: 1|--[5030]\n21: 1|--[5054]\n22: 2|--[5442 5443]\n23: 1|--[5520]\n24: 1|--[5525]\n25: 1|--[5530]\n26: 1|--[5857]\n27: 1|--[5860]\n28: 2|--[5870 5872]\n29: 1|--[5880]\n30: 3|--[5890 5892 5894]\n31: 1|--[6100]\n32: 1|--[6125]\n33: 2|--[6303 6304]\n34: 1|--[6442]\n35: 2|--[6448 6449]\n36: 1|--[6463]\n37: 1|--[7651]\n38: 1|--[9202]\n39: 1|--[9208]\n40: 2|--[9213 9214]\n41: 4|--[9220 9222 9223 9224]\n42: 1|--[9587]\n43: 1|--[C750]\n44: 1|--[C977]\n45: 1|--[E067]\n46: 1|--[G027]\n47: 1|--[G041]\n48: 1|--[S234]\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs_vec() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 10|--[2 4 8 A B C E J L M]\n2: 10|--[31 33 74 76 92 A4 C9 E0 E1 M1]\n3: 10|--[026 352 815 875 932 994 C90 E15 G87 S80]\n4: 10|--[2781 4325 A625 G923 H002 J932 L404 L851 M102 V501]\n5: 10|--[0034A 57558 73030 81319 92950 A4600 B4224 C9750...]\n\n1: 10|--[2 4 8 A B C E J L M]\n2:  5|--[31 33 74 76 92]\n3:  6|--[026 352 932 994 G87 S80]\n4:  3|--[G923 H002 V501]\n5:  5|--[0034A 57558 73030 G0128 V5265]\n\n1: 1|--[G923]\n2: 1|--[H002]\n3: 1|--[V501]\n```\n\n\n:::\n:::\n\n\n\n\n## [5]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x) {\n  \n  x <- get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- grab(x)\n  num <- x[!x %in% chr]\n  \n  num  <- data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        str_remove_all(chr, \"[A-Z]\")\n        )))\n  \n  # dchr <- as.integer(str_remove_all(chr, \"^[A-Z]|[A-Z]$\"))\n  # \n  # dchr <- ifelse(dchr %% 10 == 0, dchr + max(dchr), dchr)\n  # \n  # chr <- data.table(\n  #   code = chr, \n  #   lump = lump(dchr))\n  \n  out <- vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  out\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 0|--[]\n2: 0|--[]\n3: 0|--[]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  # remove_redundant() |> \n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 35 36 50 54...]\n3:  46|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n 1: 1|--[15777]\n 2: 1|--[20939]\n 3: 6|--[22510 22511 22512 22513 22514 22515]\n 4: 2|--[22526 22527]\n 5: 2|--[27197 27198]\n 6: 2|--[30801 30802]\n 7: 1|--[31231]\n 8: 1|--[32673]\n 9: 5|--[34713 34714 34715 34716 34717]\n10: 1|--[34812]\n11: 1|--[34820]\n12: 2|--[34833 34834]\n13: 1|--[35572]\n14: 1|--[36221]\n15: 1|--[50300]\n16: 1|--[50540]\n17: 1|--[54420]\n18: 1|--[54430]\n19: 1|--[55200]\n20: 1|--[55250]\n21: 1|--[55300]\n22: 1|--[58575]\n23: 1|--[58600]\n24: 1|--[58605]\n25: 1|--[58700]\n26: 1|--[58720]\n27: 1|--[58800]\n28: 1|--[58805]\n29: 1|--[58900]\n30: 1|--[58920]\n31: 1|--[58925]\n32: 1|--[58940]\n33: 1|--[58943]\n34: 2|--[61000 61001]\n35: 1|--[61253]\n36: 1|--[63035]\n37: 6|--[63043 63044 63045 63046 63047 63048]\n38: 1|--[64421]\n39: 1|--[64480]\n40: 1|--[64484]\n41: 4|--[64491 64492 64494 64495]\n42: 2|--[64634 64636]\n43: 1|--[76514]\n44: 1|--[92025]\n45: 3|--[92081 92082 92083]\n46: 3|--[92132 92133 92134]\n47: 1|--[92145]\n48: 2|--[92201 92202]\n49: 3|--[92227 92228 92229]\n50: 1|--[92235]\n51: 2|--[92240 92242]\n52: 1|--[95870]\n53: 8|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T]\n54: 3|--[0263T 0265T 0266T]\n55: 1|--[0269T]\n56: 2|--[0274T 0275T]\n57: 1|--[0329T]\n58: 1|--[0330T]\n59: 1|--[0422T]\n60: 4|--[0444T 0445T 0506T 0507T]\n61: 1|--[C7501]\n62: 4|--[C7502 C7504 C7505 C9771]\n63: 1|--[E0675]\n64: 1|--[G0279]\n65: 1|--[G0412]\n66: 2|--[G0413 G0414]\n67: 2|--[G0415 S2342]\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |>\n  split_lengths() |> \n  remove_redundant() |>\n  g5() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 177|--[90460 90461 90471 90472 90473 90474 90619 90620...]\n\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 177|--[90460 90461 90471 90472 90473 90474 90619 90620...]\n\n  1: 2|--[90460 90461]\n  2: 4|--[90471 90472 90473 90474]\n  3: 3|--[90619 90620 90621]\n  4: 1|--[90633]\n  5: 2|--[90647 90648]\n  6: 1|--[90651]\n  7: 3|--[90670 90672 90674]\n  8: 3|--[90680 90681 90682]\n  9: 4|--[90685 90686 90687 90688]\n 10: 5|--[90696 90697 90698 90700 90702]\n 11: 1|--[90707]\n 12: 1|--[90710]\n 13: 4|--[90713 90714 90715 90716]\n 14: 1|--[90723]\n 15: 2|--[90732 90734]\n 16: 1|--[90740]\n 17: 5|--[90743 90744 90746 90747 90749]\n 18: 1|--[90756]\n 19: 2|--[A4467 A9283]\n 20: 1|--[A9285]\n 21: 1|--[L1900]\n 22: 2|--[L1902 L1904]\n 23: 1|--[L1906]\n 24: 1|--[L1907]\n 25: 2|--[L1910 L1920]\n 26: 1|--[L1930]\n 27: 2|--[L1932 L1940]\n 28: 1|--[L1945]\n 29: 1|--[L1950]\n 30: 1|--[L1951]\n 31: 2|--[L1960 L1970]\n 32: 1|--[L1971]\n 33: 1|--[L1980]\n 34: 1|--[L1990]\n 35: 5|--[L2000 L2005 L2006 L2010 L2020]\n 36: 2|--[L2030 L2034]\n 37: 3|--[L2035 L2036 L2037]\n 38: 2|--[L2038 L2106]\n 39: 3|--[L2108 L2112 L2114]\n 40: 7|--[L2116 L2126 L2128 L2132 L2134 L2136 L2180]\n 41: 1|--[L2182]\n 42: 1|--[L2184]\n 43: 1|--[L2186]\n 44: 2|--[L2188 L2190]\n 45: 1|--[L2192]\n 46: 1|--[L2200]\n 47: 1|--[L2210]\n 48: 1|--[L2220]\n 49: 1|--[L2230]\n 50: 1|--[L2232]\n 51: 1|--[L2240]\n 52: 1|--[L2250]\n 53: 1|--[L2260]\n 54: 1|--[L2265]\n 55: 1|--[L2270]\n 56: 1|--[L2275]\n 57: 1|--[L2280]\n 58: 1|--[L2300]\n 59: 1|--[L2310]\n 60: 1|--[L2320]\n 61: 1|--[L2330]\n 62: 1|--[L2335]\n 63: 2|--[L2340 L2350]\n 64: 1|--[L2360]\n 65: 2|--[L2370 L2375]\n 66: 1|--[L2380]\n 67: 1|--[L2385]\n 68: 1|--[L2387]\n 69: 1|--[L2390]\n 70: 1|--[L2395]\n 71: 1|--[L2397]\n 72: 1|--[L2405]\n 73: 1|--[L2415]\n 74: 2|--[L2425 L2430]\n 75: 1|--[L2492]\n 76: 1|--[L2500]\n 77: 1|--[L2510]\n 78: 1|--[L2520]\n 79: 1|--[L2525]\n 80: 1|--[L2526]\n 81: 1|--[L2530]\n 82: 1|--[L2540]\n 83: 1|--[L2550]\n 84: 1|--[L2750]\n 85: 1|--[L2755]\n 86: 1|--[L2760]\n 87: 1|--[L2768]\n 88: 1|--[L2780]\n 89: 1|--[L2785]\n 90: 1|--[L2795]\n 91: 1|--[L2800]\n 92: 1|--[L2810]\n 93: 1|--[L2820]\n 94: 1|--[L2830]\n 95: 1|--[L2840]\n 96: 1|--[L2850]\n 97: 1|--[L2999]\n 98: 1|--[L4002]\n 99: 1|--[L4010]\n100: 1|--[L4020]\n101: 1|--[L4030]\n102: 1|--[L4040]\n103: 1|--[L4045]\n104: 1|--[L4050]\n105: 1|--[L4055]\n106: 1|--[L4060]\n107: 1|--[L4070]\n108: 1|--[L4080]\n109: 1|--[L4090]\n110: 2|--[L4100 L4110]\n111: 1|--[L4130]\n112: 2|--[L4205 L4210]\n113: 5|--[L4350 L4360 L4361 L4370 L4386]\n114: 1|--[L4387]\n115: 1|--[L4392]\n116: 1|--[L4394]\n117: 1|--[L4396]\n118: 1|--[L4397]\n119: 2|--[L4398 L4631]\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n::: \n\n# Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x) {\n  list(\n    g1 = g1(x),\n    g2 = g2(x),\n    g3 = g3(x),\n    g4 = g4(x),\n    g5 = g5(x)\n  )\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 6|--[0 4 5 6 G J]\n2: 1|--[c(\"30\", \"31\", \"32\")]\n3: 1|--[c(\"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"72...]\n4: 0|--[]\n5: 1|--[c(\"92015\", \"92016\", \"92017\", \"92018\", \"92019\")]\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 35 36 50 54...]\n3:  46|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  view()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:   6|--[0 4 5 6 G J]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 35 36 50 54...]\n3:  55|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n1:  6|--[0 4 5 6 G J]\n2: 17|--[15 20 22 27 30 31 32 34 35 36 76 92 95 C7 C9 E0 S2]\n3:  9|--[721 722 723 724 725 726 727 728 729]\n4:  0|--[]\n5:  0|--[]\n\n1: 6|--[0 4 5 6 G J]\n2: 8|--[15 c(\"20\", \"22\", \"27\") c(\"30\", \"31\", \"32\", \"34\"...]\n3: 1|--[c(\"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"72...]\n4: 0|--[]\n5: 0|--[]\n```\n\n\n:::\n:::\n\n\n\n\n## Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  if (x == paste0(ad, collapse = \"\")) return(\"[A-Z0-9]\")\n  \n  vec  <- set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  g1 <- get_elem(x, \"g1\")\n  \n  if (empty(g1)) return(NULL)\n  \n  re <- sorder(g1) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(paste0(\"(^\", re, \"{5}$)\"))\n  \n  postfix <- ifelse(\n    sf_grepl(re, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  return(paste0(\"(^\", re, postfix, \"{4}$)\"))\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 35 36 50 54...]\n3:  46|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(0:9, LETTERS)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[A-Z0-9]{5}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = c(LETTERS[1:5], 0:9)) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[A-E0-9][0-9]{4}$)\"\n```\n\n\n:::\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(NULL)\n  \n  vecs <- str_split_fixed(x, \"\", fmax(vlengths(x))) |> as.data.frame()\n  \n  to_brackets <- vecs |>\n    purrr::map(fuimus::uniq_rmna) |>\n    purrr::map(sorder)\n  \n  to_vec <- to_brackets |>\n    purrr::map(reduce_runs)\n  \n  multi_chars <- unname(nchar(to_vec) > 1)\n  \n  nobrack <- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n  \n  to_vec[multi_chars] <- ifelse(\n    any(nobrack), \n    purrr::map_chr(to_vec[multi_chars], \\(x) paste0(\"[\", x, \"]\")), \n    to_vec[multi_chars])\n\n  purrr::list_c(to_vec) |> \n    fuimus::collapser()\n}\n```\n:::\n\n\n\n\n## Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvrg <- function(x, n) {\n  \n  if (is.null(x)) return(NULL)\n  \n  postfix <- ifelse(\n    sf_grepl(x, \"^\\\\[?[A-Z]\\\\-?\", nthreads = 4L), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- ifelse(\n    n == 0, \n    paste0(\"(^\", x, \"$)\"),                \n    paste0(\"(^\", x, postfix, \"{\", n, \"}$)\")) \n    \n  paste0(x , collapse = \"|\")\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = map_vec(x$g2, p2) |> vrg(3),\n    g3 = map_vec(x$g3, p2) |> vrg(2),\n    g4 = map_vec(x$g4, p2) |> vrg(1),\n    g5 = map_vec(x$g5, p2) |> vrg(0)\n  ) |> \n    compact() |> \n    paste0(collapse = \"|\")\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:   0|--[]\n2:   0|--[]\n3:  55|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  81|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n1:  0|--[]\n2:  0|--[]\n3: 55|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  7|--[5202 5203 5204 5205 5206 5207 5208]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][A-Z0-9]{2}$)|(^520[2-8][A-Z0-9]{1}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 7|--[5202 5203 5204 5205 5206 5207 5208]\n5: 5|--[92015 92016 92017 92018 92019]\n\n1: 6|--[0 4 5 6 G J]\n2: 3|--[30 31 32]\n3: 9|--[721 722 723 724 725 726 727 728 729]\n4: 0|--[]\n5: 5|--[92015 92016 92017 92018 92019]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[GJ04-6][0-9]{4}$)|(^3[0-2][A-Z0-9]{3}$)|(^72[1-9][A-Z0-9]{2}$)|(^9201[5-9]$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:  12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 35 36 50 54...]\n3:  46|--[021 022 026 027 032 033 042 044 050 157 209 225...]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n1: 12|--[0 1 2 3 5 6 7 9 C E G S]\n2:  0|--[]\n3:  0|--[]\n4:  0|--[]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^[CEGS0-35-79][0-9]{4}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2[nchar(long_test2) == 4] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5:  0|--[]\n\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][12][A-Z0-9]{1}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 177|--[90460 90461 90471 90472 90473 90474 90619 90620...]\n\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:   0|--[]\n5: 177|--[90460 90461 90471 90472 90473 90474 90619 90620...]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^9046[01]$)\"\n```\n\n\n:::\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x) {\n  x |> \n    split_lengths() |> \n    remove_redundant() |> \n    process_groups() |> \n    reduce_groups()\n}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\nmedrex(long_test2[nchar(long_test2) > 3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(^02[12][12][A-Z0-9]{1}$)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nvec_slice(hcpcs, sf_grepl(hcpcs, medrex(long_test2[nchar(long_test2) > 3])))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1:   0|--[]\n2:   0|--[]\n3:   0|--[]\n4:  74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0221T 0222T...]\n\n1:  0|--[]\n2:  0|--[]\n3:  0|--[]\n4: 74|--[0214 0215 0217 0218 0219 0220 0221 0222 0263 02...]\n5:  0|--[]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"0211T\" \"0211U\" \"0212T\" \"0212U\" \"0221T\" \"0221U\" \"0222T\" \"0222U\"\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_compiler_, _stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_fastplyr(v.0.3.0)_, _cheapr(v.0.9.9)_, _collapse(v.2.0.16)_, _tidyfast(v.0.4.0)_, _data.table(v.1.16.99)_, _re2r(v.1.0.0)_, _re2(v.0.1.3)_, _stringfish(v.0.16.0)_, _fuimus(v.0.0.2)_, _emphatic(v.0.1.8)_, _colortable(v.0.3.0)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _hms(v.1.1.3)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _grid(v.4.4.1)_, _timechange(v.0.3.0)_, _fastmap(v.1.2.0)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _cpp11(v.0.5.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _scales(v.1.3.0)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _munsell(v.0.5.1)_, _withr(v.3.0.1)_, _yaml(v.2.3.10)_, _qs(v.0.27.2)_, _parallel(v.4.4.1)_, _tools(v.4.4.1)_, _tzdb(v.0.4.0)_, _colorspace(v.2.1-1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _fs(v.1.6.4)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _gtable(v.0.3.5)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13)_, _systemfonts(v.1.1.0)_, _xfun(v.0.48)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.48)_, _htmltools(v.0.5.8.1)_ and _rmarkdown(v.2.28)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}