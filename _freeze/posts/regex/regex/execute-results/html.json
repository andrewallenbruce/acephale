{
  "hash": "7aecaf83798c3fd5518502cc399d0c4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learning to Love Regexes By Learning Them\"\nsubtitle: \"I Promised Myself I Wouldn't Do This Again\"\ndescription: \"Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions.\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# HCPCS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>                 Count                                   Regex</span><br/>All             <span style='color:#ffffff;'><span style='background-color:#000000;'> 18903</span></span><span><span> (^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)</span></span><br/> Level I        <span style='color:#ffffff;'><span style='background-color:#333333;'> 10985</span></span><span><span>                  (^[0-9]{4}[AFMTU0-9]$)</span></span><br/>  Category I    <span style='color:#000000;'><span style='background-color:#e5e5e5;'>  9990</span></span><span><span>                    (^[0-9]{4}[AMU0-9]$)</span></span><br/>  Category II   <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   565</span></span><span><span>                           (^[0-9]{4}F$)</span></span><br/>  Category III  <span style='color:#000000;'><span style='background-color:#e5e5e5;'>   430</span></span><span><span>                           (^[0-9]{4}T$)</span></span><br/> Level II       <span style='color:#ffffff;'><span style='background-color:#333333;'>  7918</span></span><span><span>              (^[A-CEGHJ-MP-V][0-9]{4}$)</span></span><br/>\n</pre>\n`````\n:::\n\n\n\n\n# TODO\n\n   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~\n   * Eliminate `g1()` step in grouping.\n   * In `remove_redundant()`, try pmap for `rr()` step.\n\n\n## Checklist\n\n-   [X] `split_lengths()`\n-   [X] `remove_redundant()`\n-   [ ] `process_groups()`\n   -   [X] `g1()`\n   -   [X] `g2()`\n   -   [ ] `g3()`\n   -   [ ] `g4()`\n   -   [ ] `g5()`\n-   [ ] `reduce_groups()`\n\n# Helpers\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff <- \\(x) stringr::str_trunc(string = x, width = 40, side = \"right\")\nwrap   <- \\(x) stringr::str_wrap(string = x, width = 60, exdent = 5, whitespace_only = FALSE)\n\nview <- \\(x) {\n  idx  <- seq_along(x)\n  len  <- collapse::vlengths(x, use.names = FALSE)\n  tree <- unname(purrr::map_vec(x, paste0, collapse = \" \")) |> purrr::map_vec(cutoff)\n  \n    glue::glue(\n      \"{format(idx)}: \", \n      \"{format(len)}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      )\n}\n\nview_remove <- \\(x) {\n  \n  len  <- length(x)\n  tree <- unname(paste0(x, collapse = \" \")) |> \n    purrr::map_vec(cutoff)\n  \n  cat(\n    glue::glue(\n      \"Removed \", \n      \"{format(len, justify = 'left')}|\", \n      \"--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]\"\n      ),\n    sep = \"\\n\")\n}\n```\n:::\n\n\n\n\n# Preprocessing\n\n## `split_lengths()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_lengths <- function(x, verbose = TRUE) {\n  \n  stopifnot(is.character(x))\n  \n  x <- sf_remove(x, \"\\\\*|\\\\s\") |> \n    unique_narm() |> \n    stringr::str_sort()\n  \n  l <- collapse::vlengths(x)\n  \n  out <- list(\n    x1 = x[l == 1],\n    x2 = x[l == 2],\n    x3 = x[l == 3],\n    x4 = x[l == 4],\n    x5 = x[l == 5])\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{cli::symbol$stop} Split By Lengths\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |> \n  split_lengths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  1|--[E]                                        │\n│ 2: 10|--[01 03 81 87 90 C2 D4 J3 J7 L3]            │\n│ 3: 10|--[012 117 276 377 471 550 637 662 C97 J24]  │\n│ 4: 10|--[1573 1578 2513 2719 9711 9940 G027 G2...] │\n│ 5: 10|--[0646T 11463 21825 35321 42160 46220 9...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n:::\n\n\n\n\n## `remove_redundant()`\n\nIf a vector contains both `\"A\"` and `\"A0\"`, remove `\"A0\"`. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nremove_redundant <- function(x, verbose = TRUE) {\n\n  .c(x1, x2, x3, x4, x5) %=% x\n  \n  out <- list(\n    x1 = x1,\n    x2 = rr(x2, x1),\n    x3 = rr(x3, x1) |> rr(x2),\n    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),\n    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)\n  )\n  \n  if (verbose) {\n    \n    cli::cat_boxx(\n      label = view(out), \n      header = glue::glue(\"{strrep(cli::symbol$stop, 2)} Remove Redundancies\"),\n      align = \"left\", \n      padding = c(0, 1, 0, 1))\n\n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs(15) |> \n  split_lengths() |> \n  remove_redundant()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  5|--[1 C M R U]                                │\n│ 2: 14|--[13 15 27 32 35 41 89 C9 G8 G9 K0 K1 Q...] │\n│ 3: 15|--[032 041 077 382 542 553 615 868 872 9...] │\n│ 4: 15|--[0851 1000 2463 4350 6360 6463 7350 75...] │\n│ 5: 15|--[0461T 15854 34502 46735 61609 63268 7...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n\n\n\n# Grouping\n\nGroup each set of vectors into regex patterns.\n\n::: {.panel-tabset}\n\n## [g1]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng1 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x1\")\n  \n  if (empty(x)) return(character(0))\n  \n  out <- list(x)\n  \n  if (verbose) {\n    \n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 1\"))\n    cat(view(out), sep = \"\\n\")\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  5|--[5 6 E Q R]                                │\n│ 2: 10|--[06 27 55 56 63 92 A4 C1 C9 L0]            │\n│ 3: 10|--[004 315 494 517 782 813 950 L66 L85 Q05]  │\n│ 4: 10|--[0404 0753 1052 2740 3035 3400 3482 G8...] │\n│ 5: 10|--[00539 0500F 0550F 63304 77402 93990 D...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n\n\n\n## [g2]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng2 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x2\")\n  \n  if (empty(x)) return(character(0))\n  \n  out <- collapse::rsplit(x, take_at(x, 1), use.names = FALSE)\n  \n  if (verbose) {\n    \n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 2\"), col = \"orange\")\n    cat(view(out), sep = \"\\n\")\n    \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nrandom_hcpcs(25) |>\n  split_lengths() |> \n  remove_redundant() |> \n  g2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  4|--[8 K P Q]                                  │\n│ 2: 22|--[00 01 25 54 58 85 87 90 93 94 A0 A4 C...] │\n│ 3: 24|--[004 014 019 026 209 335 340 421 432 5...] │\n│ 4: 25|--[0250 0413 1928 2113 2134 2353 2760 32...] │\n│ 5: 25|--[00470 00550 0510T 1137F 25607 30630 4...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n\n\n\n## [g3]\n\nDeal with groups containing letters separately\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# $r\n# [1] \"L80\"\n# $f\n# [1] \"L56\" \"L59\"\n# \n# ^L(5[69]|80)$\n\nl_test <- c(\"L6789\", \"L8000\", \"L5600\", \"L5900\")\n\nsf_detect(l_test, \"^L(5[69]|80)[0-9]{2}$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup_hcpcs_3 <- function(x) {\n\n  x <- collapse::get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n\n  base <- data.table::data.table(\n    code = x,\n    a1 = take_at(x, 1),\n    a2 = take_at(x, 2),\n    a3 = take_at(x, 3))\n\n  indices <- base |>\n    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |>\n    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |>\n    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2))\n\n  orphans <- indices |>\n    dplyr::add_count(i1, name = \"n1\", sort = TRUE) |>\n    dplyr::filter((i2 + i3 + n1) == 3) |>\n    dplyr::pull(code)\n\n  last <- indices |>\n    dplyr::filter(!code %in% orphans) |>\n    dplyr::select(code, a1:a3) |>\n    fuimus::combine(group_id, columns = c(\"a1\"), sep = \"\")\n\n  last <- dplyr::left_join(\n    last |> dplyr::count(group_id, a2),\n    last |> dplyr::count(group_id, name = \"g\"),\n    by = dplyr::join_by(group_id)) |>\n    dplyr::filter(n == g) |>\n    dplyr::right_join(last, by = dplyr::join_by(group_id, a2)) |>\n    dplyr::filter(!is.na(n))\n\n  rest <- indices |>\n    dplyr::filter(!code %in% c(orphans, dplyr::pull(last, code))) |>\n    fuimus::combine(group_id, columns = c(\"a1\", \"a2\"), sep = \"\")\n\n  grouped <- vctrs::vec_c(\n    chop(last$code, last$group_id),\n    chop(rest$code, rest$group_id)\n  )\n  \n  o <- unlist(grouped[which(collapse::vlengths(grouped) == 1)])\n  \n  out <- vctrs::vec_c(\n    set_names(as.list(orphans), rep(\"o\", length(orphans))),\n    set_names(chop(o, dplyr::consecutive_id(take_at(o, 1))), rep(\"r\", length(chop(o, dplyr::consecutive_id(take_at(o, 1)))))),\n    set_names(grouped[which(collapse::vlengths(grouped) != 1)], rep(\"f\", length(grouped[which(collapse::vlengths(grouped) != 1)])))\n  )\n  \n  out[collapse::radixorderv(collapse::vlengths(out), sort = TRUE)]\n  \n}\n\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  group_hcpcs_3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  3|--[4 5 7]                                    │\n│ 2: 29|--[00 08 19 21 25 27 37 45 47 50 52 56 6...] │\n│ 3: 30|--[001 034 192 423 432 523 647 672 704 7...] │\n│ 4: 30|--[0395 0689 1192 1582 2778 2982 3161 40...] │\n│ 5: 30|--[00528 27740 36680 42510 43659 47505 5...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng3 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x3\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- sf_extract(x, \"[A-Z]{1}\")\n  num <- x[x %!in% chr]\n  \n  num <- data.table::data.table(\n    code = num, \n    lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(as.integer(stringr::str_replace_all(chr, \"[A-Z]\", letters_to_numbers))))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n\n  if (verbose) {\n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 3\"), col = \"orange\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nall_tests[nchar(all_tests) < 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  6|--[0 4 5 6 G J]                              │\n│ 2: 29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5:  0|--[]                                         │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests[nchar(all_tests) == 3] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3: 55|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  0|--[]                                         │\n│ 5:  0|--[]                                         │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs(30) |> \n  split_lengths() |> \n  remove_redundant() |>\n  g3()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  2|--[Q S]                                      │\n│ 2: 24|--[00 17 25 29 31 33 38 43 50 54 58 87 9...] │\n│ 3: 30|--[011 017 027 042 205 284 287 326 349 3...] │\n│ 4: 30|--[0112 0199 0683 1011 1100 2347 3377 34...] │\n│ 5: 30|--[01180 11045 21825 29000 29844 30802 3...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n\n\n\n## [4]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng4 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x4\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- sf_extract(x, \"[A-Z]{1}\")\n  num <- x[x %!in% chr]\n  \n  num <- data.table::data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        stringr::str_replace_all(chr, \"[A-Z]\", letters_to_numbers)\n        )))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  if (verbose) {\n    \n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 4\"), col = \"orange\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests[20:25] |> \n  split_lengths() |> \n  remove_redundant() |> \n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────┐\n│ 1: 0|--[]                              │\n│ 2: 0|--[]                              │\n│ 3: 0|--[]                              │\n│ 4: 6|--[5203 5204 5205 5206 5207 5208] │\n│ 5: 0|--[]                              │\n└────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g4()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  2|--[4 K]                                      │\n│ 2: 10|--[13 44 45 49 60 86 92 E2 G9 Q4]            │\n│ 3: 10|--[048 119 217 364 365 623 875 881 950 H10]  │\n│ 4: 10|--[3230 4241 7572 9067 9329 9570 A623 C9...] │\n│ 5: 10|--[0007M 44133 52356 63088 78414 82784 9...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n\n\n\n## [5]\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng5 <- function(x, verbose = TRUE) {\n  \n  x <- collapse::get_elem(x, \"x5\")\n  \n  if (empty(x)) return(character(0))\n  \n  chr <- sf_extract(x, \"[A-Z]{1}\")\n  num <- x[x %!in% chr]\n  \n  num  <- data.table::data.table(code = num, lump = lump(as.integer(num)))\n  \n  chr <- data.table::data.table(\n    code = chr, \n    lump = lump(\n      as.integer(\n        stringr::str_remove_all(chr, \"[A-Z]\")\n        )))\n  \n  out <- vctrs::vec_c(\n    if (empty(num)) NULL else chop(num$code, num$lump),\n    if (empty(chr)) NULL else chop(chr$code, chr$lump))\n  \n  if (empty(out)) return(character(0))\n  \n  if (verbose) {\n    \n    cli::cat_line(label = paste0(cli::symbol$stop, \" Group 5\"), col = \"orange\")\n    cat(view(out), sep = \"\\n\")  \n    return(invisible(out))\n    \n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests[26:30] |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────┐\n│ 1: 0|--[]                              │\n│ 2: 0|--[]                              │\n│ 3: 0|--[]                              │\n│ 4: 0|--[]                              │\n│ 5: 5|--[92015 92016 92017 92018 92019] │\n└────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_test |>\n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5: 91|--[90460 90461 90471 90474 90619 90633 9...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  g5()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  3|--[1 T U]                                    │\n│ 2: 10|--[00 01 05 14 64 69 E0 G9 J3 J9]            │\n│ 3:  8|--[116 283 598 773 903 C90 E04 E18]          │\n│ 4: 10|--[0274 0669 2138 6329 9461 9616 C892 E1...] │\n│ 5: 10|--[0394U 23350 43881 48554 52500 A6531 C...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n\n\n\n::: \n\n# Process Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprocess_groups <- function(x, verbose = TRUE) {\n  \n    out <- list(\n      g1 = g1(x, verbose = verbose),\n      g2 = g2(x, verbose = verbose),\n      g3 = g3(x, verbose = verbose),\n      g4 = g4(x, verbose = verbose),\n      g5 = g5(x, verbose = verbose)\n      )\n  \n  if (verbose) {\n    return(invisible(out))\n  } else {\n    return(out)\n  }\n}\n\nhcpcs_tests |>\n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ──────────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 7|--[5202 5203 5204 5205 5206 5207 5208]  │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nall_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:   6|--[0 4 5 6 G J]                              │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  55|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |>\n  process_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  2|--[0 1]                                      │\n│ 2: 10|--[00 10 29 66 A4 C1 G8 G9 H0 V5]            │\n│ 3: 10|--[030 276 287 522 534 872 946 G86 G90 P90]  │\n│ 4: 10|--[0774 2161 2643 6581 7300 8753 9047 E2...] │\n│ 5: 10|--[0557F 11402 33884 67345 72292 80173 8...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n\n\n\n## Reduce Runs\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreduce_runs <- function(x) {\n  \n  ad <- c(LETTERS, 0:9)\n  \n  vec  <- rlang::set_names(rep(0, 36), ad)\n  \n  vec2 <- vec[fuimus::splitter(x)]\n  \n  vec2 <- vec2[!is.na(vec2)]\n  \n  vec[names(vec2)] <- 1\n\n  vec_group <- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |>\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |>\n    dplyr::filter(key == 1, group_size >= 3) |>\n    dplyr::select(value, group)\n\n  if (empty(vec_group)) return(x)\n  \n  xgroups <- chop(vec_group$value, vec_group$group) |>\n    purrr::map(fuimus::collapser) |>\n    purrr::list_c()\n  \n  if (all(xgroups == paste0(ad, collapse = \"\"))) return(\"[A-Z0-9]\")\n  \n  replacements <- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |>\n    glue::glue_data(\"{start}-{end}\") |>\n    as.vector()\n\n  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n```\n:::\n\n\n\n\n## G == 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- function(x) {\n  \n  if (empty(x[[\"g1\"]])) return(character(0))\n  \n  x <- collapse::get_elem(x, \"g1\")[[1]]\n  \n  re <- sort_order(x) |> reduce_runs()\n  \n  if (re == \"[A-Z0-9]\") return(glue::glue(\"^{re}{{5}}$\"))\n  \n  postfix <- ifelse(sf_detect(re, \"\\\\[?[0-9]{1}\"), \"[A-Z0-9]\", \"[0-9]\")\n  \n  glue::glue(\"^{re}{postfix}{{4}}$\")\n}\n\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ──────────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 7|--[5202 5203 5204 5205 5206 5207 5208]  │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(0:9, LETTERS))) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-Z0-9]{5}$\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(g1 = list(c(LETTERS[1:5], 0:9))) |> p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n^[A-E0-9][A-Z0-9]{4}$\n```\n\n\n:::\n:::\n\n\n\n\n## G > 1\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- function(x) {\n  \n  if (empty(x)) return(character(0))\n  \n  vec <- stringr::str_split_fixed(x, \"\", max_vlength(x)) |> \n    as.data.frame() |> \n    purrr::map(unique_narm) |> \n    purrr::map(sort_order) |>\n    purrr::map(reduce_runs)\n  \n  multi <- unname(nchar(vec) > 1)\n  \n  nobrack <- stringr::str_detect(vec[multi], \"\\\\[|\\\\]\", TRUE)\n  \n  vec[multi] <- ifelse(any(nobrack), purrr::map_chr(vec[multi], \\(x) paste0(\"[\", x, \"]\")), vec[multi])\n\n  paste0(purrr::list_c(vec), collapse = \"\")\n}\n\n# hcpcs_tests |> \n#   split_lengths() |> \n#   remove_redundant() |> \n#   process_groups() |>\n#   map(p2)\n# \n# list(g2 = list(c(0:9, LETTERS))) |> p2()\n# \n# list(g2 = list(c(LETTERS[1:5], 0:9))) |> p2()\n```\n:::\n\n\n\n\n# Reduce Groups\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec_to_regex <- vrg <- function(x, n) {\n  \n  if (empty(x)) return(character(0))\n  \n  post <- ifelse(sf_detect(x, \"^\\\\[?[A-Z]\\\\-?\"), \"[0-9]\", \"[A-Z0-9]\")\n  \n  x <- data.table::fcase(\n    n == 0, glue::glue(\"^{x}$\"),                \n    n == 1, glue::glue(\"^{x}{post}$\"),\n    n == 2, glue::glue(\"^{x}{post}{{2}}$\"),\n    n == 3, glue::glue(\"^{x}{post}{{3}}$\")\n    )\n    \n  glue::glue_collapse(x)\n}\n\nreduce_groups <- function(x) {\n  \n  list(\n    g1 = p1(x),\n    g2 = purrr::map_chr(x$g2, p2) |> purrr::map_chr(vrg, n = 3) |> glue::as_glue(),\n    g3 = purrr::map_chr(x$g3, p2) |> purrr::map_chr(vrg, n = 2) |> glue::as_glue(),\n    g4 = purrr::map_chr(x$g4, p2) |> purrr::map_chr(vrg, n = 1) |> glue::as_glue(),\n    g5 = purrr::map_chr(x$g5, p2) |> purrr::map_chr(vrg, n = 0) |> glue::as_glue()\n  )\n}\n\nall_tests[nchar(all_tests) > 2] |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:   0|--[]                                         │\n│ 2:   0|--[]                                         │\n│ 3:  55|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  81|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 121|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhcpcs_tests |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ──────────────────────────┐\n│ 1: 6|--[0 4 5 6 G J]                         │\n│ 2: 3|--[30 31 32]                            │\n│ 3: 9|--[721 722 723 724 725 726 727 728 729] │\n│ 4: 7|--[5202 5203 5204 5205 5206 5207 5208]  │\n│ 5: 5|--[92015 92016 92017 92018 92019]       │\n└──────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_test2 |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:  12|--[0 1 2 3 5 6 7 9 C E G S]                  │\n│ 2:  29|--[02 03 04 05 15 20 22 27 30 31 32 34 3...] │\n│ 3:  46|--[021 022 026 027 032 033 042 044 050 1...] │\n│ 4:  74|--[0214 0215 0217 0218 0219 0220 0221 02...] │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# long_test2[nchar(long_test2) == 4]\n\nnew_test |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  0|--[]                                         │\n│ 2:  0|--[]                                         │\n│ 3:  0|--[]                                         │\n│ 4:  0|--[]                                         │\n│ 5: 91|--[90460 90461 90471 90474 90619 90633 9...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_hcpcs() |> \n  split_lengths() |> \n  remove_redundant() |> \n  process_groups() |> \n  reduce_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ────────────────────────────────┐\n│ 1:  3|--[5 8 M]                                    │\n│ 2: 10|--[15 32 37 61 77 A9 C7 G8 K0 S0]            │\n│ 3: 10|--[158 427 438 454 774 A00 A65 G86 L56 S22]  │\n│ 4: 10|--[0454 6155 6304 8506 9083 C904 E096 J7...] │\n│ 5: 10|--[00731 17264 22212 24164 25415 67340 8...] │\n└────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n\n\n\n# `medrex()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmedrex <- function(x, verbose = TRUE) {\n  x |> \n    split_lengths(verbose = verbose) |> \n    remove_redundant(verbose = verbose) |> \n    process_groups(verbose = verbose) |> \n    reduce_groups() |> \n    unlist(use.names = FALSE) |> \n    glue::glue_collapse(sep = \"|\")\n}\n\nlong_test2[nchar(long_test2) > 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\" \"0221T\" \"0222T\" \"0263T\"\n [10] \"0265T\" \"0266T\" \"0269T\" \"0274T\" \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\"\n [19] \"0445T\" \"0506T\" \"0507T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\"\n [28] \"22514\" \"22515\" \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\"\n [37] \"32673\" \"34713\" \"34714\" \"34715\" \"34716\" \"34717\" \"36221\" \"34812\" \"34820\"\n [46] \"34833\" \"34834\" \"35572\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\"\n [55] \"55300\" \"58575\" \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\"\n [64] \"58920\" \"58925\" \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\"\n [73] \"63044\" \"63045\" \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\"\n [82] \"64492\" \"64494\" \"64495\" \"64634\" \"64636\" \"76514\" \"92025\" \"92081\" \"92082\"\n [91] \"92083\" \"92132\" \"92133\" \"92134\" \"92145\" \"92201\" \"92202\" \"92227\" \"92228\"\n[100] \"92229\" \"92235\" \"92240\" \"92242\" \"95870\" \"C7501\" \"C7502\" \"C7504\" \"C7505\"\n[109] \"C9771\" \"E0675\" \"G0279\" \"G0412\" \"G0413\" \"G0414\" \"G0415\" \"S2342\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# REMOVE {1} FROM EXPRS WITH 5 CHARS\n\nmedrex(long_test2[nchar(long_test2) > 4])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┌ ■ Split By Lengths ─────────────────────────────────┐\n│ 1:   0|--[]                                         │\n│ 2:   0|--[]                                         │\n│ 3:   0|--[]                                         │\n│ 4:   0|--[]                                         │\n│ 5: 116|--[0214T 0215T 0217T 0218T 0219T 0220T 0...] │\n└─────────────────────────────────────────────────────┘\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n\n```{.r .cell-code}\nvctrs::vec_slice(\n  hcpcs, \n  stringfish::sf_grepl(\n    hcpcs, \n    medrex(\n      long_test2[nchar(long_test2) > 4],\n      verbose = FALSE\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rr(x2, x1): could not find function \"rr\"\n```\n\n\n:::\n:::\n\n{{< pagebreak >}}\n\n\n\n\n\n\n::: {#nte-references .callout-tip collapse=\"true\"}\n\n## Links\n### Reference\n\n   - [Regex Cheatsheet](https://github.com/raredd/regex)\n   - [Learn Regex](https://github.com/ziishaned/learn-regex)\n   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)\n   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)\n   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)\n   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)\n   - [RexEgg](https://www.rexegg.com/)\n   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)\n   - [Debuggex](https://www.debuggex.com/)\n\n### Packages\n\n   - [**textshape**](https://github.com/trinker/textshape)\n   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)\n   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)\n   - [**makeunique**](https://github.com/selkamand/makeunique)\n   - [**similiars**](https://github.com/davidsjoberg/similiars)\n   - [**strex**](https://github.com/rorynolan/strex/)\n   - [**stringfish**](https://github.com/traversc/stringfish)\n   - [**collapse**](https://sebkrantz.github.io/collapse/)\n   - [**kit**](https://github.com/2005m/kit)\n   - [**cheapr**](https://github.com/NicChr/cheapr)\n   - [**fastplyr**](https://github.com/NicChr/fastplyr)\n   - [**stringi**](https://stringi.gagolewski.com/)\n   - [**qdapRegex**](https://github.com/trinker/qdapRegex)\n   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)\n\n### Functions\n\n   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)\n   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)\n   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)\n   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)\n   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)\n\n::: \n\n\n## Session Information \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n**R version 4.4.1 (2024-06-14 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_emphatic(v.0.1.8)_, _fuimus(v.0.0.2)_, _collapse(v.2.0.17)_, _data.table(v.1.16.99)_, _codex(v.0.0.0.9000)_, _stringfish(v.0.16.0)_, _cli(v.3.6.3)_, _vctrs(v.0.6.5)_, _rlang(v.1.1.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_rappdirs(v.0.3.3)_, _utf8(v.1.2.4)_, _generics(v.0.1.3)_, _stringi(v.1.8.4)_, _hms(v.1.1.3)_, _digest(v.0.6.37)_, _magrittr(v.2.0.3)_, _evaluate(v.1.0.1)_, _grid(v.4.4.1)_, _timechange(v.0.3.0)_, _fastmap(v.1.2.0)_, _rprojroot(v.2.0.4)_, _jsonlite(v.1.8.9)_, _pins(v.1.4.0)_, _pander(v.0.6.5)_, _fansi(v.1.0.6)_, _scales(v.1.3.0)_, _northstar(v.0.0.7)_, _textshaping(v.0.4.0)_, _RApiSerialize(v.0.1.4)_, _crayon(v.1.5.3)_, _munsell(v.0.5.1)_, _withr(v.3.0.2)_, _yaml(v.2.3.10)_, _qs(v.0.27.2)_, _tools(v.4.4.1)_, _parallel(v.4.4.1)_, _tzdb(v.0.4.0)_, _colorspace(v.2.1-1)_, _here(v.1.0.1)_, _R6(v.2.5.1)_, _lifecycle(v.1.0.4)_, _cheapr(v.0.9.9)_, _fs(v.1.6.5)_, _htmlwidgets(v.1.6.4)_, _ragg(v.1.3.3)_, _pkgconfig(v.2.0.3)_, _RcppParallel(v.5.1.9)_, _pillar(v.1.9.0)_, _gtable(v.0.3.6)_, _glue(v.1.8.0)_, _Rcpp(v.1.0.13)_, _systemfonts(v.1.1.0)_, _xfun(v.0.48)_, _tidyselect(v.1.2.1)_, _rstudioapi(v.0.17.1)_, _knitr(v.1.48)_, _htmltools(v.0.5.8.1)_, _rmarkdown(v.2.29)_ and _compiler(v.4.4.1)_\n:::\n:::\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}