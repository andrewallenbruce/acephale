{
  "hash": "dab608c60ca39db7e35a03e8b7b0f97f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Taxonomy Codes\"\nsubtitle: \"The NUCC Health Care Provider Taxonomy Code Set\"\ndescription: \"The Health Care Provider Taxonomy Code Set is a standardized system of codes used to classify and identify health care providers and designed for use within the ASC X12N Health Care transactions.\"\nformat:\n  html:\n    other-links:\n      - text: NUCC Taxonomy Site\n        icon: bookmark-plus\n        href: https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n### Key Points\n\n-   **Purpose**: Categorize health care providers by their type, classification, and specialization.\n-   **Maintenance**: National Uniform Claim Committee (NUCC). Updated twice a year, in January and July.\n-   **Application**: Used in various healthcare processes, including:\n    -   Electronic healthcare transactions\n    -   NPI enumeration\n    -   Medicare provider enrollment\n    -   Insurance credentialing\n    -   Claims processing\n    -   Determining network adequacy\n\n# Overview\n\nThe **Health Care Provider Taxonomy Code Set** is an external, non-medical data code set designed for use in an electronic environment, specifically within the ASC X12N Health Care transactions, including those mandated under [HIPAA](https://aspe.hhs.gov/reports/health-insurance-portability-accountability-act-1996 \"Health Insurance Portability and Accountability Act of 1996\").\n\nA taxonomy code is a unique, ten character alphanumeric code that describes a health care service provider's type, classification, and the area of specialization.\n\nTaxonomy codes are selected by the provider at the time of NPI registration. When providers apply for NPIs, the National Plan and Provider Enumeration System (NPPES) does not verify the accuracy of the selected taxonomy codes. It only validates that the codes exist within the current version of the code set.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"collapsibleTree html-widget html-fill-item\" id=\"htmlwidget-a1aab7162a9c0328c8bb\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-a1aab7162a9c0328c8bb\">{\"x\":{\"data\":{\"name\":\"Taxonomies\",\"fill\":\"#D33F6A\",\"SizeOfNode\":14.05,\"children\":[{\"name\":\"Individual\",\"fill\":\"#D33F6A\",\"SizeOfNode\":10.88,\"children\":[{\"name\":\"Allopathic & Osteopathic Physicians\",\"fill\":\"#E47A45\",\"SizeOfNode\":2.57},{\"name\":\"Respiratory, Developmental, Rehabilitative and Restorative Service Providers\",\"fill\":\"#E8C43D\",\"SizeOfNode\":2.57},{\"name\":\"Technologists, Technicians & Other Technical Service Providers\",\"fill\":\"#E7CE4C\",\"SizeOfNode\":2.57},{\"name\":\"Nursing Service Providers\",\"fill\":\"#E7CE4C\",\"SizeOfNode\":2.57},{\"name\":\"Physician Assistants & Advanced Practice Nursing Providers\",\"fill\":\"#E6D151\",\"SizeOfNode\":2.57},{\"name\":\"Behavioral Health & Social Service Providers\",\"fill\":\"#E5D75D\",\"SizeOfNode\":2.57},{\"name\":\"Other Service Providers\",\"fill\":\"#E4DA64\",\"SizeOfNode\":2.57},{\"name\":\"Dental Providers\",\"fill\":\"#E3E073\",\"SizeOfNode\":2.57},{\"name\":\"Pharmacy Service Providers\",\"fill\":\"#E3E073\",\"SizeOfNode\":2.57},{\"name\":\"Eye and Vision Services Providers\",\"fill\":\"#E2E37C\",\"SizeOfNode\":2.57},{\"name\":\"Dietary & Nutritional Service Providers\",\"fill\":\"#E2E37C\",\"SizeOfNode\":2.57},{\"name\":\"Nursing Service Related Providers\",\"fill\":\"#E2E37C\",\"SizeOfNode\":2.57},{\"name\":\"Chiropractic Providers\",\"fill\":\"#E2E37C\",\"SizeOfNode\":2.57},{\"name\":\"Podiatric Medicine & Surgery Service Providers\",\"fill\":\"#E2E688\",\"SizeOfNode\":2.57},{\"name\":\"Speech, Language and Hearing Service Providers\",\"fill\":\"#E2E688\",\"SizeOfNode\":2.57},{\"name\":\"Emergency Medical Service Providers\",\"fill\":\"#E2E688\",\"SizeOfNode\":2.57},{\"name\":\"Group\",\"fill\":\"#E2E6BD\",\"SizeOfNode\":2.57},{\"name\":\"Student, Health Care\",\"fill\":\"#E2E6BD\",\"SizeOfNode\":2.57}]},{\"name\":\"Non-Individual\",\"fill\":\"#EAA628\",\"SizeOfNode\":8.890000000000001,\"children\":[{\"name\":\"Ambulatory Health Care Facilities\",\"fill\":\"#E47A45\",\"SizeOfNode\":2.57},{\"name\":\"Suppliers\",\"fill\":\"#E9B42C\",\"SizeOfNode\":2.57},{\"name\":\"Hospitals\",\"fill\":\"#E7CB46\",\"SizeOfNode\":2.57},{\"name\":\"Transportation Services\",\"fill\":\"#E7CE4C\",\"SizeOfNode\":2.57},{\"name\":\"Agencies\",\"fill\":\"#E6D151\",\"SizeOfNode\":2.57},{\"name\":\"Nursing & Custodial Care Facilities\",\"fill\":\"#E6D457\",\"SizeOfNode\":2.57},{\"name\":\"Residential Treatment Facilities\",\"fill\":\"#E4DD6B\",\"SizeOfNode\":2.57},{\"name\":\"Hospital Units\",\"fill\":\"#E3E073\",\"SizeOfNode\":2.57},{\"name\":\"Respite Care Facility\",\"fill\":\"#E3E073\",\"SizeOfNode\":2.57},{\"name\":\"Laboratories\",\"fill\":\"#E2E37C\",\"SizeOfNode\":2.57},{\"name\":\"Managed Care Organizations\",\"fill\":\"#E2E37C\",\"SizeOfNode\":2.57},{\"name\":\"Other Service Providers\",\"fill\":\"#E2E688\",\"SizeOfNode\":2.57}]}]},\"options\":{\"hierarchy\":[\"section\",\"grouping\"],\"input\":null,\"attribute\":\"Classifications\",\"linkLength\":null,\"fontSize\":14,\"tooltip\":false,\"collapsed\":true,\"zoomable\":true,\"margin\":{\"top\":20,\"bottom\":20,\"left\":99.05,\"right\":557}}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nInteractive Provider Taxonomy Hierarchy\n:::\n:::\n\n\n\n\n# Code Hierarchy\n\nThe code set is structured into 3 distinct levels:\n\n::: {.panel-tabset}\n\n## I: **Provider Grouping**\n\n**A major grouping of service(s) or occupation(s) of health care providers.**\n\n*Examples:*\n\n   * Allopathic & Osteopathic Physicians\n   * Dental Providers\n   * Hospitals\n\n## II: **Classification**\n\n**A more specific service or occupation related to the Provider Grouping.**\n\nFor example, the Classification for Provider Grouping *Allopathic & Osteopathic Physicians* is based upon the General Specialty Certificates, as issued by the appropriate national boards.\n\nThe following boards, however, will have their general certificates appear as **Level III** Areas strictly due to display limitations of the code set for Boards that have multiple general certificates:\n\n   * Medical Genetics\n   * Preventive Medicine\n   * Psychiatry & Neurology\n   * Radiology\n   * Surgery\n   * Otolaryngology\n   * Pathology\n\n## III: **Area of Specialization**\n\n**A more specialized area of the Classification in which a provider chooses to practice or make services available.**\n\nFor example, the Area of Specialization for Provider Grouping *Allopathic & Osteopathic Physicians* is based upon the Sub-specialty Certificates as issued by the appropriate national boards.\n\n:::\n\n# Medicare Crosswalk\n\n> Providers and suppliers with the proper taxonomy code eligible for Medicare programs.\n\nThe [Medicare Provider and Supplier Taxonomy Crosswalk](https://data.cms.gov/provider-characteristics/medicare-provider-supplier-enrollment/medicare-provider-and-supplier-taxonomy-crosswalk) dataset lists the providers and suppliers eligible to enroll in Medicare programs with the proper healthcare provider taxonomy code. This data includes the Medicare specialty codes, if available, provider/supplier type description, taxonomy code, and the taxonomy description.\n\n## NUCC to Medicare\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nxwalk <- provider::taxonomy_crosswalk(tidy = FALSE) |> \n  janitor::clean_names() |> \n  dplyr::tibble() |> \n  dplyr::mutate(\n    dplyr::across(dplyr::everything(), ~ dplyr::na_if(., \"\")),\n    dplyr::across(dplyr::everything(), ~ stringr::str_squish(.))) |> \n  dplyr::reframe(\n    .id = dplyr::row_number(), \n    taxonomy_code = provider_taxonomy_code,\n    taxonomy_type = provider_taxonomy_description_type_classification_specialization,\n    specialty_code = medicare_specialty_code,\n    specialty_type = medicare_provider_supplier_type_description)\n\nxwalk\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 559 × 5\n     .id taxonomy_code taxonomy_type               specialty_code specialty_type\n   <int> <chr>         <chr>                       <chr>          <chr>         \n 1     1 208D00000X    Allopathic & Osteopathic P… 01             Physician/Gen…\n 2     2 208600000X    Allopathic & Osteopathic P… 02             Physician/Gen…\n 3     3 2086H0002X    Allopathic & Osteopathic P… 02             Physician/Gen…\n 4     4 2086S0120X    Allopathic & Osteopathic P… 02             Physician/Gen…\n 5     5 2086S0122X    Allopathic & Osteopathic P… 02             Physician/Gen…\n 6     6 2086S0105X    Allopathic & Osteopathic P… 02             Physician/Gen…\n 7     7 2086S0102X    Allopathic & Osteopathic P… 02             Physician/Gen…\n 8     8 2086X0206X    Allopathic & Osteopathic P… 02             Physician/Gen…\n 9     9 2086S0127X    Allopathic & Osteopathic P… 02             Physician/Gen…\n10    10 2086S0129X    Allopathic & Osteopathic P… 02             Physician/Gen…\n# ℹ 549 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxonomy <- xwalk |> \n  dplyr::select(.id, taxonomy_code, taxonomy_type) |> \n  dplyr::mutate(\n    dlim = case_when(\n      sf_detect(taxonomy_type, \"/\") ~ \"fwslash\", \n      sf_ndetect(taxonomy_type, \"/\") ~ \"comma\"),\n    n = case_when(\n      sf_detect(taxonomy_type, \"/\") ~ str_count(taxonomy_type, \"/\"), \n      sf_ndetect(taxonomy_type, \"/\") ~ str_count(taxonomy_type, \",\"))) |> \n  tidyr::separate_longer_delim(cols = taxonomy_type, delim = stringr::regex(\"[\\\\/|,]\")) |>\n  dplyr::mutate(taxonomy_type = if_else(sf_detect(taxonomy_type, \"Urban Indian Health \\\\(I\"), \"Urban Indian Health [ITU] Pharmacy\", str_squish(taxonomy_type)),\n                dlim = NULL,\n                n = NULL) |> \n  dplyr::filter(sf_ndetect(taxonomy_type, \"^T$|U\\\\)\\\\sPharmacy\")) |>\n  dplyr::mutate(.group = dplyr::row_number(), .by = c(taxonomy_code, .id), .after = .id) |>\n  tidyr::pivot_wider(\n    names_from = .group,\n    values_from = taxonomy_type,\n    names_prefix = \"tax\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `dplyr::mutate()`:\nℹ In argument: `dlim = case_when(...)`.\nCaused by error in `case_when()`:\n! Failed to evaluate the left-hand side of formula 1.\nCaused by error in `sf_detect()`:\n! could not find function \"sf_detect\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntaxonomy\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'taxonomy' not found\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxwalk |> \n  dplyr::reframe(.id = as.character(.id), specialty_code, specialty_type) |> \n  tidyr::nest(.by = c(specialty_code, specialty_type), .key = \".id\") |> \n  dplyr::mutate(.id = map_chr(.id, function(x) glue::glue(\"{delist(x)}\") |> glue::glue_collapse(sep = \", \"))) |> \n  tidyr::separate_longer_delim(cols = specialty_type, delim = stringr::regex(\"[\\\\/]\")) |> \n  dplyr::mutate(\n    specialty_type = str_squish(specialty_type),\n    test = sf_detect(specialty_code, \"\\\\[[A-Z0-9]{2}\\\\]$\"),\n    code_note = map2_chr(test, specialty_code, function(x, y) {if (x) { sf_extract(y, \"(?<=\\\\[).*?(?=\\\\])\") } else { NA_character_ }})) #|> \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `dplyr::mutate()`:\nℹ In argument: `.id = map_chr(...)`.\nCaused by error in `map_chr()`:\nℹ In index: 1.\nCaused by error:\n! Failed to evaluate glue component {delist(x)}\nCaused by error in `delist()`:\n! could not find function \"delist\"\n```\n\n\n:::\n\n```{.r .cell-code}\n  # print(n = 250)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# arktax\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narktax::retrieve_ark(which = \"wide\") |> \n  dplyr::filter(code == \"208D00000X\", year == 2024)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 13\n   year version code       display_name          section grouping classification\n  <dbl>   <int> <chr>      <chr>                 <chr>   <chr>    <chr>         \n1  2024       0 208D00000X General Practice Phy… Indivi… Allopat… General Pract…\n2  2024       1 208D00000X General Practice Phy… Indivi… Allopat… General Pract…\n# ℹ 6 more variables: specialization <chr>, definition <chr>, notes <chr>,\n#   modified <date>, effective <date>, deactivated <date>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\narktax::retrieve_ark(which = \"long\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40,421 × 6\n    year code       level               description               nlevels nyears\n   <dbl> <chr>      <ord>               <chr>                       <int>  <int>\n 1  2021 101200000X I. Section          Individual                      3      3\n 2  2022 101200000X I. Section          Individual                      3      3\n 3  2023 101200000X I. Section          Individual                      3      3\n 4  2024 101200000X I. Section          Individual                      3      3\n 5  2021 101200000X II. Grouping        Behavioral Health & Soci…       3      3\n 6  2022 101200000X II. Grouping        Behavioral Health & Soci…       3      3\n 7  2023 101200000X II. Grouping        Behavioral Health & Soci…       3      3\n 8  2024 101200000X II. Grouping        Behavioral Health & Soci…       3      3\n 9  2021 101200000X III. Classification Drama Therapist                 3      3\n10  2022 101200000X III. Classification Drama Therapist                 3      3\n# ℹ 40,411 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Sources\n\n-   [Health Care Provider Taxonomy Code Set v24.0 (PDF)](https://www.nucc.org/images/stories/PDF/taxonomy_24_0.pdf)\n-   [taxonomy.NUCC.org](https://taxonomy.nucc.org)\n-   [CMS.gov](https://www.cms.gov/medicare/enrollment-renewal/providers-suppliers/health-care-taxonomy)\n-   [ASAM.org](https://www.asam.org/docs/default-source/advocacy/taxonomy-one-pager.pdf?sfvrsn=b5e848c2_2)\n\n\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n\n## Session Information \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n**R version 4.4.2 (2024-10-31 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 \n\n**locale:**\n_LC_COLLATE=English_United States.utf8_, _LC_CTYPE=English_United States.utf8_, _LC_MONETARY=English_United States.utf8_, _LC_NUMERIC=C_ and _LC_TIME=English_United States.utf8_\n\n**attached base packages:** \n_stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_arktax(v.0.0.0.9000)_, _collapsibleTree(v.0.1.8)_, _provider(v.0.0.1)_, _htmltools(v.0.5.8.1)_, _downlit(v.0.4.4)_, _lubridate(v.1.9.3)_, _forcats(v.1.0.0)_, _stringr(v.1.5.1)_, _dplyr(v.1.1.4)_, _purrr(v.1.0.2)_, _readr(v.2.1.5)_, _tidyr(v.1.3.1)_, _tibble(v.3.2.1)_, _ggplot2(v.3.5.1)_ and _tidyverse(v.2.0.0)_\n\n**loaded via a namespace (and not attached):** \n_gtable(v.0.3.6)_, _xfun(v.0.49)_, _httr2(v.1.0.6)_, _htmlwidgets(v.1.6.4)_, _RApiSerialize(v.0.1.4)_, _tzdb(v.0.4.0)_, _vctrs(v.0.6.5)_, _tools(v.4.4.2)_, _generics(v.0.1.3)_, _curl(v.6.0.1)_, _fansi(v.1.0.6)_, _pkgconfig(v.2.0.3)_, _checkmate(v.2.3.2)_, _RcppParallel(v.5.1.9)_, _lifecycle(v.1.0.4)_, _compiler(v.4.4.2)_, _textshaping(v.0.4.0)_, _munsell(v.0.5.1)_, _data.tree(v.1.1.0)_, _janitor(v.2.2.0)_, _qs(v.0.27.2)_, _snakecase(v.0.11.1)_, _yaml(v.2.3.10)_, _pillar(v.1.9.0)_, _cachem(v.1.1.0)_, _tidyselect(v.1.2.1)_, _digest(v.0.6.37)_, _stringi(v.1.8.4)_, _pander(v.0.6.5)_, _fuimus(v.0.0.2)_, _pins(v.1.4.0)_, _fastmap(v.1.2.0)_, _grid(v.4.4.2)_, _colorspace(v.2.1-1)_, _cli(v.3.6.3)_, _magrittr(v.2.0.3)_, _utf8(v.1.2.4)_, _withr(v.3.0.2)_, _backports(v.1.5.0)_, _scales(v.1.3.0)_, _rappdirs(v.0.3.3)_, _timechange(v.0.3.0)_, _rmarkdown(v.2.29)_, _ragg(v.1.3.3)_, _hms(v.1.1.3)_, _stringfish(v.0.16.0)_, _memoise(v.2.0.1)_, _evaluate(v.1.0.1)_, _knitr(v.1.49)_, _rlang(v.1.1.4)_, _Rcpp(v.1.0.13-1)_, _zeallot(v.0.1.0)_, _glue(v.1.8.0)_, _strex(v.2.0.1)_, _rstudioapi(v.0.17.1)_, _jsonlite(v.1.8.9)_, _R6(v.2.5.1)_, _systemfonts(v.1.1.0)_ and _fs(v.1.6.5)_\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/d3-4.10.2/d3.min.js\"></script>\n<link href=\"../../site_libs/collapsibleTree-0.1.6/collapsibleTree.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/collapsibleTree-binding-0.1.8/collapsibleTree.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}