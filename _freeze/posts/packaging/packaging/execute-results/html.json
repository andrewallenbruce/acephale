{
  "hash": "b1cc3271e1cc0c2ad51d2484381cfa44",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Packaging Workflow\"\nformat:\n  html:\n    reference-location: margin\n    other-links:\n      - text: Regex Cheatsheet\n        icon: bookmark-plus\n        href: https://github.com/raredd/regex\n      - text: RexEgg\n        icon: bookmark-plus\n        href: https://www.rexegg.com/\n      - text: Regex in R\n        icon: bookmark-plus\n        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# Create A Package\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncreate_package(\"C:/Path/To/Folder/<package-name>\")\n```\n:::\n\n\n\n\nConnect to Git\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuse_git()\n```\n:::\n\n\n\n\n_Will ask you to commit files to Git. Say yes._\n\nCreate Repository on GitHub\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuse_github()\n```\n:::\n\n\n\n\n_Will ask you to commit files to GitHub. Say yes._\n\nAdd License & COC\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuse_mit_license(\"Your Full Name\")\nuse_code_of_conduct(\"your@email.com\")\n```\n:::\n\n\n\n\nAdd README, Package Document, and News\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuse_readme_rmd()\nuse_package_doc()\nuse_news_md()\n```\n:::\n\n\n\n\nUse `{roxyglobals}`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nroxyglobals::use_roxyglobals()\n```\n:::\n\n\n\n\nUse `{testthat}`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuse_testthat(parallel = TRUE)\nuse_test(\"add-test\")\n```\n:::\n\n\n\n\nCreate `{pkgdown}` site\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuse_pkgdown_github_pages()\n```\n:::\n\n\n\n\nRun Before Committing\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncheck()\nbuild_rmd(\"README.Rmd\")\nuse_tidy_description()\n```\n:::\n\n\n\n\n\n# Add a `{pin}`\n\nCall `usethis::use_data_raw(\"<dataset>\")`\n\nAdd `pins_internal.R` file to `data-raw` directory\n\n\n\n\n::: {.cell layout-align=\"center\" filename='pins_internal.R'}\n\n```{.r .cell-code}\npin_update <- function(x, name, title, description) {\n\n  board <- pins::board_folder(\n    here::here(\"inst/extdata/pins\")\n    )\n\n  board |>\n    pins::pin_write(\n      x,\n      name        = name,\n      title       = title,\n      description = description,\n      type        = \"qs\"\n    )\n\n  board |> pins::write_board_manifest()\n\n}\n\ndelete_pins <- function(pin_names) {\n\n  board <- pins::board_folder(\n    here::here(\"inst/extdata/pins\")\n  )\n\n  pins::pin_delete(board, names = pin_names)\n\n}\n```\n:::\n\n\n\n\nCreate a new pin\n\n\n\n\n::: {.cell layout-align=\"center\" filename='dataset.R'}\n\n```{.r .cell-code}\nsource(here::here(\"data-raw\", \"pins_internal.R\"))\n\npin_update(\n  dataset,\n  name = \"object_name\",\n  title = \"Short Description\",\n  description = \"Long Description\"\n)\n```\n:::\n\n\n\n\nAdd `pins.R` file to package\n\n\n\n\n::: {.cell layout-align=\"center\" filename='pins.R'}\n\n```{.r .cell-code}\n#' Return GitHub raw url\n#'\n#' @param x `<chr>` string\n#'\n#' @returns `<chr>` GitHub raw url\n#'\n#' @examples\n#' gh_raw(\"andrewbruce/example/main/inst/pins/\")\n#'\n#' @autoglobal\n#'\n#' @keywords internal\n#'\n#' @export\ngh_raw <- function(x) {\n  paste0(\"https://raw.githubusercontent.com/\", x)\n}\n\n#' Mount [pins][pins::pins-package] board\n#'\n#' @param source `<chr>` `\"local\"` or `\"remote\"`\n#'\n#' @param package `<chr>` package name\n#'\n#' @returns `<pins_board_folder>` or `<pins_board_url>`\n#'\n#' @autoglobal\n#'\n#' @keywords internal\n#'\n#' @export\nmount_board <- function(source = c(\"local\", \"remote\"), package = \"<package_name>\") {\n\n  source <- match.arg(source)\n\n  switch(\n    source,\n    local = pins::board_folder(\n      fs::path_package(\"extdata/pins\", package = package)),\n    remote = pins::board_url(\n      gh_raw(\n        glue::glue(\"andrewallenbruce/{package}/master/inst/extdata/pins/\")\n      )\n    )\n  )\n}\n\n#' Get a pinned dataset from a [pins][pins::pins-package] board\n#'\n#' @param pin `<chr>` string name of pinned dataset\n#'\n#' @param ... additional arguments passed to `mount_board()`\n#'\n#' @returns `<tibble>` or `<data.frame>`\n#'\n#' @autoglobal\n#'\n#' @keywords internal\n#'\n#' @export\nget_pin <- function(pin, ...) {\n\n  board <- mount_board(...)\n\n  pin <- rlang::arg_match0(pin, list_pins())\n\n  pins::pin_read(board, pin)\n\n}\n\n#' List pins from a [pins][pins::pins-package] board\n#'\n#' @param ... arguments to pass to [mount_board()]\n#'\n#' @returns `<list>` of [pins][pins::pins-package]\n#'\n#' @autoglobal\n#'\n#' @keywords internal\n#'\n#' @export\nlist_pins <- function(...) {\n\n  board <- mount_board(...)\n\n  pins::pin_list(board)\n\n}\n```\n:::\n",
    "supporting": [
      "packaging_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}