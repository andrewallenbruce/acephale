[
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html",
    "href": "posts/taxonomy/provider_taxonomy.html",
    "title": "Taxonomy Codes",
    "section": "",
    "text": "Purpose: Categorize health care providers by their type, classification, and specialization.\n\nMaintenance: National Uniform Claim Committee (NUCC). Updated twice a year, in January and July.\n\nApplication: Used in various healthcare processes, including:\n\nElectronic healthcare transactions\nNPI enumeration\nMedicare provider enrollment\nInsurance credentialing\nClaims processing\nDetermining network adequacy"
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#key-points",
    "href": "posts/taxonomy/provider_taxonomy.html#key-points",
    "title": "Taxonomy Codes",
    "section": "",
    "text": "Purpose: Categorize health care providers by their type, classification, and specialization.\n\nMaintenance: National Uniform Claim Committee (NUCC). Updated twice a year, in January and July.\n\nApplication: Used in various healthcare processes, including:\n\nElectronic healthcare transactions\nNPI enumeration\nMedicare provider enrollment\nInsurance credentialing\nClaims processing\nDetermining network adequacy"
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#overview",
    "href": "posts/taxonomy/provider_taxonomy.html#overview",
    "title": "Taxonomy Codes",
    "section": "\n0.2 Overview",
    "text": "0.2 Overview\nThe Health Care Provider Taxonomy Code Set is an external, non-medical data code set designed for use in an electronic environment, specifically within the ASC X12N Health Care transactions, including those mandated under HIPAA.\nA taxonomy code is a unique alphanumeric code, ten characters in length, that describes a health care service provider’s type, classification, and the area of specialization.\nTaxonomy codes are selected by the provider at the time of NPI registration. When providers apply for NPIs, the National Plan and Provider Enumeration System (NPPES) does not verify the accuracy of the selected taxonomy codes. It only validates that the codes exist within the current version of the code set.\nIt is important for healthcare providers to select the most appropriate taxonomy code(s) as it can affect various aspects of their practice, including billing and claims processing. Selection of a taxonomy code does not replace any credentialing or validation process that the provider requesting the code should complete."
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#taxonomy-hierarchy",
    "href": "posts/taxonomy/provider_taxonomy.html#taxonomy-hierarchy",
    "title": "Taxonomy Codes",
    "section": "\n0.3 Taxonomy Hierarchy",
    "text": "0.3 Taxonomy Hierarchy\nThe code set is structured into 3 distinct levels:\n\nProvider Grouping\nClassification\nArea of Specialization\n\n\n\n\nInteractive Provider Taxonomy Hierarchy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLevel I: Provider Grouping\n\n\n\nA major grouping of service(s) or occupation(s) of health care providers.\nExamples:\n\nAllopathic & Osteopathic Physicians\nDental Providers\nHospitals\n\n\n\n\n\n\n\n\n\nLevel II: Classification\n\n\n\nA more specific service or occupation related to the Provider Grouping.\nFor example, the Classification for Allopathic & Osteopathic Physicians is based upon the General Specialty Certificates, as issued by the appropriate national boards.\nThe following boards, however, will have their general certificates appear as Level III Areas strictly due to display limitations of the code set for Boards that have multiple general certificates:\n\nMedical Genetics\nPreventive Medicine\nPsychiatry & Neurology\nRadiology\nSurgery\nOtolaryngology\nPathology\n\n\n\n\n\n\n\n\n\nLevel III: Area of Specialization\n\n\n\nA more specialized area of the Classification in which a provider chooses to practice or make services available.\nFor example, the Area of Specialization for provider grouping Allopathic & Osteopathic Physicians is based upon the Subspecialty Certificates as issued by the appropriate national boards."
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#medicare-crosswalk",
    "href": "posts/taxonomy/provider_taxonomy.html#medicare-crosswalk",
    "title": "Taxonomy Codes",
    "section": "\n0.4 Medicare Crosswalk",
    "text": "0.4 Medicare Crosswalk\n\nProviders and suppliers with the proper taxonomy code eligible for Medicare programs.\n\nThe Medicare Provider and Supplier Taxonomy Crosswalk dataset lists the providers and suppliers eligible to enroll in Medicare programs with the proper healthcare provider taxonomy code. This data includes the Medicare specialty codes, if available, provider/supplier type description, taxonomy code, and the taxonomy description.\nFootnotes\n\n\n\n\n\n\n\n      Footnote\n    \n\n\n1\nMedicare no longer enrolls this provider type.\n\n\n2\nThis is an arrangement whereby immunization services are rendered by health care providers who are under contract to the entity/individual who is enrolled in Medicare as a Mass Immunization Roster Biller. The Healthcare Provider Taxonomy Code(s) would be that (those) of the health care provider(s) who render the immunization services.\n\n\n3\nMedicare carriers use Specialty Code 87 for Pharmacies when processing prescription drugs that are paid through the Medicare Physician Fee Schedule. However, the description for Specialty Code 87 remains All Other Suppliers.\n\n\n4\nBecause the Medicare Provider Type Physician/Undefined Physician Type applies to physicians,Unknown Supplier/Provider Specialty applies to other than physicians. Because Medicare does not enroll every non-physician supplier/provider type in the Healthcare Provider Taxonomy Code Set, we cannot arbitrarily link this Medicare Provider Type to all remaining supplier/provider types in the Healthcare Provider Taxonomy Code Set. In truth, this Medicare Provider Type would link to every Healthcare Provider Taxonomy Code (except those that describe physicians) that is listed in this document. We do not list them here because doing so would greatly increase the size of this document.\n\n\n5\nBecause the Medicare Provider Type indicates that the provider/supplier is a Physician, we have linked this to the most generic Allopathic & Osteopathic Physicians classification. It could technically link to every Allopathic & Osteopathic Physician.\n\n\n6\nMedicare specialty code designation is for Part B DMEPOS purposes.\n\n\n7\nMedicare specialty code designation is for Part B DMEPOS purposes.\n\n\n8\nMedicare specialty code designation is for Part B DMEPOS purposes.\n\n\n9\nMedicare specialty code designation is for Part B DMEPOS purposes.\n\n\n10\nMedicare specialty code designation is for Part B DMEPOS purposes.\n\n\n11\nMedicare specialty code designation is for Part B DMEPOS purposes.\n\n\n12\nThere is no linkage to specific Healthcare Provider Taxonomy Codes because an Indian Health Service facility can be various provider types/classifications.\n\n\n13\nMedicare specialty code designation is for Part B DMEPOS purposes.\n\n\n14\nDoes not meet the definition of health care provider at 45 CFR 160.103 is not eligible for an NPI.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnote1\n      note2\n      \n        Medicare Specialty\n      \n      \n        Provider Taxonomy\n      \n    \n\nCode\n      Provider Type/Description\n      Code\n      Grouping\n      Classification\n      Specialization\n    \n\n\n\n—\n—\n01\nPhysician/General Practice\n208D00000X\nAllopathic & Osteopathic Physicians\nGeneral Practice\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n208600000X\nAllopathic & Osteopathic Physicians\nSurgery\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n2086H0002X\nAllopathic & Osteopathic Physicians\nSurgery\nHospice and Palliative Medicine\n\n\n—\n—\n02\nPhysician/General Surgery\n2086S0120X\nAllopathic & Osteopathic Physicians\nSurgery\nPediatric Surgery\n\n\n—\n—\n02\nPhysician/General Surgery\n2086S0122X\nAllopathic & Osteopathic Physicians\nSurgery\nPlastic and Reconstructive Surgery\n\n\n—\n—\n02\nPhysician/General Surgery\n2086S0105X\nAllopathic & Osteopathic Physicians\nSurgery\nSurgery of the Hand\n\n\n—\n—\n02\nPhysician/General Surgery\n2086S0102X\nAllopathic & Osteopathic Physicians\nSurgery\nSurgical Critical Care\n\n\n—\n—\n02\nPhysician/General Surgery\n2086X0206X\nAllopathic & Osteopathic Physicians\nSurgery\nSurgical Oncology\n\n\n—\n—\n02\nPhysician/General Surgery\n2086S0127X\nAllopathic & Osteopathic Physicians\nSurgery\nTrauma Surgery\n\n\n—\n—\n02\nPhysician/General Surgery\n2086S0129X\nAllopathic & Osteopathic Physicians\nSurgery\nVascular Surgery\n\n\n—\n—\n02\nPhysician/General Surgery\n208G00000X\nAllopathic & Osteopathic Physicians\nThoracic Surgery (Cardiothoracic Vascular Surgery)\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n204F00000X\nAllopathic & Osteopathic Physicians\nTransplant Surgery\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n208C00000X\nAllopathic & Osteopathic Physicians\nColon & Rectal Surgery\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n207T00000X\nAllopathic & Osteopathic Physicians\nNeurological Surgery\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n204E00000X\nAllopathic & Osteopathic Physicians\nOral & Maxillofacial Surgery\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n207X00000X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n207XS0114X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nAdult Reconstructive Orthopedic Surgery\n\n\n—\n—\n02\nPhysician/General Surgery\n207XX0004X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nFoot and Ankle Surgery\n\n\n—\n—\n02\nPhysician/General Surgery\n207XS0106X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nHand Surgery\n\n\n—\n—\n02\nPhysician/General Surgery\n207XS0117X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nOrthopedic Surgery of the Spine\n\n\n—\n—\n02\nPhysician/General Surgery\n207XX0801X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nOrthopedic Trauma\n\n\n—\n—\n02\nPhysician/General Surgery\n207XP3100X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nPediatric Orthopedic Surgery\n\n\n—\n—\n02\nPhysician/General Surgery\n207XX0005X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nSports Medicine\n\n\n—\n—\n02\nPhysician/General Surgery\n208200000X\nAllopathic & Osteopathic Physicians\nPlastic Surgery\n—\n\n\n—\n—\n02\nPhysician/General Surgery\n2082S0099X\nAllopathic & Osteopathic Physicians\nPlastic Surgery\nPlastic Surgery Within the Head & Neck\n\n\n—\n—\n02\nPhysician/General Surgery\n2082S0105X\nAllopathic & Osteopathic Physicians\nPlastic Surgery\nSurgery of the Hand\n\n\n—\n—\n03\nPhysician/Allergy/ Immunology\n207K00000X \nAllopathic & Osteopathic Physicians\nAllergy and Immunology\n—\n\n\n—\n—\n03\nPhysician/Allergy/ Immunology\n207KA0200X\nAllopathic & Osteopathic Physicians\nAllergy and Immunology\nAllergy\n\n\n—\n—\n03\nPhysician/Allergy/ Immunology\n207KI0005X\nAllopathic & Osteopathic Physicians\nAllergy and Immunology\nClinical & Laboratory Immunology\n\n\n—\n—\n04\nPhysician/Otolaryngology\n207Y00000X \nAllopathic & Osteopathic Physicians\n Otolaryngology \n—"
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#sources",
    "href": "posts/taxonomy/provider_taxonomy.html#sources",
    "title": "Taxonomy Codes",
    "section": "\n0.5 Sources",
    "text": "0.5 Sources\n\nHealth Care Provider Taxonomy Code Set v24.0 (PDF)\ntaxonomy.NUCC.org\nCMS.gov\nASAM.org"
  },
  {
    "objectID": "posts/regex/regex.html",
    "href": "posts/regex/regex.html",
    "title": "Learning to Love Regexes By Learning Them",
    "section": "",
    "text": "“HCPCS -&gt; Regex -&gt; Predicate”"
  },
  {
    "objectID": "posts/regex/regex.html#preprocessing",
    "href": "posts/regex/regex.html#preprocessing",
    "title": "Learning to Love Regexes By Learning Them",
    "section": "\n1.1 Preprocessing",
    "text": "1.1 Preprocessing\n\n\nclean_vec()\ngroup_lengths()\nremove_redos()\n\n\n\n\nCheck that input is a character vector.\nRemove wildcards (*), whitespace and NA values.\nRemove any NA values and keep only unique values.\n\n\nclean_vec &lt;- function(x) {\n  \n  stopifnot(is.character(x))\n  \n  stringfish::sf_convert(\n    fuimus::uniq_rmna(\n      stringfish::sf_gsub(\n        x, \"\\\\*|\\\\s\", \"\", \n      nthreads = 4L)\n    )) |&gt; \n    stringr::str_sort()\n\n}\n\nclean_vec(all_tests)\n\n  [1] \"0\"     \"02\"    \"021\"   \"0214\"  \"0214T\" \"0215\"  \"0215T\" \"0217\"  \"0217T\"\n [10] \"0218\"  \"0218T\" \"0219\"  \"0219T\" \"022\"   \"0220\"  \"0220T\" \"0221\"  \"0221T\"\n [19] \"0222\"  \"0222T\" \"026\"   \"0263\"  \"0263T\" \"0265\"  \"0265T\" \"0266\"  \"0266T\"\n [28] \"0269\"  \"0269T\" \"027\"   \"0274\"  \"0274T\" \"0275\"  \"0275T\" \"03\"    \"032\"  \n [37] \"0329\"  \"0329T\" \"033\"   \"0330\"  \"0330T\" \"04\"    \"042\"   \"0422\"  \"0422T\"\n [46] \"044\"   \"0444\"  \"0444T\" \"0445\"  \"0445T\" \"05\"    \"050\"   \"0506\"  \"0506T\"\n [55] \"0507\"  \"0507T\" \"15\"    \"157\"   \"1577\"  \"15777\" \"20\"    \"209\"   \"2093\" \n [64] \"20939\" \"22\"    \"225\"   \"2251\"  \"22510\" \"22511\" \"22512\" \"22513\" \"22514\"\n [73] \"22515\" \"2252\"  \"22526\" \"22527\" \"27\"    \"271\"   \"2719\"  \"27197\" \"27198\"\n [82] \"30\"    \"308\"   \"3080\"  \"30801\" \"30802\" \"31\"    \"312\"   \"3123\"  \"31231\"\n [91] \"32\"    \"326\"   \"3267\"  \"32673\" \"34\"    \"347\"   \"3471\"  \"34713\" \"34714\"\n[100] \"34715\" \"34716\" \"34717\" \"348\"   \"3481\"  \"34812\" \"3482\"  \"34820\" \"3483\" \n[109] \"34833\" \"34834\" \"35\"    \"355\"   \"3557\"  \"35572\" \"36\"    \"362\"   \"3622\" \n[118] \"36221\" \"4\"     \"5\"     \"50\"    \"503\"   \"5030\"  \"50300\" \"505\"   \"5054\" \n[127] \"50540\" \"5202\"  \"5203\"  \"5204\"  \"5205\"  \"5206\"  \"5207\"  \"5208\"  \"54\"   \n[136] \"544\"   \"5442\"  \"54420\" \"5443\"  \"54430\" \"55\"    \"552\"   \"5520\"  \"55200\"\n[145] \"5525\"  \"55250\" \"553\"   \"5530\"  \"55300\" \"58\"    \"585\"   \"5857\"  \"58575\"\n[154] \"586\"   \"5860\"  \"58600\" \"58605\" \"587\"   \"5870\"  \"58700\" \"5872\"  \"58720\"\n[163] \"588\"   \"5880\"  \"58800\" \"58805\" \"589\"   \"5890\"  \"58900\" \"5892\"  \"58920\"\n[172] \"58925\" \"5894\"  \"58940\" \"58943\" \"6\"     \"61\"    \"610\"   \"6100\"  \"61000\"\n[181] \"61001\" \"612\"   \"6125\"  \"61253\" \"63\"    \"630\"   \"6303\"  \"63035\" \"6304\" \n[190] \"63043\" \"63044\" \"63045\" \"63046\" \"63047\" \"63048\" \"64\"    \"644\"   \"6442\" \n[199] \"64421\" \"6448\"  \"64480\" \"64484\" \"6449\"  \"64491\" \"64492\" \"64494\" \"64495\"\n[208] \"646\"   \"6463\"  \"64634\" \"64636\" \"721\"   \"722\"   \"723\"   \"724\"   \"725\"  \n[217] \"726\"   \"727\"   \"728\"   \"729\"   \"76\"    \"765\"   \"7651\"  \"76514\" \"92\"   \n[226] \"920\"   \"92015\" \"92016\" \"92017\" \"92018\" \"92019\" \"9202\"  \"92025\" \"9208\" \n[235] \"92081\" \"92082\" \"92083\" \"921\"   \"9213\"  \"92132\" \"92133\" \"92134\" \"9214\" \n[244] \"92145\" \"922\"   \"9220\"  \"92201\" \"92202\" \"9222\"  \"92227\" \"92228\" \"92229\"\n[253] \"9223\"  \"92235\" \"9224\"  \"92240\" \"92242\" \"95\"    \"958\"   \"9587\"  \"95870\"\n[262] \"C7\"    \"C75\"   \"C750\"  \"C7501\" \"C7502\" \"C7504\" \"C7505\" \"C9\"    \"C97\"  \n[271] \"C977\"  \"C9771\" \"E0\"    \"E06\"   \"E067\"  \"E0675\" \"G\"     \"G0\"    \"G02\"  \n[280] \"G027\"  \"G0279\" \"G04\"   \"G041\"  \"G0412\" \"G0413\" \"G0414\" \"G0415\" \"J\"    \n[289] \"S2\"    \"S23\"   \"S234\"  \"S2342\"\n\n\n\n\n\nClean input vector.\nSplit into groups by lengths.\nPrefix names with an “x”.\n\n\ngroup_lengths &lt;- function(x) {\n  \n  x &lt;- clean_vec(x)\n  \n  x &lt;- collapse::rsplit(x,\n    collapse::vlengths(x))\n\n    rlang::set_names(x,\n      paste0(\"x\", names(x)))\n}\n\ngroup_lengths(all_tests)\n\n$x1\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n$x2\n [1] \"02\" \"03\" \"04\" \"05\" \"15\" \"20\" \"22\" \"27\" \"30\" \"31\" \"32\" \"34\" \"35\" \"36\" \"50\"\n[16] \"54\" \"55\" \"58\" \"61\" \"63\" \"64\" \"76\" \"92\" \"95\" \"C7\" \"C9\" \"E0\" \"G0\" \"S2\"\n\n$x3\n [1] \"021\" \"022\" \"026\" \"027\" \"032\" \"033\" \"042\" \"044\" \"050\" \"157\" \"209\" \"225\"\n[13] \"271\" \"308\" \"312\" \"326\" \"347\" \"348\" \"355\" \"362\" \"503\" \"505\" \"544\" \"552\"\n[25] \"553\" \"585\" \"586\" \"587\" \"588\" \"589\" \"610\" \"612\" \"630\" \"644\" \"646\" \"721\"\n[37] \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\" \"765\" \"920\" \"921\" \"922\"\n[49] \"958\" \"C75\" \"C97\" \"E06\" \"G02\" \"G04\" \"S23\"\n\n$x4\n [1] \"0214\" \"0215\" \"0217\" \"0218\" \"0219\" \"0220\" \"0221\" \"0222\" \"0263\" \"0265\"\n[11] \"0266\" \"0269\" \"0274\" \"0275\" \"0329\" \"0330\" \"0422\" \"0444\" \"0445\" \"0506\"\n[21] \"0507\" \"1577\" \"2093\" \"2251\" \"2252\" \"2719\" \"3080\" \"3123\" \"3267\" \"3471\"\n[31] \"3481\" \"3482\" \"3483\" \"3557\" \"3622\" \"5030\" \"5054\" \"5202\" \"5203\" \"5204\"\n[41] \"5205\" \"5206\" \"5207\" \"5208\" \"5442\" \"5443\" \"5520\" \"5525\" \"5530\" \"5857\"\n[51] \"5860\" \"5870\" \"5872\" \"5880\" \"5890\" \"5892\" \"5894\" \"6100\" \"6125\" \"6303\"\n[61] \"6304\" \"6442\" \"6448\" \"6449\" \"6463\" \"7651\" \"9202\" \"9208\" \"9213\" \"9214\"\n[71] \"9220\" \"9222\" \"9223\" \"9224\" \"9587\" \"C750\" \"C977\" \"E067\" \"G027\" \"G041\"\n[81] \"S234\"\n\n$x5\n  [1] \"0214T\" \"0215T\" \"0217T\" \"0218T\" \"0219T\" \"0220T\" \"0221T\" \"0222T\" \"0263T\"\n [10] \"0265T\" \"0266T\" \"0269T\" \"0274T\" \"0275T\" \"0329T\" \"0330T\" \"0422T\" \"0444T\"\n [19] \"0445T\" \"0506T\" \"0507T\" \"15777\" \"20939\" \"22510\" \"22511\" \"22512\" \"22513\"\n [28] \"22514\" \"22515\" \"22526\" \"22527\" \"27197\" \"27198\" \"30801\" \"30802\" \"31231\"\n [37] \"32673\" \"34713\" \"34714\" \"34715\" \"34716\" \"34717\" \"34812\" \"34820\" \"34833\"\n [46] \"34834\" \"35572\" \"36221\" \"50300\" \"50540\" \"54420\" \"54430\" \"55200\" \"55250\"\n [55] \"55300\" \"58575\" \"58600\" \"58605\" \"58700\" \"58720\" \"58800\" \"58805\" \"58900\"\n [64] \"58920\" \"58925\" \"58940\" \"58943\" \"61000\" \"61001\" \"61253\" \"63035\" \"63043\"\n [73] \"63044\" \"63045\" \"63046\" \"63047\" \"63048\" \"64421\" \"64480\" \"64484\" \"64491\"\n [82] \"64492\" \"64494\" \"64495\" \"64634\" \"64636\" \"76514\" \"92015\" \"92016\" \"92017\"\n [91] \"92018\" \"92019\" \"92025\" \"92081\" \"92082\" \"92083\" \"92132\" \"92133\" \"92134\"\n[100] \"92145\" \"92201\" \"92202\" \"92227\" \"92228\" \"92229\" \"92235\" \"92240\" \"92242\"\n[109] \"95870\" \"C7501\" \"C7502\" \"C7504\" \"C7505\" \"C9771\" \"E0675\" \"G0279\" \"G0412\"\n[118] \"G0413\" \"G0414\" \"G0415\" \"S2342\"\n\n\n\n\n\nRemove any redundant searches.\nFor example if a vector has \"A\" and \"A0\", we only need to keep \"A\".\n\n\nrmrd &lt;- \\(x, y, n = 1) {\n  x &lt;- x[!stringfish::sf_substr(x, 1, n, nthreads = 4L) %in% y]\n}\n\nremove_redos &lt;- \\(x) {\n  \n  c(x1, x2, x3, x4, x5) %&lt;-% x\n  \n  list(\n    x1,\n    rmrd(x2, x1),\n    rmrd(x3, x1) |&gt; rmrd(x2, 2),\n    rmrd(x4, x1) |&gt; rmrd(x2, 2) |&gt; rmrd(x3, 3),\n    rmrd(x5, x1) |&gt; rmrd(x2, 2) |&gt; rmrd(x3, 3) |&gt; rmrd(x4, 4)\n  ) |&gt; \n    purrr::compact()\n  \n}\n\nall_tests |&gt; \n  group_lengths() |&gt; \n  remove_redos()\n\n[[1]]\n[1] \"0\" \"4\" \"5\" \"6\" \"G\" \"J\"\n\n[[2]]\n [1] \"15\" \"20\" \"22\" \"27\" \"30\" \"31\" \"32\" \"34\" \"35\" \"36\" \"76\" \"92\" \"95\" \"C7\" \"C9\"\n[16] \"E0\" \"S2\"\n\n[[3]]\n[1] \"721\" \"722\" \"723\" \"724\" \"725\" \"726\" \"727\" \"728\" \"729\""
  },
  {
    "objectID": "posts/regex/regex.html#process-families",
    "href": "posts/regex/regex.html#process-families",
    "title": "Learning to Love Regexes By Learning Them",
    "section": "\n3.1 Process Families",
    "text": "3.1 Process Families\nSeparate Characters & Numbers\n\nget_char &lt;- \\(x) x[stringfish::sf_grepl(x, \"[A-Z]\", nthreads = 4L)]\nget_numb &lt;- \\(x) x[stringfish::sf_grepl(x, \"[0-9]\", nthreads = 4L)]\n\nget_char(c(LETTERS, 0:9))\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\nget_numb(c(LETTERS, 0:9))\n\n [1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\n\n\n\npull_char &lt;- \\(x) stringr::str_extract_all(x, stringr::regex(\"[A-Z]\"))\npull_numb &lt;- \\(x) stringr::str_extract_all(x, stringr::regex(\"[0-9]\"))\n\n# pull_char(c(LETTERS, 0:9))\n# pull_numb(c(LETTERS, 0:9))\n\nSort & Order\n\nsort_order &lt;- function(x) {\n  \n  sorted   &lt;- stringr::str_sort(x, numeric = TRUE)\n  alphabet &lt;- purrr::list_c(pull_char(sorted))\n  numbers  &lt;- purrr::list_c(pull_numb(sorted))\n  \n  paste0(fuimus::collapser(alphabet), fuimus::collapser(numbers))\n}\n\n\nsort_order2 &lt;- function(x) {\n  \n  sorted   &lt;- stringr::str_sort(x, numeric = TRUE)\n  alphabet &lt;- get_char(sorted)\n  numbers  &lt;- get_numb(sorted)\n  \n  paste0(fuimus::collapser(alphabet), fuimus::collapser(numbers))\n}\n\nReduce Runs\n\nreduce_runs &lt;- function(x) {\n  \n  vec  &lt;- rlang::set_names(rep(0, 36), c(LETTERS, 0:9))\n  vec2 &lt;- vec[fuimus::splitter(x)]\n  vec2 &lt;- vec2[!is.na(vec2)]\n  vec[names(vec2)] &lt;- 1\n\n  vec_group &lt;- dplyr::tibble(\n    value = names(vec),\n    key = vec,\n    idx = seq_along(vec),\n    group = dplyr::consecutive_id(key)) |&gt;\n    dplyr::mutate(group_size = dplyr::n(),\n                  .by = group) |&gt;\n    dplyr::filter(key == 1, group_size &gt;= 3) |&gt;\n    dplyr::select(value, group)\n\n  if (vctrs::vec_is_empty(vec_group)) return(x)\n\n  xgroups &lt;- unname(split(vec_group, vec_group$group)) |&gt;\n    purrr::map(purrr::pluck(\"value\")) |&gt;\n    purrr::map(fuimus::collapser) |&gt;\n    purrr::list_c()\n\n  replacements &lt;- dplyr::left_join(\n    dplyr::slice_min(vec_group, by = group, order_by = value) |&gt; dplyr::rename(start = value),\n    dplyr::slice_max(vec_group, by = group, order_by = value) |&gt; dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |&gt;\n    glue::glue_data(\"{start}-{end}\") |&gt;\n    as.vector()\n\n  res &lt;- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)\n\n  paste0(\"[\", res, \"]\")\n}\n\n\nreduce_runs2 &lt;- function(x) {\n  \n  test &lt;- list(\n    char = purrr::map(x, pull_char) |&gt; purrr::list_c() |&gt; purrr::compact() |&gt; purrr::list_c(),\n    numb = purrr::map(x, pull_numb) |&gt; purrr::list_c() |&gt; purrr::compact() |&gt; purrr::list_c())\n  \n  vec &lt;- list(\n    char = rlang::set_names(rep(0, 26), LETTERS),\n    numb = rlang::set_names(rep(0, 10), as.character(0:9)))\n  \n  vna &lt;- list(\n    char = vec$char[test$char],\n    numb = vec$numb[test$numb])\n  \n  vna &lt;- list(\n    char = vna$char[!is.na(vna$char)],\n    numb = vna$numb[!is.na(vna$numb)])\n  \n  vec$char[names(vna$char)] &lt;- 1\n  vec$numb[names(vna$numb)] &lt;- 1\n  \n  group_char &lt;- dplyr::tibble(\n    value = names(vec$char),\n    key = vec$char,\n    idx = seq_along(vec$char),\n    group = dplyr::consecutive_id(key)) |&gt;\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |&gt;\n    dplyr::filter(key == 1, group_size &gt;= 3) |&gt;\n    dplyr::select(value, group)\n  \n  group_numb &lt;- dplyr::tibble(\n    value = names(vec$numb),\n    key = vec$numb,\n    idx = seq_along(vec$numb),\n    group = dplyr::consecutive_id(key)) |&gt;\n    dplyr::mutate(group_size = dplyr::n(), .by = group) |&gt;\n    dplyr::filter(key == 1, group_size &gt;= 3) |&gt;\n    dplyr::select(value, group)\n  \n  xgroups_char &lt;- unname(split(group_char, group_char$group)) |&gt;\n    purrr::map(purrr::pluck(\"value\")) |&gt;\n    purrr::map(paste0, collapse = \"\") |&gt;\n    purrr::list_c()\n  \n  xgroups_numb &lt;- unname(split(group_numb, group_numb$group)) |&gt;\n    purrr::map(purrr::pluck(\"value\")) |&gt;\n    purrr::map(paste0, collapse = \"\") |&gt;\n    purrr::list_c()\n  \n  replace_char &lt;- dplyr::left_join(\n    dplyr::slice_min(group_char, by = group, order_by = value) |&gt; dplyr::rename(start = value),\n    dplyr::slice_max(group_char, by = group, order_by = value) |&gt; dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |&gt;\n    glue::glue_data(\"{start}-{end}\") |&gt;\n    as.vector()\n  \n  replace_numb &lt;- dplyr::left_join(\n    dplyr::slice_min(group_numb, by = group, order_by = value) |&gt; dplyr::rename(start = value),\n    dplyr::slice_max(group_numb, by = group, order_by = value) |&gt; dplyr::rename(end = value),\n    by = dplyr::join_by(group)) |&gt;\n    glue::glue_data(\"{start}-{end}\") |&gt;\n    as.vector()\n  \n  orig &lt;- list(\n    char = fuimus::collapser(test$char),\n    numb = fuimus::collapser(test$numb))\n  \n  res &lt;- list(\n    char = if(!vctrs::vec_is_empty(group_char)) {\n      stringi::stri_replace_all_regex(\n        orig$char, \n        xgroups_char, \n        replace_char, \n        vectorize_all = FALSE)\n      } else {\n        orig$char\n        },\n    numb = if(!vctrs::vec_is_empty(group_numb)) {\n      stringi::stri_replace_all_regex(\n        orig$numb, \n        xgroups_numb, \n        replace_numb, \n        vectorize_all = FALSE)\n    } else {\n        orig$numb\n      }\n    )\n  paste0(\"[\", res$char, res$numb, \"]\")\n}\n\nGroups == 1\n\nprocess_hcpcs_1 &lt;- function(x) {\n  \n  if (!rlang::has_name(x, \"f1\")) return(NULL)\n  \n  re &lt;- sort_order(x[[\"f1\"]]) |&gt; \n    reduce_runs2()\n  \n  if (re == \"[A-Z0-9]\") {\n    \n    return(stringr::str_glue(\"(^{re}{{5}}$)\"))\n    \n  } else {\n    \n    return(stringr::str_glue(\"(^{re}[A-Z0-9]{{4}}$)\"))\n    \n    }\n}\n\nprocess_hcpcs_1(families)\n\n(^[CEGS0-35-79][A-Z0-9]{4}$)\n\n\nGroups &gt; 1\n\nprocess_hcpcs_2 &lt;- function(x) {\n  \n  if (is.null(x)) return(NULL)\n  \n  vecs &lt;- stringr::str_split_fixed(\n    x, \n    \"\", \n    n = collapse::fmax(\n      collapse::vlengths(x)\n      )\n    ) |&gt;\n    as.data.frame()\n  \n  to_brackets &lt;- vecs |&gt;\n    purrr::map(fuimus::uniq_rmna) |&gt;\n    purrr::map(sort_order)\n  \n  to_vec &lt;- to_brackets |&gt;\n    purrr::map(reduce_runs)\n  \n  multi_chars &lt;- unname(nchar(to_vec) &gt; 1)\n  \n  nobrack &lt;- stringr::str_detect(to_vec[multi_chars], \"\\\\[|\\\\]\", TRUE)\n\n  to_vec[multi_chars] &lt;- if (any(nobrack)) purrr::map_chr(to_vec[multi_chars], \\(x) paste0(\"[\", x, \"]\")) else to_vec[multi_chars]\n\n  to_vec &lt;- purrr::list_c(to_vec)\n\n  fuimus::collapser(to_vec)\n}\n\npurrr::map_chr(families$f5, process_hcpcs_2)\n\n [1] \"021[457-9]T\" \"022[0-2]T\"   \"026[3569]T\"  \"027[45]T\"    \"044[45]T\"   \n [6] \"050[67]T\"    \"544[23]0\"    \"552[05]0\"    \"587[02]0\"    \"2251[0-5]\"  \n[11] \"2252[67]\"    \"2719[78]\"    \"3080[12]\"    \"3471[3-7]\"   \"3483[34]\"   \n[16] \"5860[05]\"    \"5880[05]\"    \"5892[05]\"    \"5894[03]\"    \"6100[01]\"   \n[21] \"6304[3-8]\"   \"6448[04]\"    \"6449[1245]\"  \"6463[46]\"    \"9208[1-3]\"  \n[26] \"9213[2-4]\"   \"9220[12]\"    \"9222[7-9]\"   \"9224[02]\"    \"C750[1245]\" \n[31] \"G041[2-5]\"  \n\n\nProcess Families\n\nprocess_families &lt;- function(x) {\n  \n  x &lt;- list(\n    f1 = process_hcpcs_1(families),\n    f2 = purrr::map_chr(families$f2, process_hcpcs_2),\n    f3 = purrr::map_chr(families$f3, process_hcpcs_2),\n    f4 = purrr::map_chr(families$f4, process_hcpcs_2),\n    f5 = purrr::map_chr(families$f5, process_hcpcs_2)\n  )\n  \n  fam &lt;- list(\n    f1 = x$f1,\n    f2 = vectoregex(x$x2, 3),\n    f3 = vectoregex(x$f3, 2),\n    f4 = vectoregex(x$f4, 1),\n    f5 = vectoregex(x$f5, NULL)\n  ) |&gt; \n    purrr::compact()\n  \n  as.character(glue::glue_collapse(fam, sep = \"|\"))\n}\n\nfamilies_regex &lt;- process_families(families)\n\nfamilies_regex\n\n[1] \"(^[CEGS0-35-79][A-Z0-9]{4}$)|(^G0[24][0-9A-Z]{2}$)|(^02[1267][0-9A-Z]{2}$)|(^03[23][0-9A-Z]{2}$)|(^04[24][0-9A-Z]{2}$)|(^34[78][0-9A-Z]{2}$)|(^50[35][0-9A-Z]{2}$)|(^55[23][0-9A-Z]{2}$)|(^58[5-9][0-9A-Z]{2}$)|(^61[02][0-9A-Z]{2}$)|(^64[46][0-9A-Z]{2}$)|(^92[0-2][0-9A-Z]{2}$)|(^050[67][0-9A-Z]{1}$)|(^225[12][0-9A-Z]{1}$)|(^544[23][0-9A-Z]{1}$)|(^630[34][0-9A-Z]{1}$)|(^021[457-9][0-9A-Z]{1}$)|(^022[0-2][0-9A-Z]{1}$)|(^026[3569][0-9A-Z]{1}$)|(^027[45][0-9A-Z]{1}$)|(^044[45][0-9A-Z]{1}$)|(^348[1-3][0-9A-Z]{1}$)|(^552[05][0-9A-Z]{1}$)|(^587[02][0-9A-Z]{1}$)|(^589[024][0-9A-Z]{1}$)|(^644[289][0-9A-Z]{1}$)|(^920[28][0-9A-Z]{1}$)|(^921[34][0-9A-Z]{1}$)|(^922[02-4][0-9A-Z]{1}$)|(^021[457-9]T$)|(^022[0-2]T$)|(^026[3569]T$)|(^027[45]T$)|(^044[45]T$)|(^050[67]T$)|(^544[23]0$)|(^552[05]0$)|(^587[02]0$)|(^2251[0-5]$)|(^2252[67]$)|(^2719[78]$)|(^3080[12]$)|(^3471[3-7]$)|(^3483[34]$)|(^5860[05]$)|(^5880[05]$)|(^5892[05]$)|(^5894[03]$)|(^6100[01]$)|(^6304[3-8]$)|(^6448[04]$)|(^6449[1245]$)|(^6463[46]$)|(^9208[1-3]$)|(^9213[2-4]$)|(^9220[12]$)|(^9222[7-9]$)|(^9224[02]$)|(^C750[1245]$)|(^G041[2-5]$)\"\n\n\nTest Families Regex\n\ntest_families &lt;- vctrs::vec_slice(\n  hcpcs_codes, \n  stringfish::sf_grepl(\n    hcpcs_codes, \n    families_regex\n    )\n  )\n\nlength(hcpcs_codes)   # 18903\n\n[1] 18903\n\nlength(test_families) # 11900\n\n[1] 11900"
  },
  {
    "objectID": "posts/regex/regex.html#concatenate-regex",
    "href": "posts/regex/regex.html#concatenate-regex",
    "title": "Learning to Love Regexes By Learning Them",
    "section": "\n3.2 Concatenate Regex",
    "text": "3.2 Concatenate Regex\n\nconcatenate_regex &lt;- function(x, y) {\n  as.character(glue::glue_collapse(c(x, y), sep = \"|\"))\n}\n\nwhole_regex &lt;- concatenate_regex(families_regex, orphan_regex)\n\nTest Whole Regex\n\ntest_whole &lt;- vctrs::vec_slice(\n  hcpcs_codes, \n  stringfish::sf_grepl(\n    hcpcs_codes, \n    whole_regex\n    )\n  )\n\nlength(hcpcs_codes) # 18903\n\n[1] 18903\n\nlength(test_whole)  # 11900\n\n[1] 11900"
  },
  {
    "objectID": "posts/npi/npi_constructor.html",
    "href": "posts/npi/npi_constructor.html",
    "title": "NPIs & Luhn’s Algorithm",
    "section": "",
    "text": "A National Provider Identifier (NPI) is a unique 10-digit identification number assigned to health care providers in the United States through NPPES1 The Centers for Medicare & Medicaid Services (CMS) developed the NPI as a way to standardize the identification of health care providers across the health care industry."
  },
  {
    "objectID": "posts/npi/npi_constructor.html#sec-requirements",
    "href": "posts/npi/npi_constructor.html#sec-requirements",
    "title": "NPIs & Luhn’s Algorithm",
    "section": "\n1.1 NPI Requirements",
    "text": "1.1 NPI Requirements\n\n\n\n\n\n\n\nwrong_location\nMust consist of 10 numeric digits, with the 10th as the check digit.\n\n\nexplore_off\nHave no embedded intelligence.\n\n\nlightbulb_circle\nBegin with a 1 or 2.2\n\n\n\npattern\nBe generated by a scattering algorithm using all possible numeric combinations.\n\n\nfingerprint\nBe unique, without requiring database access for verification.\n\n\n2 Use of other first digits for the NPI must be coordinated with the use of first digits by the standard health plan identifier, when it is adopted."
  },
  {
    "objectID": "posts/npi/npi_constructor.html#sec-checkdigit",
    "href": "posts/npi/npi_constructor.html#sec-checkdigit",
    "title": "NPIs & Luhn’s Algorithm",
    "section": "\n1.2 NPI Check Digit",
    "text": "1.2 NPI Check Digit\nThe check digit is calculated using the Luhn formula for computing the modulus 10 double-add-double check digit.3\n3 This algorithm is recognized as an ISO standard (ISO/IEC 7812) and is the specified check digit algorithm to be used for the card issuer identifier on a standard health identification card.When an NPI is used as a card issuer identifier on a standard health identification card, it is prefixed with 80840, in which 80 indicates health applications and 840 indicates the United States. To enable this feature for any NPI, the check digit will always be calculated as if the prefix is present. For a non-prefixed NPI, this is accomplished by adding the constant 24 in step 2 of the calculation.\nCheck Digit Calculation\nThe calculation is as follows:\n\nBeginning with the rightmost digit, double the value of the alternate digits.\nAdd the individual digits of the products from Step 1 to the unaffected digits from the original number.\nSubtract the result of step 2 from the next highest number ending in zero. This is the check digit.\n\n\n\n\n\n\n\nNext Multiple of Ten\n\n\n\nThe next highest number ending in zero is the next multiple of ten.\nSpecifically, for some number n, the next multiple of ten would be n + (10 - (n \\mod 10)):\n\nnext_10 &lt;- \\(n) n + (10 - (n %% 10))\n\nFor example, if n is 23, the next multiple of ten is 30:\n\nnext_10(23)\n\n[1] 30\n\n\nIf n is a multiple of ten, such as 50, the next multiple of 10 is 60:\n\nnext_10(50)\n\n[1] 60\n\n\n\n\n\nExamples\nThe following check digit calculation examples are reproduced from the CMS Standard document, which includes demonstrations for both prefixed and non-prefixed NPIs.\n\n\nPrefix\nNon-Prefix\n\n\n\n\nAssume the prefixed 9-position identifier is:\n\n\n(y &lt;- as.integer(splitter(\"80840123456789\")))\n\n [1] 8 0 8 4 0 1 2 3 4 5 6 7 8 9\n\n\n\nprefix_id &lt;- \\(x) {\n  as.integer(\n    unlist(\n      strsplit(\n        paste0(80840, x), \"\")\n      )\n    )\n}\n\n(x &lt;- prefix_id(123456789))\n\n [1] 8 0 8 4 0 1 2 3 4 5 6 7 8 9\n\nall.equal(x, y)\n\n[1] TRUE\n\n\n\nBeginning on the right, double the alternate digits: 8 0 8 8 0 2 2 6 4 10 6 14 8 18\n\n\nreverse_double &lt;- \\(x) {\n  \n  x &lt;- rev(x)\n  \n  idx &lt;- c(1, 3, 5, 7, 9, 11, 13)\n  \n  x[idx] &lt;- x[idx] * 2\n  \n  rev(x)\n}\n\nx &lt;- reverse_double(x)\n\nx\n\n [1]  8  0  8  8  0  2  2  6  4 10  6 14  8 18\n\n\n\nSum the individual digits: 8 + 0 + 8 + 8 + 0 + 2 + 2 + 6 + 4 + 1 + 0 + 6 + 1 + 4 + 8 + 1 + 8 = 67\n\n\nadd_digits &lt;- \\(x) {\n  sum(\n    as.integer(\n      unlist(\n        strsplit(\n          as.character(x), \"\")\n        )\n      )\n    )\n}\n\nx &lt;- add_digits(x)\n\nx\n\n[1] 67\n\n\n\nSubtract the sum from the next multiple of 10. This is the check digit: 70 – 67 = 3\n\n\ncheck_digit &lt;- \\(x) {\n  ceiling(x / 10) * 10 - x\n}\n\nx &lt;- check_digit(x)\n\nx\n\n[1] 3\n\n\n\nAppend the check digit to the identifier: 808401234567893\n\n\nappend_check &lt;- \\(id, check) {\n  cat(\n    paste0(\n      paste0(\n        prefix_id(id), \n        collapse = \"\"), \n      check)\n    )\n}\n\nappend_check(123456789, x)\n\n808401234567893\n\n\n\n\n\nAssume the non-prefixed 9-position identifier is 123456789\n\n\nsplit_id &lt;- \\(x) {\n  as.integer(\n    unlist(\n      strsplit(\n        as.character(x), \"\"\n        )\n      )\n    )\n}\n\nx &lt;- split_id(123456789)\n\nx\n\n[1] 1 2 3 4 5 6 7 8 9\n\n\n\nBeginning on the right, double the alternate digits: 2  2  6  4 10  6 14  8 18\n\n\nreverse_double &lt;- \\(x) {\n  \n  x &lt;- rev(x)\n  \n  idx &lt;- c(1, 3, 5, 7, 9)\n  \n  x[idx] &lt;- x[idx] * 2\n  \n  rev(x)\n}\n\nx &lt;- reverse_double(x)\n\nx\n\n[1]  2  2  6  4 10  6 14  8 18\n\n\n\nAdd constant 24 to the sum of the individual digits: 2 + 2 + 6 + 4 + 1 + 0 + 6 + 1 + 4 + 8 + 1 + 8 + 24 = 67\n\n\nsum_plus_24 &lt;- \\(x) {\n  sum(\n    as.integer(\n      unlist(\n        strsplit(\n          as.character(x), \"\")\n        )\n      )\n    ) + 24\n}\n\nx &lt;- sum_plus_24(x)\n\nx\n\n[1] 67\n\n\n\nSubtract the sum from the next multiple of 10. This is the check digit: 70 – 67 = 3\n\n\ncheck_digit &lt;- \\(x) {\n  ceiling(x / 10) * 10 - x\n}\n\nx &lt;- check_digit(x)\n\nx\n\n[1] 3\n\n\n\nAppend the check digit to the identifier: 1234567893\n\n\nappend_check &lt;- \\(id, check) {\n  cat(\n    paste0(\n      id, \n      check\n      )\n    )\n}\n\nappend_check(123456789, x)\n\n1234567893"
  },
  {
    "objectID": "posts/npi/npi_constructor.html#validating-the-input",
    "href": "posts/npi/npi_constructor.html#validating-the-input",
    "title": "NPIs & Luhn’s Algorithm",
    "section": "\n2.1 Validating the Input",
    "text": "2.1 Validating the Input\n\nInput string (x) validation order:\n\nAbort if not length(x) == 1\n\nAbort if not 10 characters long\nAbort if any elements of x are not 0-9\n\nAbort if first element is not \"1\" or \"2\"\n\nCoerce to &lt;character&gt; if x is a &lt;numeric&gt; vector\n\n\n\n\n\n\ninput_validation.R\n\n# Abort if `x` is `length(x) != 1`\ncheck_length &lt;- function(x) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  if (length(x) != 1) {\n    cli::cli_abort(\n      \"{.arg {arg}} must be of length 1.\", \n      arg = arg, \n      call = call,\n      class = \"check_length\"\n      )\n  }\n}\n\n# If `x` is a `&lt;numeric&gt;` \n# vector, coerce to `&lt;character&gt;`\nnumeric_to_char &lt;- function(x) {\n  if (!rlang::is_character(x)) { \n    as.character(x)\n  } else {\n    x  \n  }\n}\n\n# Abort if any of `x`'s \n# elements are not numbers\ncheck_chars_numeric &lt;- function(x) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  if (!stringfish::sf_grepl(x, \"^[[:digit:]]+$\")) {\n    cli::cli_abort(\n      \"An {.arg {arg}} must contain numbers only.\", \n      arg = arg, \n      call = call,\n      class = \"check_chars_numeric\"\n      )\n  }\n}\n\n# Abort if `x` is not \n# 10 characters long\ncheck_nchars_10 &lt;- function(x) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  if (stringfish::sf_nchar(x) != 10L) {\n    cli::cli_abort(\n      \"An {.arg {arg}} must be 10 characters long.\", \n      arg = arg, \n      call = call,\n      class = \"check_nchars_10\"\n      )\n  }\n}\n\n# Must begin with 1 or 2\ncheck_first_char &lt;- function(x) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  if (!stringfish::sf_substr(x, 1, 1) %in% c(\"1\", \"2\")) {\n    cli::cli_abort(\n      \"An {.arg {arg}} must start with a 1 or 2.\", \n      arg = arg, \n      call = call,\n      class = \"check_first_char\"\n      )\n  }\n}"
  },
  {
    "objectID": "posts/npi/npi_constructor.html#cli-messages",
    "href": "posts/npi/npi_constructor.html#cli-messages",
    "title": "NPIs & Luhn’s Algorithm",
    "section": "\n2.2 CLI Messages",
    "text": "2.2 CLI Messages\n\n\n\ncli_messages.R\n\nnpi_inform &lt;- function(x, msg) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  rlang::inform(\n    message = (\n      c(\"*\" = glue::glue(\"{msg}: {x}\"))),\n    use_cli_format = TRUE,\n    arg = arg,\n    call = call,\n    class = \"npi_inform\"\n  )\n}\n\nnpi_alert_invalid &lt;- function(x, y) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  rlang::inform(\n    message = (c(\"x\" = \"NPI is invalid\")),\n    body = (c(\"!\" = glue::glue(\"{x} != {y}\"))),\n    use_cli_format = TRUE,\n    arg = arg,\n    call = call,\n    class = \"npi_alert_invalid\"\n  )\n}\n\nnpi_alert_valid &lt;- function(x, y) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  rlang::inform(\n    message = (c(\"v\" = \"NPI is valid\")),\n    body = (c(\"&gt;\" = glue::glue(\"{x} == {y}\"))),\n    use_cli_format = TRUE,\n    arg = arg,\n    call = call,\n    class = \"npi_alert_valid\"\n  )\n}"
  },
  {
    "objectID": "posts/npi/npi_constructor.html#constructor-function",
    "href": "posts/npi/npi_constructor.html#constructor-function",
    "title": "NPIs & Luhn’s Algorithm",
    "section": "\n2.3 Constructor Function",
    "text": "2.3 Constructor Function\n\n\n\nnpi_constructor.R\n\nnpi_constructor &lt;- function(npi, verbose = TRUE) {\n  \n  npi &lt;- numeric_to_char(npi)\n  check_length(npi)\n  check_chars_numeric(npi)\n  check_nchars_10(npi)\n  check_first_char(npi)\n  \n  p &lt;- \\(...) paste0(...)\n  s &lt;- \\(x) unlist(strsplit(x, \"\"), use.names = FALSE)\n  \n  id &lt;- rev(s(npi)[1:9])\n  \n  if (verbose) {\n    npi_inform(npi, \"Testing NPI candidate\")\n    npi_inform(p(id, collapse = \"\"), \"Reverse 9-digit identifier\")\n  }\n  \n  idx     &lt;- c(1, 3, 5, 7, 9)\n  id      &lt;- as.numeric(id)\n  id[idx] &lt;- as.numeric(id[idx]) * 2\n  id[idx] &lt;- ifelse(id[idx] &gt; 9, id[idx] - 9, id[idx])\n  \n  if (verbose) {\n    npi_inform(p(id, collapse = \" \"), \"Double & reduce alternates\")\n  }\n  \n  id   &lt;- sum(id)\n  cn   &lt;- id + 24\n  ml   &lt;- ceiling(cn / 10) * 10\n  ck   &lt;- ml - cn\n  test &lt;- substr(npi, 1, 9)\n  test &lt;- p(test, ck)\n  \n  if (verbose) {\n    \n    npi_inform(p(p(c(id, 24), collapse = \" + \"), p(\" = \", cn)), \"Add 24 to sum digits\")\n    npi_inform(p(p(\"⌈\", cn, \"⌉\"), p(\" = \", ml)) ,\"Next multiple of 10\")\n    npi_inform(p(p(c(ml, cn), collapse = \" - \"), p(\" = \", ck)), \"Find check digit\")\n    npi_inform(p(test, collapse = \"\"), \"Append check digit\")\n    \n    if (identical(test, npi)) npi_alert_valid(test, npi)\n    if (!identical(test, npi)) npi_alert_invalid(test, npi)\n  }\n  invisible(test)\n}\n\n\nTest Validations\n\nnpi_constructor(\"123456789\")\n\nError in `npi_constructor()`:\n! An `npi` must be 10 characters long.\n\nnpi_constructor(\"O123456789\")\n\nError in `npi_constructor()`:\n! An `npi` must contain numbers only.\n\nnpi_constructor(\"0000000000\")\n\nError in `npi_constructor()`:\n! An `npi` must start with a 1 or 2.\n\n\nTest Verbose Output\n\nnpi_constructor(1234567891)\n\n• Testing NPI candidate: 1234567891\n• Reverse 9-digit identifier: 987654321\n• Double & reduce alternates: 9 8 5 6 1 4 6 2 2\n• Add 24 to sum digits: 43 + 24 = 67\n• Next multiple of 10: ⌈67⌉ = 70\n• Find check digit: 70 - 67 = 3\n• Append check digit: 1234567893\n✖ NPI is invalid\n\n\n\nnpi_constructor(1043477615)\n\n• Testing NPI candidate: 1043477615\n• Reverse 9-digit identifier: 167743401\n• Double & reduce alternates: 2 6 5 7 8 3 8 0 2\n• Add 24 to sum digits: 41 + 24 = 65\n• Next multiple of 10: ⌈65⌉ = 70\n• Find check digit: 70 - 65 = 5\n• Append check digit: 1043477615\n✔ NPI is valid\n\n\n\nnpi_constructor(1000000000)\n\n• Testing NPI candidate: 1000000000\n• Reverse 9-digit identifier: 000000001\n• Double & reduce alternates: 0 0 0 0 0 0 0 0 2\n• Add 24 to sum digits: 2 + 24 = 26\n• Next multiple of 10: ⌈26⌉ = 30\n• Find check digit: 30 - 26 = 4\n• Append check digit: 1000000004\n✖ NPI is invalid\n\n\nTest Verbose Option/Invisible Return\n\nnpi_constructor(1000000000, verbose = FALSE)\n\nnew_npi &lt;- npi_constructor(1000000000, verbose = FALSE)\n\nnew_npi\n\n[1] \"1000000004\""
  },
  {
    "objectID": "posts/npi/npi_constructor.html#minimal-validator",
    "href": "posts/npi/npi_constructor.html#minimal-validator",
    "title": "NPIs & Luhn’s Algorithm",
    "section": "\n2.4 Minimal Validator",
    "text": "2.4 Minimal Validator\n\n\n\nis_valid_npi.R\n\nis_valid_npi &lt;- function(npi) {\n  \n  npi &lt;- numeric_to_char(npi)\n  check_length(npi)\n  check_chars_numeric(npi)\n  check_nchars_10(npi)\n  check_first_char(npi)\n  \n  p  &lt;- \\(...) paste0(...)\n  s  &lt;- \\(x) unlist(strsplit(x, \"\"), use.names = FALSE)\n  ix &lt;- c(1, 3, 5, 7, 9)\n  \n  id     &lt;- as.numeric(rev(s(npi)[1:9]))\n  id[ix] &lt;- id[ix] * 2\n  id[ix] &lt;- ifelse(id[ix] &gt; 9, id[ix] - 9, id[ix])\n  \n  id   &lt;- sum(id) + 24\n  ck   &lt;- (ceiling(id / 10) * 10) - id\n  test &lt;- p(substr(npi, 1, 9), ck)\n  \n  identical(test, npi)\n}\n\n\nTest Validator\n\nis_valid_npi(123456789)\n\nError in `is_valid_npi()`:\n! An `npi` must be 10 characters long.\n\nis_valid_npi(\"O123456789\")\n\nError in `is_valid_npi()`:\n! An `npi` must contain numbers only.\n\nis_valid_npi(0000000000) # All leading zeroes will be dropped\n\nError in `is_valid_npi()`:\n! An `npi` must be 10 characters long.\n\nis_valid_npi(3000000000)\n\nError in `is_valid_npi()`:\n! An `npi` must start with a 1 or 2.\n\nis_valid_npi(1043477615)\n\n[1] TRUE\n\nis_valid_npi(1234567891)\n\n[1] FALSE\n\n\n\nrandom_npi_generator &lt;- \\(n) {\n  replicate(\n    n = n, \n    expr = paste0(\n      c(sample(1:2, 1, replace = TRUE), \n        sample(0:9, 9, replace = TRUE)), \n      collapse = \"\"))\n}\n\nrandom_npi_generator(3)\n\n[1] \"1033809866\" \"1899238891\" \"1513359228\"\n\n\n\nn &lt;- 100000\nx &lt;- random_npi_generator(n)\ny &lt;- x[collapse::whichv(purrr::map_lgl(x, is_valid_npi), TRUE)]\n\npaste0((length(y) / n) * 100, \"%\")\n\n[1] \"9.899%\"\n\nbench::mark(\n  purrr::map_lgl(x, is_valid_npi)) |&gt; \n  dplyr::glimpse()\n\nRows: 1\nColumns: 13\n$ expression &lt;bch:expr&gt; &lt;purrr::map_lgl(x, is_valid_npi)&gt;\n$ min        &lt;bch:tm&gt; 24.4s\n$ median     &lt;bch:tm&gt; 24.4s\n$ `itr/sec`  &lt;dbl&gt; 0.04105027\n$ mem_alloc  &lt;bch:byt&gt; 391KB\n$ `gc/sec`   &lt;dbl&gt; 5.788088\n$ n_itr      &lt;int&gt; 1\n$ n_gc       &lt;dbl&gt; 141\n$ total_time &lt;bch:tm&gt; 24.4s\n$ result     &lt;list&gt; &lt;FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ memory     &lt;list&gt; [&lt;Rprofmem[16753 x 3]&gt;]\n$ time       &lt;list&gt; 24.4s\n$ gc         &lt;list&gt; [&lt;tbl_df[1 x 3]&gt;]"
  },
  {
    "objectID": "posts/draw_matrix/draw_matrix.html",
    "href": "posts/draw_matrix/draw_matrix.html",
    "title": "Medical Codes as Matrices",
    "section": "",
    "text": "knitr::opts_chunk$set(\n  dev = \"ragg_png\",\n  dpi = 320,\n  out.width = \"100%\",\n  fig.width = 8,\n  fig.asp = 0.818,\n  fig.retina = 2,\n  fig.align = \"center\",\n  fig.show = \"hold\"\n)\noptions(scipen = 999)\n\nlibrary(tidyverse)\nlibrary(rlang)\nlibrary(stringfish)\nlibrary(ggthemes)\nlibrary(paintr)\nlibrary(fuimus)\nlibrary(procedural)\nlibrary(northstar)"
  },
  {
    "objectID": "posts/draw_matrix/draw_matrix.html#lookup",
    "href": "posts/draw_matrix/draw_matrix.html#lookup",
    "title": "Medical Codes as Matrices",
    "section": "\n1.1 Lookup",
    "text": "1.1 Lookup\n\nlook &lt;- \\(code, system) {\n  \n  constants &lt;- system$c\n  possible  &lt;- system$p\n  \n  names(possible) &lt;- constants\n  \n  unname(possible[splitter(sf_toupper(code))])\n}\n\nlook(\"0G9000Z\", pcs)\n\n[1]  1 17 10  1  1  1 34\n\nlook(\"99213\", hcpcs)\n\n[1] 10 10  3  2  4"
  },
  {
    "objectID": "posts/draw_matrix/draw_matrix.html#make-matrix",
    "href": "posts/draw_matrix/draw_matrix.html#make-matrix",
    "title": "Medical Codes as Matrices",
    "section": "\n1.2 Make Matrix",
    "text": "1.2 Make Matrix\n\nmedtrix &lt;- \\(code, system) {\n  \n  constants &lt;- system$c\n  possible  &lt;- system$p\n  axis      &lt;- system$a\n  \n  m &lt;- matrix(data     = 0L,\n              nrow     = length(constants),\n              ncol     = length(axis),\n              dimnames = list(constants, axis))\n  \n  x &lt;- look(code, system)\n  \n  for (i in axis) { \n    m[x[i], i] &lt;- 1L \n    }\n  \n  return(m)\n}\n\nICD-10-PCS:\n\nmedtrix(code = \"0G9000Z\", system = pcs)\n\n  1 2 3 4 5 6 7\n0 1 0 0 1 1 1 0\n1 0 0 0 0 0 0 0\n2 0 0 0 0 0 0 0\n3 0 0 0 0 0 0 0\n4 0 0 0 0 0 0 0\n5 0 0 0 0 0 0 0\n6 0 0 0 0 0 0 0\n7 0 0 0 0 0 0 0\n8 0 0 0 0 0 0 0\n9 0 0 1 0 0 0 0\nA 0 0 0 0 0 0 0\nB 0 0 0 0 0 0 0\nC 0 0 0 0 0 0 0\nD 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nF 0 0 0 0 0 0 0\nG 0 1 0 0 0 0 0\nH 0 0 0 0 0 0 0\nJ 0 0 0 0 0 0 0\nK 0 0 0 0 0 0 0\nL 0 0 0 0 0 0 0\nM 0 0 0 0 0 0 0\nN 0 0 0 0 0 0 0\nP 0 0 0 0 0 0 0\nQ 0 0 0 0 0 0 0\nR 0 0 0 0 0 0 0\nS 0 0 0 0 0 0 0\nT 0 0 0 0 0 0 0\nU 0 0 0 0 0 0 0\nV 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\nX 0 0 0 0 0 0 0\nY 0 0 0 0 0 0 0\nZ 0 0 0 0 0 0 1\n\n\nHCPCS (CPT):\n\nmedtrix(code = \"99213\", system = hcpcs)\n\n  1 2 3 4 5\n0 0 0 0 0 0\n1 0 0 0 1 0\n2 0 0 1 0 0\n3 0 0 0 0 1\n4 0 0 0 0 0\n5 0 0 0 0 0\n6 0 0 0 0 0\n7 0 0 0 0 0\n8 0 0 0 0 0\n9 1 1 0 0 0\nA 0 0 0 0 0\nB 0 0 0 0 0\nC 0 0 0 0 0\nE 0 0 0 0 0\nF 0 0 0 0 0\nG 0 0 0 0 0\nH 0 0 0 0 0\nJ 0 0 0 0 0\nK 0 0 0 0 0\nL 0 0 0 0 0\nM 0 0 0 0 0\nP 0 0 0 0 0\nQ 0 0 0 0 0\nR 0 0 0 0 0\nS 0 0 0 0 0\nT 0 0 0 0 0\nU 0 0 0 0 0\nV 0 0 0 0 0"
  },
  {
    "objectID": "posts/claims/claims.html",
    "href": "posts/claims/claims.html",
    "title": "Claims Analysis",
    "section": "",
    "text": "procedure_sum &lt;- procedures |&gt;\n  summarise(\n    n_hcpcs = n_distinct(hcpcs, na.rm = TRUE),\n    n_units = na_sum(units),\n    n_mod1 = na_sum(!is.na(mod1)),\n    n_mod2 = na_sum(!is.na(mod2)),\n    charges = na_sum(charges),\n    allowed = na_sum(allowed),\n    payments = na_sum(payments),\n    adjustments = na_sum(adjustments),\n    .by = c(id, enc, dos)) |&gt;\n  filter(charges &gt; 0) |&gt;\n  arrange(dos) |&gt; \n  left_join(\n    encounters, by = join_by(id, enc, dos)) |&gt; \n  select(\n    id, \n    enc, \n    dos, \n    year:wday_l,\n    n_hcpcs, \n    n_units, \n    n_mod1, \n    n_mod2, \n    charges, \n    allowed, \n    payments, \n    adjustments,\n    dob,\n    age,\n    rendering,\n    cred,\n    icd,\n    pos,\n    pos_name,\n    pos_type,\n    loc,\n    ins_class,\n    ins_prim)\n\nprocedure_sum\n\n[90m# A tibble: 38,852 × 31[39m\n   id       enc dos         year quarter month month_l  week\n   [3m[90m&lt;chr&gt;[39m[23m  [3m[90m&lt;int&gt;[39m[23m [3m[90m&lt;date&gt;[39m[23m     [3m[90m&lt;int&gt;[39m[23m   [3m[90m&lt;int&gt;[39m[23m [3m[90m&lt;int&gt;[39m[23m [3m[90m&lt;ord&gt;[39m[23m   [3m[90m&lt;int&gt;[39m[23m\n[90m 1[39m PT0491     1 2022-06-14  [4m2[24m022       2     6 Jun        24\n[90m 2[39m PT2360     1 2022-07-31  [4m2[24m022       3     7 Jul        31\n[90m 3[39m PT0671     1 2022-08-06  [4m2[24m022       3     8 Aug        32\n[90m 4[39m PT1499     1 2022-08-06  [4m2[24m022       3     8 Aug        32\n[90m 5[39m PT1485     3 2022-08-09  [4m2[24m022       3     8 Aug        32\n[90m 6[39m PT1626     1 2022-08-10  [4m2[24m022       3     8 Aug        32\n[90m 7[39m PT2430     1 2022-08-10  [4m2[24m022       3     8 Aug        32\n[90m 8[39m PT1677     1 2022-08-11  [4m2[24m022       3     8 Aug        32\n[90m 9[39m PT2181     1 2022-08-11  [4m2[24m022       3     8 Aug        32\n[90m10[39m PT1043     1 2022-08-12  [4m2[24m022       3     8 Aug        32\n[90m# ℹ 38,842 more rows[39m\n[90m# ℹ 23 more variables: day &lt;int&gt;, yday &lt;int&gt;, wday &lt;int&gt;,[39m\n[90m#   wday_l &lt;ord&gt;, n_hcpcs &lt;int&gt;, n_units &lt;int&gt;,[39m\n[90m#   n_mod1 &lt;int&gt;, n_mod2 &lt;int&gt;, charges &lt;dbl&gt;,[39m\n[90m#   allowed &lt;dbl&gt;, payments &lt;dbl&gt;, adjustments &lt;dbl&gt;,[39m\n[90m#   dob &lt;date&gt;, age &lt;int&gt;, rendering &lt;chr&gt;, cred &lt;chr&gt;,[39m\n[90m#   icd &lt;chr&gt;, pos &lt;chr&gt;, pos_name &lt;chr&gt;, pos_type &lt;fct&gt;, …[39m\n\n\n\nprocedure_sum |&gt; \n  summarise(\n    encounters = n(),\n    n_hcpcs = na_sum(n_hcpcs),\n    n_units = na_sum(n_units),\n    n_mod1 = na_sum(n_mod1),\n    n_mod2 = na_sum(n_mod2),\n    charges = na_sum(charges),\n    allowed = na_sum(allowed),\n    payments = na_sum(payments),\n    adjustments = na_sum(adjustments),\n    .by = c(year, quarter, month_l, rendering, ins_prim)) |&gt; \n  arrange(year, quarter, month_l) |&gt; \n  ggplot(aes(y = charges)) +\n  geom_boxplot(aes(group = year, fill = year)) +\n  scale_x_continuous(labels = scales::label_number(scale = 0.001, suffix = \"k\")) +\n  ggthemes::theme_fivethirtyeight() +\n  theme(legend.position = \"none\") +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  )\n\n\n\n\n\n\n\n\nprocedure_sum |&gt; \n  summarise(\n    encounters = n(),\n    n_hcpcs = na_sum(n_hcpcs),\n    n_units = na_sum(n_units),\n    n_mod1 = na_sum(n_mod1),\n    n_mod2 = na_sum(n_mod2),\n    charges = na_sum(charges),\n    allowed = na_sum(allowed),\n    payments = na_sum(payments),\n    adjustments = na_sum(adjustments),\n    .by = c(year, quarter, month_l, rendering, ins_prim)) |&gt; \n  arrange(year, quarter, month_l) |&gt; \n  ggplot(aes(x = payments, y = charges)) +\n  geom_point(aes(size = encounters, group = ins_prim, fill = ins_prim), colour = \"black\", shape = 21) +\n  geom_quantile(colour = \"royalblue\", linewidth = 1) +\n  # geom_hline(yintercept = 0, color = \"black\", linewidth = 0.5) +\n  # geom_vline(xintercept = 0, color = \"grey50\", linewidth = 0.5) +\n  scale_y_continuous(labels = scales::label_number(scale = 0.001, suffix = \"k\")) +\n  scale_x_continuous(labels = scales::label_number(scale = 0.001, suffix = \"k\")) +\n  ggthemes::theme_fivethirtyeight() +\n  coord_cartesian(clip = \"off\") +\n  theme(legend.position = \"none\") +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  )\n\nWarning: [1m[22mComputation failed in `stat_quantile()`.\nCaused by error in `compute_group()`:\n[1m[22m[33m![39m The package \"quantreg\" is required for\n  `stat_quantile()`.\n\n\n\n\n\n\n\n\n\n\nRevenue Per Visit\n\nRPV = Total Payments \\div Number of Patient Visits\n\n\n\nclaims_summary &lt;- claims |&gt;\n    select(\n    id,\n    enc,\n    age,\n    ins_prim,\n    charges,\n    allowed,\n    payments,\n    adjustments) |&gt; \n  summarise(\n    procedures = n(),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    payments = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(id, enc, age)) |&gt;\n  summarise(\n    visits = n(),\n    procedures = sum(procedures, na.rm = TRUE),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    payments = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(age)\n  ) |&gt; \n  summarise(\n    # patients = n(),\n    avg_age = mean(age, na.rm = TRUE),\n    procedures = sum(procedures, na.rm = TRUE),\n    visits = sum(visits, na.rm = TRUE),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    revenue = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE))\n\nclaims_summary |&gt; \n  set_names(\n    c(\"Average Patient Age\", \n      \"Procedures\", \n      \"Visits\", \n      \"Charges\", \n      \"Allowed\", \n      \"Net Payment\", \n      \"Adjustments\")) |&gt; \n  pivot_longer(\n    cols = everything(), \n    names_to = \"Metric\", \n    values_to = \"Value\") |&gt;\n  gt() |&gt; \n  opt_table_font(font = google_font(name = \"Fira Code\")) |&gt; \n  tab_options(table.width = pct(100),\n              quarto.disable_processing = TRUE)\n\n\n\n\n\nMetric\n      Value\n    \n\n\nAverage Patient Age\n46.5\n\n\nProcedures\n49721.0\n\n\nVisits\n39839.0\n\n\nCharges\n11659949.0\n\n\nAllowed\n4830582.7\n\n\nNet Payment\n4648361.4\n\n\nAdjustments\n5948070.3\n\n\n\n\n\nclaims_summary |&gt;\n  mutate(\n    revenue_adjustments = revenue + adjustments, \n    .after = charges) |&gt; \n  reframe(\n    cpp = charges / procedures,\n    alpp = allowed / procedures,\n    rpp = revenue / procedures,\n    adpp = adjustments / procedures,\n    ppv = procedures / visits,\n    cpv = charges / visits,\n    alpv = allowed / visits,\n    rpv = revenue / visits,\n    adpv = adjustments / visits,\n    cpr = charges / revenue_adjustments,\n    alpr = allowed / revenue,\n    adpr = adjustments / revenue,\n    net_collect = revenue / (charges - adjustments),\n    net_allow = revenue / allowed,\n    net_adjust = revenue / adjustments,\n    ) |&gt; \n  set_names(\n    c(\"Charge Per Procedure\", \n      \"Allowed Per Procedure\", \n      \"Payment Per Procedure\", \n      \"Adjustment Per Procedure\", \n      \"Procedures Per Visit\", \n      \"Charge Per Visit\", \n      \"Allowed Per Visit\", \n      \"Payment Per Visit\", \n      \"Adjustment Per Visit\",\n      \"Charge To Payment + Adjustment\",\n      \"Allowed Per Dollar\", \n      \"Adjustment Per Dollar\",\n      \"Net Collection Ratio\",\n      \"Net Allowable Ratio\",\n      \"Net Adjustment Ratio\"\n      )) |&gt; \n  pivot_longer(\n    cols = everything(), \n    names_to = \"Metric\", \n    values_to = \"Value\") |&gt; \n  gt() |&gt; \n  opt_table_font(font = google_font(name = \"Fira Code\")) |&gt; \n  tab_options(table.width = pct(100),\n              quarto.disable_processing = TRUE)\n\n\n\n\n\nMetric\n      Value\n    \n\n\nCharge Per Procedure\n234.5075320\n\n\nAllowed Per Procedure\n97.1537722\n\n\nPayment Per Procedure\n93.4888964\n\n\nAdjustment Per Procedure\n119.6289359\n\n\nProcedures Per Visit\n1.2480484\n\n\nCharge Per Visit\n292.6767489\n\n\nAllowed Per Visit\n121.2526095\n\n\nPayment Per Visit\n116.6786671\n\n\nAdjustment Per Visit\n149.3027014\n\n\nCharge To Payment + Adjustment\n1.1003656\n\n\nAllowed Per Dollar\n1.0392012\n\n\nAdjustment Per Dollar\n1.2796058\n\n\nNet Collection Ratio\n0.8138060\n\n\nNet Allowable Ratio\n0.9622776\n\n\nNet Adjustment Ratio\n0.7814907\n\n\n\n\n\n\n\ninsurance_summary &lt;- claims |&gt;\n  summarise(\n    procedures = n(),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    payments = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(id, enc, age, ins_prim)) |&gt;\n  summarise(\n    visits = n(),\n    procedures = sum(procedures, na.rm = TRUE),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    payments = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(id, age, ins_prim)\n  ) |&gt; \n  summarise(\n    patients = n(),\n    avg_age = mean(age, na.rm = TRUE),\n    procedures = sum(procedures, na.rm = TRUE),\n    visits = sum(visits, na.rm = TRUE),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    revenue = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(ins_prim)\n  ) |&gt; \n  filter(!is.na(ins_prim)) |&gt; \n  arrange(desc(procedures))\n\n# Patients are counted once per insurance class\ninsurance_summary |&gt;\n  gt(rowname_col = \"ins_prim\") |&gt; \n  opt_all_caps() |&gt; \n  opt_table_font(font = google_font(name = \"Fira Code\")) |&gt; \n  tab_options(table.width = pct(100),\n              quarto.disable_processing = TRUE)\n\n\n\n\n\n\n      patients\n      avg_age\n      procedures\n      visits\n      charges\n      allowed\n      revenue\n      adjustments\n    \n\n\nBCBS\n2155\n30.51601\n11073\n9348\n2648855\n1113623.43\n1052272.49\n1426863.60\n\n\nUHC\n1877\n34.26905\n10091\n7492\n2691070\n938135.72\n873231.19\n1538893.10\n\n\nSELF\n2801\n33.87429\n8770\n8153\n1020064\n775974.68\n773146.09\n101145.74\n\n\nAETNA\n1010\n28.61881\n4901\n3991\n1279925\n445925.74\n430341.11\n728428.95\n\n\nCIGNA\n758\n28.15963\n4265\n3651\n986190\n345288.15\n323414.76\n585340.34\n\n\nMEDICARE\n547\n70.09872\n2966\n1340\n787140\n292738.64\n287262.53\n487146.83\n\n\nOTHER\n744\n29.41667\n2804\n2416\n848695\n491911.51\n489813.89\n196970.03\n\n\nSUNFLOWER\n283\n15.55830\n1279\n1018\n476005\n141674.71\n140850.71\n301252.45\n\n\nAMBETTER\n174\n33.93103\n967\n904\n215805\n80836.37\n76822.76\n123926.40\n\n\nTRICARE WEST\n159\n23.72956\n811\n645\n241225\n69920.50\n68832.31\n167099.63\n\n\nHUMANA\n149\n58.39597\n732\n330\n199090\n50943.39\n49748.17\n142202.78\n\n\nMEDICAID\n60\n38.56667\n255\n87\n84010\n26401.45\n26224.00\n50286.00\n\n\nMERITAIN\n45\n24.48889\n206\n163\n52500\n19143.52\n18537.76\n32399.90\n\n\nVA\n32\n54.12500\n140\n60\n41865\n11575.76\n11575.76\n27735.43\n\n\nTRUSTMARK\n20\n27.90000\n86\n75\n20680\n6352.17\n6403.32\n11933.25\n\n\nRAILROAD\n13\n73.61538\n71\n35\n19435\n7233.90\n7164.62\n12310.38\n\n\nTRICARE EAST\n11\n21.36364\n66\n61\n13570\n6160.89\n5924.85\n7409.11\n\n\nMAGELLAN\n21\n35.71429\n62\n58\n14050\n1530.98\n1389.98\n3244.02\n\n\nSEDGWICK\n2\n47.00000\n20\n2\n6825\n1216.83\n1216.83\n283.17\n\n\nLIBERTY\n1\n73.00000\n15\n2\n5050\n1381.57\n1381.57\n118.43\n\n\nWELLCARE\n4\n56.75000\n14\n6\n4350\n1029.80\n1011.22\n2538.78\n\n\nHARTFORD\n2\n52.00000\n10\n2\n3550\n1583.00\n1795.50\n542.00\n\n\n\n\n\n\n\ninsurance_summary |&gt; \n  reframe(\n    ins_prim,\n    pts = patients,\n    vpp = visits / patients,\n    ppp = procedures / patients,\n    rpp = revenue / patients,\n    ppv = procedures / visits,\n    rpv = revenue / visits,\n    rpp = revenue / procedures\n  ) |&gt; \n  arrange(desc(pts)) |&gt;\n  gt(rowname_col = \"ins_prim\") |&gt; \n  opt_all_caps() |&gt; \n  opt_table_font(font = google_font(name = \"Fira Code\")) |&gt; \n  tab_options(table.width = pct(100),\n              quarto.disable_processing = TRUE)\n\n\n\n\n\n\n      pts\n      vpp\n      ppp\n      rpp\n      ppv\n      rpv\n    \n\n\nSELF\n2801\n2.910746\n3.131025\n88.15805\n1.075678\n94.82964\n\n\nBCBS\n2155\n4.337819\n5.138283\n95.03048\n1.184531\n112.56659\n\n\nUHC\n1877\n3.991476\n5.376132\n86.53564\n1.346903\n116.55515\n\n\nAETNA\n1010\n3.951485\n4.852475\n87.80680\n1.228013\n107.82789\n\n\nCIGNA\n758\n4.816623\n5.626649\n75.82996\n1.168173\n88.58251\n\n\nOTHER\n744\n3.247312\n3.768817\n174.68398\n1.160596\n202.73754\n\n\nMEDICARE\n547\n2.449726\n5.422303\n96.85183\n2.213433\n214.37502\n\n\nSUNFLOWER\n283\n3.597173\n4.519435\n110.12565\n1.256385\n138.36023\n\n\nAMBETTER\n174\n5.195402\n5.557471\n79.44443\n1.069690\n84.98093\n\n\nTRICARE WEST\n159\n4.056604\n5.100629\n84.87338\n1.257364\n106.71676\n\n\nHUMANA\n149\n2.214765\n4.912752\n67.96198\n2.218182\n150.75203\n\n\nMEDICAID\n60\n1.450000\n4.250000\n102.83922\n2.931034\n301.42529\n\n\nMERITAIN\n45\n3.622222\n4.577778\n89.98913\n1.263804\n113.72859\n\n\nVA\n32\n1.875000\n4.375000\n82.68400\n2.333333\n192.92933\n\n\nMAGELLAN\n21\n2.761905\n2.952381\n22.41903\n1.068966\n23.96517\n\n\nTRUSTMARK\n20\n3.750000\n4.300000\n74.45721\n1.146667\n85.37760\n\n\nRAILROAD\n13\n2.692308\n5.461538\n100.91014\n2.028571\n204.70343\n\n\nTRICARE EAST\n11\n5.545455\n6.000000\n89.77045\n1.081967\n97.12869\n\n\nWELLCARE\n4\n1.500000\n3.500000\n72.23000\n2.333333\n168.53667\n\n\nSEDGWICK\n2\n1.000000\n10.000000\n60.84150\n10.000000\n608.41500\n\n\nHARTFORD\n2\n1.000000\n5.000000\n179.55000\n5.000000\n897.75000\n\n\nLIBERTY\n1\n2.000000\n15.000000\n92.10467\n7.500000\n690.78500"
  },
  {
    "objectID": "posts/claims/claims.html#ratio-analysis",
    "href": "posts/claims/claims.html#ratio-analysis",
    "title": "Claims Analysis",
    "section": "",
    "text": "Revenue Per Visit\n\nRPV = Total Payments \\div Number of Patient Visits\n\n\n\nclaims_summary &lt;- claims |&gt;\n    select(\n    id,\n    enc,\n    age,\n    ins_prim,\n    charges,\n    allowed,\n    payments,\n    adjustments) |&gt; \n  summarise(\n    procedures = n(),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    payments = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(id, enc, age)) |&gt;\n  summarise(\n    visits = n(),\n    procedures = sum(procedures, na.rm = TRUE),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    payments = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(age)\n  ) |&gt; \n  summarise(\n    # patients = n(),\n    avg_age = mean(age, na.rm = TRUE),\n    procedures = sum(procedures, na.rm = TRUE),\n    visits = sum(visits, na.rm = TRUE),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    revenue = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE))\n\nclaims_summary |&gt; \n  set_names(\n    c(\"Average Patient Age\", \n      \"Procedures\", \n      \"Visits\", \n      \"Charges\", \n      \"Allowed\", \n      \"Net Payment\", \n      \"Adjustments\")) |&gt; \n  pivot_longer(\n    cols = everything(), \n    names_to = \"Metric\", \n    values_to = \"Value\") |&gt;\n  gt() |&gt; \n  opt_table_font(font = google_font(name = \"Fira Code\")) |&gt; \n  tab_options(table.width = pct(100),\n              quarto.disable_processing = TRUE)\n\n\n\n\n\nMetric\n      Value\n    \n\n\nAverage Patient Age\n46.5\n\n\nProcedures\n49721.0\n\n\nVisits\n39839.0\n\n\nCharges\n11659949.0\n\n\nAllowed\n4830582.7\n\n\nNet Payment\n4648361.4\n\n\nAdjustments\n5948070.3\n\n\n\n\n\nclaims_summary |&gt;\n  mutate(\n    revenue_adjustments = revenue + adjustments, \n    .after = charges) |&gt; \n  reframe(\n    cpp = charges / procedures,\n    alpp = allowed / procedures,\n    rpp = revenue / procedures,\n    adpp = adjustments / procedures,\n    ppv = procedures / visits,\n    cpv = charges / visits,\n    alpv = allowed / visits,\n    rpv = revenue / visits,\n    adpv = adjustments / visits,\n    cpr = charges / revenue_adjustments,\n    alpr = allowed / revenue,\n    adpr = adjustments / revenue,\n    net_collect = revenue / (charges - adjustments),\n    net_allow = revenue / allowed,\n    net_adjust = revenue / adjustments,\n    ) |&gt; \n  set_names(\n    c(\"Charge Per Procedure\", \n      \"Allowed Per Procedure\", \n      \"Payment Per Procedure\", \n      \"Adjustment Per Procedure\", \n      \"Procedures Per Visit\", \n      \"Charge Per Visit\", \n      \"Allowed Per Visit\", \n      \"Payment Per Visit\", \n      \"Adjustment Per Visit\",\n      \"Charge To Payment + Adjustment\",\n      \"Allowed Per Dollar\", \n      \"Adjustment Per Dollar\",\n      \"Net Collection Ratio\",\n      \"Net Allowable Ratio\",\n      \"Net Adjustment Ratio\"\n      )) |&gt; \n  pivot_longer(\n    cols = everything(), \n    names_to = \"Metric\", \n    values_to = \"Value\") |&gt; \n  gt() |&gt; \n  opt_table_font(font = google_font(name = \"Fira Code\")) |&gt; \n  tab_options(table.width = pct(100),\n              quarto.disable_processing = TRUE)\n\n\n\n\n\nMetric\n      Value\n    \n\n\nCharge Per Procedure\n234.5075320\n\n\nAllowed Per Procedure\n97.1537722\n\n\nPayment Per Procedure\n93.4888964\n\n\nAdjustment Per Procedure\n119.6289359\n\n\nProcedures Per Visit\n1.2480484\n\n\nCharge Per Visit\n292.6767489\n\n\nAllowed Per Visit\n121.2526095\n\n\nPayment Per Visit\n116.6786671\n\n\nAdjustment Per Visit\n149.3027014\n\n\nCharge To Payment + Adjustment\n1.1003656\n\n\nAllowed Per Dollar\n1.0392012\n\n\nAdjustment Per Dollar\n1.2796058\n\n\nNet Collection Ratio\n0.8138060\n\n\nNet Allowable Ratio\n0.9622776\n\n\nNet Adjustment Ratio\n0.7814907\n\n\n\n\n\n\n\ninsurance_summary &lt;- claims |&gt;\n  summarise(\n    procedures = n(),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    payments = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(id, enc, age, ins_prim)) |&gt;\n  summarise(\n    visits = n(),\n    procedures = sum(procedures, na.rm = TRUE),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    payments = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(id, age, ins_prim)\n  ) |&gt; \n  summarise(\n    patients = n(),\n    avg_age = mean(age, na.rm = TRUE),\n    procedures = sum(procedures, na.rm = TRUE),\n    visits = sum(visits, na.rm = TRUE),\n    charges = sum(charges, na.rm = TRUE),\n    allowed = sum(allowed, na.rm = TRUE),\n    revenue = sum(payments, na.rm = TRUE),\n    adjustments = sum(adjustments, na.rm = TRUE),\n    .by = c(ins_prim)\n  ) |&gt; \n  filter(!is.na(ins_prim)) |&gt; \n  arrange(desc(procedures))\n\n# Patients are counted once per insurance class\ninsurance_summary |&gt;\n  gt(rowname_col = \"ins_prim\") |&gt; \n  opt_all_caps() |&gt; \n  opt_table_font(font = google_font(name = \"Fira Code\")) |&gt; \n  tab_options(table.width = pct(100),\n              quarto.disable_processing = TRUE)\n\n\n\n\n\n\n      patients\n      avg_age\n      procedures\n      visits\n      charges\n      allowed\n      revenue\n      adjustments\n    \n\n\nBCBS\n2155\n30.51601\n11073\n9348\n2648855\n1113623.43\n1052272.49\n1426863.60\n\n\nUHC\n1877\n34.26905\n10091\n7492\n2691070\n938135.72\n873231.19\n1538893.10\n\n\nSELF\n2801\n33.87429\n8770\n8153\n1020064\n775974.68\n773146.09\n101145.74\n\n\nAETNA\n1010\n28.61881\n4901\n3991\n1279925\n445925.74\n430341.11\n728428.95\n\n\nCIGNA\n758\n28.15963\n4265\n3651\n986190\n345288.15\n323414.76\n585340.34\n\n\nMEDICARE\n547\n70.09872\n2966\n1340\n787140\n292738.64\n287262.53\n487146.83\n\n\nOTHER\n744\n29.41667\n2804\n2416\n848695\n491911.51\n489813.89\n196970.03\n\n\nSUNFLOWER\n283\n15.55830\n1279\n1018\n476005\n141674.71\n140850.71\n301252.45\n\n\nAMBETTER\n174\n33.93103\n967\n904\n215805\n80836.37\n76822.76\n123926.40\n\n\nTRICARE WEST\n159\n23.72956\n811\n645\n241225\n69920.50\n68832.31\n167099.63\n\n\nHUMANA\n149\n58.39597\n732\n330\n199090\n50943.39\n49748.17\n142202.78\n\n\nMEDICAID\n60\n38.56667\n255\n87\n84010\n26401.45\n26224.00\n50286.00\n\n\nMERITAIN\n45\n24.48889\n206\n163\n52500\n19143.52\n18537.76\n32399.90\n\n\nVA\n32\n54.12500\n140\n60\n41865\n11575.76\n11575.76\n27735.43\n\n\nTRUSTMARK\n20\n27.90000\n86\n75\n20680\n6352.17\n6403.32\n11933.25\n\n\nRAILROAD\n13\n73.61538\n71\n35\n19435\n7233.90\n7164.62\n12310.38\n\n\nTRICARE EAST\n11\n21.36364\n66\n61\n13570\n6160.89\n5924.85\n7409.11\n\n\nMAGELLAN\n21\n35.71429\n62\n58\n14050\n1530.98\n1389.98\n3244.02\n\n\nSEDGWICK\n2\n47.00000\n20\n2\n6825\n1216.83\n1216.83\n283.17\n\n\nLIBERTY\n1\n73.00000\n15\n2\n5050\n1381.57\n1381.57\n118.43\n\n\nWELLCARE\n4\n56.75000\n14\n6\n4350\n1029.80\n1011.22\n2538.78\n\n\nHARTFORD\n2\n52.00000\n10\n2\n3550\n1583.00\n1795.50\n542.00\n\n\n\n\n\n\n\ninsurance_summary |&gt; \n  reframe(\n    ins_prim,\n    pts = patients,\n    vpp = visits / patients,\n    ppp = procedures / patients,\n    rpp = revenue / patients,\n    ppv = procedures / visits,\n    rpv = revenue / visits,\n    rpp = revenue / procedures\n  ) |&gt; \n  arrange(desc(pts)) |&gt;\n  gt(rowname_col = \"ins_prim\") |&gt; \n  opt_all_caps() |&gt; \n  opt_table_font(font = google_font(name = \"Fira Code\")) |&gt; \n  tab_options(table.width = pct(100),\n              quarto.disable_processing = TRUE)\n\n\n\n\n\n\n      pts\n      vpp\n      ppp\n      rpp\n      ppv\n      rpv\n    \n\n\nSELF\n2801\n2.910746\n3.131025\n88.15805\n1.075678\n94.82964\n\n\nBCBS\n2155\n4.337819\n5.138283\n95.03048\n1.184531\n112.56659\n\n\nUHC\n1877\n3.991476\n5.376132\n86.53564\n1.346903\n116.55515\n\n\nAETNA\n1010\n3.951485\n4.852475\n87.80680\n1.228013\n107.82789\n\n\nCIGNA\n758\n4.816623\n5.626649\n75.82996\n1.168173\n88.58251\n\n\nOTHER\n744\n3.247312\n3.768817\n174.68398\n1.160596\n202.73754\n\n\nMEDICARE\n547\n2.449726\n5.422303\n96.85183\n2.213433\n214.37502\n\n\nSUNFLOWER\n283\n3.597173\n4.519435\n110.12565\n1.256385\n138.36023\n\n\nAMBETTER\n174\n5.195402\n5.557471\n79.44443\n1.069690\n84.98093\n\n\nTRICARE WEST\n159\n4.056604\n5.100629\n84.87338\n1.257364\n106.71676\n\n\nHUMANA\n149\n2.214765\n4.912752\n67.96198\n2.218182\n150.75203\n\n\nMEDICAID\n60\n1.450000\n4.250000\n102.83922\n2.931034\n301.42529\n\n\nMERITAIN\n45\n3.622222\n4.577778\n89.98913\n1.263804\n113.72859\n\n\nVA\n32\n1.875000\n4.375000\n82.68400\n2.333333\n192.92933\n\n\nMAGELLAN\n21\n2.761905\n2.952381\n22.41903\n1.068966\n23.96517\n\n\nTRUSTMARK\n20\n3.750000\n4.300000\n74.45721\n1.146667\n85.37760\n\n\nRAILROAD\n13\n2.692308\n5.461538\n100.91014\n2.028571\n204.70343\n\n\nTRICARE EAST\n11\n5.545455\n6.000000\n89.77045\n1.081967\n97.12869\n\n\nWELLCARE\n4\n1.500000\n3.500000\n72.23000\n2.333333\n168.53667\n\n\nSEDGWICK\n2\n1.000000\n10.000000\n60.84150\n10.000000\n608.41500\n\n\nHARTFORD\n2\n1.000000\n5.000000\n179.55000\n5.000000\n897.75000\n\n\nLIBERTY\n1\n2.000000\n15.000000\n92.10467\n7.500000\n690.78500"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning for Getting A Head",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nReading Time\n\n\n\n\n\n\n2024-09-23\n\n\nClaims Analysis\n\n\n18 min\n\n\n\n\n2024-09-23\n\n\nMedicare Physician Fee Schedule\n\n\n38 min\n\n\n\n\n2024-09-23\n\n\n100%\n\n\n8 min\n\n\n\n\n2024-09-25\n\n\nBuilding Claims Rules\n\n\n19 min\n\n\n\n\n2024-10-16\n\n\nTaxonomy Codes\n\n\n10 min\n\n\n\n\n2024-10-17\n\n\nNPIs & Luhn’s Algorithm\n\n\n14 min\n\n\n\n\n2024-10-17\n\n\nLearning to Love Regexes By Learning Them\n\n\n21 min\n\n\n\n\n2024-10-18\n\n\nThe Art of DAR\n\n\n8 min\n\n\n\n\n2024-10-18\n\n\nMedical Codes as Matrices\n\n\n3 min\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "posts/dar/art_of_dar.html",
    "href": "posts/dar/art_of_dar.html",
    "title": "The Art of DAR",
    "section": "",
    "text": "Average Days in Accounts Receivable (DAR or Average Days in AR) is a common financial metric known as an efficiency ratio.\nDAR measures the average number of days it takes for a business to collect money owed for services rendered from the responsible parties.\nIts function in the healthcare revenue cycle is as a high-level monitor of the financial health of a healthcare entity.\nThe following is a thorough overview of everything you never knew you didn’t want to know about DAR. Let’s start off with some background and terminology. See Note 1 for more information on the American healthcare economic model.\n\nAging of Accounts\n\nAn account is a billable episode of care. It begins to age once it is billed to the guarantor. These outstanding accounts are monitored in 30-day blocks or bins ([0, 30), [31, 60), [61, 90), [91, 120), and [121, \\infty)) by the number of accounts, the amount owed by each bin and the responsible parties. The older the account, the less likely it will be paid.\n\n\n\n\nGuarantor\n\nThe responsible party for the amount owed (an insurance payer, a patient, etc.) Most claims are originally billed to insurance and, until the insurance makes a payment, the responsibility for the payment continues to be with the insurance payer. After the payer makes or denies a payment (with no just cause for an appeal), the responsibility for the balance of goes to the patient (to be sent an invoice) or the physician (to be written off.)\n\nAccounts Receivable\n\nAR represents money owed to the healthcare practice by patients and/or insurance carriers. The AR balance is the total charges billed to an insurance payer or patient for services rendered but not yet collected. The balance can only be reduced by payment or by adjustments, contractual or otherwise. The AR cycle begins with the delivery of services and ends with reconciliation, or when the balance owed equals zero.\n\nAverage Days in AR\n\nA mathematical formula for the average number of days it takes a business to collect money that it is owed. A low average is good. A high average signals a problem within the revenue cycle.\n\n\n\nSo now we know that a low Days in AR number is good and a high number is bad. How low is good though? How high is bad?\nLet’s say that a practice has a DAR of 95 days. This means that, on average, it takes the practice 95 days to collect it’s outstanding balances. Let’s start with what we can say for sure about a Days in AR of 95:\n\n95 days is roughly equal to a little over three months.\nTherefore, there is three months of unpaid work sitting in Accounts Receivable.\nAs such, this practice will need three months of cash reserves on hand to meet its financial obligations.\n\nThe ideal Days in AR depends entirely upon the medical practice, its customers (patients), its customers’ payers, the services it supplies, the providers performing those services, and the financial situation of the practice.\n\n\n\n\n\n\nNote 1: The American Healthcare Economic Model\n\n\n\n\n\nTo understand the healthcare version of Days in AR, you need to first understand the environment in which it is used.\nTypically, companies sell their products or services directly to consumers and are paid immediately at the point of service (POS). This is called a business-to-consumer revenue model.\nAnother revenue model type is the business-to-business (B2B) model, concerning businesses that transact primarily with each other. Purchases between two businesses tend to be much larger. As such, B2B businesses invoice on a monthly basis, meaning no payment for 30+ days.\nSomewhere in between these two models is the American healthcare system. This gray area is caused by a middleman called a third party payer. Better known as an insurance company, providers enter into a contractual agreement with this third party to be paid for their services at a reduced rate.\nIn exchange, a provider gains access to the payer’s large subscriber base. The difference between the charge a provider submits to a payer and the contracted rate he or she has agreed to is called the contractual adjustment, which is written off once a claim has been adjudicated.\nThe contractual adjustment introduces a critical inefficiency to the healthcare revenue model. Rather than prices being determined by supply and demand, they are set by individually negotiated arrangements, the end result of which is no real demand or pricing curve.\nThis issue is much too complex for me to properly do justice to here. It is, however, an essential concept to grasp when trying to understand healthcare reimbursement. In other words, healthcare reimbursement is crazy, not you.\n\n\n\n\n\n \\overline{dar} = \\ earb \\div (\\ gc \\ \\div \\ n_{days}\\ )\\ \n\n \\overline{dar_t} = \\frac{arb_t}{gc_t\\div n_{days}} \nWhere:\nt = \\text{Time Period} The subscript t denotes the time period being measured.\nn_{days} = \\text{Days in Period} The number of days in t.\ngc_t = \\text{Gross Charges} The sum of all charges billed during t.\n\\overline{dc_t} = \\text{Average Daily Charge} gc_t divided by n_{days}.\narb_t = \\text{AR Balance} The sum of all outstanding balances at close of business (COB) on the final day of t.\n\\overline{dar_t} = \\text{Average Days in AR} arb_t divided by \\overline{dc_t} for time period t.\n\n\n\n\n\n\nNote 2: Example in R\n\n\n\nLet’s say we want to calculate \\overline{dar_t} for the current month. Our Gross Charges total is $131,440 and our AR Balance is $203,460:\n\nex &lt;- tibble(\n  ndays = days_in_month(today()),\n  gc = 131440,\n  arb = 203460)\n\nex |&gt; \n  gt() |&gt; \n  tab_header(\n    title = md(\"**Average Days in AR** _Calculation_\"),\n    subtitle = drng()) |&gt;\n  cols_label(\n    ndays = md(\"**n**&lt;i&gt;&lt;sub&gt;days&lt;/sub&gt;&lt;/i&gt;\"),\n    gc    = md(\"**gc**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\"),\n    arb   = md(\"**arb**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\")) |&gt;\n  fmt_currency(columns = 2:3, decimals = 0) |&gt; \n  gt_opts()\n\n\nTable 1\n\n\n\n\n\n\n\nAverage Days in AR Calculation\n    \n\nOct 1, 2024 - Oct 30, 2024\n    \n\nndays\n      gct\n      arbt\n    \n\n\n31\n$131,440\n$203,460\n\n\n\n\n\n\n\n\nWe have the three numbers we need, let’s plug them into our formula:\n\nex &lt;- ex |&gt; \n  mutate(\n    dc = gc / ndays,\n    dar = arb / dc)\n\nex |&gt; \n  gt() |&gt; \n  tab_header(\n    title = md(\"**Average Days in AR** _Calculation_\"),\n    subtitle = drng()) |&gt;\n  cols_label(\n    ndays = md(\"**n**&lt;i&gt;&lt;sub&gt;days&lt;/sub&gt;&lt;/i&gt;\"),\n    gc    = md(\"**gc**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\"),\n    arb   = md(\"**arb**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\"),\n    dc    = md(\"**dc**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\"),\n    dar   = md(\"**dar**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\")) |&gt;\n  fmt_currency(columns = c(2:4), decimals = 0) |&gt; \n  fmt_number(columns = 5, decimals = 2) |&gt;\n  gt_opts()\n\n\nTable 2\n\n\n\n\n\n\n\nAverage Days in AR Calculation\n    \n\nOct 1, 2024 - Oct 30, 2024\n    \n\nndays\n      gct\n      arbt\n      dct\n      dart\n    \n\n\n31\n$131,440\n$203,460\n$4,240\n47.99\n\n\n\n\n\n\n\n\nAnd there we have it, our Average Daily Charge is $4,240 and our Days in AR is 47.99."
  },
  {
    "objectID": "posts/dar/art_of_dar.html#formula-for-dar",
    "href": "posts/dar/art_of_dar.html#formula-for-dar",
    "title": "The Art of DAR",
    "section": "",
    "text": "\\overline{dar} = \\ earb \\div (\\ gc \\ \\div \\ n_{days}\\ )\\ \n\n \\overline{dar_t} = \\frac{arb_t}{gc_t\\div n_{days}} \nWhere:\nt = \\text{Time Period} The subscript t denotes the time period being measured.\nn_{days} = \\text{Days in Period} The number of days in t.\ngc_t = \\text{Gross Charges} The sum of all charges billed during t.\n\\overline{dc_t} = \\text{Average Daily Charge} gc_t divided by n_{days}.\narb_t = \\text{AR Balance} The sum of all outstanding balances at close of business (COB) on the final day of t.\n\\overline{dar_t} = \\text{Average Days in AR} arb_t divided by \\overline{dc_t} for time period t.\n\n\n\n\n\n\nNote 2: Example in R\n\n\n\nLet’s say we want to calculate \\overline{dar_t} for the current month. Our Gross Charges total is $131,440 and our AR Balance is $203,460:\n\nex &lt;- tibble(\n  ndays = days_in_month(today()),\n  gc = 131440,\n  arb = 203460)\n\nex |&gt; \n  gt() |&gt; \n  tab_header(\n    title = md(\"**Average Days in AR** _Calculation_\"),\n    subtitle = drng()) |&gt;\n  cols_label(\n    ndays = md(\"**n**&lt;i&gt;&lt;sub&gt;days&lt;/sub&gt;&lt;/i&gt;\"),\n    gc    = md(\"**gc**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\"),\n    arb   = md(\"**arb**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\")) |&gt;\n  fmt_currency(columns = 2:3, decimals = 0) |&gt; \n  gt_opts()\n\n\nTable 1\n\n\n\n\n\n\n\nAverage Days in AR Calculation\n    \n\nOct 1, 2024 - Oct 30, 2024\n    \n\nndays\n      gct\n      arbt\n    \n\n\n31\n$131,440\n$203,460\n\n\n\n\n\n\n\n\nWe have the three numbers we need, let’s plug them into our formula:\n\nex &lt;- ex |&gt; \n  mutate(\n    dc = gc / ndays,\n    dar = arb / dc)\n\nex |&gt; \n  gt() |&gt; \n  tab_header(\n    title = md(\"**Average Days in AR** _Calculation_\"),\n    subtitle = drng()) |&gt;\n  cols_label(\n    ndays = md(\"**n**&lt;i&gt;&lt;sub&gt;days&lt;/sub&gt;&lt;/i&gt;\"),\n    gc    = md(\"**gc**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\"),\n    arb   = md(\"**arb**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\"),\n    dc    = md(\"**dc**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\"),\n    dar   = md(\"**dar**&lt;i&gt;&lt;sub&gt;t&lt;/sub&gt;&lt;/i&gt;\")) |&gt;\n  fmt_currency(columns = c(2:4), decimals = 0) |&gt; \n  fmt_number(columns = 5, decimals = 2) |&gt;\n  gt_opts()\n\n\nTable 2\n\n\n\n\n\n\n\nAverage Days in AR Calculation\n    \n\nOct 1, 2024 - Oct 30, 2024\n    \n\nndays\n      gct\n      arbt\n      dct\n      dart\n    \n\n\n31\n$131,440\n$203,460\n$4,240\n47.99\n\n\n\n\n\n\n\n\nAnd there we have it, our Average Daily Charge is $4,240 and our Days in AR is 47.99."
  },
  {
    "objectID": "posts/dar/art_of_dar.html#earb-target-for-dart",
    "href": "posts/dar/art_of_dar.html#earb-target-for-dart",
    "title": "The Art of DAR",
    "section": "\n2.1 EARb Target for DARt",
    "text": "2.1 EARb Target for DARt\nIn the first example, our DAR was 47.99. That’s approximately 13 days over our DARt of 35. What would our EARB need to have been to bring us under our DARt? Here’s our formula:\n eart = (\\ dart \\cdot gc\\ )\\ \\div days_n \nWe’ll calculate the EARB we needed as well as the difference between the two AR figures:"
  },
  {
    "objectID": "posts/mpfs/mpfs.html",
    "href": "posts/mpfs/mpfs.html",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "This is an overview of the general format of the Medicare Physician Fee Schedule (MPFS), specifically the PFS Relative Value File. Updates are released on the first day of each quarter. If required, a correction notice may be issued. The file is a zip archive and typically contains six files:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRVU\nData Dictionary, Record Layout and File Documentation\n\n\n\n\n\nPPRRVU\nPhysician Fee Schedule RVUs and Policy Indicators\n\n\n\n\n\nGPCI\nGeographic Practice Cost Index Components for each Carrier/Locality combination\n\n\n\n\n\nLOCCO\nLocality to County Crosswalk\n\n\n\n\n\nANES\nAnesthesia Conversion Factors\n\n\n\n\n\nOPPSCAP\nOPPS-based capitation-adjusted payment amounts.\n\n\n\n\n\n\nWhat follows is a thorough dissection of each file in the archive, starting with the RVU file.\n\nThe pdf labeled “RVU” is a comprehensive guide to the structure and contents of each file in the Relative Value zip file. It describes the methodology, that contains a data dictionary, record layout, and documentation\n\nrvu24a &lt;- rbrvs::get_source(year = 2024, source = \"pprrvu\")$rvu24a_jan |&gt; \n  dplyr::mutate(\n    mod = cheapr::factor_(mod),\n    status_code = cheapr::factor_(status_code),\n    pctc_ind = cheapr::factor_(pctc_ind),\n    glob_days = cheapr::factor_(glob_days),\n    mult_proc = cheapr::factor_(mult_proc),\n    bilat_surg = cheapr::factor_(bilat_surg),\n    asst_surg = cheapr::factor_(asst_surg),\n    co_surg = cheapr::factor_(co_surg),\n    team_surg = cheapr::factor_(team_surg),\n    physician_supervision_of_diagnostic_procedures = cheapr::factor_(physician_supervision_of_diagnostic_procedures),\n    diagnostic_imaging_family_indicator = cheapr::factor_(diagnostic_imaging_family_indicator),\n    )\n\nover &lt;- cheapr::overview(rvu24a, hist = TRUE)\n\nhcpcs_row &lt;- over$categorical |&gt; \n  dplyr::select(variable = col, value = n_unique) |&gt; \n  dplyr::filter(variable == \"hcpcs\")\n\n\n\ndplyr::left_join(\n  vars |&gt; dplyr::filter(!is.na(value)),\n  dplyr::tibble(\n    variable = names(idx[collapse::funique(vars$variable)]),\n    description = idx[collapse::funique(vars$variable)]),\n  by = dplyr::join_by(variable)\n  ) |&gt; \n  fuimus::combine(\n    name = variable, \n    columns = c('variable', 'description'), \n    sep = \"&lt;br&gt;&lt;br&gt;\"\n    ) |&gt;\n  dplyr::add_row(\n    variable = toupper(hcpcs_row$variable),\n    value = as.character(format(hcpcs_row$value, big.mark = \",\")),\n    n = 18499,\n    pct = 1.0,\n    .before = 1\n    ) |&gt; \n  gt::gt(\n    groupname_col = \"variable\",\n    # rowname_col = \"value\",\n    row_group_as_column = TRUE,\n    process_md = TRUE) |&gt; \n  gt::tab_stubhead(label = \"Variable\") |&gt; \n  gt::cols_label(\n    value = \"Unique\\nValues\",\n    n = \"Total\",\n    pct = \"Percentage\"\n    ) |&gt;\n  gt::fmt_percent(columns = pct) |&gt; \n  gt::fmt_integer(columns = n) |&gt;\n  gt::opt_table_font(font = gt::google_font(name = \"Recursive\")) |&gt; \n  gt::opt_all_caps() |&gt; \n  gt::tab_options(\n    heading.align = \"left\",\n    heading.border.bottom.color = \"#4758AB\",\n    heading.title.font.weight = \"bold\",\n    heading.background.color = \"#4758AB\", # \"#f8f9fa\",\n    quarto.disable_processing = TRUE,\n    data_row.padding.horizontal = gt::px(20),\n    column_labels.padding.horizontal = gt::px(20),\n    table.border.top.color = \"#4758AB\",\n    table.width = gt::pct(100),\n    column_labels.hidden = FALSE,\n    # stub.font.weight = \"bold\",\n    # stub_row_group.font.weight = \"bold\",\n    column_labels.font.weight = \"bold\"\n  )\n\n\n\n\n\nVariable\n      Unique\nValues\n      Total\n      Percentage\n    \n\n\nHCPCS\n16,324\n18,499\n100.00%\n\n\nMODFor diagnostic tests, a blank in this field denotes the global service and the following modifiers identify the components:26 = Professional componentTC = Technical component For services other than those with a professional and/or technical component, a blank will appear in this field with one exception: the presence of CPT modifier -53 indicates that separate RVUs and a fee schedule amount have been established for procedures which the physician terminated before completion. This modifier is used only with colonoscopy CPT codes 44388 and 45378, or with G0105 and G0121. Any other codes billed with modifier -53 are subject to carrier medical review and priced by individual consideration.53 = Discontinued Procedure - Under certain circumstances, the physician may elect to terminate a surgical or diagnostic procedure. Due to extenuating circumstances, or those that threaten the well being of the patient, it may be necessary to indicate that a surgical or diagnostic procedure was started but discontinued.\n26\n1,096\n5.92%\n\n\nTC\n1,076\n5.82%\n\n\n53\n4\n0.02%\n\n\nSTATUS CODEIndicates whether the code is in the fee schedule and whether it is separately payable if the service is covered. Only RVUs associated with status codes of A, R, or T, are used for Medicare payment.\nA\n8,975\n48.52%\n\n\nX\n2,527\n13.66%\n\n\nI\n1,411\n7.63%\n\n\nE\n1,343\n7.26%\n\n\nM\n1,201\n6.49%\n\n\nC\n1,156\n6.25%\n\n\nR\n1,050\n5.68%\n\n\nN\n327\n1.77%\n\n\nJ\n276\n1.49%\n\n\nP\n142\n0.77%\n\n\nB\n83\n0.45%\n\n\nT\n8\n0.04%\n\n\nNOT USED FOR MEDICARE PAYMENTThe name says it all\n+\n133\n0.72%\n\n\nNON FAC INDICATORAn NA in this field indicates that this procedure is rarely or never performed in the non-facility setting.\nNA\n4,066\n21.98%\n\n\nFACILITY INDICATORAn NA in this field indicates that this procedure is rarely or never performed in the facility setting.\nNA\n2,468\n13.34%\n\n\nPCTC INDProfessional Component (PC) or Technical Component (TC) Indicator\n9\n7,704\n41.65%\n\n\n0\n7,128\n38.53%\n\n\n1\n3,229\n17.45%\n\n\n3\n178\n0.96%\n\n\n5\n104\n0.56%\n\n\n7\n74\n0.40%\n\n\n2\n44\n0.24%\n\n\n6\n20\n0.11%\n\n\n4\n17\n0.09%\n\n\n8\n1\n0.01%\n\n\nGLOB DAYSGlobal Surgery postoperative timeframes that apply to payment for each surgical procedure or another indicator that describes how the global concept applies to the service.\nXXX\n11,262\n60.88%\n\n\n090\n3,771\n20.38%\n\n\n000\n1,326\n7.17%\n\n\nYYY\n933\n5.04%\n\n\nZZZ\n719\n3.89%\n\n\n010\n471\n2.55%\n\n\nMMM\n17\n0.09%\n\n\nMULT PROCMultiple Procedure (CPT Modifier 51) indicator shows which payment adjustment rule for multiple procedures applies to the service.\n9\n7,876\n42.58%\n\n\n2\n5,287\n28.58%\n\n\n0\n4,044\n21.86%\n\n\n4\n420\n2.27%\n\n\n3\n361\n1.95%\n\n\n6\n361\n1.95%\n\n\n7\n98\n0.53%\n\n\n5\n52\n0.28%\n\n\nBILAT SURGBilateral Surgery Indicator (CPT Modifier 50) for services subject to a payment adjustment.\n9\n7,892\n42.66%\n\n\n0\n7,784\n42.08%\n\n\n1\n2,203\n11.91%\n\n\n2\n383\n2.07%\n\n\n3\n237\n1.28%\n\n\nASST SURGAssistant at Surgery (Modifiers AS, 80, 81, and 82) indicator for services where Medicare never pays an assistant at surgery.\n9\n7,940\n42.92%\n\n\n0\n5,595\n30.24%\n\n\n2\n2,781\n15.03%\n\n\n1\n2,183\n11.80%\n\n\nCO SURGCo-Surgeons (Modifier 62) This field gives an indicator for services for which Medicare may pay 2 surgeons, each in a different specialty.\n9\n7,885\n42.62%\n\n\n0\n7,839\n42.38%\n\n\n1\n2,474\n13.37%\n\n\n2\n301\n1.63%\n\n\nTEAM SURGTeam Surgeons (Modifier 66) This field gives an indicator for services for which Medicare may pay team surgeons.\n0\n10,430\n56.38%\n\n\n9\n7,885\n42.62%\n\n\n1\n133\n0.72%\n\n\n2\n51\n0.28%\n\n\nENDO BASEEndoscopic Base Code for each code with a multiple surgery indicator of 3.\n52000\n44\n0.24%\n\n\n31231\n30\n0.16%\n\n\n43235\n30\n0.16%\n\n\n31622\n20\n0.11%\n\n\n43200\n18\n0.10%\n\n\n49320\n18\n0.10%\n\n\n29870\n15\n0.08%\n\n\n45330\n14\n0.08%\n\n\n45378\n14\n0.08%\n\n\n44388\n13\n0.07%\n\n\n29805\n11\n0.06%\n\n\n43260\n10\n0.05%\n\n\n45300\n10\n0.05%\n\n\n46600\n10\n0.05%\n\n\n44360\n9\n0.05%\n\n\n31525\n8\n0.04%\n\n\n31575\n8\n0.04%\n\n\n31526\n7\n0.04%\n\n\n52351\n7\n0.04%\n\n\n58555\n7\n0.04%\n\n\n29860\n6\n0.03%\n\n\n29830\n5\n0.03%\n\n\n29840\n5\n0.03%\n\n\n43191\n5\n0.03%\n\n\n50570\n5\n0.03%\n\n\n57452\n5\n0.03%\n\n\n31505\n4\n0.02%\n\n\n47552\n4\n0.02%\n\n\n50951\n4\n0.02%\n\n\n44376\n3\n0.02%\n\n\n44380\n3\n0.02%\n\n\n50551\n3\n0.02%\n\n\n0652T\n2\n0.01%\n\n\n50970\n2\n0.01%\n\n\n43197\n1\n0.01%\n\n\n66710\n1\n0.01%\n\n\nPHYSICIAN SUPERVISION OF DIAGNOSTIC PROCEDURESMedicare uses this field in post payment review.\n09\n17,465\n94.41%\n\n\n01\n533\n2.88%\n\n\n02\n249\n1.35%\n\n\n03\n207\n1.12%\n\n\n04\n16\n0.09%\n\n\n6A\n13\n0.07%\n\n\n7A\n9\n0.05%\n\n\n21\n5\n0.03%\n\n\n05\n1\n0.01%\n\n\n66\n1\n0.01%\n\n\nDIAGNOSTIC IMAGING FAMILY INDICATORIdentifies the applicable Diagnostic Service family for HCPCS codes with a Multiple Procedure indicator of 4. For services effective January 1, 2011, and after, family indicators 01 - 11 won’t populate.\n99\n18,055\n97.60%\n\n\n88\n444\n2.40%\n\n\n\n\n\n\n\nover$numeric |&gt; \n  dplyr::select(\n    variable = col, \n    unique = n_unique,\n    # min = p0, \n    # p25,\n    # median = p50,\n    p75,\n    max = p100,\n    iqr, \n    mean,\n    sd,\n    hist\n    ) |&gt;\n  gt::gt(\n    groupname_col = \"variable\",\n    row_group_as_column = TRUE,\n    process_md = TRUE) |&gt; \n  gt::fmt_integer(columns = unique) |&gt;\n  gt::fmt_number(columns = p75:sd) |&gt;\n  gt::opt_table_font(font = gt::google_font(name = \"Recursive\")) |&gt; \n  gt::tab_options(\n    heading.align = \"left\",\n    heading.border.bottom.color = \"#4758AB\",\n    heading.title.font.weight = \"bold\",\n    heading.background.color = \"#4758AB\", # \"#f8f9fa\",\n    quarto.disable_processing = TRUE,\n    data_row.padding.horizontal = gt::px(20),\n    column_labels.padding.horizontal = gt::px(20),\n    table.border.top.color = \"#4758AB\",\n    table.width = gt::pct(100),\n    column_labels.hidden = FALSE\n  )\n\n\n\n\n\n\n      unique\n      p75\n      max\n      iqr\n      mean\n      sd\n      hist\n    \n\n\nwork_rvu\n2,486\n3.21\n108.91\n3.21\n3.88\n8.51\n▇▁▁▁▁\n\n\nnon_fac_pe_rvu\n2,310\n5.35\n355.87\n5.35\n4.01\n10.52\n▇▁▁▁▁\n\n\nfacility_pe_rvu\n2,079\n3.66\n53.07\n3.66\n3.03\n5.60\n▇▁▁▁▁\n\n\nmp_rvu\n1,026\n0.43\n28.99\n0.43\n0.83\n2.20\n▇▁▁▁▁\n\n\nnon_facility_total\n3,877\n9.79\n364.53\n9.79\n8.71\n18.07\n▇▁▁▁▁\n\n\nfacility_total\n3,683\n7.50\n171.00\n7.50\n7.74\n15.57\n▇▁▁▁▁\n\n\npre_op\n8\n0.00\n0.17\n0.00\n0.02\n0.04\n▇▁▂▁▁\n\n\nintra_op\n14\n0.00\n0.84\n0.00\n0.17\n0.32\n▇▁▁▁▂\n\n\npost_op\n11\n0.00\n0.23\n0.00\n0.03\n0.07\n▇▁▁▁▁\n\n\nconv_factor\n1\n32.74\n32.74\n0.00\n32.74\n0.00\n▁▁▇▁▁\n\n\nnon_facility_pe_used_for_opps_payment_amount\n417\n0.00\n159.54\n0.00\n0.90\n7.15\n▇▁▁▁▁\n\n\nfacility_pe_used_for_opps_payment_amount\n417\n0.00\n159.54\n0.00\n0.90\n7.15\n▇▁▁▁▁\n\n\nmp_used_for_opps_payment_amount\n81\n0.00\n1.83\n0.00\n0.01\n0.06\n▇▁▁▁▁\n\n\n\n\n\n\n\nThe MPFS is a listing of the relative value units (RVUs) for each CPT code, as well as the geographic practice cost index (GPCI) for each code. The RVUs are used to calculate the payment amount for each service, while the GPCI is used to adjust the payment amount based on the location where the service is provided.\nThis file contains information on services covered by the MPFS in 2024. For more than 10,000 physician services, the file contains the associated RVUs, a fee schedule status indicator, and various payment policy indicators needed for payment adjustment (i.e., payment of assistant at surgery, team surgery, bilateral surgery, etc.).\nThe MPFS amounts are adjusted to reflect the variation in practice costs from area to area. A GPCI has been established for every Medicare payment locality for each of the three components of a procedure’s RVU:\n\nPhysician Work\nPractice Expense\nMalpractice Expense (sometimes called Professional Liability Insurance)\n\nThe GPCIs are applied in the calculation of a fee schedule payment amount by multiplying the RVU for each component times the GPCI for that component.\n\n x = [(RVU_w \\times GPCI_w) + (RVU_p \\times GPCI_p) + (RVU_m \\times GPCI_m)] \\times CF \n\n y = 0.95x \n\n z = 0.95(1.15x) \n\n\n\n\n\n\nMany Ways to Say the Same Thing\n\n\n\n\nAs there is a corresponding GPCI value for each of the three components of an RVU, the formula is essentially the dot product of the RVU and GPCI vectors, multiplied by the conversion factor:\n\n a \\cdot b = a_1b_1 + a_2b_2 + a_3b_3 \nSetting up the variables:\n\nwrvu  = 6.26   # Work RVU\nwgpci = 1      # Work GPCI\n\npgpci = 0.883  # Practice GPCI\nprvu  = 4.36   # Practice RVU\n\nmrvu  = 0.99   # Malpractice RVU\nmgpci = 1.125  # Malpractice GPCI\n\ncf    = 32.744 # Conversion Factor\n\n\nBasic Calculation:\n\n((wrvu * wgpci) + \n   (prvu * pgpci) + \n   (mrvu * mgpci)) * cf\n\n[1] 367.5065\n\n\n\nWith base R’s Matrix Multiplication Infix Operator:\n\nas.vector(\n  c(wrvu, prvu, mrvu) %*% \n  c(wgpci, pgpci, mgpci) * cf)\n\n[1] 367.5065\n\n\n\nWith the pracma package’s dot() function:\n\npracma::dot(\n  c(wrvu, prvu, mrvu), \n  c(wgpci, pgpci, mgpci)) * cf\n\n[1] 367.5065\n\n\n\nWith the northstar package’s calculate_amounts() function:\n\ncalculate_amounts(\n  wrvu  = 6.26,\n  nprvu = 7.92,\n  fprvu = 4.36,\n  mrvu  = 0.99,\n  cf    = 32.744,\n  wgpci = 1,\n  pgpci = 0.883,\n  mgpci = 1.125\n)\n\nFacility Amounts:\n\nRVU Total ............ 11.22\nParticipating ........ $367.51\nNon-Particpating ..... $349.13\nLimiting Charge ...... $401.50\n\nNon-Facility Amounts:\n\nRVU Total ............ 14.37\nParticipating ........ $470.44\nNon-Particpating ..... $446.91\nLimiting Charge ...... $513.95\n\n\n\n\n\n\n\n\n\n\nNon-Facility vs. Facility\n\n\n\nUnder the MPFS, many procedures have separate payment amounts for physician services when provided in facility and non-facility settings.\nThe amount is determined by the Place of Service (POS) code. In general, the POS code reflects the actual place where the patient receives the face-to-face service and determines whether the facility or non-facility payment rate is paid.\nServices rendered to a patient who is an inpatient of a hospital (POS code 21) or an outpatient of a hospital (POS codes 19 or 22), the facility rate is paid, regardless of where the face-to-face encounter with the patient occurred.\n\n\n\n\n\n\n\n\n\nTherapy Code Capitation\n\n\n\nCertain therapy codes will receive a 50% reduction to the Practice Expense.\nSection 5102(b) of the Deficit Reduction Act of 2005 requires a payment cap on the Technical Component (TC) of certain diagnostic imaging procedures and the TC portions of the global diagnostic imaging services.\nThis cap is based on the Outpatient Prospective Payment System (OPPS) payment. To implement this provision, the Physician Fee Schedule amount is compared to the OPPS payment amount and the lower amount is used in the formula to calculate payment.\n\n\n\nAccepting assignment means that a healthcare provider or facility is partnered with Medicare and is required by law to charge only the Medicare-approved amount for various services. This amount is preset by Medicare and is often less than many healthcare facilities would charge.\nBecause of this, when patients receive care at a facility that accepts assignment, they will be required to pay lower out-of-pocket costs as Medicare will cover the full amount of the service cost. Personal costs only include the premium and any charges up to the deductible amount.\nPhysicians or facilities that do not accept assignment are a non-participating providers. All physicians are required to file with Medicare, indicating that they either accept or do not accept assignment. If a provider does not accept assignment, it means that they are not required to charge only the Medicare-approved amount for services.\n\nOne possible option for non-participating providers is to choose to accept assignment for some services but to decline assignment for others. For services that they accept assignment for, they are only able to bill the Medicare-approved amount. However, for other services, they are allowed to charge up to 15 percent more than the Medicare-approved amount.\nThis limit cap is known as the limiting charge. Providers that do not fully participate only receive 95 percent of the Medicare-approved amount when Medicare reimburses them for the cost of care. In turn, the provider can charge the patient up to 15 percent more than this reimbursement amount. This extra charge will not be covered by Medicare, which causes Medicare recipients to incur greater out-of-pocket costs.\nThe Medicare limiting charge is the maximum amount a Non-Participating Provider can charge for services submitted on a non-assigned claim. This is that maximum amount a beneficiary could legally be charged.\n\nThe Medicare limiting charge is, by law, set at 115\\% of the payment amount for the service furnished by the Non-Participating Physician.\nHowever, the law sets the payment amount for Non-Participating Physicians at 95\\% of the payment amount for Participating Physicians (i.e., the Fee Schedule amount).\nCalculating 95\\% of 115\\% of an amount, x, is equivalent to x \\times 1.0925 (or 109.25\\%):\n\n# 95% of 115% of 10\n(10 * 1.15) * 0.95 \n\n[1] 10.925\n\n# 109.25% of 10\n10 * 1.0925 \n\n[1] 10.925\n\n# using the northstar package\nlimiting_charge(10)\n\n[1] 10.925\n\n\n\nThis file contains information on services covered by the Medicare Physician Fee Schedule (MPFS). For more than 10,000 physician services, the file contains the associated relative value units (RVUs), a fee schedule status indicator, and various payment policy indicators needed for payment adjustment (i.e., payment of assistant at surgery, team surgery, bilateral surgery, etc.).\nThe Medicare physician fee schedule amounts are adjusted to reflect the variation in practice costs from area to area. A geographic practice cost index (GPCI) has been established for every Medicare payment locality for each of the three components of a procedure’s relative value unit (i.e., the RVUs for work, practice expense, and malpractice). The GPCIs are applied in the calculation of a fee schedule payment amount by multiplying the RVU for each component times the GPCI for that component.\n\n\nIndicates whether the code is in the fee schedule and whether it is separately payable if the service is covered. See Attachment A for description of values.\nOnly RVUs associated with status codes of A, R, or T, are used for Medicare payment.\n\n\nProvides time frames that apply to each surgical procedure.\n\n\n\nPreoperative\nIntraoperative\nPostoperative\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFacility\nNon-Facility\n\n\n\nAn NA in this field indicates that this procedure is rarely or never performed in the Facility setting:\n\n\nAn NA in this field indicates that this procedure is rarely or never performed in the Non-Facility setting:\n\n\n\n\nIndicates applicable payment adjustment rule for multiple procedures (modifier 51)."
  },
  {
    "objectID": "posts/mpfs/mpfs.html#rvu",
    "href": "posts/mpfs/mpfs.html#rvu",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "The pdf labeled “RVU” is a comprehensive guide to the structure and contents of each file in the Relative Value zip file. It describes the methodology, that contains a data dictionary, record layout, and documentation\n\nrvu24a &lt;- rbrvs::get_source(year = 2024, source = \"pprrvu\")$rvu24a_jan |&gt; \n  dplyr::mutate(\n    mod = cheapr::factor_(mod),\n    status_code = cheapr::factor_(status_code),\n    pctc_ind = cheapr::factor_(pctc_ind),\n    glob_days = cheapr::factor_(glob_days),\n    mult_proc = cheapr::factor_(mult_proc),\n    bilat_surg = cheapr::factor_(bilat_surg),\n    asst_surg = cheapr::factor_(asst_surg),\n    co_surg = cheapr::factor_(co_surg),\n    team_surg = cheapr::factor_(team_surg),\n    physician_supervision_of_diagnostic_procedures = cheapr::factor_(physician_supervision_of_diagnostic_procedures),\n    diagnostic_imaging_family_indicator = cheapr::factor_(diagnostic_imaging_family_indicator),\n    )\n\nover &lt;- cheapr::overview(rvu24a, hist = TRUE)\n\nhcpcs_row &lt;- over$categorical |&gt; \n  dplyr::select(variable = col, value = n_unique) |&gt; \n  dplyr::filter(variable == \"hcpcs\")"
  },
  {
    "objectID": "posts/mpfs/mpfs.html#indicators",
    "href": "posts/mpfs/mpfs.html#indicators",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "dplyr::left_join(\n  vars |&gt; dplyr::filter(!is.na(value)),\n  dplyr::tibble(\n    variable = names(idx[collapse::funique(vars$variable)]),\n    description = idx[collapse::funique(vars$variable)]),\n  by = dplyr::join_by(variable)\n  ) |&gt; \n  fuimus::combine(\n    name = variable, \n    columns = c('variable', 'description'), \n    sep = \"&lt;br&gt;&lt;br&gt;\"\n    ) |&gt;\n  dplyr::add_row(\n    variable = toupper(hcpcs_row$variable),\n    value = as.character(format(hcpcs_row$value, big.mark = \",\")),\n    n = 18499,\n    pct = 1.0,\n    .before = 1\n    ) |&gt; \n  gt::gt(\n    groupname_col = \"variable\",\n    # rowname_col = \"value\",\n    row_group_as_column = TRUE,\n    process_md = TRUE) |&gt; \n  gt::tab_stubhead(label = \"Variable\") |&gt; \n  gt::cols_label(\n    value = \"Unique\\nValues\",\n    n = \"Total\",\n    pct = \"Percentage\"\n    ) |&gt;\n  gt::fmt_percent(columns = pct) |&gt; \n  gt::fmt_integer(columns = n) |&gt;\n  gt::opt_table_font(font = gt::google_font(name = \"Recursive\")) |&gt; \n  gt::opt_all_caps() |&gt; \n  gt::tab_options(\n    heading.align = \"left\",\n    heading.border.bottom.color = \"#4758AB\",\n    heading.title.font.weight = \"bold\",\n    heading.background.color = \"#4758AB\", # \"#f8f9fa\",\n    quarto.disable_processing = TRUE,\n    data_row.padding.horizontal = gt::px(20),\n    column_labels.padding.horizontal = gt::px(20),\n    table.border.top.color = \"#4758AB\",\n    table.width = gt::pct(100),\n    column_labels.hidden = FALSE,\n    # stub.font.weight = \"bold\",\n    # stub_row_group.font.weight = \"bold\",\n    column_labels.font.weight = \"bold\"\n  )\n\n\n\n\n\nVariable\n      Unique\nValues\n      Total\n      Percentage\n    \n\n\nHCPCS\n16,324\n18,499\n100.00%\n\n\nMODFor diagnostic tests, a blank in this field denotes the global service and the following modifiers identify the components:26 = Professional componentTC = Technical component For services other than those with a professional and/or technical component, a blank will appear in this field with one exception: the presence of CPT modifier -53 indicates that separate RVUs and a fee schedule amount have been established for procedures which the physician terminated before completion. This modifier is used only with colonoscopy CPT codes 44388 and 45378, or with G0105 and G0121. Any other codes billed with modifier -53 are subject to carrier medical review and priced by individual consideration.53 = Discontinued Procedure - Under certain circumstances, the physician may elect to terminate a surgical or diagnostic procedure. Due to extenuating circumstances, or those that threaten the well being of the patient, it may be necessary to indicate that a surgical or diagnostic procedure was started but discontinued.\n26\n1,096\n5.92%\n\n\nTC\n1,076\n5.82%\n\n\n53\n4\n0.02%\n\n\nSTATUS CODEIndicates whether the code is in the fee schedule and whether it is separately payable if the service is covered. Only RVUs associated with status codes of A, R, or T, are used for Medicare payment.\nA\n8,975\n48.52%\n\n\nX\n2,527\n13.66%\n\n\nI\n1,411\n7.63%\n\n\nE\n1,343\n7.26%\n\n\nM\n1,201\n6.49%\n\n\nC\n1,156\n6.25%\n\n\nR\n1,050\n5.68%\n\n\nN\n327\n1.77%\n\n\nJ\n276\n1.49%\n\n\nP\n142\n0.77%\n\n\nB\n83\n0.45%\n\n\nT\n8\n0.04%\n\n\nNOT USED FOR MEDICARE PAYMENTThe name says it all\n+\n133\n0.72%\n\n\nNON FAC INDICATORAn NA in this field indicates that this procedure is rarely or never performed in the non-facility setting.\nNA\n4,066\n21.98%\n\n\nFACILITY INDICATORAn NA in this field indicates that this procedure is rarely or never performed in the facility setting.\nNA\n2,468\n13.34%\n\n\nPCTC INDProfessional Component (PC) or Technical Component (TC) Indicator\n9\n7,704\n41.65%\n\n\n0\n7,128\n38.53%\n\n\n1\n3,229\n17.45%\n\n\n3\n178\n0.96%\n\n\n5\n104\n0.56%\n\n\n7\n74\n0.40%\n\n\n2\n44\n0.24%\n\n\n6\n20\n0.11%\n\n\n4\n17\n0.09%\n\n\n8\n1\n0.01%\n\n\nGLOB DAYSGlobal Surgery postoperative timeframes that apply to payment for each surgical procedure or another indicator that describes how the global concept applies to the service.\nXXX\n11,262\n60.88%\n\n\n090\n3,771\n20.38%\n\n\n000\n1,326\n7.17%\n\n\nYYY\n933\n5.04%\n\n\nZZZ\n719\n3.89%\n\n\n010\n471\n2.55%\n\n\nMMM\n17\n0.09%\n\n\nMULT PROCMultiple Procedure (CPT Modifier 51) indicator shows which payment adjustment rule for multiple procedures applies to the service.\n9\n7,876\n42.58%\n\n\n2\n5,287\n28.58%\n\n\n0\n4,044\n21.86%\n\n\n4\n420\n2.27%\n\n\n3\n361\n1.95%\n\n\n6\n361\n1.95%\n\n\n7\n98\n0.53%\n\n\n5\n52\n0.28%\n\n\nBILAT SURGBilateral Surgery Indicator (CPT Modifier 50) for services subject to a payment adjustment.\n9\n7,892\n42.66%\n\n\n0\n7,784\n42.08%\n\n\n1\n2,203\n11.91%\n\n\n2\n383\n2.07%\n\n\n3\n237\n1.28%\n\n\nASST SURGAssistant at Surgery (Modifiers AS, 80, 81, and 82) indicator for services where Medicare never pays an assistant at surgery.\n9\n7,940\n42.92%\n\n\n0\n5,595\n30.24%\n\n\n2\n2,781\n15.03%\n\n\n1\n2,183\n11.80%\n\n\nCO SURGCo-Surgeons (Modifier 62) This field gives an indicator for services for which Medicare may pay 2 surgeons, each in a different specialty.\n9\n7,885\n42.62%\n\n\n0\n7,839\n42.38%\n\n\n1\n2,474\n13.37%\n\n\n2\n301\n1.63%\n\n\nTEAM SURGTeam Surgeons (Modifier 66) This field gives an indicator for services for which Medicare may pay team surgeons.\n0\n10,430\n56.38%\n\n\n9\n7,885\n42.62%\n\n\n1\n133\n0.72%\n\n\n2\n51\n0.28%\n\n\nENDO BASEEndoscopic Base Code for each code with a multiple surgery indicator of 3.\n52000\n44\n0.24%\n\n\n31231\n30\n0.16%\n\n\n43235\n30\n0.16%\n\n\n31622\n20\n0.11%\n\n\n43200\n18\n0.10%\n\n\n49320\n18\n0.10%\n\n\n29870\n15\n0.08%\n\n\n45330\n14\n0.08%\n\n\n45378\n14\n0.08%\n\n\n44388\n13\n0.07%\n\n\n29805\n11\n0.06%\n\n\n43260\n10\n0.05%\n\n\n45300\n10\n0.05%\n\n\n46600\n10\n0.05%\n\n\n44360\n9\n0.05%\n\n\n31525\n8\n0.04%\n\n\n31575\n8\n0.04%\n\n\n31526\n7\n0.04%\n\n\n52351\n7\n0.04%\n\n\n58555\n7\n0.04%\n\n\n29860\n6\n0.03%\n\n\n29830\n5\n0.03%\n\n\n29840\n5\n0.03%\n\n\n43191\n5\n0.03%\n\n\n50570\n5\n0.03%\n\n\n57452\n5\n0.03%\n\n\n31505\n4\n0.02%\n\n\n47552\n4\n0.02%\n\n\n50951\n4\n0.02%\n\n\n44376\n3\n0.02%\n\n\n44380\n3\n0.02%\n\n\n50551\n3\n0.02%\n\n\n0652T\n2\n0.01%\n\n\n50970\n2\n0.01%\n\n\n43197\n1\n0.01%\n\n\n66710\n1\n0.01%\n\n\nPHYSICIAN SUPERVISION OF DIAGNOSTIC PROCEDURESMedicare uses this field in post payment review.\n09\n17,465\n94.41%\n\n\n01\n533\n2.88%\n\n\n02\n249\n1.35%\n\n\n03\n207\n1.12%\n\n\n04\n16\n0.09%\n\n\n6A\n13\n0.07%\n\n\n7A\n9\n0.05%\n\n\n21\n5\n0.03%\n\n\n05\n1\n0.01%\n\n\n66\n1\n0.01%\n\n\nDIAGNOSTIC IMAGING FAMILY INDICATORIdentifies the applicable Diagnostic Service family for HCPCS codes with a Multiple Procedure indicator of 4. For services effective January 1, 2011, and after, family indicators 01 - 11 won’t populate.\n99\n18,055\n97.60%\n\n\n88\n444\n2.40%\n\n\n\n\n\n\n\nover$numeric |&gt; \n  dplyr::select(\n    variable = col, \n    unique = n_unique,\n    # min = p0, \n    # p25,\n    # median = p50,\n    p75,\n    max = p100,\n    iqr, \n    mean,\n    sd,\n    hist\n    ) |&gt;\n  gt::gt(\n    groupname_col = \"variable\",\n    row_group_as_column = TRUE,\n    process_md = TRUE) |&gt; \n  gt::fmt_integer(columns = unique) |&gt;\n  gt::fmt_number(columns = p75:sd) |&gt;\n  gt::opt_table_font(font = gt::google_font(name = \"Recursive\")) |&gt; \n  gt::tab_options(\n    heading.align = \"left\",\n    heading.border.bottom.color = \"#4758AB\",\n    heading.title.font.weight = \"bold\",\n    heading.background.color = \"#4758AB\", # \"#f8f9fa\",\n    quarto.disable_processing = TRUE,\n    data_row.padding.horizontal = gt::px(20),\n    column_labels.padding.horizontal = gt::px(20),\n    table.border.top.color = \"#4758AB\",\n    table.width = gt::pct(100),\n    column_labels.hidden = FALSE\n  )\n\n\n\n\n\n\n      unique\n      p75\n      max\n      iqr\n      mean\n      sd\n      hist\n    \n\n\nwork_rvu\n2,486\n3.21\n108.91\n3.21\n3.88\n8.51\n▇▁▁▁▁\n\n\nnon_fac_pe_rvu\n2,310\n5.35\n355.87\n5.35\n4.01\n10.52\n▇▁▁▁▁\n\n\nfacility_pe_rvu\n2,079\n3.66\n53.07\n3.66\n3.03\n5.60\n▇▁▁▁▁\n\n\nmp_rvu\n1,026\n0.43\n28.99\n0.43\n0.83\n2.20\n▇▁▁▁▁\n\n\nnon_facility_total\n3,877\n9.79\n364.53\n9.79\n8.71\n18.07\n▇▁▁▁▁\n\n\nfacility_total\n3,683\n7.50\n171.00\n7.50\n7.74\n15.57\n▇▁▁▁▁\n\n\npre_op\n8\n0.00\n0.17\n0.00\n0.02\n0.04\n▇▁▂▁▁\n\n\nintra_op\n14\n0.00\n0.84\n0.00\n0.17\n0.32\n▇▁▁▁▂\n\n\npost_op\n11\n0.00\n0.23\n0.00\n0.03\n0.07\n▇▁▁▁▁\n\n\nconv_factor\n1\n32.74\n32.74\n0.00\n32.74\n0.00\n▁▁▇▁▁\n\n\nnon_facility_pe_used_for_opps_payment_amount\n417\n0.00\n159.54\n0.00\n0.90\n7.15\n▇▁▁▁▁\n\n\nfacility_pe_used_for_opps_payment_amount\n417\n0.00\n159.54\n0.00\n0.90\n7.15\n▇▁▁▁▁\n\n\nmp_used_for_opps_payment_amount\n81\n0.00\n1.83\n0.00\n0.01\n0.06\n▇▁▁▁▁"
  },
  {
    "objectID": "posts/mpfs/mpfs.html#pprvu",
    "href": "posts/mpfs/mpfs.html#pprvu",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "The MPFS is a listing of the relative value units (RVUs) for each CPT code, as well as the geographic practice cost index (GPCI) for each code. The RVUs are used to calculate the payment amount for each service, while the GPCI is used to adjust the payment amount based on the location where the service is provided.\nThis file contains information on services covered by the MPFS in 2024. For more than 10,000 physician services, the file contains the associated RVUs, a fee schedule status indicator, and various payment policy indicators needed for payment adjustment (i.e., payment of assistant at surgery, team surgery, bilateral surgery, etc.).\nThe MPFS amounts are adjusted to reflect the variation in practice costs from area to area. A GPCI has been established for every Medicare payment locality for each of the three components of a procedure’s RVU:\n\nPhysician Work\nPractice Expense\nMalpractice Expense (sometimes called Professional Liability Insurance)\n\nThe GPCIs are applied in the calculation of a fee schedule payment amount by multiplying the RVU for each component times the GPCI for that component.\n\n x = [(RVU_w \\times GPCI_w) + (RVU_p \\times GPCI_p) + (RVU_m \\times GPCI_m)] \\times CF \n\n y = 0.95x \n\n z = 0.95(1.15x) \n\n\n\n\n\n\nMany Ways to Say the Same Thing\n\n\n\n\nAs there is a corresponding GPCI value for each of the three components of an RVU, the formula is essentially the dot product of the RVU and GPCI vectors, multiplied by the conversion factor:\n\n a \\cdot b = a_1b_1 + a_2b_2 + a_3b_3 \nSetting up the variables:\n\nwrvu  = 6.26   # Work RVU\nwgpci = 1      # Work GPCI\n\npgpci = 0.883  # Practice GPCI\nprvu  = 4.36   # Practice RVU\n\nmrvu  = 0.99   # Malpractice RVU\nmgpci = 1.125  # Malpractice GPCI\n\ncf    = 32.744 # Conversion Factor\n\n\nBasic Calculation:\n\n((wrvu * wgpci) + \n   (prvu * pgpci) + \n   (mrvu * mgpci)) * cf\n\n[1] 367.5065\n\n\n\nWith base R’s Matrix Multiplication Infix Operator:\n\nas.vector(\n  c(wrvu, prvu, mrvu) %*% \n  c(wgpci, pgpci, mgpci) * cf)\n\n[1] 367.5065\n\n\n\nWith the pracma package’s dot() function:\n\npracma::dot(\n  c(wrvu, prvu, mrvu), \n  c(wgpci, pgpci, mgpci)) * cf\n\n[1] 367.5065\n\n\n\nWith the northstar package’s calculate_amounts() function:\n\ncalculate_amounts(\n  wrvu  = 6.26,\n  nprvu = 7.92,\n  fprvu = 4.36,\n  mrvu  = 0.99,\n  cf    = 32.744,\n  wgpci = 1,\n  pgpci = 0.883,\n  mgpci = 1.125\n)\n\nFacility Amounts:\n\nRVU Total ............ 11.22\nParticipating ........ $367.51\nNon-Particpating ..... $349.13\nLimiting Charge ...... $401.50\n\nNon-Facility Amounts:\n\nRVU Total ............ 14.37\nParticipating ........ $470.44\nNon-Particpating ..... $446.91\nLimiting Charge ...... $513.95\n\n\n\n\n\n\n\n\n\n\nNon-Facility vs. Facility\n\n\n\nUnder the MPFS, many procedures have separate payment amounts for physician services when provided in facility and non-facility settings.\nThe amount is determined by the Place of Service (POS) code. In general, the POS code reflects the actual place where the patient receives the face-to-face service and determines whether the facility or non-facility payment rate is paid.\nServices rendered to a patient who is an inpatient of a hospital (POS code 21) or an outpatient of a hospital (POS codes 19 or 22), the facility rate is paid, regardless of where the face-to-face encounter with the patient occurred.\n\n\n\n\n\n\n\n\n\nTherapy Code Capitation\n\n\n\nCertain therapy codes will receive a 50% reduction to the Practice Expense.\nSection 5102(b) of the Deficit Reduction Act of 2005 requires a payment cap on the Technical Component (TC) of certain diagnostic imaging procedures and the TC portions of the global diagnostic imaging services.\nThis cap is based on the Outpatient Prospective Payment System (OPPS) payment. To implement this provision, the Physician Fee Schedule amount is compared to the OPPS payment amount and the lower amount is used in the formula to calculate payment."
  },
  {
    "objectID": "posts/mpfs/mpfs.html#accepting-assignment",
    "href": "posts/mpfs/mpfs.html#accepting-assignment",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "Accepting assignment means that a healthcare provider or facility is partnered with Medicare and is required by law to charge only the Medicare-approved amount for various services. This amount is preset by Medicare and is often less than many healthcare facilities would charge.\nBecause of this, when patients receive care at a facility that accepts assignment, they will be required to pay lower out-of-pocket costs as Medicare will cover the full amount of the service cost. Personal costs only include the premium and any charges up to the deductible amount.\nPhysicians or facilities that do not accept assignment are a non-participating providers. All physicians are required to file with Medicare, indicating that they either accept or do not accept assignment. If a provider does not accept assignment, it means that they are not required to charge only the Medicare-approved amount for services.\n\nOne possible option for non-participating providers is to choose to accept assignment for some services but to decline assignment for others. For services that they accept assignment for, they are only able to bill the Medicare-approved amount. However, for other services, they are allowed to charge up to 15 percent more than the Medicare-approved amount.\nThis limit cap is known as the limiting charge. Providers that do not fully participate only receive 95 percent of the Medicare-approved amount when Medicare reimburses them for the cost of care. In turn, the provider can charge the patient up to 15 percent more than this reimbursement amount. This extra charge will not be covered by Medicare, which causes Medicare recipients to incur greater out-of-pocket costs.\nThe Medicare limiting charge is the maximum amount a Non-Participating Provider can charge for services submitted on a non-assigned claim. This is that maximum amount a beneficiary could legally be charged.\n\nThe Medicare limiting charge is, by law, set at 115\\% of the payment amount for the service furnished by the Non-Participating Physician.\nHowever, the law sets the payment amount for Non-Participating Physicians at 95\\% of the payment amount for Participating Physicians (i.e., the Fee Schedule amount).\nCalculating 95\\% of 115\\% of an amount, x, is equivalent to x \\times 1.0925 (or 109.25\\%):\n\n# 95% of 115% of 10\n(10 * 1.15) * 0.95 \n\n[1] 10.925\n\n# 109.25% of 10\n10 * 1.0925 \n\n[1] 10.925\n\n# using the northstar package\nlimiting_charge(10)\n\n[1] 10.925"
  },
  {
    "objectID": "posts/mpfs/mpfs.html#relative-value-file",
    "href": "posts/mpfs/mpfs.html#relative-value-file",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "This file contains information on services covered by the Medicare Physician Fee Schedule (MPFS). For more than 10,000 physician services, the file contains the associated relative value units (RVUs), a fee schedule status indicator, and various payment policy indicators needed for payment adjustment (i.e., payment of assistant at surgery, team surgery, bilateral surgery, etc.).\nThe Medicare physician fee schedule amounts are adjusted to reflect the variation in practice costs from area to area. A geographic practice cost index (GPCI) has been established for every Medicare payment locality for each of the three components of a procedure’s relative value unit (i.e., the RVUs for work, practice expense, and malpractice). The GPCIs are applied in the calculation of a fee schedule payment amount by multiplying the RVU for each component times the GPCI for that component.\n\n\nIndicates whether the code is in the fee schedule and whether it is separately payable if the service is covered. See Attachment A for description of values.\nOnly RVUs associated with status codes of A, R, or T, are used for Medicare payment."
  },
  {
    "objectID": "posts/mpfs/mpfs.html#global-surgery-days",
    "href": "posts/mpfs/mpfs.html#global-surgery-days",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "Provides time frames that apply to each surgical procedure.\n\n\n\nPreoperative\nIntraoperative\nPostoperative"
  },
  {
    "objectID": "posts/mpfs/mpfs.html#indicators-1",
    "href": "posts/mpfs/mpfs.html#indicators-1",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "Facility\nNon-Facility\n\n\n\nAn NA in this field indicates that this procedure is rarely or never performed in the Facility setting:\n\n\nAn NA in this field indicates that this procedure is rarely or never performed in the Non-Facility setting:\n\n\n\n\nIndicates applicable payment adjustment rule for multiple procedures (modifier 51)."
  },
  {
    "objectID": "posts/percent/percent.html",
    "href": "posts/percent/percent.html",
    "title": "100%",
    "section": "",
    "text": "Percent Changes (%ΔX). Let me preface what I have to say about percent changes by saying that–other than being a clue that a percent change or a ratio expressed as a percentage lurks somewhere close–I view the % sign as being equivalent to 1/100. So, for example, 23% is just another name for .23, and 100% is just another name for 1. Indeed, economists are just as likely to say “with probability 1” as they are to say “with a 100% probability.”\nIt turns out that natural logarithms (“ln” or “log”) are the perfect way to think about percent changes. Suppose a variable X has a “before” and an “after” value.\n\nI want to take the point of view that the change in the natural logarithm is the pure, Platonic percent change between before and after. It is calculated as the natural logarithm of Xafter minus the natural logarithm of Xbefore.\nI will call the ordinary notion of percent change the earthly percent change. It is calculated as the change divided by the starting value, (Xafter - Xbefore)/Xbefore.\nIn between these two concepts is the midpoint percent change. It is calculated as the change divided by the average of the starting and ending values: ( new - old ) / (( new + old ) / 2 )\n\n\nplatonic_change = \\(old, new) {\n  log(new) - log(old)\n}\n\nearthly_change = \\(old, new) {\n  (new - old) / old\n}\n\nmidpoint_change = \\(old, new) {\n  (new - old) / ((new + old) / 2)\n}\n\nplatonic_change(old = 1, new = 5) * 100\n\n[1] 160.9438\n\nmidpoint_change(old = 1, new = 5) * 100\n\n[1] 133.3333\n\nearthly_change(old = 1, new = 5) * 100\n\n[1] 400\n\n\nFormally, that’s because of these limits: lim_{x rightarrow infty} {(x-1) over {(x+1)/2}} = 2\nlim_{x rightarrow infty} {(0-x) over {(x+0)/2}} = -2\nBelow is a table showing the relationship between Platonic percent changes, midpoint percent changes and earthly percent changes. In financial terms, one can think of earthly percentage changes as “continuously compounded” versions of Platonic percent changes:\n\nex &lt;- dplyr::tibble(\n  platonic = pct$platonic,\n  midpoint = 200 * (exp(platonic / 100) - 1) / (exp(platonic / 100) + 1),\n  earthly = 100 * exp(platonic / 100) - 100,\n  ratio = exp(platonic / 100)\n)\n\nex |&gt; \n  filter(platonic &gt;= 0) |&gt; \n  print(n = 20)\n\n# A tibble: 19 × 4\n   platonic midpoint earthly ratio\n      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1        0     0       0     1   \n 2        5     5.00    5.13  1.05\n 3       10     9.99   10.5   1.11\n 4       15    15.0    16.2   1.16\n 5       20    19.9    22.1   1.22\n 6       25    24.9    28.4   1.28\n 7       30    29.8    35.0   1.35\n 8       40    39.5    49.2   1.49\n 9       50    49.0    64.9   1.65\n10       60    58.3    82.2   1.82\n11       70    67.3   101.    2.01\n12       80    76.0   123.    2.23\n13       90    84.4   146.    2.46\n14      100    92.4   172.    2.72\n15      140   121.    306.    4.06\n16      210   156.    717.    8.17\n17      280   177.   1544.   16.4 \n18      350   188.   3212.   33.1 \n19      420   194.   6569.   66.7 \n\n\nThere are at least two things to point out in this table:\n\nWhen the percent changes are small, all three concepts are fairly close, but the midpoint percent change is much closer to the Platonic (logarithmic) percent change.\nA 70% Platonic percent change is very close to being a doubling–which would be a 100% earthly percent change. This is where the “rule of 70” comes from. The rule of 70 is a reflection of the natural logarithm of 2 being equal to approximately .7 = 70%. Similarly, a 140% Platonic percent change is basically two doublings–that is, it is close to multiplying X by a factor of 4; and a 210% Platonic percent change is basically three doublings–that is, it is close to multiplying X by a factor of 8.\n\nLet’s look at negative percent changes as well. Here is the table for how the different concepts of negative percent changes compare:\n\nex |&gt; \n  filter(platonic &lt;= 0) |&gt; \n  arrange(desc(platonic)) |&gt;\n  print(n = 20)\n\n# A tibble: 19 × 4\n   platonic midpoint earthly  ratio\n      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n 1        0     0       0    1     \n 2       -5    -5.00   -4.88 0.951 \n 3      -10    -9.99   -9.52 0.905 \n 4      -15   -15.0   -13.9  0.861 \n 5      -20   -19.9   -18.1  0.819 \n 6      -25   -24.9   -22.1  0.779 \n 7      -30   -29.8   -25.9  0.741 \n 8      -40   -39.5   -33.0  0.670 \n 9      -50   -49.0   -39.3  0.607 \n10      -60   -58.3   -45.1  0.549 \n11      -70   -67.3   -50.3  0.497 \n12      -80   -76.0   -55.1  0.449 \n13      -90   -84.4   -59.3  0.407 \n14     -100   -92.4   -63.2  0.368 \n15     -140  -121.    -75.3  0.247 \n16     -210  -156.    -87.8  0.122 \n17     -280  -177.    -93.9  0.0608\n18     -350  -188.    -97.0  0.0302\n19     -420  -194.    -98.5  0.0150\n\n\nA key point to make is that with both Platonic (logarithmic) percent changes and midpoint percent changes, equal sized changes of opposite direction cancel each other out. For example, a +50% Platonic percent change, followed by a -50% Platonic percent change, would leave things back where they started. This is true for a +50% midpoint percent change, followed by a -50% midpoint percent change. But, starting from X, a 50% earthly percent change leads to 1.5 X. Following that by a -50% earthly percent change leads to a result of .75 X, which is not at all where things started. This is a very ugly feature of earthly percent changes. That ugliness is one good reason to rise up to the Platonic level, or at least the midpoint level.\nContinuous-Time Growth Rates. There are many wonderful things about Platonic percent changes that I can’t go into without breaking my resolve to keep the equation count down. But one of the most wonderful is that to find a growth rate one only has to divide by the time that has elapsed between Xbefore and Xafter. That is, as long as one is using the Platonic percent change %ΔX=log(Xafter)-log(Xbefore),\n%ΔX / [time elapsed] = growth rate.\nThe growth rate here is technically called a “continuous-time growth rate.” The continuous-time growth rate is not only very useful, it is a thing of great beauty.\nUpdate on How the Different Concepts of Percent Change Relate to Each Other. One of my students asked about how the different percent change concepts relate to each other. For that, I need some equations. And I need “exp” which is the opposite of the natural logarithm “log.” Taking the function exp(X) is the same as taking e, (a number that is famous among mathematicians and equal to 2.718…) to the power X. For the equations below, it is crucial to treat % as another name for 1/100, so that, for example, 5% is the same thing as .05.\nEarthly percent changes are the most familiar. Almost anyone other than an economist who talks about percent changes is talking about earthly percent changes. Most of you learned about earthly percent changes in elementary school. So let me first write down how to get from the earthly percent change to the Platonic and midpoint percent changes. (I won’t try to prove these equations here, just state them.)\n\nearthly_to_platonic = \\(earthly) log(1 + earthly)\n\nearthly_to_midpoint = \\(earthly) (2 * earthly) / (2 + earthly)\n\nIf you are trying to figure out the effects of continuously compounded interest, or the effects of some other continuous-time growth rate, you will want to be able go from Platonic percent changes–which come straight from multiplying the growth rate by the amount of elapsed time–to earthly percent changes. For good measure, I will include the formula for midpoint percent changes as well:\n\nplatonic_to_earthly = \\(platonic) exp(platonic) - 1\n\nplatonic_to_midpoint = \\(platonic) (2 * (exp(platonic) - 1)) / (exp(platonic) + 1)\n\nI found the function giving the midpoint percent change as a function of the Platonic percent change quite intriguing. For one thing, when I changed signs and put “-Platonic” in the place where you see “Platonic” on the right-hand side of the equation the result equal to -midpoint. When switching the sign of the argument (the inside thing: Platonic) just switches the sign of the overall expression, mathematicians call it an “odd” function (“odd” as in “odd and even” not “odd” as in “strange”). The meaning of this function being odd is that Platonic and midpoint percent changes map into each other the same way for negative changes as for positive changes. (That isn’t true at all for the earthly percent changes.) The other intriguing thing about the function giving the midpoint percent change as a function of the Platonic percent change is how close it is to giving back the same number. To a fourth-order (the squared term and the fourth power term are zero), the approximation for the function is this:\n\n# midpoint = platonic - (platonic^3 / 12) + (5th power and higher terms)\n\nmidpoint_to_earthly = \\(midpoint) (2 * midpoint) / (2 - midpoint)\n\nmidpoint_to_platonic = \\(midpoint) log(2 + midpoint) - log(2 - midpoint)\n\nmidpoint_to_platonic2 = \\(midpoint) log(1 + (midpoint / 2)) - log(1 - (midpoint / 2))\n\n\n\n1 Session Information\n\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n bit           4.5.0   2024-09-20 [1] RSPM (R 4.4.0)\n bit64         4.5.2   2024-09-22 [1] RSPM (R 4.4.0)\n cli           3.6.3   2024-06-21 [1] RSPM (R 4.4.0)\n colorspace    2.1-1   2024-07-26 [1] RSPM (R 4.4.0)\n crayon        1.5.3   2024-06-20 [1] RSPM (R 4.4.0)\n digest        0.6.37  2024-08-19 [1] RSPM (R 4.4.0)\n dplyr       * 1.1.4   2023-11-17 [1] RSPM (R 4.4.0)\n evaluate      1.0.1   2024-10-10 [1] RSPM (R 4.4.0)\n fansi         1.0.6   2023-12-08 [1] RSPM (R 4.4.0)\n fastmap       1.2.0   2024-05-15 [1] RSPM (R 4.4.0)\n forcats     * 1.0.0   2023-01-29 [1] RSPM (R 4.4.0)\n fuimus      * 0.0.2   2024-10-15 [1] local\n generics      0.1.3   2022-07-05 [1] RSPM (R 4.4.0)\n ggplot2     * 3.5.1   2024-04-23 [1] RSPM (R 4.4.0)\n glue          1.8.0   2024-09-30 [1] RSPM (R 4.4.0)\n gtable        0.3.5   2024-04-22 [1] RSPM (R 4.4.0)\n here        * 1.0.1   2020-12-13 [1] RSPM (R 4.4.0)\n hms           1.1.3   2023-03-21 [1] RSPM (R 4.4.0)\n htmltools     0.5.8.1 2024-04-04 [1] RSPM (R 4.4.0)\n htmlwidgets   1.6.4   2023-12-06 [1] RSPM (R 4.4.0)\n jsonlite      1.8.9   2024-09-20 [1] RSPM (R 4.4.0)\n knitr         1.48    2024-07-07 [1] CRAN (R 4.4.1)\n lifecycle     1.0.4   2023-11-07 [1] RSPM (R 4.4.0)\n lubridate   * 1.9.3   2023-09-27 [1] RSPM (R 4.4.0)\n magrittr      2.0.3   2022-03-30 [1] RSPM (R 4.4.0)\n munsell       0.5.1   2024-04-01 [1] RSPM (R 4.4.0)\n pillar        1.9.0   2023-03-22 [1] RSPM (R 4.4.0)\n pkgconfig     2.0.3   2019-09-22 [1] RSPM (R 4.4.0)\n purrr       * 1.0.2   2023-08-10 [1] RSPM (R 4.4.0)\n R6            2.5.1   2021-08-19 [1] RSPM (R 4.4.0)\n ragg          1.3.3   2024-09-11 [1] RSPM (R 4.4.0)\n readr       * 2.1.5   2024-01-10 [1] RSPM (R 4.4.0)\n rlang         1.1.4   2024-06-04 [1] RSPM (R 4.4.0)\n rmarkdown     2.28    2024-08-17 [1] CRAN (R 4.4.1)\n rprojroot     2.0.4   2023-11-05 [1] RSPM (R 4.4.0)\n rstudioapi    0.17.0  2024-10-16 [1] RSPM (R 4.4.0)\n scales        1.3.0   2023-11-28 [1] RSPM (R 4.4.0)\n sessioninfo   1.2.2   2021-12-06 [1] RSPM (R 4.4.0)\n stringi       1.8.4   2024-05-06 [1] RSPM (R 4.4.0)\n stringr     * 1.5.1   2023-11-14 [1] RSPM (R 4.4.0)\n systemfonts   1.1.0   2024-05-15 [1] RSPM (R 4.4.0)\n textshaping   0.4.0   2024-05-24 [1] RSPM (R 4.4.0)\n tibble      * 3.2.1   2023-03-20 [1] RSPM (R 4.4.0)\n tidyr       * 1.3.1   2024-01-24 [1] RSPM (R 4.4.0)\n tidyselect    1.2.1   2024-03-11 [1] RSPM (R 4.4.0)\n tidyverse   * 2.0.0   2023-02-22 [1] RSPM (R 4.4.0)\n timechange    0.3.0   2024-01-18 [1] RSPM (R 4.4.0)\n tzdb          0.4.0   2023-05-12 [1] RSPM (R 4.4.0)\n utf8          1.2.4   2023-10-22 [1] RSPM (R 4.4.0)\n vctrs         0.6.5   2023-12-01 [1] RSPM (R 4.4.0)\n vroom         1.6.5   2023-12-05 [1] RSPM (R 4.4.0)\n withr         3.0.1   2024-07-31 [1] RSPM (R 4.4.0)\n xfun          0.48    2024-10-03 [1] RSPM (R 4.4.0)\n yaml          2.3.10  2024-07-26 [1] RSPM (R 4.4.0)\n\n [1] C:/Users/Andrew/AppData/Local/R/win-library/4.4\n [2] C:/Program Files/R/R-4.4.1/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/rules/claims_rules.html",
    "href": "posts/rules/claims_rules.html",
    "title": "Building Claims Rules",
    "section": "",
    "text": "To build a composable, portable, and extensible healthcare claims rules engine. The engine will be used to evaluate claims data for compliance with a set of rules. The rules will be defined in a structured format and will be evaluated using R code, but should be general enough to be easily translated to another language. The goal is to create a flexible and extensible system that can be used to evaluate claims data in a variety of scenarios, pre- or post.\n\n\nqueryBuilder\nhealthdb"
  },
  {
    "objectID": "posts/rules/claims_rules.html#similar-work",
    "href": "posts/rules/claims_rules.html#similar-work",
    "title": "Building Claims Rules",
    "section": "",
    "text": "queryBuilder\nhealthdb"
  },
  {
    "objectID": "posts/rules/claims_rules.html#s7-classes",
    "href": "posts/rules/claims_rules.html#s7-classes",
    "title": "Building Claims Rules",
    "section": "\n4.1 S7 Classes",
    "text": "4.1 S7 Classes\n\n\nStep\nRule\nVariable\n\n\n\n\nstep &lt;- S7::new_class(\n  name = \"step\",\n  package = \"crules\",\n  properties = list(\n    order = S7::class_integer,\n    variable = S7::class_character,\n    value = S7::new_property(class = S7::class_any)\n    ),\n  validator = function(self) {\n    if (length(self@order) != 1)    return(\"@order must be length 1\")\n    if (length(self@variable) != 1) return(\"@variable must be length 1\")\n  })\n\nstep(order = 1L, \n     variable = \"dos\", \n     value = \"2024-08-04\")\n\n&lt;crules::step&gt;\n @ order   : int 1\n @ variable: chr \"dos\"\n @ value   : chr \"2024-08-04\"\n\n\n\n\n\nrule &lt;- S7::new_class(\n  name = \"rule\",\n  package = \"crules\",\n  properties = list(\n    index = S7::class_numeric,\n    identifier = S7::class_character,\n    category = S7::class_character,\n    definition = S7::class_character,\n    rationale = S7::class_character,\n    alert = S7::class_character,\n    timestamp = S7::new_property(\n      class = S7::class_Date,\n      getter = function(self) clock::date_now(zone = \"\")),\n    steps = S7::class_list\n    )\n  )\n\nrule\n\n&lt;crules::rule&gt; class\n@ parent     : &lt;S7_object&gt;\n@ constructor: function(index, identifier, category, definition, rationale, alert, steps) {...}\n@ validator  : &lt;NULL&gt;\n@ properties :\n $ index     : &lt;integer&gt; or &lt;double&gt;\n $ identifier: &lt;character&gt;          \n $ category  : &lt;character&gt;          \n $ definition: &lt;character&gt;          \n $ rationale : &lt;character&gt;          \n $ alert     : &lt;character&gt;          \n $ timestamp : S3&lt;Date&gt;             \n $ steps     : &lt;list&gt;               \n\nrule(\n  index = 1L,\n  identifier = \"HCPCS:EXP:001\",\n  category = \"Invalid HCPCS\",\n  definition = \"&lt;DOS&gt; is after [2019-01-01] AND &lt;HCPCS&gt; is [43760]\",\n  rationale = \"Effective 2019-01-01, HCPCS 43760 is invalid\",\n  alert = \"See HCPCS [43762, 43763]\")\n\n&lt;crules::rule&gt;\n @ index     : int 1\n @ identifier: chr \"HCPCS:EXP:001\"\n @ category  : chr \"Invalid HCPCS\"\n @ definition: chr \"&lt;DOS&gt; is after [2019-01-01] AND &lt;HCPCS&gt; is [43760]\"\n @ rationale : chr \"Effective 2019-01-01, HCPCS 43760 is invalid\"\n @ alert     : chr \"See HCPCS [43762, 43763]\"\n @ timestamp : POSIXct[1:1], format: \"2024-10-18 00:42:01\"\n @ steps     : list()\n\n\n\n\nPatient\n\npatient &lt;- S7::new_class(\n  name = \"patient\",\n  package = \"crules\",\n  properties = list(\n    sex = S7::class_character,\n    dos = S7::new_property(\n      class = S7::class_Date,\n      default = Sys.Date(),\n      setter = function(self, value) {\n        self@dos &lt;- as.Date(value)\n        self\n      }),\n    dob = S7::new_property(\n      class = S7::class_Date,\n      setter = function(self, value) {\n        self@dob &lt;- as.Date(value)\n        self\n      }),\n    age = S7::new_property(\n      class = S7::class_integer, \n      getter = function(self) {\n        as.integer(self@dos - self@dob)\n      })\n    ),\n  validator = function(self) {\n    if (length(self@sex) != 1)                       return(\"@sex must be length 1\")\n    if (!self@sex %in% c(\"Male\", \"Female\", \"Other\")) return(\"@sex must be Male, Female, or Other\")\n    if (length(self@dos) != 1)                       return(\"@dos must be length 1\")\n    if (length(self@dob) != 1)                       return(\"@dob must be length 1\")\n    if (length(self@age) != 1)                       return(\"@age must be length 1\")\n    if (self@dob &gt;= self@dos)                        return(\"@dob must be before @dos\")\n    if (self@age &lt;= 0)                               return(\"@age must be greater than 0 days\")\n  }\n)\n\npatient\n\n&lt;crules::patient&gt; class\n@ parent     : &lt;S7_object&gt;\n@ constructor: function(sex, dos, dob) {...}\n@ validator  : function(self) {...}\n@ properties :\n $ sex: &lt;character&gt;\n $ dos: S3&lt;Date&gt;   \n $ dob: S3&lt;Date&gt;   \n $ age: &lt;integer&gt;  \n\npatient(dob = \"2024-08-03\", \n        dos = \"2024-08-04\", \n        sex = \"Male\")\n\n&lt;crules::patient&gt;\n @ sex: chr \"Male\"\n @ dos: Date[1:1], format: \"2024-08-04\"\n @ dob: Date[1:1], format: \"2024-08-03\"\n @ age: int 1\n\npt_one &lt;- patient(\n  dob = \"2024-08-03\", \n  dos = \"2024-08-04\", \n  sex = \"Male\")\n\npt_one@dob &lt;- \"2021-07-31\"\n\npt_one\n\n&lt;crules::patient&gt;\n @ sex: chr \"Male\"\n @ dos: Date[1:1], format: \"2024-08-04\"\n @ dob: Date[1:1], format: \"2021-07-31\"\n @ age: int 1100\n\n\nPayer\n\npayer &lt;- S7::new_class(\n  name = \"payer\",\n  package = \"crules\",\n  properties = list(\n    name = S7::class_character,\n    state = S7::class_character,\n    level = S7::class_character,\n    group = S7::new_property(\n      class = S7::class_character,\n      getter = function(self) {\n        dplyr::case_match(\n          self@name,\n          \"BCBS\" ~ \"Commercial\",\n          \"Medicaid\" ~ \"Medicaid\",\n          \"Medicare\" ~ \"Medicare\",\n          \"Patient\" ~ \"Self-Pay\",\n          .default = \"Other\")\n      })\n    ),\n    validator = function(self) {\n    if (length(self@name) != 1)  return(\"@name must be length 1\")\n    if (length(self@level) != 1) return(\"@level must be length 1\")\n   }\n)\n\npayer(name = \"BCBS\", \n      level = \"Primary\", \n      state = \"TX\")\n\n&lt;crules::payer&gt;\n @ name : chr \"BCBS\"\n @ state: chr \"TX\"\n @ level: chr \"Primary\"\n @ group: chr \"Commercial\"\n\nbcbcs_tx &lt;- payer(\n  name = \"BCBS\", \n  level = \"Primary\", \n  state = \"TX\")\n\nbcbcs_tx\n\n&lt;crules::payer&gt;\n @ name : chr \"BCBS\"\n @ state: chr \"TX\"\n @ level: chr \"Primary\"\n @ group: chr \"Commercial\"\n\nbcbcs_tx@name &lt;- \"Medicaid\"\n\nbcbcs_tx\n\n&lt;crules::payer&gt;\n @ name : chr \"Medicaid\"\n @ state: chr \"TX\"\n @ level: chr \"Primary\"\n @ group: chr \"Medicaid\"\n\n\nEncounter\n\nencounter &lt;- S7::new_class(\n  name = \"encounter\",\n  package = \"crules\",\n  properties = list(\n    pos = S7::class_character,\n    referring = S7::class_character,\n    rendering = S7::class_character,\n    patient = S7::new_property(class = patient),\n    payer = S7::new_property(class = payer)\n    )\n  )\n\nenc &lt;- encounter(\n  pos = \"11\", \n  referring = \"1234567890\", \n  rendering = \"0987654321\",\n  patient(\n    dob = \"2020-08-04\", \n    dos = \"2024-08-04\", \n    sex = \"Male\"\n  ),\n  payer(\n    name = \"BCBS\", \n    level = \"Primary\", \n    state = \"TX\"))\n\nenc@patient@dob &lt;- \"2023-07-31\"\n\nenc\n\n&lt;crules::encounter&gt;\n @ pos      : chr \"11\"\n @ referring: chr \"1234567890\"\n @ rendering: chr \"0987654321\"\n @ patient  : &lt;crules::patient&gt;\n .. @ sex: chr \"Male\"\n .. @ dos: Date[1:1], format: \"2024-08-04\"\n .. @ dob: Date[1:1], format: \"2023-07-31\"\n .. @ age: int 370\n @ payer    : &lt;crules::payer&gt;\n .. @ name : chr \"BCBS\"\n .. @ state: chr \"TX\"\n .. @ level: chr \"Primary\"\n .. @ group: chr \"Commercial\"\n\n\n\n\n\n\n\nrule_001_example &lt;- dplyr::tibble(\n  dos = as.Date(c(\"2024-01-01\", \"2018-01-01\")),\n  hcpcs = as.character(c(43760, 99213))\n)\n\nrule_001_example\n\n# A tibble: 2 × 2\n  dos        hcpcs\n  &lt;date&gt;     &lt;chr&gt;\n1 2024-01-01 43760\n2 2018-01-01 99213\n\nrule_001_example2 &lt;- dplyr::tibble(\n  dos = as.Date(c(\"2017-01-01\", \"2018-01-01\", \"2019-01-01\")),\n  hcpcs = as.character(c(99213, 99213, 99213))\n)\n\nrule_001_example2\n\n# A tibble: 3 × 2\n  dos        hcpcs\n  &lt;date&gt;     &lt;chr&gt;\n1 2017-01-01 99213\n2 2018-01-01 99213\n3 2019-01-01 99213\n\nqualify_dos &lt;- function(df, dos, date) {\n  \n  arg  &lt;- rlang::caller_arg(dos)\n  call &lt;- rlang::caller_env()\n  \n  x &lt;- vctrs::vec_slice(df, df[[dos]] &gt; date)\n  \n  if (vctrs::vec_is_empty(x))  {\n    cli::cli_inform(\n      \"0 matches for {.strong {.val {rlang::sym(dos)}}} &gt; {.val {as.Date(date)}}\", \n      arg = arg,\n      call = call,\n      class = \"qualify_dos\"\n      )\n  }\n  x\n}\n\nrule_001_example |&gt; \n  qualify_dos(\"dos\", \"2019-01-01\")\n\n# A tibble: 1 × 2\n  dos        hcpcs\n  &lt;date&gt;     &lt;chr&gt;\n1 2024-01-01 43760\n\nrule_001_example2 |&gt; \n  qualify_dos(\"dos\", \"2019-01-01\")\n\n0 matches for dos &gt; 2019-01-01\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: dos &lt;date&gt;, hcpcs &lt;chr&gt;\n\nterm_hcpcs &lt;- function(df, hcpcs, code) {\n  \n  arg  &lt;- rlang::caller_arg(hcpcs)\n  call &lt;- rlang::caller_env()\n  \n  x &lt;- vctrs::vec_slice(df, df[[hcpcs]] == code)\n  \n  if (vctrs::vec_is_empty(x))  {\n    cli::cli_inform(\n      \"0 matches for {.strong {.val {rlang::sym(hcpcs)}}} == {.val {rlang::sym(code)}}\", \n      arg = arg,\n      call = call,\n      class = \"term_hcpcs\"\n      )\n  }\n  x\n}\n\nrule_001_example |&gt; \n  term_hcpcs(\"hcpcs\", \"43760\")\n\n# A tibble: 1 × 2\n  dos        hcpcs\n  &lt;date&gt;     &lt;chr&gt;\n1 2024-01-01 43760\n\nrule_001_example2 |&gt; \n  term_hcpcs(\"hcpcs\", \"43760\")\n\n0 matches for hcpcs == 43760\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: dos &lt;date&gt;, hcpcs &lt;chr&gt;\n\nrule_001_example |&gt; \n  qualify_dos(\"dos\", \"2019-01-01\") |&gt; \n  term_hcpcs(\"hcpcs\", \"43760\")\n\n# A tibble: 1 × 2\n  dos        hcpcs\n  &lt;date&gt;     &lt;chr&gt;\n1 2024-01-01 43760\n\nrule_001_example2 |&gt; \n  qualify_dos(\"dos\", \"2019-01-01\") |&gt; \n  term_hcpcs(\"hcpcs\", \"43760\")\n\n0 matches for dos &gt; 2019-01-01\n0 matches for hcpcs == 43760\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: dos &lt;date&gt;, hcpcs &lt;chr&gt;"
  },
  {
    "objectID": "posts/rules/claims_rules.html#cleaning-definitions",
    "href": "posts/rules/claims_rules.html#cleaning-definitions",
    "title": "Building Claims Rules",
    "section": "\n4.2 Cleaning Definitions",
    "text": "4.2 Cleaning Definitions\n\nprint_desc(1)\n\n@hcpcs is [43760]\n%AND%\n@dos after [01/01/2019]\n\nprint_desc(50)\n\n@hcpcs is [G0468]\n%AND%\n@hcpcs is not [G0402, G0438, G0439]\n\nprint_desc(100)\n\n@icd is [R63.5]\n%AND%\n@icd is one of [O26.0*, E66.*]\n\nprint_desc(500)\n\n@hcpcs is one of [0214T, 0215T, 0217T, 0218T, 0219T, 0220T, 0221T, 0222T, 0263T, 0265T, 0266T, 0269T, 0274T, 0275T, 0329T, 0330T, 0422T, 0444T, 0445T, 0506T, 0507T, 15777, 20939, 22510, 22511, 22512, 22513, 22514, 22515, 22526, 22527, 27197, 27198, 30801, 30802, 31231, 32673, 34713, 34714, 34715, 34716, 34717, 36221, 34812, 34820, 34833, 34834, 35572, 50300, 50540, 54420, 54430, 55200, 55250, 55300, 58575, 58600, 58605, 58700, 58720, 58800, 58805, 58900, 58920, 58925, 58940, 58943, 61000, 61001, 61253, 63035, 63043, 63044, 63045, 63046, 63047, 63048, 64421, 64480, 64484, 64491, 64492, 64494, 64495, 64634, 64636, 76514, 92025, 92081, 92082, 92083, 92132, 92133, 92134, 92145, 92201, 92202, 92227, 92228, 92229, 92235, 92240, 92242, 95870, C7501, C7502, C7504, C7505, C9771, E0675, G0279, G0412, G0413, G0414, G0415, S2342]\n%AND%\n&lt;&lt;@mod_1 is [50, RT, LT]\n%OR%\n@mod_2 is [50, RT, LT]&gt;&gt;\n\nprint_desc(1000)\n\n@primary_class is [MEDICAID]\n%AND%\n@age is less than [21 YRS]\n%AND%\n@hcpcs is one of [9938*, 9939*]"
  },
  {
    "objectID": "posts/rules/claims_rules.html#metadata",
    "href": "posts/rules/claims_rules.html#metadata",
    "title": "Building Claims Rules",
    "section": "\n4.3 Metadata",
    "text": "4.3 Metadata\n\nRulesets\n\nIdentifiers: 712\nCategories: 621\nDefinitions: 703\nRationales: 659\nSources: 2\n\n\nindex: Row number\nnumber: Rule Number\nidentifier: Split letters/numbers, categorize Payer, State, etc.\ncategory: Categories make little sense, need to be reclassified\ndefinition: Define Variables, Logic, Remove Parentheses\nrationale: Steps are detailed in the rationale that are missing from the rule set\nsource: Optional; Extract urls from category\n\nNeed to define instruction/suggestion variable, taken from rationale"
  },
  {
    "objectID": "posts/rules/claims_rules.html#descriptors",
    "href": "posts/rules/claims_rules.html#descriptors",
    "title": "Building Claims Rules",
    "section": "\n4.4 Descriptors",
    "text": "4.4 Descriptors\n\n\n\n\n\n\n\n\n\n\n\nnumber\nidentifier\ncategory\n\n\n\n590\nLABS\n\n\n87502,87631 -\n\n\n87631 and 87502 cannot be reported together for the same specimen. Review documentation to determine is a modifier is appropriate due to different specimens.\n\n\n\n\n378\nE&M\n\n\n99211, 36415\n\n\nPer CCI guidelines, 99211 has an unbundle relationship with 36415. Review documentation to determine if a modifier override is appropriate.\n\n\n\n\n275\nRHC\n\n\nMedicare labs - Provider-based\n\n\nLabs are billed to Medicare Part A on UB-04 in the LABS location for provider based RHCs.\n\n\n\n\n455\nMCD:AL\n\n\nEP modifiers\n\n\nEP modifiers are used when billing initial, periodic and interperiodic screenings. EP modifier should also be assigned to hearing and vision screenings.\n\n\n\n\n606\nVAX\n\n\nNA\n\n\nA new ICD-10 code was released effective 1/1/21. Z20.822 - Contact with and (suspected) exposure to COVID-19. Review updated COVID-19 ICD-10-CM reporting guidelines, if applicable.\n\n\n\n\n1090\nUNVSL\n\n\nNA\n\n\nBCBS Medicare Advantage has recently updated the definition, billing requirements and reimbursement of this code. Please reference link below for updated reporting guidelines. https://files.providernews.anthem.com/2639/MULTI-BCBS-CR-028696-23-CPN28577-Medication-Reconciliation-Post-Discharge-for-Providers_FINAL.pdf\n\n\n\n\n350\nE&M\n\n\n99304-99310,99315-99316 Improper place of service\n\n\n99304-99310, 99315-99316 should be billed with place of service 31, 32, 34, 54 or 56. Review place of service versus CPT code(s).\n\n\n\n\n1010\nICD:CM\n\n\nUnspecified Site/lLaterality DX\n\n\nPlease review unspecified site/laterality dx code. Most payers will deny claims if one of these dx codes are present on the claim and/or assigned to a CPT code.\n\n\n\n\n499\nUNVSL\n\n\nZurich Workers Comp\n\n\nFollow Workers Comp billing guidelines for electronic claims attachments. If unsuccessful, claims can be faxed to 874-240-8172.\n\n\n\n\n736\nMCD:MD\n\n\nNA\n\n\nDo NOT bill a separate CPT vaccine administration code to Medicaid/Medicaid MCO."
  },
  {
    "objectID": "posts/rules/claims_rules.html#definitions",
    "href": "posts/rules/claims_rules.html#definitions",
    "title": "Building Claims Rules",
    "section": "\n4.5 Definitions",
    "text": "4.5 Definitions\n\n\n\n\n\n\n\n      definition\n    \n\n\n234\n&lt;&lt;@hcpcs is [29914] %OR% @hcpcs is [29915]&gt;&gt; %AND% &lt;&lt;@hcpcs is [29862] %OR% @hcpcs is [29863]&gt;&gt;\n\n\n278\n@primary_class is [MEDICARE] %AND% @hcpcs is one of 90660, 90657, 90658, 90672, 90668, 90666, 90653, 90664, 90667, 90654, 90655, 90656, 90630, 90687, 90688, 90662, 90673, 90756, 90661, 90685, 90674, 90686, 90689, 90694, 90682, G0008, G0009, 90662, 90672, 90674, 90682, 90685, 90686, 90687, 90688, 90694, 90756, 90670, 90671, 90677, 90732, G0008, G0009\n\n\n435\n@primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is [G*] %AND% &lt;&lt;@hcpcs is not [G0101] %AND% @hcpcs is not [T1015]&gt;&gt;\n\n\n340\n@primary_class is one of [MEDICARE , MEDICARE REPLACEMENT] %AND% @secondary_class is one of [MEDICARE , MEDICARE REPLACEMENT]\n\n\n934\n@hcpcs is [91305, 91307] %AND% @dos after 09/11/2023\n\n\n1070\n@primary_name is UHC %AND% @hcpcs CODE is 99417\n\n\n878\n@primary_name is one of [UNITED HEALTHCARE MEDICARE SOLUTIONS, UNITED HEALTHCARE MEDICARE, UNITED HEALTHCARE DUAL COMPLETE] %AND% @pos is [11] %AND% @hcpcs is one of 11004, 11006, 11008, 11970, 12017, 12018, 14350, 15770, 15819, 15838, 15840, 15841, 15842, 15845, 15860, 15920, 15922, 15931, 15933, 15934, 15935, 15936, 15937, 15940, 15941, 15944, 15945, 15946, 15950, 15951, 15952, 15953, 15956, 15958, 16035, 16036, 19126, 19294, 19297, 19301, 19302, 19305, 19306, 19307, 20100, 20150, 20245, 20250, 20251, 20555, 20660, 20661, 20662, 20663, 20664, 20690, 20692, 20693, 20696, 20802, 20805, 20808, 20816, 20822, 20824, 20827, 20838, 20902, 20910, 20912, 20920, 20924, 20931, 20932, 20933, 20934, 20937, 20938, 20939, 20955, 20956, 20957, 20962, 20969, 20970, 20972, 20973, 20985, 21010, 21015, 21016, 21044, 21045, 21049, 21050, 21070, 21325, 21330, 21335, 21336, 21338, 21339, 21340, 21343, 21344, 21346, 21347, 21348, 21360, 21365, 21366, 21385, 21386, 21387, 21390, 21395, 21406, 21407, 21408, 21422, 21423, 21431, 21432, 21433, 21435, 21436, 21454, 21465, 21470, 21490, 21502, 21510, 21557, 21558, 21600, 21610, 21615, 21616, 21620, 21627, 21630, 21632, 21685, 21700, 21705, 21720, 21725, 21750, 21811, 21812, 21813, 21825, 21935, 21936, 22010, 22015, 22103, 22116, 22206, 22207, 22208, 22210, 22212, 22214, 22216, 22226, 22318, 22319, 22325, 22326, 22327, 22328, 22505, 22534, 22552, 22585, 22586, 22614, 22632, 22634, 22840, 22842, 22843, 22844, 22845, 22846, 22847, 22848, 22853, 22854, 22858, 22859, 22864, 22904, 22905, 23020, 23035, 23040, 23044, 23077, 23078, 23100, 23101, 23105, 23106, 23107, 23120, 23125, 23130, 23140, 23145, 23146, 23150, 23155, 23156, 23170, 23172, 23174, 23180, 23182, 23184, 23190, 23195, 23200, 23210, 23220, 23333, 23334, 23335, 23395, 23397, 23400, 23405, 23406, 23410, 23412, 23415, 23420, 23430, 23440, 23450, 23455, 23460, 23462, 23465, 23466, 23473, 23474, 23480, 23485, 23490, 23491, 23515, 23530, 23532, 23550, 23552, 23585, 23615, 23616, 23630, 23655, 23660, 23670, 23680, 23700, 23800, 23802, 23900, 23920, 23921, 23935, 24000, 24006, 24077, 24079, 24100, 24101, 24102, 24105, 24110, 24115, 24116, 24120, 24125, 24126, 24130, 24134, 24136, 24138, 24140, 24145, 24147, 24149, 24150, 24152, 24155, 24160, 24164, 24300, 24301, 24305, 24310, 24320, 24330, 24331, 24332, 24340, 24341, 24342, 24343, 24344, 24345, 24346, 24357, 24358, 24359, 24365, 24366, 24370, 24371, 24400, 24410, 24420, 24430, 24435, 24470, 24495, 24498, 24515, 24516, 24538, 24545, 24546, 24566, 24575, 24579, 24582, 24586, 24587, 24605, 24615, 24620, 24635, 24665, 24666, 24685, 24800, 24802, 24900, 24920, 24925, 24930, 24931, 24935, 25001, 25020, 25023, 25024, 25025, 25028, 25031, 25035, 25040, 25066, 25077, 25078, 25085, 25100, 25101, 25105, 25107, 25109, 25110, 25112, 25115, 25116, 25118, 25119, 25120, 25125, 25126, 25130, 25135, 25136, 25145, 25150, 25151, 25170, 25210, 25215, 25230, 25240, 25248, 25250, 25251, 25259, 25260, 25263, 25265, 25270, 25272, 25274, 25275, 25280, 25290, 25295, 25300, 25301, 25310, 25312, 25315, 25316, 25320, 25332, 25335, 25337, 25350, 25355, 25360, 25365, 25370, 25375, 25390, 25391, 25392, 25393, 25394, 25400, 25405, 25415, 25420, 25425, 25426, 25430, 25431, 25440, 25441, 25442, 25443, 25444, 25445, 25446, 25447, 25449, 25450, 25455, 25490, 25491, 25492, 25515, 25525, 25526, 25545, 25574, 25575, 25606, 25607, 25608, 25609, 25628, 25645, 25651, 25652, 25660, 25670, 25671, 25676, 25680, 25685, 25690, 25695, 25800, 25805, 25810, 25820, 25825, 25830, 25900, 25905, 25907, 25909, 25915, 25920, 25922, 25924, 25927, 25929, 25931, 26020, 26025, 26030, 26034, 26035, 26037, 26070, 26075, 26100, 26105, 26110, 26117, 26118, 26121, 26125, 26130, 26135, 26170, 26180, 26185, 26200, 26205, 26210, 26215, 26230, 26235, 26250, 26260, 26262, 26320, 26350, 26352, 26356, 26357, 26358, 26370, 26372, 26373, 26390, 26392, 26410, 26412, 26415, 26416, 26420, 26426, 26428, 26433, 26434, 26437, 26440, 26442, 26449, 26450, 26455, 26460, 26471, 26474, 26476, 26477, 26478, 26479, 26480, 26483, 26485, 26489, 26490, 26492, 26494, 26496, 26497, 26498, 26499, 26500, 26502, 26508, 26510, 26516, 26517, 26518, 26520, 26525, 26530, 26531, 26535, 26536, 26540, 26541, 26542, 26545, 26546, 26548, 26550, 26551, 26553, 26554, 26555, 26556, 26560, 26561, 26562, 26565, 26567, 26568, 26580, 26587, 26590, 26591, 26593, 26596, 26607, 26608, 26615, 26650, 26665, 26676, 26685, 26686, 26706, 26715, 26727, 26735, 26746, 26756, 26765, 26776, 26785, 26820, 26841, 26842, 26843, 26844, 26850, 26852, 26860, 26861, 26862, 26863, 26910, 26990, 26992, 27000, 27001, 27003, 27005, 27006, 27025, 27027, 27030, 27033, 27035, 27036, 27041, 27049, 27050, 27052, 27054, 27057, 27059, 27060, 27062, 27065, 27066, 27067, 27070, 27071, 27075, 27076, 27077, 27078, 27080, 27087, 27090, 27091, 27097, 27098, 27100, 27105, 27110, 27111, 27140, 27146, 27147, 27151, 27156, 27158, 27161, 27165, 27170, 27175, 27176, 27177, 27178, 27179, 27181, 27185, 27187, 27198, 27202, 27215, 27216, 27217, 27218, 27222, 27226, 27227, 27228, 27232, 27235, 27236, 27240, 27244, 27245, 27248, 27250, 27252, 27253, 27254, 27257, 27258, 27259, 27265, 27266, 27268, 27269, 27275, 27280, 27282, 27284, 27286, 27290, 27295, 27303, 27305, 27306, 27307, 27310, 27324, 27325, 27326, 27329, 27330, 27331, 27332, 27333, 27334, 27335, 27340, 27345, 27347, 27350, 27355, 27356, 27357, 27358, 27360, 27364, 27365, 27380, 27381, 27385, 27386, 27390, 27391, 27392, 27393, 27394, 27395, 27396, 27397, 27400, 27403, 27405, 27407, 27409, 27415, 27416, 27418, 27420, 27422, 27424, 27425, 27427, 27428, 27429, 27430, 27435, 27437, 27438, 27440, 27441, 27442, 27443, 27448, 27450, 27454, 27455, 27457, 27465, 27466, 27468, 27470, 27472, 27475, 27477, 27479, 27485, 27488, 27495, 27496, 27497, 27498, 27499, 27502, 27503, 27506, 27507, 27509, 27510, 27511, 27513, 27514, 27517, 27519, 27524, 27535, 27536, 27540, 27552, 27556, 27557, 27558, 27562, 27566, 27570, 27580, 27590, 27591, 27592, 27594, 27596, 27598, 27600, 27601, 27602, 27606, 27607, 27610, 27612, 27615, 27616, 27620, 27625, 27626, 27635, 27637, 27638, 27640, 27641, 27645, 27646, 27647, 27650, 27652, 27654, 27658, 27659, 27664, 27665, 27675, 27676, 27680, 27681, 27686, 27687, 27690, 27691, 27692, 27695, 27696, 27698, 27700, 27702, 27703, 27704, 27705, 27707, 27709, 27712, 27715, 27720, 27722, 27724, 27725, 27726, 27727, 27730, 27732, 27734, 27740, 27742, 27745, 27756, 27758, 27759, 27766, 27768, 27769, 27784, 27792, 27814, 27822, 27823, 27826, 27827, 27828, 27829, 27831, 27832, 27842, 27846, 27848, 27860, 27870, 27871, 27880, 27881, 27882, 27884, 27886, 27888, 27889, 27892, 27893, 27894, 28046, 28047, 28055, 28102, 28103, 28106, 28130, 28171, 28173, 28175, 28300, 28302, 28305, 28309, 28320, 28360, 28406, 28415, 28420, 28436, 28445, 28446, 28456, 28465, 28476, 28485, 28576, 28606, 28615, 28666, 28705, 28715, 28725, 28730, 28735, 28737, 28800, 28805, 29805, 29806, 29807, 29819, 29820, 29821, 29822, 29823, 29824, 29825, 29826, 29827, 29828, 29830, 29834, 29835, 29836, 29837, 29838, 29840, 29843, 29844, 29845, 29846, 29847, 29848, 29850, 29851, 29855, 29856, 29860, 29861, 29862, 29863, 29871, 29873, 29874, 29875, 29876, 29879, 29880, 29881, 29882, 29883, 29884, 29885, 29886, 29887, 29888, 29889, 29891, 29892, 29894, 29895, 29897, 29898, 29899, 29900, 29901, 29902, 29904, 29905, 29906, 29907, 30118, 30124, 30125, 30150, 30160, 30310, 30320, 30630, 30915, 30920, 31032, 31040, 31050, 31051, 31070, 31075, 31080, 31081, 31084, 31085, 31086, 31087, 31090, 31200, 31201, 31205, 31225, 31230, 31239, 31241, 31257, 31259, 31290, 31291, 31292, 31293, 31294, 31300, 31360, 31365, 31367, 31368, 31370, 31375, 31380, 31382, 31390, 31395, 31400, 31420, 31500, 31520, 31526, 31527, 31528, 31529, 31530, 31531, 31536, 31540, 31541, 31545, 31546, 31551, 31552, 31553, 31554, 31560, 31561, 31580, 31584, 31587, 31590, 31591, 31592, 31600, 31601, 31603, 31605, 31610, 31611, 31613, 31614, 31630, 31631, 31636, 31637, 31638, 31640, 31641, 31643, 31646, 31647, 31648, 31720, 31725, 31750, 31755, 31760, 31766, 31770, 31775, 31780, 31781, 31785, 31786, 31800, 31805, 32035, 32036, 32096, 32097, 32098, 32100, 32110, 32120, 32124, 32140, 32141, 32150, 32151, 32160, 32200, 32215, 32220, 32225, 32310, 32320, 32440, 32442, 32445, 32480, 32482, 32484, 32486, 32488, 32501, 32503, 32504, 32505, 32506, 32507, 32540, 32551, 32601, 32604, 32606, 32607, 32608, 32609, 32650, 32651, 32652, 32653, 32654, 32655, 32656, 32658, 32659, 32661, 32662, 32663, 32664, 32665, 32666, 32667, 32668, 32669, 32670, 32671, 32672, 32673, 32674, 32701, 32800, 32810, 32815, 32820, 32852, 32854, 32900, 32905, 32906, 32940, 32997, 33020, 33025, 33030, 33031, 33050, 33120, 33130, 33210, 33211, 33222, 33226, 33233, 33234, 33235, 33236, 33237, 33238, 33250, 33251, 33254, 33255, 33256, 33257, 33258, 33259, 33261, 33265, 33266, 33289, 33300, 33305, 33310, 33315, 33320, 33321, 33322, 33330, 33335, 33390, 33391, 33404, 33405, 33406, 33410, 33411, 33412, 33413, 33414, 33415, 33416, 33417, 33420, 33422, 33425, 33426, 33427, 33430, 33440, 33460, 33463, 33464, 33465, 33468, 33471, 33474, 33475, 33476, 33477, 33478, 33496, 33500, 33501, 33502, 33503, 33504, 33505, 33506, 33507, 33508, 33510, 33511, 33512, 33513, 33514, 33516, 33517, 33518, 33519, 33521, 33522, 33523, 33530, 33533, 33534, 33535, 33536, 33542, 33545, 33548, 33572, 33600, 33602, 33606, 33608, 33610, 33611, 33612, 33615, 33617, 33619, 33620, 33621, 33622, 33641, 33645, 33647, 33660, 33665, 33670, 33675, 33676, 33677, 33681, 33684, 33688, 33690, 33692, 33694, 33697, 33702, 33710, 33720, 33724, 33726, 33730, 33732, 33735, 33736, 33737, 33741, 33745, 33746, 33750, 33755, 33762, 33764, 33766, 33767, 33768, 33770, 33771, 33774, 33775, 33776, 33777, 33778, 33779, 33780, 33781, 33782, 33783, 33786, 33788, 33800, 33802, 33803, 33813, 33814, 33820, 33822, 33824, 33840, 33845, 33851, 33852, 33853, 33863, 33864, 33866, 33875, 33877, 33880, 33881, 33883, 33884, 33886, 33889, 33891, 33910, 33915, 33916, 33917, 33920, 33922, 33924, 33925, 33926, 33946, 33947, 33948, 33949, 33951, 33952, 33953, 33954, 33955, 33956, 33957, 33958, 33959, 33962, 33963, 33964, 33965, 33966, 33967, 33968, 33969, 33970, 33971, 33973, 33974, 33975, 33976, 33977, 33978, 33981, 33984, 33985, 33986, 33987, 33988, 33989, 33995, 33997, 34001, 34051, 34101, 34111, 34151, 34201, 34203, 34401, 34421, 34451, 34471, 34490, 34501, 34502, 34510, 34520, 34530, 34701, 34702, 34703, 34704, 34705, 34706, 34707, 34708, 34709, 34710, 34711, 34712, 34713, 34714, 34715, 34716, 34808, 34812, 34813, 34820, 34830, 34831, 34832, 34833, 34834, 35001, 35002, 35005, 35011, 35013, 35021, 35022, 35045, 35081, 35082, 35091, 35092, 35102, 35103, 35111, 35112, 35121, 35122, 35131, 35132, 35141, 35142, 35151, 35152, 35180, 35182, 35184, 35188, 35189, 35190, 35201, 35206, 35207, 35211, 35216, 35221, 35226, 35231, 35236, 35241, 35246, 35251, 35256, 35261, 35266, 35271, 35276, 35281, 35286, 35301, 35302, 35303, 35304, 35305, 35306, 35311, 35321, 35331, 35341, 35351, 35355, 35361, 35363, 35371, 35372, 35390, 35400, 35500, 35501, 35506, 35508, 35509, 35510, 35511, 35512, 35515, 35516, 35518, 35521, 35522, 35523, 35525, 35526, 35531, 35533, 35535, 35536, 35537, 35538, 35539, 35540, 35556, 35558, 35560, 35563, 35565, 35566, 35570, 35571, 35572, 35583, 35585, 35587, 35600, 35601, 35606, 35612, 35616, 35621, 35623, 35626, 35631, 35632, 35633, 35634, 35636, 35637, 35638, 35642, 35645, 35646, 35647, 35650, 35654, 35656, 35661, 35663, 35665, 35666, 35671, 35681, 35682, 35683, 35685, 35686, 35691, 35693, 35694, 35695, 35697, 35700, 35701, 35800, 35820, 35840, 35860, 35870, 35875, 35876, 35879, 35881, 35883, 35884, 35901, 35903, 35905, 35907, 36260, 36261, 36262, 36420, 36425, 36440, 36450, 36455, 36456, 36460, 36500, 36568, 36620, 36625, 36640, 36660, 36680, 36800, 36810, 36815, 36818, 36819, 36820, 36821, 36823, 36825, 36830, 36831, 36832, 36833, 36835, 36838, 36861, 37140, 37145, 37160, 37180, 37181, 37182, 37200, 37211, 37212, 37213, 37214, 37216, 37217, 37218, 37500, 37565, 37600, 37605, 37606, 37615, 37616, 37617, 37618, 37619, 37650, 37660, 37735, 37760, 37788, 37790, 38100, 38101, 38102, 38115, 38120, 38200, 38204, 38207, 38208, 38209, 38210, 38211, 38212, 38213, 38214, 38215, 38230, 38232, 38242, 38243, 38305, 38308, 38380, 38381, 38382, 38520, 38525, 38530, 38531, 38542, 38550, 38555, 38562, 38564, 38570, 38571, 38572, 38573, 38700, 38720, 38724, 38740, 38745, 38746, 38747, 38760, 38765, 38770, 38780, 38790, 38794, 39000, 39010, 39200, 39220, 39401, 39402, 39501, 39503, 39540, 39541, 39545, 39560, 39561, 40525, 40527, 40700, 40701, 40702, 40720, 40761, 41019, 41114, 41120, 41130, 41135, 41140, 41145, 41150, 41153, 41155, 41510, 42120, 42200, 42205, 42210, 42215, 42220, 42225, 42226, 42227, 42235, 42305, 42410, 42415, 42420, 42425, 42426, 42440, 42507, 42509, 42510, 42725, 42815, 42820, 42821, 42825, 42826, 42830, 42831, 42835, 42836, 42842, 42844, 42845, 42860, 42870, 42890, 42892, 42894, 42900, 42950, 42953, 42955, 42960, 42961, 42962, 42970, 42971, 42972, 43020, 43030, 43045, 43100, 43101, 43107, 43108, 43112, 43113, 43116, 43117, 43118, 43121, 43122, 43123, 43124, 43130, 43135, 43180, 43191, 43192, 43193, 43194, 43195, 43196, 43205, 43210, 43211, 43212, 43214, 43233, 43237, 43238, 43240, 43241, 43242, 43244, 43246, 43253, 43254, 43257, 43259, 43260, 43261, 43262, 43263, 43264, 43265, 43266, 43273, 43274, 43275, 43276, 43277, 43278, 43279, 43280, 43281, 43282, 43283, 43286, 43287, 43288, 43300, 43305, 43310, 43312, 43313, 43314, 43320, 43325, 43327, 43328, 43330, 43331, 43332, 43333, 43334, 43335, 43336, 43337, 43338, 43340, 43341, 43351, 43352, 43360, 43361, 43400, 43405, 43410, 43415, 43420, 43425, 43460, 43500, 43501, 43502, 43510, 43520, 43605, 43610, 43611, 43620, 43621, 43622, 43631, 43632, 43633, 43634, 43635, 43640, 43641, 43651, 43652, 43653, 43752, 43753, 43800, 43810, 43820, 43825, 43830, 43831, 43832, 43840, 43842, 43860, 43865, 43870, 43880, 44005, 44010, 44015, 44020, 44021, 44025, 44050, 44055, 44100, 44110, 44111, 44120, 44121, 44125, 44126, 44127, 44128, 44130, 44139, 44140, 44141, 44143, 44144, 44145, 44146, 44147, 44150, 44151, 44155, 44156, 44157, 44158, 44160, 44180, 44186, 44187, 44188, 44202, 44203, 44204, 44205, 44206, 44207, 44208, 44210, 44211, 44212, 44213, 44227, 44300, 44310, 44312, 44314, 44316, 44320, 44322, 44340, 44345, 44346, 44360, 44361, 44363, 44364, 44365, 44366, 44369, 44370, 44372, 44373, 44376, 44377, 44378, 44379, 44384, 44402, 44403, 44406, 44407, 44408, 44500, 44602, 44603, 44604, 44605, 44615, 44620, 44625, 44626, 44640, 44650, 44660, 44661, 44680, 44700, 44701, 44720, 44721, 44800, 44820, 44850, 44900, 44950, 44955, 44960, 44970, 45000, 45020, 45100, 45108, 45110, 45111, 45112, 45113, 45114, 45116, 45119, 45120, 45121, 45123, 45126, 45130, 45135, 45136, 45150, 45160, 45171, 45172, 45190, 45321, 45327, 45337, 45341, 45342, 45347, 45349, 45389, 45391, 45392, 45393, 45395, 45397, 45400, 45402, 45500, 45505, 45540, 45541, 45550, 45560, 45562, 45563, 45800, 45805, 45820, 45825, 45900, 45905, 45910, 45990, 46045, 46060, 46070, 46257, 46258, 46260, 46261, 46262, 46280, 46288, 46700, 46705, 46706, 46707, 46710, 46712, 46715, 46716, 46730, 46735, 46740, 46742, 46744, 46746, 46748, 46750, 46751, 46753, 46760, 46761, 46947, 47001, 47010, 47015, 47100, 47120, 47122, 47125, 47130, 47140, 47141, 47142, 47146, 47147, 47300, 47350, 47360, 47361, 47362, 47370, 47371, 47380, 47381, 47400, 47420, 47425, 47460, 47480, 47490, 47550, 47552, 47553, 47554, 47555, 47556, 47562, 47563, 47564, 47570, 47600, 47605, 47610, 47612, 47620, 47700, 47701, 47711, 47712, 47715, 47720, 47721, 47740, 47741, 47760, 47765, 47780, 47785, 47800, 47801, 47802, 47900, 48000, 48001, 48020, 48100, 48105, 48120, 48140, 48145, 48146, 48148, 48150, 48152, 48153, 48154, 48155, 48400, 48500, 48510, 48520, 48540, 48545, 48547, 48548, 48552, 48554, 48556, 49000, 49002, 49010, 49020, 49040, 49060, 49062, 49084, 49203, 49204, 49205, 49215, 49250, 49255, 49320, 49321, 49322, 49323, 49324, 49325, 49326, 49327, 49402, 49412, 49419, 49421, 49425, 49426, 49427, 49428, 49429, 49435, 49436, 49491, 49492, 49495, 49496, 49500, 49501, 49505, 49507, 49520, 49521, 49525, 49540, 49550, 49553, 49555, 49557, 49600, 49605, 49606, 49610, 49611, 49650, 49651, 49900, 49904, 49905, 50010, 50020, 50040, 50045, 50060, 50065, 50070, 50075, 50080, 50081, 50100, 50120, 50125, 50130, 50135, 50205, 50220, 50225, 50230, 50234, 50236, 50240, 50250, 50280, 50290, 50320, 50327, 50328, 50329, 50340, 50370, 50390, 50396, 50400, 50405, 50436, 50437, 50500, 50520, 50525, 50526, 50540, 50541, 50542, 50543, 50544, 50545, 50546, 50547, 50548, 50562, 50570, 50572, 50574, 50575, 50576, 50580, 50600, 50605, 50610, 50620, 50630, 50650, 50660, 50700, 50715, 50722, 50725, 50727, 50728, 50740, 50750, 50760, 50770, 50780, 50782, 50783, 50785, 50800, 50810, 50815, 50820, 50825, 50830, 50840, 50845, 50860, 50900, 50920, 50930, 50940, 50945, 50947, 50948, 50970, 50972, 50974, 50976, 50980, 51020, 51030, 51040, 51045, 51050, 51060, 51065, 51080, 51500, 51520, 51525, 51530, 51535, 51550, 51555, 51565, 51570, 51575, 51580, 51585, 51590, 51595, 51596, 51597, 51605, 51800, 51820, 51840, 51841, 51845, 51860, 51865, 51880, 51900, 51920, 51925, 51940, 51960, 51980, 51990, 51992, 52250, 52277, 52290, 52301, 52305, 52318, 52325, 52327, 52342, 52343, 52344, 52345, 52346, 52354, 52355, 52400, 52402, 52450, 52500, 52601, 52630, 52640, 52649, 52700, 53000, 53010, 53020, 53025, 53040, 53080, 53085, 53210, 53215, 53220, 53230, 53235, 53240, 53250, 53275, 53400, 53405, 53415, 53431, 53440, 53442, 53444, 53445, 53446, 53447, 53448, 53449, 53450, 53460, 53500, 53502, 53505, 53510, 53515, 53520, 53605, 53665, 54015, 54110, 54111, 54112, 54120, 54130, 54135, 54163, 54164, 54205, 54300, 54304, 54308, 54312, 54316, 54318, 54322, 54324, 54326, 54328, 54332, 54336, 54340, 54344, 54348, 54352, 54360, 54380, 54385, 54390, 54420, 54430, 54435, 54437, 54438, 54500, 54505, 54512, 54522, 54530, 54535, 54550, 54560, 54600, 54620, 54640, 54650, 54670, 54680, 54692, 54800, 54830, 54840, 54860, 54861, 54865, 54900, 54901, 55040, 55041, 55060, 55110, 55120, 55150, 55300, 55400, 55500, 55520, 55530, 55535, 55540, 55550, 55600, 55605, 55650, 55680, 55705, 55706, 55720, 55725, 55801, 55810, 55812, 55815, 55821, 55831, 55840, 55842, 55845, 55860, 55862, 55865, 55880, 55920, 56440, 56442, 56630, 56631, 56632, 56633, 56634, 56637, 56640, 56700, 56740, 56810, 57000, 57010, 57022, 57023, 57107, 57109, 57111, 57120, 57200, 57210, 57220, 57230, 57240, 57250, 57260, 57265, 57267, 57268, 57270, 57280, 57282, 57283, 57284, 57285, 57287, 57288, 57289, 57300, 57305, 57307, 57308, 57310, 57311, 57320, 57330, 57400, 57410, 57415, 57423, 57425, 57530, 57531, 57540, 57545, 57550, 57555, 57556, 57700, 57720, 58140, 58145, 58146, 58200, 58210, 58240, 58285, 58345, 58346, 58400, 58410, 58520, 58540, 58545, 58546, 58548, 58559, 58560, 58561, 58575, 58600, 58605, 58615, 58660, 58662, 58670, 58671, 58672, 58673, 58700, 58740, 58750, 58752, 58760, 58770, 58805, 58820, 58822, 58825, 58900, 58920, 58925, 58943, 58950, 58951, 58952, 58953, 58954, 58956, 58957, 58958, 58960, 59001, 59012, 59030, 59050, 59051, 59072, 59076, 59100, 59120, 59121, 59130, 59136, 59140, 59150, 59151, 59320, 59325, 59350, 59400, 59409, 59410, 59412, 59414, 59510, 59514, 59515, 59525, 59610, 59612, 59614, 59618, 59620, 59622, 59830, 59870, 59871, 60200, 60210, 60212, 60220, 60225, 60240, 60252, 60254, 60260, 60270, 60271, 60280, 60281, 60500, 60502, 60505, 60512, 60520, 60521, 60522, 60540, 60545, 60650, 61000, 61001, 61020, 61026, 61050, 61055, 61105, 61107, 61108, 61120, 61140, 61150, 61151, 61154, 61156, 61210, 61215, 61250, 61253, 61304, 61305, 61312, 61313, 61314, 61315, 61316, 61320, 61321, 61322, 61323, 61330, 61333, 61340, 61343, 61345, 61450, 61458, 61460, 61500, 61501, 61510, 61512, 61514, 61516, 61517, 61518, 61519, 61520, 61521, 61522, 61524, 61526, 61530, 61531, 61533, 61534, 61535, 61536, 61537, 61538, 61539, 61540, 61541, 61543, 61544, 61545, 61546, 61548, 61550, 61552, 61556, 61557, 61558, 61559, 61563, 61564, 61566, 61567, 61570, 61571, 61575, 61576, 61580, 61581, 61582, 61583, 61584, 61585, 61586, 61590, 61591, 61592, 61595, 61596, 61597, 61598, 61600, 61601, 61605, 61606, 61607, 61608, 61611, 61613, 61615, 61616, 61618, 61619, 61623, 61624, 61626, 61630, 61635, 61645, 61650, 61651, 61680, 61682, 61684, 61686, 61690, 61692, 61697, 61698, 61700, 61702, 61703, 61705, 61708, 61710, 61720, 61735, 61750, 61751, 61760, 61770, 61790, 61791, 61796, 61797, 61798, 61799, 61800, 61860, 61880, 62000, 62005, 62010, 62100, 62115, 62117, 62120, 62121, 62140, 62141, 62142, 62143, 62145, 62146, 62147, 62148, 62160, 62161, 62162, 62164, 62165, 62180, 62190, 62192, 62194, 62200, 62201, 62220, 62223, 62225, 62230, 62256, 62258, 62268, 62269, 62287, 62292, 62294, 62350, 62351, 62355, 62360, 62361, 62362, 62365, 63035, 63048, 63057, 63066, 63076, 63078, 63082, 63086, 63088, 63091, 63103, 63250, 63251, 63252, 63265, 63266, 63267, 63268, 63270, 63271, 63272, 63273, 63275, 63276, 63277, 63278, 63280, 63281, 63282, 63283, 63285, 63286, 63287, 63290, 63295, 63300, 63301, 63302, 63303, 63304, 63305, 63306, 63307, 63308, 63600, 63610, 63620, 63621, 63700, 63702, 63704, 63706, 63707, 63709, 63710, 63740, 63741, 63744, 63746, 64416, 64446, 64448, 64449, 64580, 64702, 64704, 64708, 64712, 64713, 64714, 64716, 64718, 64719, 64726, 64727, 64732, 64734, 64736, 64738, 64740, 64742, 64744, 64746, 64755, 64760, 64763, 64766, 64771, 64772, 64774, 64776, 64778, 64782, 64783, 64784, 64786, 64787, 64788, 64790, 64792, 64795, 64802, 64804, 64809, 64818, 64820, 64821, 64822, 64823, 64831, 64832, 64834, 64835, 64836, 64837, 64840, 64857, 64858, 64859, 64861, 64862, 64864, 64865, 64866, 64868, 64872, 64874, 64876, 64885, 64886, 64890, 64891, 64893, 64895, 64897, 64898, 64901, 64902, 64905, 64907, 64910, 64911, 64912, 64913, 65091, 65093, 65101, 65103, 65105, 65110, 65112, 65114, 65130, 65135, 65140, 65150, 65155, 65175, 65235, 65260, 65265, 65273, 65280, 65285, 65290, 65710, 65730, 65750, 65755, 65756, 65770, 65775, 65780, 65781, 65782, 65820, 65850, 65865, 65870, 65875, 65880, 65900, 65930, 66150, 66155, 66160, 66170, 66172, 66174, 66175, 66179, 66184, 66185, 66225, 66500, 66505, 66600, 66605, 66625, 66630, 66635, 66680, 66682, 66711, 66825, 66830, 66850, 66920, 66930, 66940, 66985, 66986, 66990, 67005, 67010, 67030, 67107, 67108, 67113, 67115, 67121, 67218, 67229, 67250, 67255, 67311, 67312, 67314, 67316, 67318, 67320, 67331, 67332, 67334, 67335, 67340, 67343, 67346, 67400, 67405, 67413, 67414, 67415, 67420, 67430, 67440, 67445, 67450, 67550, 67560, 67570, 67808, 67835, 67971, 67974, 68325, 68326, 68328, 68335, 68362, 68371, 68500, 68505, 68520, 68525, 68540, 68550, 68720, 68745, 68750, 68770, 68811, 69120, 69140, 69150, 69155, 69205, 69310, 69320, 69421, 69436, 69440, 69450, 69501, 69502, 69505, 69511, 69530, 69535, 69550, 69552, 69554, 69601, 69602, 69603, 69604, 69631, 69632, 69633, 69635, 69636, 69637, 69641, 69642, 69643, 69644, 69645, 69646, 69650, 69660, 69661, 69662, 69666, 69667, 69670, 69676, 69700, 69711, 69717, 69720, 69725, 69740, 69745, 69805, 69806, 69905, 69910, 69915, 69950, 69955, 69960, 69970, 69990, 70010, 77469, 78351, 91117, 92018, 92019, 92502, 92953, 92961, 92970, 92971, 92986, 92987, 92990, 92997, 92998, 93355, 93503, 93580, 93581, 93582, 93583, 93590, 93591, 93592, 93613, 93650, 93653, 93654, 93655, 93656, 93657, 94002, 94003, 94004, 94011, 94012, 94013, 94610, 94662, 95980, 96002, 96003, 99155, 99184, 99252, 99253, 99254, 99255, 99360, 99367, 99368, 99460, 99462, 99463, 99464, 99465, 99466, 99467, 99485, 99486, G0278, G0412, G0413, G0414, G0415\n\n\n998\n@primary_class is [MEDICAID] %AND% @hcpcs is one of [J7296, J7297, J7298, J7300, J7301, J7307, 58300, 11981, 11983\n\n\n1\n@hcpcs is [43760] %AND% @dos after [01/01/2019]\n\n\n366\n@referring is not [PRESENT] %AND% @hcpcs is one of [9924*, 9925*, 99446, 99447, 99448, 99449, G0406, G0407, G0408, G0425, G0426, G0427, G0508, G0509, 80503, 80504, 80505, 80506]"
  },
  {
    "objectID": "posts/rules/claims_rules.html#components-of-a-step",
    "href": "posts/rules/claims_rules.html#components-of-a-step",
    "title": "Building Claims Rules",
    "section": "\n4.6 Components of A Step",
    "text": "4.6 Components of A Step\nTwo types of a step: qualifier and terminator\nA qualifier is basically a long if (x & y & (a | b | c)) statement.\nA terminator is the final step, analogous to a stopifnot() statement that checks the data.\n\nnumber:\norder:\nidentifier:\nvariable: Recode to standardize names\nclass: Variable Data Class\ngroup: Variable Grouping\naction: Translate to condition\nvalue: Coerce to correct data type, deal with wildcards\ncondition: Predicate function that evaluates to TRUE or FALSE\n\nVariables\n\ndos: 81\npos: 142\nub04: 106\nage: 158\nsex: 3\nreferring: 14\nrendering: 20\nicd: 251\nhcpcs: 1071\nmod_1, mod_2, mod_3, mod_4: 472\nunit: 13\nndc: 23\nrev_code: 19\nprimary_class: 371\nprimary_name: 132\nprimary_auth: 3\nsecondary_class: 6\nsecondary_name: 4\n\nCleaned\n\ndos &lt;- Sys.Date()\n\ncondition &lt;- cleaned_steps |&gt; \n  select(condition) |&gt; \n  slice(2) |&gt; \n  pull(condition)\n\ncondition\n\ndos &gt; \"2019-01-01\"\n\ncondition |&gt; \n  rlang::parse_expr() |&gt; \n  rlang::eval_bare()\n\n[1] TRUE\n\ncleaned_steps |&gt; \n  select(number, variable, action, condition) |&gt; \n  print(n = 100)\n\n# A tibble: 2,534 × 4\n    number variable      action            condition                            \n     &lt;int&gt; &lt;chr&gt;         &lt;chr&gt;             &lt;glue&gt;                               \n  1      1 hcpcs         is one of         func(hcpcs, \"^[4][3][7][6][0]\")      \n  2      1 dos           greater than      dos &gt; \"2019-01-01\"                   \n  3      2 primary_name  is                primary_name == \"BCBS\"               \n  4      2 hcpcs         is one of         func(hcpcs, \"^[J]\")                  \n  5      2 ndc           is not            !is.na(ndc)                          \n  6      3 ndc           is not            !is.na(ndc)                          \n  7      3 hcpcs         is one of         func(hcpcs, \"^[9][0][4][7][6]|[9][0]…\n  8      4 icd           is one of         func(icd, \"^[S]\")                    \n  9      5 hcpcs         is one of, is not func(hcpcs, \"^[G][0][4][0][2]|[G][0]…\n 10      5 icd           is one of         func(icd, \"^[Z][6][8]\")              \n 11      6 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 12      6 pos           any of            pos %in% c(\"11\", \"21\", \"22\", \"23\", \"…\n 13      6 ub04          is                ub04 == TRUE                         \n 14      7 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 15      7 hcpcs         is one of         func(hcpcs, \"^[9][9][2][0]|[9][9][2]…\n 16      7 icd           is not            func(icd, \"^(?![Z][6][8])\")          \n 17      8 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 18      8 age           less than         age &lt; 7670                           \n 19      8 age           greater than      age &gt; 1095                           \n 20      8 hcpcs         is one of         func(hcpcs, \"^[9][9][2][0]|[9][9][2]…\n 21      8 icd           is not            func(icd, \"^(?![Z][6][8][.][5][1]|[Z…\n 22      9 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 23      9 hcpcs         is one of         func(hcpcs, \"^[9][9][2][0]|[9][9][2]…\n 24      9 age           greater than      age &gt; 7305                           \n 25      9 icd           is not            func(icd, \"^(?![Z][6][8][.][1]|[Z][6…\n 26     10 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 27     10 hcpcs         is one of         func(hcpcs, \"^[J]|[S]|[Q]\")          \n 28     10 ndc           is not            !is.na(ndc)                          \n 29     11 primary_class is                primary_class == \"MEDICAID\"          \n 30     11 hcpcs         is one of         func(hcpcs, \"^[8]|[1][0][0][2][1]|[1…\n 31     12 primary_class is                primary_class == \"MEDICAID\"          \n 32     12 pos           is                pos == \"72\"                          \n 33     12 ub04          is                ub04 == FALSE                        \n 34     13 hcpcs         is one of         func(hcpcs, \"^[9][0][6]|[9][0][7][0]…\n 35     13 primary_class is                primary_class == \"MEDICAID\"          \n 36     13 age           less than         age &lt; 6939                           \n 37     14 primary_class is one of         primary_class %in% c(\"MEDICAID CMO\",…\n 38     14 hcpcs         is one of         func(hcpcs, \"^[8][0][0][4][7]|[8][0]…\n 39     15 primary_class is one of         primary_class %in% c(\"MEDICAID CMO\",…\n 40     15 hcpcs         is one of         func(hcpcs, \"^[J]\")                  \n 41     15 ndc           is not            !is.na(ndc)                          \n 42     16 primary_class is one of         primary_class %in% c(\"MEDICAID CMO\",…\n 43     16 hcpcs         is one of         func(hcpcs, \"^[9][6][3][7][2]\")      \n 44     17 primary_class is one of         primary_class %in% c(\"MEDICAID\")     \n 45     17 pos           is                pos == \"72\"                          \n 46     17 ub04          is                ub04 == FALSE                        \n 47     17 hcpcs         is not            func(hcpcs, \"^(?![9][9][3][8][1]|[9]…\n 48     18 primary_name  is                primary_name == \"BCBS\"               \n 49     18 referring     is not            !is.na(referring)                    \n 50     18 hcpcs         is not, is one of func(hcpcs, \"^(?![9][9])\") & func(hc…\n 51     19 hcpcs         is one of         func(hcpcs, \"^[9][9][4][0][8]|[9][9]…\n 52     19 icd           is not            func(icd, \"^(?![Z][7][1][.][4][1])\") \n 53     20 hcpcs         is one of         func(hcpcs, \"^[9][9][4][0][1]|[9][9]…\n 54     20 icd           is not            func(icd, \"^(?![Z][7][1][.][8][9])\") \n 55     21 hcpcs         is one of         func(hcpcs, \"^[9][9][4][0][6]|[9][9]…\n 56     21 icd           is not            func(icd, \"^(?![F][1][7][.][2][0][0]…\n 57     22 icd           is one of         func(icd, \"^[M][2][5][.][5][6][9]|[M…\n 58     23 icd           is one of         func(icd, \"^[H][0][1][.][1][1][9]\")  \n 59     24 icd           is one of         func(icd, \"^[S]\")                    \n 60     25 primary_name  is                primary_name == \"BCBS\"               \n 61     25 hcpcs         is one of         func(hcpcs, \"^[J]\")                  \n 62     25 ndc           is not            !is.na(ndc)                          \n 63     26 primary_name  is                primary_name == \"BCBS\"               \n 64     26 rendering     is one of         rendering %in% c(\"Mid-Level (Inciden…\n 65     26 hcpcs         is one of         func(hcpcs, \"^[9][9][2]|[9][9][3]|[9…\n 66     26 mod_1         is not            mod_1 == \"SA\"                        \n 67     26 mod_2         is not            mod_2 == \"SA\"                        \n 68     27 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 69     27 age           less than         age &lt; 6939                           \n 70     27 hcpcs         is one of         func(hcpcs, \"^[9][0][5]|[9][0][6]|[9…\n 71     27 mod_1         is not            mod_1 == \"SL\"                        \n 72     28 primary_name  is one of         primary_name %in% c(\"MEDICAID\", \"MED…\n 73     28 hcpcs         is not, is one of func(hcpcs, \"^(?![T][1][0][1][5])\") …\n 74     29 primary_class is                primary_class == \"MEDICAID\"          \n 75     29 mod_1         is                mod_1 == \"SE\"                        \n 76     30 primary_class is                primary_class == \"MEDICAID\"          \n 77     30 ub04          is                ub04 == FALSE                        \n 78     31 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 79     31 icd           is one of         func(icd, \"^[Z][0][0][.][0][0]|[Z][0…\n 80     31 hcpcs         is one of         func(hcpcs, \"^[8]\")                  \n 81     32 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 82     32 hcpcs         is one of         func(hcpcs, \"^[8]\")                  \n 83     33 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 84     33 hcpcs         is one of         func(hcpcs, \"^[G][0][4][7][2]|[G][0]…\n 85     33 mod_1         is                mod_1 == \"TC\"                        \n 86     33 mod_2         is                mod_2 == \"TC\"                        \n 87     34 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 88     34 hcpcs         is one of         func(hcpcs, \"^[1]|[2]|[3]|[4]|[5]|[6…\n 89     34 mod_1         is not            mod_1 == \"AG\"                        \n 90     36 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 91     36 hcpcs         is one of         func(hcpcs, \"^[8][0][0][4][7]|[8][0]…\n 92     37 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 93     37 age           less than         age &lt; 6939                           \n 94     37 hcpcs         is one of         func(hcpcs, \"^[9][0][4][6][1]\")      \n 95     38 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 96     38 icd           is one of         func(icd, \"^[Z][3][0][.][0][1][1]|[Z…\n 97     38 mod_1         is not            mod_1 == \"FP\"                        \n 98     39 primary_class is one of         primary_class %in% c(\"MEDICAID\", \"ME…\n 99     39 ndc           is not            !is.na(ndc)                          \n100     39 hcpcs         is one of         func(hcpcs, \"^[J]\")                  \n# ℹ 2,434 more rows\n\n\n\ncleaned_definitions |&gt; \n  print(n = 100)\n\n# A tibble: 1,038 × 2\n    number definition                                                           \n     &lt;int&gt; &lt;chr&gt;                                                                \n  1      1 @hcpcs is [43760] %AND% @dos after [01/01/2019]                      \n  2      2 @primary_name is [BCBS] %AND% @hcpcs is [J*] %AND% @ndc is not [PRES…\n  3      3 @primary_name is [BCBS] %AND% @ndc is not [PRESENT] %AND% @hcpcs is …\n  4      4 @primary_name is [BCBS] %AND% @ndc is not [PRESENT] %AND% @hcpcs is …\n  5      5 @primary_name is [BCBS, BCBS AL BLUE ADVANTAGE MEDICARE REPLAC,] %AN…\n  6      6 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @pos is one …\n  7      7 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n  8      8 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% &lt;&lt;@age is le…\n  9      9 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @age is grea…\n 10     10 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n 11     11 @primary_class is [MEDICAID] %AND% @hcpcs is [8*] %AND% @hcpcs is on…\n 12     12 @primary_class is [MEDICAID] %AND% @pos is [72] %AND% @claim is not …\n 13     13 @primary_class is [MEDICAID] %AND% @hcpcs is one of 906*, 9071*, 907…\n 14     14 @primary_class is one of [MEDICAID CMO, MEDICAID] %AND% @hcpcs is on…\n 15     15 @primary_class is one of [MEDICAID CMO, MEDICAID] %AND% @hcpcs is [J…\n 16     16 @primary_class is one of [MEDICAID CMO, MEDICAID] %AND% @hcpcs is [9…\n 17     17 @primary_class is one of [MEDICAID CMO, MEDICAID] %AND% @pos is [72]…\n 18     18 @primary_name is [BLUE CROSS -KS] %AND% @referring is not [PRESENT] …\n 19     19 @primary_name is [BLUE CROSS -KS] %AND% @hcpcs is one of [99408, 994…\n 20     20 @primary_name is [BLUE CROSS -KS] %AND% @hcpcs is one of [99401, 994…\n 21     21 @primary_name is [BLUE CROSS -KS] %AND% @hcpcs is one of [99406, 994…\n 22     22 @primary_name is [BLUE CROSS -KS] %AND% @icd is one of [M25.569, M17…\n 23     23 @primary_name is [BLUE CROSS -KS] %AND% @icd is [H01.119]            \n 24     24 @primary_name is [BLUE CROSS -KS] %AND% @icd is [S*]                 \n 25     25 @primary_name is [BLUECARE TNCARE] %AND% @hcpcs is [J*] %AND% @ndc i…\n 26     26 @primary_name is [BLUE SHIELD OF TEXAS] %AND% @rendering is [MID-LEV…\n 27     27 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @age is less…\n 28     28 @primary_name is one of [MEDICAID CA -- MEDICAL, OP MEDICAL] %AND% @…\n 29     29 @primary_class is [MEDICAID] %AND% @mod_1 is [SE]                    \n 30     30 @primary_class is [MEDICAID] %AND% @claim is not [UB04]              \n 31     31 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @icd is one …\n 32     32 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is [8…\n 33     33 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n 34     34 @primary_class is [MEDICAID] %AND% @hcpcs is one of [1*, 2*, 3*, 4*,…\n 35     36 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n 36     37 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @age is less…\n 37     38 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @icd is one …\n 38     39 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @ndc is not …\n 39     40 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n 40     42 @hcpcs has all [89280, 89281]                                        \n 41     43 @hcpcs is [76831] %AND% &lt;&lt;@hcpcs is [76830] %OR% @hcpcs is [76856] %…\n 42     44 @sex is [FEMALE] %AND% @hcpcs is [89331]                             \n 43     45 @sex is [FEMALE] %AND% @hcpcs is [89320]                             \n 44     49 @primary_class is [MEDICARE] %AND% @hcpcs is not [G0466, G0467] %AND…\n 45     50 @primary_class is [MEDICARE ADVANTAGE] %AND% @hcpcs is one of [G0466…\n 46     51 @primary_class is [MEDICARE] %AND% @hcpcs is one of [G0469, G0470] %…\n 47     52 @primary_class is [MEDICARE ADVANTAGE] %AND% @hcpcs is one of [G0469…\n 48     53 @hcpcs is [G0466] %AND% @hcpcs is not [92002, 92004, 97802, 99202, 9…\n 49     54 @hcpcs is [G0467] %AND% @hcpcs is not [92012, 92014, 97802, 97803, 9…\n 50     55 @hcpcs is [G0468] %AND% @hcpcs is not [G0402, G0438, G0439]          \n 51     56 @hcpcs is one of [G0469, G0470] %AND% @hcpcs is not [90791, 90792, 9…\n 52     57 @primary_class is [MEDICARE] %AND% @hcpcs is [8*] %AND% &lt;&lt;@claim is …\n 53     58 @primary_class is [MEDICARE] %AND% @hcpcs is [93000]                 \n 54     59 @primary_class is [MEDICARE] %AND% @hcpcs is [93000]                 \n 55     60 @primary_class is [MEDICARE ADVANTAGE] %AND% @hcpcs is not [G0466, G…\n 56     61 @primary_class is [MEDICARE] %AND% @hcpcs is [93010] %AND% &lt;&lt;@primar…\n 57     62 @primary_name is [WELLCARE MEDICAID] %AND% @pos is one of [11, 99]   \n 58     63 @primary_class is [MEDICARE] %AND% @hcpcs is not [G0466, G0467] %AND…\n 59     64 @primary_class is [MEDICARE ADVANTAGE] %AND% @hcpcs is not [G0466, G…\n 60     65 @primary_class is [MEDICARE] %AND% @hcpcs is not [G0468] %AND% @hcpc…\n 61     66 @primary_class is [MEDICARE ADVANTAGE] %AND% @hcpcs is not [G0468] %…\n 62     67 @primary_class is [MEDICARE] %AND% @hcpcs is not [G0469, G0470] %AND…\n 63     68 @primary_class is [MEDICARE ADVANTAGE] %AND% @hcpcs is not [G0469, G…\n 64     69 @primary_class is [MEDICARE] %AND% @hcpcs is one of [G0466, G0467, G…\n 65     70 @age is greater than [18 YRS] %AND% @primary_class is [MEDICAID] %AN…\n 66     71 @primary_class is one of [MEDICAID, MEDICAID CMO, MEDICAID CMO] %AND…\n 67     72 @primary_class is [MEDICAID], MEDICAID CMO %AND% @hcpcs is one of [9…\n 68     73 @primary_class is [MEDICAID] %AND% @hcpcs is one of [99381, 99382, 9…\n 69     74 @primary_class is [MEDICAID, MEDICAID CMO] %AND% @hcpcs is one of [9…\n 70     75 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n 71     76 @primary_class is one of [MEDICAID, MEDICAID CMO, MEDICAID CMO, MEDI…\n 72     77 @primary_class is one of [MEDICAID, MEDICAID CMO, MEDICAID CMO, MEDI…\n 73     78 @primary_class is [MEDICAID, MEDICAID CMO] %AND% @age is less than […\n 74     79 @primary_class is [MEDICAID, MEDICAID CMO] %AND% @hcpcs is [96110] %…\n 75     80 @primary_class is [MEDICAID, MEDICAID CMO] %AND% @hcpcs is [96110] %…\n 76     81 @primary_class is [MEDICAID] %AND% @primary_auth is not [PRESENT] %A…\n 77     82 @primary_class is [MEDICAID, MEDICAID CMO] %AND% @age is less than […\n 78     83 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n 79     85 @primary_class is [MEDICAID, MEDICAID CMO] %AND% @age is less than […\n 80     86 @primary_class is [MEDICAID, MEDICAID CMO] %AND% @hcpcs is one of [9…\n 81     87 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @age is less…\n 82     88 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @age is less…\n 83     89 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n 84     92 @primary_class is [MEDICAID] %AND% @mod_1 is [JW, JZ]                \n 85     93 @primary_class is [MEDICAID CMO] %AND% @referring is not [PRESENT] %…\n 86     94 @primary_class is [MEDICAID] %AND% @referring is not [PRESENT] %AND%…\n 87     95 @primary_class is [MEDICAID] %AND% @hcpcs is one of [99304, 99305, 9…\n 88     96 @primary_class is one of [MEDICAID, 4, MEDICAID CMO, 7, 11] %AND% @h…\n 89     97 @primary_class is [MEDICAID] %AND% @hcpcs is [99211] %AND% @hcpcs is…\n 90     98 @primary_class is one of [MEDICAID, MEDICAID CMO] %AND% @hcpcs is on…\n 91     99 @icd has all [G56.01, G56.02]                                        \n 92    100 @icd is [R06.0*] %AND% @icd is one of [R06.82, P22.1]                \n 93    101 @icd is [J41.*] %AND% @icd is one of [J42, J44.*]                    \n 94    102 @icd has all [H25.811, H25.812]                                      \n 95    103 @icd has all [H25.11, H25.12]                                        \n 96    104 @icd is [G89.2] %AND% @icd is one of [G57.7*, G56.4*, G89.0, G89.4, …\n 97    105 @icd has all [M54.2, M50.*]                                          \n 98    106 @icd is [E08.*] %AND% @icd is one of [E09.*, O24.4*, P70.2, E13.*, E…\n 99    107 @icd is [G30.*] %AND% @icd is one of [G31.1, F03.*, R41.81]          \n100    108 @icd is [R63.5] %AND% @icd is one of [O26.0*, E66.*]                 \n# ℹ 938 more rows\n\n\n\ndescriptors |&gt; \n  reframe(\n    number, \n    rationale = glue::glue(\"{str_wrap(rationale, width = 100)}\")) |&gt; \n  print(n = 100)\n\n# A tibble: 1,038 × 2\n    number rationale                                                            \n     &lt;int&gt; &lt;glue&gt;                                                               \n  1      1 43760 expired effective 1/1/19 - to report, please see (43762 - 4376…\n  2      2 Alabama BCBS requires NDC numbers.                                   \n  3      3 Alabama BCBS requires NDC numbers on vaccine codes.                  \n  4      4 Add accident date info if the injury dx is primary.                  \n  5      5 When filing IPPE (G0402) and AWV (G0438 or G0439), Blue Advantage re…\n  6      6 RHC claims are billed on 1500 for place of service codes 11, 21, 22,…\n  7      7 Beginning October 1, 2019, Primary Care Physicians (PCPs), nurse pra…\n  8      8 Pediatric BMI diagnosis must be present for patient age 3 up to age …\n  9      9 Adult BMI diagnosis must be present for patient age 20 and older.    \n 10     10 The NDC number will be mandatory on all physician-administered drugs…\n 11     11 Labs are billable and reimbursable outside of the encounter rate uti…\n 12     12 Claims will reject for POS 72 - update to POS 11 for RHC claims.     \n 13     13 VFC Vaccines are reimbursable outside of the encounter rate utilizin…\n 14     14 CLIA waived tests are present - review and add modifier QW to CLIA w…\n 15     15 Arkansas Medicaid requires NDC information on drug codes.            \n 16     16 Injection administration code is T1502 for Arkansas Medicaid.        \n 17     17 Arkansas Medicaid is billed on a UB-04.                              \n 18     18 BCBS Kansas may require the ordering/referring provider information.…\n 19     19 Review encounter for ICD-10 code required for 99408, 99409           \n 20     20 Review encounter for ICD-10 code required for 99401, 99402, 99403, 9…\n 21     21 Review encounter for ICD-10 code required for 99406, 99407, 99411, 9…\n 22     22 BCBS Kansas will reject claim for unspecified laterality. Add a more…\n 23     23 BCBS requires a more specified code. Please see H01.111, H01.112, H0…\n 24     24 Add accident date if the injury diagnosis is the primary diagnosis c…\n 25     25 BlueCare Tenncare requires NDC numbers on drug codes.                \n 26     26 Modifier SA is required when a supervising physician bills on behalf…\n 27     27 Vaccine for Vaccines For Children (VFC) requires SL modifier.        \n 28     28 Add T1015 as the reimbursable line. All other charges should be zero…\n 29     29 SE modifier is used to Medi-Cal wrap around payments only. Remove SE…\n 30     30 Medi-Cal is billed on UB-04.                                         \n 31     31 Review claim. Providers may not submit the following non-specific di…\n 32     32 Modifier TC should be used on appropriate lab codes when pathology s…\n 33     33 Labs may not be eligible for split billing. Review list of CPT codes…\n 34     34 The primary surgeon or podiatrist is required to use modifier AG on …\n 35     36 CLIA waived tests are present - review and add modifier QW to CLIA w…\n 36     37 VFC vaccines are billed with administration code 90460 - No componen…\n 37     38 Use FP modifier for family planning services. This includes office v…\n 38     39 Medi-Cal requires NDC on drug codes.                                 \n 39     40 Medi-Cal requires NDC on vaccine codes.                              \n 40     42 89280, 89281 should not be reported for the same DOS                 \n 41     43 76831 includes all ultrasound imaging performed during the hysteroso…\n 42     44 Code 89331 cannot apply to female patients.                          \n 43     45 Code 89320 cannot apply to female patients.                          \n 44     49 An FQHC qualifying visit is present on the encounter. Payment code G…\n 45     50 G0466, G0467, G0468 should be billed on a UB-04 with revenue code 05…\n 46     51 G0469, G0470 should be billed to Medicare Part A on a UB-04 with rev…\n 47     52 G0469, G0470 should be billed on a UB-04 with revenue code 0900.     \n 48     53 An FQHC qualifying visit for G0466 is not present. Review coding.    \n 49     54 An FQHC qualifying visit for G0467 is not present. Review coding.    \n 50     55 An FQHC qualifying visit for G0468 is not present. Review coding.    \n 51     56 An FQHC qualifying visit for G0469, G0470 is not present. Review cod…\n 52     57 Labs are billed on CMS-1500 claim form to Medicare Part B.           \n 53     58 93000 is not billed in an FQHC - Split claim for the technical (9300…\n 54     59 93005 - The technical component of the ECG is billed on CMS-1500 cla…\n 55     60 An FQHC qualifying visit is present on the encounter. Payment code G…\n 56     61 93010 - The professional component of the ECG is billed with a quali…\n 57     62 Place of Service codes 11 (Office) or 99 (Other Place of service) ar…\n 58     63 An FQHC qualifying visit is present on the encounter. Payment code G…\n 59     64 An FQHC qualifying visit is present on the encounter. Payment code G…\n 60     65 An FQHC qualifying visit is present on the encounter. Payment code G…\n 61     66 An FQHC qualifying visit is present on the encounter. Payment code G…\n 62     67 An FQHC qualifying visit is present on the encounter. Payment code G…\n 63     68 An FQHC qualifying visit is present on the encounter. Payment code G…\n 64     69 G0466, G0467, G0468 should be billed to Medicare Part A on a UB-04 w…\n 65     70 Medicaid may require authorization after patient has exceeded 10 vis…\n 66     71 Modifier 25 should be added when a vaccine is administered during th…\n 67     72 Modifier EP and 25 should be added to the Office/Outpatient code whe…\n 68     73 Georgia Medicaid and most CMOs will only allow 99211 or 99212 when p…\n 69     74 83655 - Assign dx Z13.88 to 83655 with EP modifier. Providers must a…\n 70     75 When vaccines are administered during the interperiodic visit, code …\n 71     76 99173 - Use EP modifier and Z01.00 or Z01.01 or appropriate abnormal…\n 72     77 V5008, 92551-92553, 92555-92556 - Use EP modifier and Z01.10, Z01.11…\n 73     78 Developmental Screening - Providers must bill code 96110 with the EP…\n 74     79 Autism Screening - Providers must bill code 96110 with the EP, UA mo…\n 75     80 Autism screenings should be performed at the 18 and 24 month periodi…\n 76     81 Medicaid requires authorization on claim for Inpatient Hospital visi…\n 77     82 Providers should bill code 96127 with the EP modifier, POS 99 and th…\n 78     83 Providers should bill procedure code 96160 with the EP modifier, POS…\n 79     85 Providers enrolled in the EPSDT Program, may bill for reimbursement …\n 80     86 EP modifier must be added to 99406, 99407 for the reimbursement of t…\n 81     87 Providers should bill vaccine administration and product codes with …\n 82     88 Providers should bill procedure code 85680 with the EP modifier, POS…\n 83     89 Family Planning - The FP modifier and dx codes must be used on all a…\n 84     92 JW/JZ modifiers - Use is not required on claims that are direct subm…\n 85     93 Medicaid CMO plans may require the ordering/referring provider infor…\n 86     94 Georgia Medicaid may require the ordering/referring provider informa…\n 87     95 GA Medicaid requires 0521 revenue code for nursing home visits.      \n 88     96 Georgia Medicaid/Medicaid CMOs does not allow reimbursement of the 9…\n 89     97 GA Medicaid does not allow reimbursement of the 99211 code when it i…\n 90     98 All preventive visits must be coded with the EP modifier and place o…\n 91     99 For bilateral carpal tunnel syndrome, use G56.03.                    \n 92    100 R06.00-09 (Dyspnea) with R06.82 (tachypnea NOS) and/or P22.1 (transi…\n 93    101 J41.0-8 (Simple and mucopurulent chronic bronchitis) with J42 (chron…\n 94    102 For bilateral cataracts (H25.81X), use H25.813                       \n 95    103 For bilateral cataracts (H25.1X), use H25.13.                        \n 96    104 G89.2 (Chronic pain, not elsewhere classified) with causalgia, lower…\n 97    105 Cervicalgia (M54.2) with cervicalgia due to intervertebral cervical …\n 98    106 Diabetes mellitus due to underlying condition (E08.-) with drug or c…\n 99    107 Alzheimers disease (G30.-) with senile degeneration of brain NEC (G3…\n100    108 Abnormal weight gain (R63.5) with excessive weight gain in pregnancy…\n# ℹ 938 more rows"
  }
]