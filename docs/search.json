[
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html",
    "href": "posts/taxonomy/provider_taxonomy.html",
    "title": "Taxonomy Codes",
    "section": "",
    "text": "Purpose: Categorize health care providers by their type, classification, and specialization.\nMaintenance: National Uniform Claim Committee (NUCC). Updated twice a year, in January and July.\nApplication: Used in various healthcare processes, including:\n\nElectronic healthcare transactions\nNPI enumeration\nMedicare provider enrollment\nInsurance credentialing\nClaims processing\nDetermining network adequacy"
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#key-points",
    "href": "posts/taxonomy/provider_taxonomy.html#key-points",
    "title": "Taxonomy Codes",
    "section": "",
    "text": "Purpose: Categorize health care providers by their type, classification, and specialization.\nMaintenance: National Uniform Claim Committee (NUCC). Updated twice a year, in January and July.\nApplication: Used in various healthcare processes, including:\n\nElectronic healthcare transactions\nNPI enumeration\nMedicare provider enrollment\nInsurance credentialing\nClaims processing\nDetermining network adequacy"
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#overview",
    "href": "posts/taxonomy/provider_taxonomy.html#overview",
    "title": "Taxonomy Codes",
    "section": "Overview",
    "text": "Overview\nThe Health Care Provider Taxonomy Code Set is an external, non-medical data code set designed for use in an electronic environment, specifically within the ASC X12N Health Care transactions, including those mandated under HIPAA.\nA taxonomy code is a unique alphanumeric code, ten characters in length, that describes a health care service provider’s type, classification, and the area of specialization.\nTaxonomy codes are selected by the provider at the time of NPI registration. When providers apply for NPIs, the National Plan and Provider Enumeration System (NPPES) does not verify the accuracy of the selected taxonomy codes. It only validates that the codes exist within the current version of the code set.\nIt is important for healthcare providers to select the most appropriate taxonomy code(s) as it can affect various aspects of their practice, including billing and claims processing. Selection of a taxonomy code does not replace any credentialing or validation process that the provider requesting the code should complete."
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#taxonomy-hierarchy",
    "href": "posts/taxonomy/provider_taxonomy.html#taxonomy-hierarchy",
    "title": "Taxonomy Codes",
    "section": "Taxonomy Hierarchy",
    "text": "Taxonomy Hierarchy\nThe code set is structured into 3 distinct levels:\n\nProvider Grouping\nClassification\nArea of Specialization\n\n\n\n\n\nInteractive Provider Taxonomy Hierarchy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLevel I: Provider Grouping\n\n\n\nA major grouping of service(s) or occupation(s) of health care providers.\nExamples:\n\nAllopathic & Osteopathic Physicians\nDental Providers\nHospitals\n\n\n\n\n\n\n\n\n\nLevel II: Classification\n\n\n\nA more specific service or occupation related to the Provider Grouping.\nFor example, the Classification for Allopathic & Osteopathic Physicians is based upon the General Specialty Certificates, as issued by the appropriate national boards.\nThe following boards, however, will have their general certificates appear as Level III Areas strictly due to display limitations of the code set for Boards that have multiple general certificates:\n\nMedical Genetics\nPreventive Medicine\nPsychiatry & Neurology\nRadiology\nSurgery\nOtolaryngology\nPathology\n\n\n\n\n\n\n\n\n\nLevel III: Area of Specialization\n\n\n\nA more specialized area of the Classification in which a provider chooses to practice or make services available.\nFor example, the Area of Specialization for provider grouping Allopathic & Osteopathic Physicians is based upon the Subspecialty Certificates as issued by the appropriate national boards."
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#medicare-crosswalk",
    "href": "posts/taxonomy/provider_taxonomy.html#medicare-crosswalk",
    "title": "Taxonomy Codes",
    "section": "Medicare Crosswalk",
    "text": "Medicare Crosswalk\n\nProviders and suppliers with the proper taxonomy code eligible for Medicare programs.\n\nThe Medicare Provider and Supplier Taxonomy Crosswalk dataset lists the providers and suppliers eligible to enroll in Medicare programs with the proper healthcare provider taxonomy code. This data includes the Medicare specialty codes, if available, provider/supplier type description, taxonomy code, and the taxonomy description.\n\nFootnotes\n\n\n\n\n\n  \n    \n      \n      Footnote\n    \n  \n  \n    1\nMedicare no longer enrolls this provider type.\n    2\nThis is an arrangement whereby immunization services are rendered by health care providers who are under contract to the entity/individual who is enrolled in Medicare as a Mass Immunization Roster Biller. The Healthcare Provider Taxonomy Code(s) would be that (those) of the health care provider(s) who render the immunization services.\n    3\nMedicare carriers use Specialty Code 87 for Pharmacies when processing prescription drugs that are paid through the Medicare Physician Fee Schedule. However, the description for Specialty Code 87 remains All Other Suppliers.\n    4\nBecause the Medicare Provider Type Physician/Undefined Physician Type applies to physicians,Unknown Supplier/Provider Specialty applies to other than physicians. Because Medicare does not enroll every non-physician supplier/provider type in the Healthcare Provider Taxonomy Code Set, we cannot arbitrarily link this Medicare Provider Type to all remaining supplier/provider types in the Healthcare Provider Taxonomy Code Set. In truth, this Medicare Provider Type would link to every Healthcare Provider Taxonomy Code (except those that describe physicians) that is listed in this document. We do not list them here because doing so would greatly increase the size of this document.\n    5\nBecause the Medicare Provider Type indicates that the provider/supplier is a Physician, we have linked this to the most generic Allopathic & Osteopathic Physicians classification. It could technically link to every Allopathic & Osteopathic Physician.\n    6\nMedicare specialty code designation is for Part B DMEPOS purposes.\n    7\nMedicare specialty code designation is for Part B DMEPOS purposes.\n    8\nMedicare specialty code designation is for Part B DMEPOS purposes.\n    9\nMedicare specialty code designation is for Part B DMEPOS purposes.\n    10\nMedicare specialty code designation is for Part B DMEPOS purposes.\n    11\nMedicare specialty code designation is for Part B DMEPOS purposes.\n    12\nThere is no linkage to specific Healthcare Provider Taxonomy Codes because an Indian Health Service facility can be various provider types/classifications.\n    13\nMedicare specialty code designation is for Part B DMEPOS purposes.\n    14\nDoes not meet the definition of health care provider at 45 CFR 160.103 is not eligible for an NPI.\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n  \n    \n      note1\n      note2\n      \n        Medicare Specialty\n      \n      \n        Provider Taxonomy\n      \n    \n    \n      Code\n      Provider Type/Description\n      Code\n      Grouping\n      Classification\n      Specialization\n    \n  \n  \n    —\n—\n01\nPhysician/General Practice\n208D00000X\nAllopathic & Osteopathic Physicians\nGeneral Practice\n—\n    —\n—\n02\nPhysician/General Surgery\n208600000X\nAllopathic & Osteopathic Physicians\nSurgery\n—\n    —\n—\n02\nPhysician/General Surgery\n2086H0002X\nAllopathic & Osteopathic Physicians\nSurgery\nHospice and Palliative Medicine\n    —\n—\n02\nPhysician/General Surgery\n2086S0120X\nAllopathic & Osteopathic Physicians\nSurgery\nPediatric Surgery\n    —\n—\n02\nPhysician/General Surgery\n2086S0122X\nAllopathic & Osteopathic Physicians\nSurgery\nPlastic and Reconstructive Surgery\n    —\n—\n02\nPhysician/General Surgery\n2086S0105X\nAllopathic & Osteopathic Physicians\nSurgery\nSurgery of the Hand\n    —\n—\n02\nPhysician/General Surgery\n2086S0102X\nAllopathic & Osteopathic Physicians\nSurgery\nSurgical Critical Care\n    —\n—\n02\nPhysician/General Surgery\n2086X0206X\nAllopathic & Osteopathic Physicians\nSurgery\nSurgical Oncology\n    —\n—\n02\nPhysician/General Surgery\n2086S0127X\nAllopathic & Osteopathic Physicians\nSurgery\nTrauma Surgery\n    —\n—\n02\nPhysician/General Surgery\n2086S0129X\nAllopathic & Osteopathic Physicians\nSurgery\nVascular Surgery\n    —\n—\n02\nPhysician/General Surgery\n208G00000X\nAllopathic & Osteopathic Physicians\nThoracic Surgery (Cardiothoracic Vascular Surgery)\n—\n    —\n—\n02\nPhysician/General Surgery\n204F00000X\nAllopathic & Osteopathic Physicians\nTransplant Surgery\n—\n    —\n—\n02\nPhysician/General Surgery\n208C00000X\nAllopathic & Osteopathic Physicians\nColon & Rectal Surgery\n—\n    —\n—\n02\nPhysician/General Surgery\n207T00000X\nAllopathic & Osteopathic Physicians\nNeurological Surgery\n—\n    —\n—\n02\nPhysician/General Surgery\n204E00000X\nAllopathic & Osteopathic Physicians\nOral & Maxillofacial Surgery\n—\n    —\n—\n02\nPhysician/General Surgery\n207X00000X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\n—\n    —\n—\n02\nPhysician/General Surgery\n207XS0114X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nAdult Reconstructive Orthopedic Surgery\n    —\n—\n02\nPhysician/General Surgery\n207XX0004X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nFoot and Ankle Surgery\n    —\n—\n02\nPhysician/General Surgery\n207XS0106X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nHand Surgery\n    —\n—\n02\nPhysician/General Surgery\n207XS0117X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nOrthopedic Surgery of the Spine\n    —\n—\n02\nPhysician/General Surgery\n207XX0801X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nOrthopedic Trauma\n    —\n—\n02\nPhysician/General Surgery\n207XP3100X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nPediatric Orthopedic Surgery\n    —\n—\n02\nPhysician/General Surgery\n207XX0005X\nAllopathic & Osteopathic Physicians\nOrthopedic Surgery\nSports Medicine\n    —\n—\n02\nPhysician/General Surgery\n208200000X\nAllopathic & Osteopathic Physicians\nPlastic Surgery\n—\n    —\n—\n02\nPhysician/General Surgery\n2082S0099X\nAllopathic & Osteopathic Physicians\nPlastic Surgery\nPlastic Surgery Within the Head & Neck\n    —\n—\n02\nPhysician/General Surgery\n2082S0105X\nAllopathic & Osteopathic Physicians\nPlastic Surgery\nSurgery of the Hand\n    —\n—\n03\nPhysician/Allergy/ Immunology\n207K00000X \nAllopathic & Osteopathic Physicians\nAllergy and Immunology\n—\n    —\n—\n03\nPhysician/Allergy/ Immunology\n207KA0200X\nAllopathic & Osteopathic Physicians\nAllergy and Immunology\nAllergy\n    —\n—\n03\nPhysician/Allergy/ Immunology\n207KI0005X\nAllopathic & Osteopathic Physicians\nAllergy and Immunology\nClinical & Laboratory Immunology\n    —\n—\n04\nPhysician/Otolaryngology\n207Y00000X \nAllopathic & Osteopathic Physicians\n Otolaryngology \n—"
  },
  {
    "objectID": "posts/taxonomy/provider_taxonomy.html#sources",
    "href": "posts/taxonomy/provider_taxonomy.html#sources",
    "title": "Taxonomy Codes",
    "section": "Sources",
    "text": "Sources\n\nHealth Care Provider Taxonomy Code Set v24.0 (PDF)\ntaxonomy.NUCC.org\nCMS.gov\nASAM.org"
  },
  {
    "objectID": "posts/mpfs/mpfs.html",
    "href": "posts/mpfs/mpfs.html",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "This is an overview of the general format of the Medicare Physician Fee Schedule (MPFS), specifically the PFS Relative Value File. Updates are released on the first day of each quarter. If required, a correction notice may be issued. The file is a zip archive and typically contains six files:\n\n\n\n\n\n  \n    \n    \n    \n  \n  \n  \n    \n\n\n\nRVU\n\nData Dictionary, Record Layout and File Documentation\n\n    \n\n\n\nPPRRVU\n\nPhysician Fee Schedule RVUs and Policy Indicators\n\n    \n\n\n\nGPCI\n\nGeographic Practice Cost Index Components for each Carrier/Locality combination\n\n    \n\n\n\nLOCCO\n\nLocality to County Crosswalk\n\n    \n\n\n\nANES\n\nAnesthesia Conversion Factors\n\n    \n\n\n\nOPPSCAP\n\nOPPS-based capitation-adjusted payment amounts.\n\n  \n  \n  \n\n\n\n\nWhat follows is a thorough dissection of each file in the archive, starting with the RVU file.\n\n\nThe pdf labeled “RVU” is a comprehensive guide to the structure and contents of each file in the Relative Value zip file. It describes the methodology, that contains a data dictionary, record layout, and documentation\n\nrvu24a &lt;- rvu::get_source(year = 2024, source = \"pprrvu\")$rvu24a_jan |&gt; \n  dplyr::mutate(\n    mod = cheapr::factor_(mod),\n    status_code = cheapr::factor_(status_code),\n    pctc_ind = cheapr::factor_(pctc_ind),\n    glob_days = cheapr::factor_(glob_days),\n    mult_proc = cheapr::factor_(mult_proc),\n    bilat_surg = cheapr::factor_(bilat_surg),\n    asst_surg = cheapr::factor_(asst_surg),\n    co_surg = cheapr::factor_(co_surg),\n    team_surg = cheapr::factor_(team_surg),\n    physician_supervision_of_diagnostic_procedures = cheapr::factor_(physician_supervision_of_diagnostic_procedures),\n    diagnostic_imaging_family_indicator = cheapr::factor_(diagnostic_imaging_family_indicator),\n    )\n\nover &lt;- cheapr::overview(rvu24a, hist = TRUE)\n\nhcpcs_row &lt;- over$categorical |&gt; \n  dplyr::select(variable = col, value = n_unique) |&gt; \n  dplyr::filter(variable == \"hcpcs\")\n\n\n\n\n\ndplyr::left_join(\n  vars |&gt; dplyr::filter(!is.na(value)),\n  dplyr::tibble(\n    variable = names(idx[collapse::funique(vars$variable)]),\n    description = idx[collapse::funique(vars$variable)]),\n  by = dplyr::join_by(variable)\n  ) |&gt; \n  fuimus::combine(\n    name = variable, \n    columns = c('variable', 'description'), \n    sep = \"&lt;br&gt;&lt;br&gt;\"\n    ) |&gt;\n  dplyr::add_row(\n    variable = toupper(hcpcs_row$variable),\n    value = as.character(format(hcpcs_row$value, big.mark = \",\")),\n    n = 18499,\n    pct = 1.0,\n    .before = 1\n    ) |&gt; \n  gt::gt(\n    groupname_col = \"variable\",\n    # rowname_col = \"value\",\n    row_group_as_column = TRUE,\n    process_md = TRUE) |&gt; \n  gt::tab_stubhead(label = \"Variable\") |&gt; \n  gt::cols_label(\n    value = \"Unique\\nValues\",\n    n = \"Total\",\n    pct = \"Percentage\"\n    ) |&gt;\n  gt::fmt_percent(columns = pct) |&gt; \n  gt::fmt_integer(columns = n) |&gt;\n  gt::opt_table_font(font = gt::google_font(name = \"Recursive\")) |&gt; \n  gt::opt_all_caps() |&gt; \n  gt::tab_options(\n    heading.align = \"left\",\n    heading.border.bottom.color = \"#4758AB\",\n    heading.title.font.weight = \"bold\",\n    heading.background.color = \"#4758AB\", # \"#f8f9fa\",\n    quarto.disable_processing = TRUE,\n    data_row.padding.horizontal = gt::px(20),\n    column_labels.padding.horizontal = gt::px(20),\n    table.border.top.color = \"#4758AB\",\n    table.width = gt::pct(100),\n    column_labels.hidden = FALSE,\n    # stub.font.weight = \"bold\",\n    # stub_row_group.font.weight = \"bold\",\n    column_labels.font.weight = \"bold\"\n  )\n\n\n\n\n  \n    \n      Variable\n      Unique\nValues\n      Total\n      Percentage\n    \n  \n  \n    HCPCS\n\n16,324\n18,499\n100.00%\n    MODFor diagnostic tests, a blank in this field denotes the global service and the following modifiers identify the components:26 = Professional componentTC = Technical component For services other than those with a professional and/or technical component, a blank will appear in this field with one exception: the presence of CPT modifier -53 indicates that separate RVUs and a fee schedule amount have been established for procedures which the physician terminated before completion. This modifier is used only with colonoscopy CPT codes 44388 and 45378, or with G0105 and G0121. Any other codes billed with modifier -53 are subject to carrier medical review and priced by individual consideration.53 = Discontinued Procedure - Under certain circumstances, the physician may elect to terminate a surgical or diagnostic procedure. Due to extenuating circumstances, or those that threaten the well being of the patient, it may be necessary to indicate that a surgical or diagnostic procedure was started but discontinued.\n\n26\n1,096\n5.92%\n    TC\n1,076\n5.82%\n    53\n4\n0.02%\n    STATUS CODEIndicates whether the code is in the fee schedule and whether it is separately payable if the service is covered. Only RVUs associated with status codes of A, R, or T, are used for Medicare payment.\n\nA\n8,975\n48.52%\n    X\n2,527\n13.66%\n    I\n1,411\n7.63%\n    E\n1,343\n7.26%\n    M\n1,201\n6.49%\n    C\n1,156\n6.25%\n    R\n1,050\n5.68%\n    N\n327\n1.77%\n    J\n276\n1.49%\n    P\n142\n0.77%\n    B\n83\n0.45%\n    T\n8\n0.04%\n    NOT USED FOR MEDICARE PAYMENTThe name says it all\n\n+\n133\n0.72%\n    NON FAC INDICATORAn NA in this field indicates that this procedure is rarely or never performed in the non-facility setting.\n\nNA\n4,066\n21.98%\n    FACILITY INDICATORAn NA in this field indicates that this procedure is rarely or never performed in the facility setting.\n\nNA\n2,468\n13.34%\n    PCTC INDProfessional Component (PC) or Technical Component (TC) Indicator\n\n9\n7,704\n41.65%\n    0\n7,128\n38.53%\n    1\n3,229\n17.45%\n    3\n178\n0.96%\n    5\n104\n0.56%\n    7\n74\n0.40%\n    2\n44\n0.24%\n    6\n20\n0.11%\n    4\n17\n0.09%\n    8\n1\n0.01%\n    GLOB DAYSGlobal Surgery postoperative timeframes that apply to payment for each surgical procedure or another indicator that describes how the global concept applies to the service.\n\nXXX\n11,262\n60.88%\n    090\n3,771\n20.38%\n    000\n1,326\n7.17%\n    YYY\n933\n5.04%\n    ZZZ\n719\n3.89%\n    010\n471\n2.55%\n    MMM\n17\n0.09%\n    MULT PROCMultiple Procedure (CPT Modifier 51) indicator shows which payment adjustment rule for multiple procedures applies to the service.\n\n9\n7,876\n42.58%\n    2\n5,287\n28.58%\n    0\n4,044\n21.86%\n    4\n420\n2.27%\n    3\n361\n1.95%\n    6\n361\n1.95%\n    7\n98\n0.53%\n    5\n52\n0.28%\n    BILAT SURGBilateral Surgery Indicator (CPT Modifier 50) for services subject to a payment adjustment.\n\n9\n7,892\n42.66%\n    0\n7,784\n42.08%\n    1\n2,203\n11.91%\n    2\n383\n2.07%\n    3\n237\n1.28%\n    ASST SURGAssistant at Surgery (Modifiers AS, 80, 81, and 82) indicator for services where Medicare never pays an assistant at surgery.\n\n9\n7,940\n42.92%\n    0\n5,595\n30.24%\n    2\n2,781\n15.03%\n    1\n2,183\n11.80%\n    CO SURGCo-Surgeons (Modifier 62) This field gives an indicator for services for which Medicare may pay 2 surgeons, each in a different specialty.\n\n9\n7,885\n42.62%\n    0\n7,839\n42.38%\n    1\n2,474\n13.37%\n    2\n301\n1.63%\n    TEAM SURGTeam Surgeons (Modifier 66) This field gives an indicator for services for which Medicare may pay team surgeons.\n\n0\n10,430\n56.38%\n    9\n7,885\n42.62%\n    1\n133\n0.72%\n    2\n51\n0.28%\n    ENDO BASEEndoscopic Base Code for each code with a multiple surgery indicator of 3.\n\n52000\n44\n0.24%\n    31231\n30\n0.16%\n    43235\n30\n0.16%\n    31622\n20\n0.11%\n    43200\n18\n0.10%\n    49320\n18\n0.10%\n    29870\n15\n0.08%\n    45330\n14\n0.08%\n    45378\n14\n0.08%\n    44388\n13\n0.07%\n    29805\n11\n0.06%\n    43260\n10\n0.05%\n    45300\n10\n0.05%\n    46600\n10\n0.05%\n    44360\n9\n0.05%\n    31525\n8\n0.04%\n    31575\n8\n0.04%\n    31526\n7\n0.04%\n    52351\n7\n0.04%\n    58555\n7\n0.04%\n    29860\n6\n0.03%\n    29830\n5\n0.03%\n    29840\n5\n0.03%\n    43191\n5\n0.03%\n    50570\n5\n0.03%\n    57452\n5\n0.03%\n    31505\n4\n0.02%\n    47552\n4\n0.02%\n    50951\n4\n0.02%\n    44376\n3\n0.02%\n    44380\n3\n0.02%\n    50551\n3\n0.02%\n    0652T\n2\n0.01%\n    50970\n2\n0.01%\n    43197\n1\n0.01%\n    66710\n1\n0.01%\n    PHYSICIAN SUPERVISION OF DIAGNOSTIC PROCEDURESMedicare uses this field in post payment review.\n\n09\n17,465\n94.41%\n    01\n533\n2.88%\n    02\n249\n1.35%\n    03\n207\n1.12%\n    04\n16\n0.09%\n    6A\n13\n0.07%\n    7A\n9\n0.05%\n    21\n5\n0.03%\n    05\n1\n0.01%\n    66\n1\n0.01%\n    DIAGNOSTIC IMAGING FAMILY INDICATORIdentifies the applicable Diagnostic Service family for HCPCS codes with a Multiple Procedure indicator of 4. For services effective January 1, 2011, and after, family indicators 01 - 11 won’t populate.\n\n99\n18,055\n97.60%\n    88\n444\n2.40%\n  \n  \n  \n\n\n\n\n\nover$numeric |&gt; \n  dplyr::select(\n    variable = col, \n    unique = n_unique,\n    # min = p0, \n    # p25,\n    # median = p50,\n    p75,\n    max = p100,\n    iqr, \n    mean,\n    sd,\n    hist\n    ) |&gt;\n  gt::gt(\n    groupname_col = \"variable\",\n    row_group_as_column = TRUE,\n    process_md = TRUE) |&gt; \n  gt::fmt_integer(columns = unique) |&gt;\n  gt::fmt_number(columns = p75:sd) |&gt;\n  gt::opt_table_font(font = gt::google_font(name = \"Recursive\")) |&gt; \n  gt::tab_options(\n    heading.align = \"left\",\n    heading.border.bottom.color = \"#4758AB\",\n    heading.title.font.weight = \"bold\",\n    heading.background.color = \"#4758AB\", # \"#f8f9fa\",\n    quarto.disable_processing = TRUE,\n    data_row.padding.horizontal = gt::px(20),\n    column_labels.padding.horizontal = gt::px(20),\n    table.border.top.color = \"#4758AB\",\n    table.width = gt::pct(100),\n    column_labels.hidden = FALSE\n  )\n\n\n\n\n  \n    \n      \n      unique\n      p75\n      max\n      iqr\n      mean\n      sd\n      hist\n    \n  \n  \n    work_rvu\n\n2,486\n3.21\n108.91\n3.21\n3.88\n8.51\n▇▁▁▁▁\n    non_fac_pe_rvu\n\n2,310\n5.35\n355.87\n5.35\n4.01\n10.52\n▇▁▁▁▁\n    facility_pe_rvu\n\n2,079\n3.66\n53.07\n3.66\n3.03\n5.60\n▇▁▁▁▁\n    mp_rvu\n\n1,026\n0.43\n28.99\n0.43\n0.83\n2.20\n▇▁▁▁▁\n    non_facility_total\n\n3,877\n9.79\n364.53\n9.79\n8.71\n18.07\n▇▁▁▁▁\n    facility_total\n\n3,683\n7.50\n171.00\n7.50\n7.74\n15.57\n▇▁▁▁▁\n    pre_op\n\n8\n0.00\n0.17\n0.00\n0.02\n0.04\n▇▁▂▁▁\n    intra_op\n\n14\n0.00\n0.84\n0.00\n0.17\n0.32\n▇▁▁▁▂\n    post_op\n\n11\n0.00\n0.23\n0.00\n0.03\n0.07\n▇▁▁▁▁\n    conv_factor\n\n1\n32.74\n32.74\n0.00\n32.74\n0.00\n▁▁▇▁▁\n    non_facility_pe_used_for_opps_payment_amount\n\n417\n0.00\n159.54\n0.00\n0.90\n7.15\n▇▁▁▁▁\n    facility_pe_used_for_opps_payment_amount\n\n417\n0.00\n159.54\n0.00\n0.90\n7.15\n▇▁▁▁▁\n    mp_used_for_opps_payment_amount\n\n81\n0.00\n1.83\n0.00\n0.01\n0.06\n▇▁▁▁▁\n  \n  \n  \n\n\n\n\n\n\n\nThe MPFS is a listing of the relative value units (RVUs) for each CPT code, as well as the geographic practice cost index (GPCI) for each code. The RVUs are used to calculate the payment amount for each service, while the GPCI is used to adjust the payment amount based on the location where the service is provided.\nThis file contains information on services covered by the MPFS in 2024. For more than 10,000 physician services, the file contains the associated RVUs, a fee schedule status indicator, and various payment policy indicators needed for payment adjustment (i.e., payment of assistant at surgery, team surgery, bilateral surgery, etc.).\nThe MPFS amounts are adjusted to reflect the variation in practice costs from area to area. A GPCI has been established for every Medicare payment locality for each of the three components of a procedure’s RVU:\n\nPhysician Work\nPractice Expense\nMalpractice Expense (sometimes called Professional Liability Insurance)\n\nThe GPCIs are applied in the calculation of a fee schedule payment amount by multiplying the RVU for each component times the GPCI for that component.\n\n\n\\[ x = [(RVU_w \\times GPCI_w) + (RVU_p \\times GPCI_p) + (RVU_m \\times GPCI_m)] \\times CF \\]\n\n\n\n\\[ y = 0.95x \\]\n\n\n\n\\[ z = 0.95(1.15x) \\]\n\n\n\n\n\n\nMany Ways to Say the Same Thing\n\n\n\n\nAs there is a corresponding GPCI value for each of the three components of an RVU, the formula is essentially the dot product of the RVU and GPCI vectors, multiplied by the conversion factor:\n\n\\[ a \\cdot b = a_1b_1 + a_2b_2 + a_3b_3\\] \nSetting up the variables:\n\nwrvu  = 6.26   # Work RVU\nwgpci = 1      # Work GPCI\n\npgpci = 0.883  # Practice GPCI\nprvu  = 4.36   # Practice RVU\n\nmrvu  = 0.99   # Malpractice RVU\nmgpci = 1.125  # Malpractice GPCI\n\ncf    = 32.744 # Conversion Factor\n\n\nBasic Calculation:\n\n((wrvu * wgpci) + \n   (prvu * pgpci) + \n   (mrvu * mgpci)) * cf\n\n[1] 367.5065\n\n\n\nWith base R’s Matrix Multiplication Infix Operator:\n\nas.vector(\n  c(wrvu, prvu, mrvu) %*% \n  c(wgpci, pgpci, mgpci) * cf)\n\n[1] 367.5065\n\n\n\nWith the pracma package’s dot() function:\n\npracma::dot(\n  c(wrvu, prvu, mrvu), \n  c(wgpci, pgpci, mgpci)) * cf\n\n[1] 367.5065\n\n\n\nWith the northstar package’s calculate_amounts() function:\n\ncalculate_amounts(\n  wrvu  = 6.26,\n  nprvu = 7.92,\n  fprvu = 4.36,\n  mrvu  = 0.99,\n  cf    = 32.744,\n  wgpci = 1,\n  pgpci = 0.883,\n  mgpci = 1.125\n)\n\nFacility Amounts:\n\nRVU Total ............ 11.22\nParticipating ........ $367.51\nNon-Particpating ..... $349.13\nLimiting Charge ...... $401.50\n\nNon-Facility Amounts:\n\nRVU Total ............ 14.37\nParticipating ........ $470.44\nNon-Particpating ..... $446.91\nLimiting Charge ...... $513.95\n\n\n\n\n\n\n\n\n\n\nNon-Facility vs. Facility\n\n\n\nUnder the MPFS, many procedures have separate payment amounts for physician services when provided in facility and non-facility settings.\nThe amount is determined by the Place of Service (POS) code. In general, the POS code reflects the actual place where the patient receives the face-to-face service and determines whether the facility or non-facility payment rate is paid.\nServices rendered to a patient who is an inpatient of a hospital (POS code 21) or an outpatient of a hospital (POS codes 19 or 22), the facility rate is paid, regardless of where the face-to-face encounter with the patient occurred.\n\n\n\n\n\n\n\n\n\nTherapy Code Capitation\n\n\n\nCertain therapy codes will receive a 50% reduction to the Practice Expense.\nSection 5102(b) of the Deficit Reduction Act of 2005 requires a payment cap on the Technical Component (TC) of certain diagnostic imaging procedures and the TC portions of the global diagnostic imaging services.\nThis cap is based on the Outpatient Prospective Payment System (OPPS) payment. To implement this provision, the Physician Fee Schedule amount is compared to the OPPS payment amount and the lower amount is used in the formula to calculate payment.\n\n\n\n\n\n\nAccepting assignment means that a healthcare provider or facility is partnered with Medicare and is required by law to charge only the Medicare-approved amount for various services. This amount is preset by Medicare and is often less than many healthcare facilities would charge.\nBecause of this, when patients receive care at a facility that accepts assignment, they will be required to pay lower out-of-pocket costs as Medicare will cover the full amount of the service cost. Personal costs only include the premium and any charges up to the deductible amount.\nPhysicians or facilities that do not accept assignment are a non-participating providers. All physicians are required to file with Medicare, indicating that they either accept or do not accept assignment. If a provider does not accept assignment, it means that they are not required to charge only the Medicare-approved amount for services.\n\n\nOne possible option for non-participating providers is to choose to accept assignment for some services but to decline assignment for others. For services that they accept assignment for, they are only able to bill the Medicare-approved amount. However, for other services, they are allowed to charge up to 15 percent more than the Medicare-approved amount.\nThis limit cap is known as the limiting charge. Providers that do not fully participate only receive 95 percent of the Medicare-approved amount when Medicare reimburses them for the cost of care. In turn, the provider can charge the patient up to 15 percent more than this reimbursement amount. This extra charge will not be covered by Medicare, which causes Medicare recipients to incur greater out-of-pocket costs.\nThe Medicare limiting charge is the maximum amount a Non-Participating Provider can charge for services submitted on a non-assigned claim. This is that maximum amount a beneficiary could legally be charged.\n\n\n\nThe Medicare limiting charge is, by law, set at \\(115\\%\\) of the payment amount for the service furnished by the Non-Participating Physician.\nHowever, the law sets the payment amount for Non-Participating Physicians at \\(95\\%\\) of the payment amount for Participating Physicians (i.e., the Fee Schedule amount).\nCalculating \\(95\\%\\) of \\(115\\%\\) of an amount, \\(x\\), is equivalent to \\(x \\times 1.0925\\) (or \\(109.25\\%\\)):\n\n# 95% of 115% of 10\n(10 * 1.15) * 0.95 \n\n[1] 10.925\n\n# 109.25% of 10\n10 * 1.0925 \n\n[1] 10.925\n\n# using the northstar package\nlimiting_charge(10)\n\n[1] 10.925\n\n\n\n\n\n\nThis file contains information on services covered by the Medicare Physician Fee Schedule (MPFS). For more than 10,000 physician services, the file contains the associated relative value units (RVUs), a fee schedule status indicator, and various payment policy indicators needed for payment adjustment (i.e., payment of assistant at surgery, team surgery, bilateral surgery, etc.).\nThe Medicare physician fee schedule amounts are adjusted to reflect the variation in practice costs from area to area. A geographic practice cost index (GPCI) has been established for every Medicare payment locality for each of the three components of a procedure’s relative value unit (i.e., the RVUs for work, practice expense, and malpractice). The GPCIs are applied in the calculation of a fee schedule payment amount by multiplying the RVU for each component times the GPCI for that component.\n\n\n\n\n\nIndicates whether the code is in the fee schedule and whether it is separately payable if the service is covered. See Attachment A for description of values.\nOnly RVUs associated with status codes of A, R, or T, are used for Medicare payment.\n\n\n\n\n\n\n\nProvides time frames that apply to each surgical procedure.\n\n\n\nPreoperativeIntraoperativePostoperative\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFacilityNon-Facility\n\n\nAn NA in this field indicates that this procedure is rarely or never performed in the Facility setting:\n\n\nAn NA in this field indicates that this procedure is rarely or never performed in the Non-Facility setting:\n\n\n\n\n\n\nIndicates applicable payment adjustment rule for multiple procedures (modifier 51)."
  },
  {
    "objectID": "posts/mpfs/mpfs.html#rvu",
    "href": "posts/mpfs/mpfs.html#rvu",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "The pdf labeled “RVU” is a comprehensive guide to the structure and contents of each file in the Relative Value zip file. It describes the methodology, that contains a data dictionary, record layout, and documentation\n\nrvu24a &lt;- rvu::get_source(year = 2024, source = \"pprrvu\")$rvu24a_jan |&gt; \n  dplyr::mutate(\n    mod = cheapr::factor_(mod),\n    status_code = cheapr::factor_(status_code),\n    pctc_ind = cheapr::factor_(pctc_ind),\n    glob_days = cheapr::factor_(glob_days),\n    mult_proc = cheapr::factor_(mult_proc),\n    bilat_surg = cheapr::factor_(bilat_surg),\n    asst_surg = cheapr::factor_(asst_surg),\n    co_surg = cheapr::factor_(co_surg),\n    team_surg = cheapr::factor_(team_surg),\n    physician_supervision_of_diagnostic_procedures = cheapr::factor_(physician_supervision_of_diagnostic_procedures),\n    diagnostic_imaging_family_indicator = cheapr::factor_(diagnostic_imaging_family_indicator),\n    )\n\nover &lt;- cheapr::overview(rvu24a, hist = TRUE)\n\nhcpcs_row &lt;- over$categorical |&gt; \n  dplyr::select(variable = col, value = n_unique) |&gt; \n  dplyr::filter(variable == \"hcpcs\")"
  },
  {
    "objectID": "posts/mpfs/mpfs.html#indicators",
    "href": "posts/mpfs/mpfs.html#indicators",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "dplyr::left_join(\n  vars |&gt; dplyr::filter(!is.na(value)),\n  dplyr::tibble(\n    variable = names(idx[collapse::funique(vars$variable)]),\n    description = idx[collapse::funique(vars$variable)]),\n  by = dplyr::join_by(variable)\n  ) |&gt; \n  fuimus::combine(\n    name = variable, \n    columns = c('variable', 'description'), \n    sep = \"&lt;br&gt;&lt;br&gt;\"\n    ) |&gt;\n  dplyr::add_row(\n    variable = toupper(hcpcs_row$variable),\n    value = as.character(format(hcpcs_row$value, big.mark = \",\")),\n    n = 18499,\n    pct = 1.0,\n    .before = 1\n    ) |&gt; \n  gt::gt(\n    groupname_col = \"variable\",\n    # rowname_col = \"value\",\n    row_group_as_column = TRUE,\n    process_md = TRUE) |&gt; \n  gt::tab_stubhead(label = \"Variable\") |&gt; \n  gt::cols_label(\n    value = \"Unique\\nValues\",\n    n = \"Total\",\n    pct = \"Percentage\"\n    ) |&gt;\n  gt::fmt_percent(columns = pct) |&gt; \n  gt::fmt_integer(columns = n) |&gt;\n  gt::opt_table_font(font = gt::google_font(name = \"Recursive\")) |&gt; \n  gt::opt_all_caps() |&gt; \n  gt::tab_options(\n    heading.align = \"left\",\n    heading.border.bottom.color = \"#4758AB\",\n    heading.title.font.weight = \"bold\",\n    heading.background.color = \"#4758AB\", # \"#f8f9fa\",\n    quarto.disable_processing = TRUE,\n    data_row.padding.horizontal = gt::px(20),\n    column_labels.padding.horizontal = gt::px(20),\n    table.border.top.color = \"#4758AB\",\n    table.width = gt::pct(100),\n    column_labels.hidden = FALSE,\n    # stub.font.weight = \"bold\",\n    # stub_row_group.font.weight = \"bold\",\n    column_labels.font.weight = \"bold\"\n  )\n\n\n\n\n  \n    \n      Variable\n      Unique\nValues\n      Total\n      Percentage\n    \n  \n  \n    HCPCS\n\n16,324\n18,499\n100.00%\n    MODFor diagnostic tests, a blank in this field denotes the global service and the following modifiers identify the components:26 = Professional componentTC = Technical component For services other than those with a professional and/or technical component, a blank will appear in this field with one exception: the presence of CPT modifier -53 indicates that separate RVUs and a fee schedule amount have been established for procedures which the physician terminated before completion. This modifier is used only with colonoscopy CPT codes 44388 and 45378, or with G0105 and G0121. Any other codes billed with modifier -53 are subject to carrier medical review and priced by individual consideration.53 = Discontinued Procedure - Under certain circumstances, the physician may elect to terminate a surgical or diagnostic procedure. Due to extenuating circumstances, or those that threaten the well being of the patient, it may be necessary to indicate that a surgical or diagnostic procedure was started but discontinued.\n\n26\n1,096\n5.92%\n    TC\n1,076\n5.82%\n    53\n4\n0.02%\n    STATUS CODEIndicates whether the code is in the fee schedule and whether it is separately payable if the service is covered. Only RVUs associated with status codes of A, R, or T, are used for Medicare payment.\n\nA\n8,975\n48.52%\n    X\n2,527\n13.66%\n    I\n1,411\n7.63%\n    E\n1,343\n7.26%\n    M\n1,201\n6.49%\n    C\n1,156\n6.25%\n    R\n1,050\n5.68%\n    N\n327\n1.77%\n    J\n276\n1.49%\n    P\n142\n0.77%\n    B\n83\n0.45%\n    T\n8\n0.04%\n    NOT USED FOR MEDICARE PAYMENTThe name says it all\n\n+\n133\n0.72%\n    NON FAC INDICATORAn NA in this field indicates that this procedure is rarely or never performed in the non-facility setting.\n\nNA\n4,066\n21.98%\n    FACILITY INDICATORAn NA in this field indicates that this procedure is rarely or never performed in the facility setting.\n\nNA\n2,468\n13.34%\n    PCTC INDProfessional Component (PC) or Technical Component (TC) Indicator\n\n9\n7,704\n41.65%\n    0\n7,128\n38.53%\n    1\n3,229\n17.45%\n    3\n178\n0.96%\n    5\n104\n0.56%\n    7\n74\n0.40%\n    2\n44\n0.24%\n    6\n20\n0.11%\n    4\n17\n0.09%\n    8\n1\n0.01%\n    GLOB DAYSGlobal Surgery postoperative timeframes that apply to payment for each surgical procedure or another indicator that describes how the global concept applies to the service.\n\nXXX\n11,262\n60.88%\n    090\n3,771\n20.38%\n    000\n1,326\n7.17%\n    YYY\n933\n5.04%\n    ZZZ\n719\n3.89%\n    010\n471\n2.55%\n    MMM\n17\n0.09%\n    MULT PROCMultiple Procedure (CPT Modifier 51) indicator shows which payment adjustment rule for multiple procedures applies to the service.\n\n9\n7,876\n42.58%\n    2\n5,287\n28.58%\n    0\n4,044\n21.86%\n    4\n420\n2.27%\n    3\n361\n1.95%\n    6\n361\n1.95%\n    7\n98\n0.53%\n    5\n52\n0.28%\n    BILAT SURGBilateral Surgery Indicator (CPT Modifier 50) for services subject to a payment adjustment.\n\n9\n7,892\n42.66%\n    0\n7,784\n42.08%\n    1\n2,203\n11.91%\n    2\n383\n2.07%\n    3\n237\n1.28%\n    ASST SURGAssistant at Surgery (Modifiers AS, 80, 81, and 82) indicator for services where Medicare never pays an assistant at surgery.\n\n9\n7,940\n42.92%\n    0\n5,595\n30.24%\n    2\n2,781\n15.03%\n    1\n2,183\n11.80%\n    CO SURGCo-Surgeons (Modifier 62) This field gives an indicator for services for which Medicare may pay 2 surgeons, each in a different specialty.\n\n9\n7,885\n42.62%\n    0\n7,839\n42.38%\n    1\n2,474\n13.37%\n    2\n301\n1.63%\n    TEAM SURGTeam Surgeons (Modifier 66) This field gives an indicator for services for which Medicare may pay team surgeons.\n\n0\n10,430\n56.38%\n    9\n7,885\n42.62%\n    1\n133\n0.72%\n    2\n51\n0.28%\n    ENDO BASEEndoscopic Base Code for each code with a multiple surgery indicator of 3.\n\n52000\n44\n0.24%\n    31231\n30\n0.16%\n    43235\n30\n0.16%\n    31622\n20\n0.11%\n    43200\n18\n0.10%\n    49320\n18\n0.10%\n    29870\n15\n0.08%\n    45330\n14\n0.08%\n    45378\n14\n0.08%\n    44388\n13\n0.07%\n    29805\n11\n0.06%\n    43260\n10\n0.05%\n    45300\n10\n0.05%\n    46600\n10\n0.05%\n    44360\n9\n0.05%\n    31525\n8\n0.04%\n    31575\n8\n0.04%\n    31526\n7\n0.04%\n    52351\n7\n0.04%\n    58555\n7\n0.04%\n    29860\n6\n0.03%\n    29830\n5\n0.03%\n    29840\n5\n0.03%\n    43191\n5\n0.03%\n    50570\n5\n0.03%\n    57452\n5\n0.03%\n    31505\n4\n0.02%\n    47552\n4\n0.02%\n    50951\n4\n0.02%\n    44376\n3\n0.02%\n    44380\n3\n0.02%\n    50551\n3\n0.02%\n    0652T\n2\n0.01%\n    50970\n2\n0.01%\n    43197\n1\n0.01%\n    66710\n1\n0.01%\n    PHYSICIAN SUPERVISION OF DIAGNOSTIC PROCEDURESMedicare uses this field in post payment review.\n\n09\n17,465\n94.41%\n    01\n533\n2.88%\n    02\n249\n1.35%\n    03\n207\n1.12%\n    04\n16\n0.09%\n    6A\n13\n0.07%\n    7A\n9\n0.05%\n    21\n5\n0.03%\n    05\n1\n0.01%\n    66\n1\n0.01%\n    DIAGNOSTIC IMAGING FAMILY INDICATORIdentifies the applicable Diagnostic Service family for HCPCS codes with a Multiple Procedure indicator of 4. For services effective January 1, 2011, and after, family indicators 01 - 11 won’t populate.\n\n99\n18,055\n97.60%\n    88\n444\n2.40%\n  \n  \n  \n\n\n\n\n\nover$numeric |&gt; \n  dplyr::select(\n    variable = col, \n    unique = n_unique,\n    # min = p0, \n    # p25,\n    # median = p50,\n    p75,\n    max = p100,\n    iqr, \n    mean,\n    sd,\n    hist\n    ) |&gt;\n  gt::gt(\n    groupname_col = \"variable\",\n    row_group_as_column = TRUE,\n    process_md = TRUE) |&gt; \n  gt::fmt_integer(columns = unique) |&gt;\n  gt::fmt_number(columns = p75:sd) |&gt;\n  gt::opt_table_font(font = gt::google_font(name = \"Recursive\")) |&gt; \n  gt::tab_options(\n    heading.align = \"left\",\n    heading.border.bottom.color = \"#4758AB\",\n    heading.title.font.weight = \"bold\",\n    heading.background.color = \"#4758AB\", # \"#f8f9fa\",\n    quarto.disable_processing = TRUE,\n    data_row.padding.horizontal = gt::px(20),\n    column_labels.padding.horizontal = gt::px(20),\n    table.border.top.color = \"#4758AB\",\n    table.width = gt::pct(100),\n    column_labels.hidden = FALSE\n  )\n\n\n\n\n  \n    \n      \n      unique\n      p75\n      max\n      iqr\n      mean\n      sd\n      hist\n    \n  \n  \n    work_rvu\n\n2,486\n3.21\n108.91\n3.21\n3.88\n8.51\n▇▁▁▁▁\n    non_fac_pe_rvu\n\n2,310\n5.35\n355.87\n5.35\n4.01\n10.52\n▇▁▁▁▁\n    facility_pe_rvu\n\n2,079\n3.66\n53.07\n3.66\n3.03\n5.60\n▇▁▁▁▁\n    mp_rvu\n\n1,026\n0.43\n28.99\n0.43\n0.83\n2.20\n▇▁▁▁▁\n    non_facility_total\n\n3,877\n9.79\n364.53\n9.79\n8.71\n18.07\n▇▁▁▁▁\n    facility_total\n\n3,683\n7.50\n171.00\n7.50\n7.74\n15.57\n▇▁▁▁▁\n    pre_op\n\n8\n0.00\n0.17\n0.00\n0.02\n0.04\n▇▁▂▁▁\n    intra_op\n\n14\n0.00\n0.84\n0.00\n0.17\n0.32\n▇▁▁▁▂\n    post_op\n\n11\n0.00\n0.23\n0.00\n0.03\n0.07\n▇▁▁▁▁\n    conv_factor\n\n1\n32.74\n32.74\n0.00\n32.74\n0.00\n▁▁▇▁▁\n    non_facility_pe_used_for_opps_payment_amount\n\n417\n0.00\n159.54\n0.00\n0.90\n7.15\n▇▁▁▁▁\n    facility_pe_used_for_opps_payment_amount\n\n417\n0.00\n159.54\n0.00\n0.90\n7.15\n▇▁▁▁▁\n    mp_used_for_opps_payment_amount\n\n81\n0.00\n1.83\n0.00\n0.01\n0.06\n▇▁▁▁▁"
  },
  {
    "objectID": "posts/mpfs/mpfs.html#pprvu",
    "href": "posts/mpfs/mpfs.html#pprvu",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "The MPFS is a listing of the relative value units (RVUs) for each CPT code, as well as the geographic practice cost index (GPCI) for each code. The RVUs are used to calculate the payment amount for each service, while the GPCI is used to adjust the payment amount based on the location where the service is provided.\nThis file contains information on services covered by the MPFS in 2024. For more than 10,000 physician services, the file contains the associated RVUs, a fee schedule status indicator, and various payment policy indicators needed for payment adjustment (i.e., payment of assistant at surgery, team surgery, bilateral surgery, etc.).\nThe MPFS amounts are adjusted to reflect the variation in practice costs from area to area. A GPCI has been established for every Medicare payment locality for each of the three components of a procedure’s RVU:\n\nPhysician Work\nPractice Expense\nMalpractice Expense (sometimes called Professional Liability Insurance)\n\nThe GPCIs are applied in the calculation of a fee schedule payment amount by multiplying the RVU for each component times the GPCI for that component.\n\n\n\\[ x = [(RVU_w \\times GPCI_w) + (RVU_p \\times GPCI_p) + (RVU_m \\times GPCI_m)] \\times CF \\]\n\n\n\n\\[ y = 0.95x \\]\n\n\n\n\\[ z = 0.95(1.15x) \\]\n\n\n\n\n\n\nMany Ways to Say the Same Thing\n\n\n\n\nAs there is a corresponding GPCI value for each of the three components of an RVU, the formula is essentially the dot product of the RVU and GPCI vectors, multiplied by the conversion factor:\n\n\\[ a \\cdot b = a_1b_1 + a_2b_2 + a_3b_3\\] \nSetting up the variables:\n\nwrvu  = 6.26   # Work RVU\nwgpci = 1      # Work GPCI\n\npgpci = 0.883  # Practice GPCI\nprvu  = 4.36   # Practice RVU\n\nmrvu  = 0.99   # Malpractice RVU\nmgpci = 1.125  # Malpractice GPCI\n\ncf    = 32.744 # Conversion Factor\n\n\nBasic Calculation:\n\n((wrvu * wgpci) + \n   (prvu * pgpci) + \n   (mrvu * mgpci)) * cf\n\n[1] 367.5065\n\n\n\nWith base R’s Matrix Multiplication Infix Operator:\n\nas.vector(\n  c(wrvu, prvu, mrvu) %*% \n  c(wgpci, pgpci, mgpci) * cf)\n\n[1] 367.5065\n\n\n\nWith the pracma package’s dot() function:\n\npracma::dot(\n  c(wrvu, prvu, mrvu), \n  c(wgpci, pgpci, mgpci)) * cf\n\n[1] 367.5065\n\n\n\nWith the northstar package’s calculate_amounts() function:\n\ncalculate_amounts(\n  wrvu  = 6.26,\n  nprvu = 7.92,\n  fprvu = 4.36,\n  mrvu  = 0.99,\n  cf    = 32.744,\n  wgpci = 1,\n  pgpci = 0.883,\n  mgpci = 1.125\n)\n\nFacility Amounts:\n\nRVU Total ............ 11.22\nParticipating ........ $367.51\nNon-Particpating ..... $349.13\nLimiting Charge ...... $401.50\n\nNon-Facility Amounts:\n\nRVU Total ............ 14.37\nParticipating ........ $470.44\nNon-Particpating ..... $446.91\nLimiting Charge ...... $513.95\n\n\n\n\n\n\n\n\n\n\nNon-Facility vs. Facility\n\n\n\nUnder the MPFS, many procedures have separate payment amounts for physician services when provided in facility and non-facility settings.\nThe amount is determined by the Place of Service (POS) code. In general, the POS code reflects the actual place where the patient receives the face-to-face service and determines whether the facility or non-facility payment rate is paid.\nServices rendered to a patient who is an inpatient of a hospital (POS code 21) or an outpatient of a hospital (POS codes 19 or 22), the facility rate is paid, regardless of where the face-to-face encounter with the patient occurred.\n\n\n\n\n\n\n\n\n\nTherapy Code Capitation\n\n\n\nCertain therapy codes will receive a 50% reduction to the Practice Expense.\nSection 5102(b) of the Deficit Reduction Act of 2005 requires a payment cap on the Technical Component (TC) of certain diagnostic imaging procedures and the TC portions of the global diagnostic imaging services.\nThis cap is based on the Outpatient Prospective Payment System (OPPS) payment. To implement this provision, the Physician Fee Schedule amount is compared to the OPPS payment amount and the lower amount is used in the formula to calculate payment."
  },
  {
    "objectID": "posts/mpfs/mpfs.html#accepting-assignment",
    "href": "posts/mpfs/mpfs.html#accepting-assignment",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "Accepting assignment means that a healthcare provider or facility is partnered with Medicare and is required by law to charge only the Medicare-approved amount for various services. This amount is preset by Medicare and is often less than many healthcare facilities would charge.\nBecause of this, when patients receive care at a facility that accepts assignment, they will be required to pay lower out-of-pocket costs as Medicare will cover the full amount of the service cost. Personal costs only include the premium and any charges up to the deductible amount.\nPhysicians or facilities that do not accept assignment are a non-participating providers. All physicians are required to file with Medicare, indicating that they either accept or do not accept assignment. If a provider does not accept assignment, it means that they are not required to charge only the Medicare-approved amount for services.\n\n\nOne possible option for non-participating providers is to choose to accept assignment for some services but to decline assignment for others. For services that they accept assignment for, they are only able to bill the Medicare-approved amount. However, for other services, they are allowed to charge up to 15 percent more than the Medicare-approved amount.\nThis limit cap is known as the limiting charge. Providers that do not fully participate only receive 95 percent of the Medicare-approved amount when Medicare reimburses them for the cost of care. In turn, the provider can charge the patient up to 15 percent more than this reimbursement amount. This extra charge will not be covered by Medicare, which causes Medicare recipients to incur greater out-of-pocket costs.\nThe Medicare limiting charge is the maximum amount a Non-Participating Provider can charge for services submitted on a non-assigned claim. This is that maximum amount a beneficiary could legally be charged.\n\n\n\nThe Medicare limiting charge is, by law, set at \\(115\\%\\) of the payment amount for the service furnished by the Non-Participating Physician.\nHowever, the law sets the payment amount for Non-Participating Physicians at \\(95\\%\\) of the payment amount for Participating Physicians (i.e., the Fee Schedule amount).\nCalculating \\(95\\%\\) of \\(115\\%\\) of an amount, \\(x\\), is equivalent to \\(x \\times 1.0925\\) (or \\(109.25\\%\\)):\n\n# 95% of 115% of 10\n(10 * 1.15) * 0.95 \n\n[1] 10.925\n\n# 109.25% of 10\n10 * 1.0925 \n\n[1] 10.925\n\n# using the northstar package\nlimiting_charge(10)\n\n[1] 10.925"
  },
  {
    "objectID": "posts/mpfs/mpfs.html#relative-value-file",
    "href": "posts/mpfs/mpfs.html#relative-value-file",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "This file contains information on services covered by the Medicare Physician Fee Schedule (MPFS). For more than 10,000 physician services, the file contains the associated relative value units (RVUs), a fee schedule status indicator, and various payment policy indicators needed for payment adjustment (i.e., payment of assistant at surgery, team surgery, bilateral surgery, etc.).\nThe Medicare physician fee schedule amounts are adjusted to reflect the variation in practice costs from area to area. A geographic practice cost index (GPCI) has been established for every Medicare payment locality for each of the three components of a procedure’s relative value unit (i.e., the RVUs for work, practice expense, and malpractice). The GPCIs are applied in the calculation of a fee schedule payment amount by multiplying the RVU for each component times the GPCI for that component.\n\n\n\n\n\nIndicates whether the code is in the fee schedule and whether it is separately payable if the service is covered. See Attachment A for description of values.\nOnly RVUs associated with status codes of A, R, or T, are used for Medicare payment."
  },
  {
    "objectID": "posts/mpfs/mpfs.html#global-surgery-days",
    "href": "posts/mpfs/mpfs.html#global-surgery-days",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "Provides time frames that apply to each surgical procedure.\n\n\n\nPreoperativeIntraoperativePostoperative"
  },
  {
    "objectID": "posts/mpfs/mpfs.html#indicators-1",
    "href": "posts/mpfs/mpfs.html#indicators-1",
    "title": "Medicare Physician Fee Schedule",
    "section": "",
    "text": "FacilityNon-Facility\n\n\nAn NA in this field indicates that this procedure is rarely or never performed in the Facility setting:\n\n\nAn NA in this field indicates that this procedure is rarely or never performed in the Non-Facility setting:\n\n\n\n\n\n\nIndicates applicable payment adjustment rule for multiple procedures (modifier 51)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning for Getting Ahead",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nReading Time\n\n\n\n\n\n\n2024-08-03\n\n\nTaxonomy Codes\n\n\n10 min\n\n\n\n\n2024-08-05\n\n\nMedicare Physician Fee Schedule\n\n\n38 min\n\n\n\n\n2024-08-06\n\n\nClaims Analysis\n\n\n9 min\n\n\n\n\n2024-08-07\n\n\nBuilding an NPI Constructor\n\n\n13 min\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "posts/claims/claims.html",
    "href": "posts/claims/claims.html",
    "title": "Claims Analysis",
    "section": "",
    "text": "# FIXME id needs to be padded to 4 digits\nmax(nchar(claims$id))\n\n[1] -Inf\n\n\n\n\n\nexpand_date_range &lt;- function(x, nm) {\n  \n  collapse::funique(collapse::na_rm(x)) |&gt; \n    timeplyr::time_completev(time_by = \"days\") |&gt; \n    timeplyr::calendar(name = nm) |&gt; \n    collapse::get_vars(\"^[^iso|epi]\", regex = TRUE)\n  \n}\n\nclaims |&gt; \n  select(id:dos, \n         dob:age, \n         rendering, \n         pos, \n         ins_class, \n         ins_prim) |&gt;\n  distinct() |&gt; \n  full_join(expand_date_range(claims$dos, \"dos\"), by = join_by(dos)) |&gt; \n  arrange(dos, id, enc)\n\nError in `select()`:\n! Can't select columns that don't exist.\n✖ Column `id` doesn't exist.\n\n\n\nclaims |&gt; \n  select(id:dos, \n         dob:age, \n         rendering, \n         pos, \n         ins_class, \n         ins_prim) |&gt;\n  distinct(id, dos, .keep_all = TRUE) |&gt; \n  arrange(dos, id, enc) |&gt; \n  full_join(expand_date_range(claims$dos, \"dos\"), by = join_by(dos)) |&gt; \n  filter(!is.na(id)) |&gt;\n  timeplyr::fcount(year, month_l, .by = dos, sort = TRUE) |&gt; \n  arrange(year, month_l, dos) |&gt; \n  fuimus::sorted_bars(var = month_l)\n\nError in `select()`:\n! Can't select columns that don't exist.\n✖ Column `id` doesn't exist."
  },
  {
    "objectID": "posts/claims/claims.html#find-date-range-of-the-claims",
    "href": "posts/claims/claims.html#find-date-range-of-the-claims",
    "title": "Claims Analysis",
    "section": "",
    "text": "expand_date_range &lt;- function(x, nm) {\n  \n  collapse::funique(collapse::na_rm(x)) |&gt; \n    timeplyr::time_completev(time_by = \"days\") |&gt; \n    timeplyr::calendar(name = nm) |&gt; \n    collapse::get_vars(\"^[^iso|epi]\", regex = TRUE)\n  \n}\n\nclaims |&gt; \n  select(id:dos, \n         dob:age, \n         rendering, \n         pos, \n         ins_class, \n         ins_prim) |&gt;\n  distinct() |&gt; \n  full_join(expand_date_range(claims$dos, \"dos\"), by = join_by(dos)) |&gt; \n  arrange(dos, id, enc)\n\nError in `select()`:\n! Can't select columns that don't exist.\n✖ Column `id` doesn't exist.\n\n\n\nclaims |&gt; \n  select(id:dos, \n         dob:age, \n         rendering, \n         pos, \n         ins_class, \n         ins_prim) |&gt;\n  distinct(id, dos, .keep_all = TRUE) |&gt; \n  arrange(dos, id, enc) |&gt; \n  full_join(expand_date_range(claims$dos, \"dos\"), by = join_by(dos)) |&gt; \n  filter(!is.na(id)) |&gt;\n  timeplyr::fcount(year, month_l, .by = dos, sort = TRUE) |&gt; \n  arrange(year, month_l, dos) |&gt; \n  fuimus::sorted_bars(var = month_l)\n\nError in `select()`:\n! Can't select columns that don't exist.\n✖ Column `id` doesn't exist."
  },
  {
    "objectID": "posts/npi/npi_constructor.html",
    "href": "posts/npi/npi_constructor.html",
    "title": "Building an NPI Constructor",
    "section": "",
    "text": "The National Provider Identifier (NPI) is a unique 10-digit identification number assigned to health care providers in the United States through NPPES. The Centers for Medicare & Medicaid Services (CMS) developed the NPI as a way to standardize the identification of health care providers across the health care industry. NPPES is the National Plan and Provider Enumeration System (NPPES) NPI Registry, a free directory of all active NPI records."
  },
  {
    "objectID": "posts/npi/npi_constructor.html#sec-requirements",
    "href": "posts/npi/npi_constructor.html#sec-requirements",
    "title": "Building an NPI Constructor",
    "section": "NPI Requirements",
    "text": "NPI Requirements\n\nConsist of 10 numeric digits. The 10th digit is the check digit.\nHave no embedded intelligence.\nBegin with a 1 or 2. \nGenerated by a scattering algorithm using all possible numeric combinations.\nBe unique, without requiring database access for verification.\n\nUse of other first digits for the NPI must be coordinated with the use of first digits by the standard health plan identifier, when it is adopted."
  },
  {
    "objectID": "posts/npi/npi_constructor.html#sec-checkdigit",
    "href": "posts/npi/npi_constructor.html#sec-checkdigit",
    "title": "Building an NPI Constructor",
    "section": "NPI Check Digit",
    "text": "NPI Check Digit\nThe check digit is calculated using the Luhn formula for computing the modulus 10 “double-add-double” check digit. This algorithm is recognized as an ISO standard and is the specified check digit algorithm to be used for the card issuer identifier on a standard health identification card.\nWhen an NPI is used as a card issuer identifier on a standard health identification card, it is preceded by the prefix 80840, in which 80 indicates health applications and 840 indicates the United States.\nTo enable this feature for any NPI, the check digit will always be calculated as if the prefix is present.\nFor a non-prefixed NPI, this is accomplished by adding the constant 24 in step 2 of the check digit calculation."
  },
  {
    "objectID": "posts/npi/npi_constructor.html#check-digit-calculation",
    "href": "posts/npi/npi_constructor.html#check-digit-calculation",
    "title": "Building an NPI Constructor",
    "section": "Check Digit Calculation",
    "text": "Check Digit Calculation\nThe check digit formula (Luhn Modulus 10 double-add-double) is calculated as follows:\n\nBeginning with the rightmost digit, double the value of the alternate digits.\nAdd the individual digits of the products from Step 1 to the unaffected digits from the original number.\nSubtract the result of step 2 from the next highest number ending in zero. This is the check digit.\n\n\n\n\n\n\n\nMultiples of Ten\n\n\n\nThe next highest number ending in zero is simply the next multiple of ten.\nSpecifically, for some number \\(n\\), the next multiple of ten would be \\(n + (10 - (n \\mod 10))\\):\n\nnext_mult_10 &lt;- \\(n) n + (10 - (n %% 10))\n\nFor example, if \\(n\\) is 23, the next multiple of ten is 30:\n\nnext_mult_10(23)\n\n[1] 30\n\n\nIf \\(n\\) is a multiple of ten, such as 50, the next multiple of 10 is 60:\n\nnext_mult_10(50)\n\n[1] 60\n\n\n\n\n\n\nCheck Digit Calculation Examples\n\nWith PrefixWithout Prefix\n\n\n\nAssume the prefixed 9-position identifier is 80840123456789:\n\n\nmake_prefix &lt;- \\(x, y) {\n  as.integer(\n    unlist(\n      strsplit(\n        paste0(x, y), \n        \"\")\n    )\n  )\n}\n\n(x &lt;- make_prefix(80840, 123456789))\n\n [1] 8 0 8 4 0 1 2 3 4 5 6 7 8 9\n\n\n\nBeginning on the right, double the alternate digits:\n8 0 8 8 0 2 2 6 4 10 6 14 8 18\n\n\ndouble_alts &lt;- \\(x) {\n  x &lt;- rev(x)\n  \n  idx &lt;- seq(1, length(x), 2)\n  \n  x[idx] &lt;- x[idx] * 2\n  \n  rev(x)\n}\n\n(x &lt;- double_alts(x))\n\n [1]  8  0  8  8  0  2  2  6  4 10  6 14  8 18\n\n\n\nAdd the individual digits of products of doubling, plus unaffected digits:\n8 + 0 + 8 + 8 + 0 + 2 + 2 + 6 + 4 + 1 + 0 + 6 + 1 + 4 + 8 + 1 + 8 = 67\n\n\nsum_digits &lt;- \\(x) {\n  sum(\n    as.integer(\n      unlist(\n        strsplit(\n          as.character(x), \"\")\n        )\n      )\n    )\n}\n\n(x &lt;- sum_digits(x))\n\n[1] 67\n\n\n\nSubtract result from the next multiple of 10: 70 – 67 = 3 This is the check digit.\n\n\nget_check &lt;- \\(x) {\n  ceiling(x / 10) * 10 - x\n}\n\n(x &lt;- get_check(x))\n\n[1] 3\n\n\n\nAppend the check digit to the the card issuer identifier: 808401234567893\n\n\nprefix_check &lt;- \\(pre, check) {\n  paste0(pre, check)\n}\n\nprefix_check(80840123456789, x)\n\n[1] \"808401234567893\"\n\n\n\n\n\n\nAssume the 9-position identifier is 123456789\n\n\nmake_id &lt;- \\(x) {\n  as.integer(\n    unlist(\n      strsplit(\n        as.character(x), \"\"\n        )\n      )\n    )\n}\n\n(xx &lt;- make_id(123456789))\n\n[1] 1 2 3 4 5 6 7 8 9\n\n\n\nBeginning on the right, double the alternate digits: 2 4 6 9 10 14 18 2  2  6  4 10  6 14  8 18\n\n\ndouble_alts &lt;- \\(x) {\n  x &lt;- rev(x)\n  \n  idx &lt;- seq(1, length(x), 2)\n  \n  x[idx] &lt;- x[idx] * 2\n  \n  rev(x)\n}\n\n(xx &lt;- double_alts(xx))\n\n[1]  2  2  6  4 10  6 14  8 18\n\n\n\nAdd constant 24 to the sum of the individual digits: 24 + 2 + 2 + 6 + 4 + 1 + 0 + 6 + 1 + 4 + 8 + 1 + 8 = 67\n\n\nsum_digits_24 &lt;- \\(x) {\n  sum(\n    as.integer(\n      unlist(\n        strsplit(\n          as.character(x), \"\")\n        )\n      )\n    ) + 24\n}\n\n(xx &lt;- sum_digits_24(xx))\n\n[1] 67\n\n\n\nSubtract result from the next multiple of 10: 70 – 67 = 3 This is the check digit.\n\n\nget_check &lt;- \\(x) {\n  ceiling(x / 10) * 10 - x\n}\n\n(xx &lt;- get_check(xx))\n\n[1] 3\n\n\n\nAppend the check digit to the identifier: 1234567893\n\n\nprefix_check &lt;- \\(pre, check) {\n  paste0(pre, check)\n}\nprefix_check(123456789, xx)\n\n[1] \"1234567893\""
  },
  {
    "objectID": "posts/npi/npi_constructor.html#input-validation",
    "href": "posts/npi/npi_constructor.html#input-validation",
    "title": "Building an NPI Constructor",
    "section": "Input Validation",
    "text": "Input Validation\n\n\n\ninput_validation.R\n\n# Must be a character vector\ncheck_is_character &lt;- function(x) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  if (!rlang::is_character(x)) {\n    cli::cli_abort(\n      \"An {.arg {arg}} must be a {.cls character} vector.\", \n      arg = arg, \n      call = call\n      )\n  }\n}\n\n# Characters must all be numbers\ncheck_characters_numeric &lt;- function(x) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  if (!stringfish::sf_grepl(x, \"^[[:digit:]]+$\")) {\n    cli::cli_abort(\n      \"An {.arg {arg}} must contain numbers only.\", \n      arg = arg, \n      call = call\n      )\n  }\n}\n\n# Must have 10 characters\ncheck_nchars_10 &lt;- function(x) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  if (stringfish::sf_nchar(x) != 10L) {\n    cli::cli_abort(\n      \"An {.arg {arg}} must be 10 characters long.\", \n      arg = arg, \n      call = call\n      )\n  }\n}\n\n# Must begin with 1 or 2\ncheck_first_char &lt;- function(x) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  if (!stringfish::sf_substr(x, 1, 1) %in% c(\"1\", \"2\")) {\n    cli::cli_abort(\n      \"An {.arg {arg}} must start with a 1 or 2.\", \n      arg = arg, \n      call = call\n      )\n  }\n}\n\nnpi_inform &lt;- function(x, msg) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  rlang::inform(\n    message = (\n      c(\"&gt;\" = glue::glue(\"{msg}: {x}\"))),\n    use_cli_format = TRUE,\n    arg = arg,\n    call = call,\n    class = \"npi_inform\"\n  )\n}\n\nnpi_warn &lt;- function(x, msg) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  rlang::inform(\n    message = (\n      c(\"x\" = glue::glue(\"{msg}: {x}\"))),\n    use_cli_format = TRUE,\n    arg = arg,\n    call = call,\n    class = \"npi_warn\"\n  )\n}\n\nnpi_success &lt;- function(x, msg) {\n  \n  arg  &lt;- rlang::caller_arg(x)\n  call &lt;- rlang::caller_env()\n  \n  rlang::inform(\n    message = (\n      c(\"v\" = glue::glue(\"{msg}: {x}\"))),\n    use_cli_format = TRUE,\n    arg = arg,\n    call = call,\n    class = \"npi_success\"\n  )\n}\n\nnpi &lt;- 123456789\nnpi_inform(x = npi, msg = \"Testing NPI\")\n\n\n→ Testing NPI: 123456789\n\nnpi_warn(x = npi, msg = \"NPI is invalid\")\n\n✖ NPI is invalid: 123456789\n\nnpi_success(x = npi, msg = \"NPI is valid\")\n\n✔ NPI is valid: 123456789"
  },
  {
    "objectID": "posts/npi/npi_constructor.html#first-draft",
    "href": "posts/npi/npi_constructor.html#first-draft",
    "title": "Building an NPI Constructor",
    "section": "First Draft",
    "text": "First Draft\n\n\n\nconstruct_npi_1.R\n\nconstruct_npi_1 &lt;- function(npi) {\n  \n  check_is_character(npi)\n  check_characters_numeric(npi)\n  check_nchars_10(npi)\n  check_first_char(npi)\n  \n  npi_test &lt;- npi\n  \n  npi_inform(npi_test, \"Testing NPI\")\n  \n  # Create the 9-position identifier part of the NPI\n  id &lt;- unlist(strsplit(npi_test, \"\"), use.names = FALSE)[1:9]\n  \n  npi_inform(paste0(id, collapse = \"\"), \"Remove 10th digit\")\n  \n  # Reverse order of digits\n  x &lt;- rev(id)\n  \n  npi_inform(paste0(x, collapse = \"\"), \"Reverse order\")\n  \n  # Select index of every other digit\n  idx &lt;- seq(1, length(x), 2)\n  \n  npi_inform(paste0(x[idx], collapse = \" \"), \"Select every other digit\")\n  \n  # Double the value of the alternate digits\n  x[idx] &lt;- as.numeric(x[idx]) * 2\n  \n  npi_inform(paste0(x[idx], collapse = \" \"), \"Double each\")\n  npi_inform(paste0(x, collapse = \" \"), \"Replace original with doubles\")\n  \n  # Split and unlist to separate digits\n  x &lt;- unlist(strsplit(x, \"\"), use.names = FALSE)\n  \n  # Add constant 24 to the sum of the digits\n  xc &lt;- sum(as.numeric(x)) + 24\n  \n  npi_inform(paste0(paste0(c(x, 24), collapse = \" + \"), paste0(\" = \", xc)), \"Sum individual digits\")\n  \n  # Find the next higher number ending in zero\n  y &lt;- ceiling(xc / 10) * 10\n  \n  npi_inform(paste0(paste0(\"⌈\", xc, \"⌉\"), paste0(\" = \", y)), \"Next multiple of 10\")\n  \n  # Find the check digit by subtracting x from y\n  z &lt;- y - xc\n  \n  npi_inform(paste0(paste0(c(y, xc), collapse = \" - \"), paste0(\" = \", z)), \"Find the check digit\")\n  \n  # Append the check digit to the end of the 9-digit identifier\n  id[10] &lt;- z\n  \n  npi_inform(paste0(id, collapse = \"\"), \"Append check digit\")\n  \n  # Collapse the vector into a single string\n  npi_valid &lt;- paste0(id, collapse = \"\")\n  \n  # Is the syntactically valid NPI identical to the test NPI?\n  if (identical(npi_valid, npi_test)) {\n    npi_success(paste0(c(npi_test, npi_valid), collapse = \" == \"), \"NPI is syntactically valid\")\n  }\n  \n  if (!identical(npi_valid, npi_test)) {\n    npi_warn(paste0(c(npi_test, npi_valid), collapse = \" != \"), \"NPI is not syntactically valid\")\n    npi_inform(paste0(npi_valid, collapse = \"\"), \"Did you mean?\")\n  }\n  invisible(npi_valid)\n}\n\n\n\nTesting Validation\n\nconstruct_npi_1(123456789)\n\nError in `construct_npi_1()`:\n! An `npi` must be a &lt;character&gt; vector.\n\nconstruct_npi_1(\"123456789\")\n\nError in `construct_npi_1()`:\n! An `npi` must be 10 characters long.\n\nconstruct_npi_1(\"O123456789\")\n\nError in `construct_npi_1()`:\n! An `npi` must contain numbers only.\n\nconstruct_npi_1(\"0000000000\")\n\nError in `construct_npi_1()`:\n! An `npi` must start with a 1 or 2.\n\n\n\n\nDoes it Work?\n\nconstruct_npi_1(\"1234567891\")\n\n→ Testing NPI: 1234567891\n→ Remove 10th digit: 123456789\n→ Reverse order: 987654321\n→ Select every other digit: 9 7 5 3 1\n→ Double each: 18 14 10 6 2\n→ Replace original with doubles: 18 8 14 6 10 4 6 2 2\n→ Sum individual digits: 1 + 8 + 8 + 1 + 4 + 6 + 1 + 0 + 4 + 6 + 2 + 2 + 24 =\n  67\n→ Next multiple of 10: ⌈67⌉ = 70\n→ Find the check digit: 70 - 67 = 3\n→ Append check digit: 1234567893\n✖ NPI is not syntactically valid: 1234567891 != 1234567893\n→ Did you mean?: 1234567893\n\nconstruct_npi_1(\"1043477615\")\n\n→ Testing NPI: 1043477615\n→ Remove 10th digit: 104347761\n→ Reverse order: 167743401\n→ Select every other digit: 1 7 4 4 1\n→ Double each: 2 14 8 8 2\n→ Replace original with doubles: 2 6 14 7 8 3 8 0 2\n→ Sum individual digits: 2 + 6 + 1 + 4 + 7 + 8 + 3 + 8 + 0 + 2 + 24 = 65\n→ Next multiple of 10: ⌈65⌉ = 70\n→ Find the check digit: 70 - 65 = 5\n→ Append check digit: 1043477615\n✔ NPI is syntactically valid: 1043477615 == 1043477615\n\nconstruct_npi_1(\"1000000000\")\n\n→ Testing NPI: 1000000000\n→ Remove 10th digit: 100000000\n→ Reverse order: 000000001\n→ Select every other digit: 0 0 0 0 1\n→ Double each: 0 0 0 0 2\n→ Replace original with doubles: 0 0 0 0 0 0 0 0 2\n→ Sum individual digits: 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2 + 24 = 26\n→ Next multiple of 10: ⌈26⌉ = 30\n→ Find the check digit: 30 - 26 = 4\n→ Append check digit: 1000000004\n✖ NPI is not syntactically valid: 1000000000 != 1000000004\n→ Did you mean?: 1000000004"
  },
  {
    "objectID": "posts/npi/npi_constructor.html#second-draft",
    "href": "posts/npi/npi_constructor.html#second-draft",
    "title": "Building an NPI Constructor",
    "section": "Second Draft",
    "text": "Second Draft\n\n\n\nconstruct_npi_2.R\n\nconstruct_npi_2 &lt;- function(npi) {\n  \n  check_is_character(npi)\n  check_characters_numeric(npi)\n  check_nchars_10(npi)\n  check_first_char(npi)\n  \n  npi_test &lt;- npi\n  \n  npi_inform(npi_test, \"Testing NPI\")\n  \n  # Remove the 10th digit to create the 9-position identifier part of the NPI\n  id_9 &lt;- unlist(strsplit(npi_test, \"\"), use.names = FALSE)[1:9]\n  \n  npi_inform(paste0(id_9, collapse = \"\"), \"Remove 10th digit\")\n  \n  # Reverse order of digits\n  x_rev &lt;- rev(id_9)\n  \n  npi_inform(paste0(x_rev, collapse = \"\"), \"Reverse order\")\n  \n  # Select index of every other digit\n  x_idx &lt;- seq(1, length(x_rev), 2)\n  \n  npi_inform(paste0(x_rev[x_idx], collapse = \" \"), \"Select every other digit\")\n  \n  # Double the value of the alternate digits\n  x_rev[x_idx] &lt;- as.numeric(x_rev[x_idx]) * 2\n  \n  npi_inform(paste0(x_rev[x_idx], collapse = \" \"), \"Double each\")\n  npi_inform(paste0(x_rev, collapse = \" \"), \"Replace original with doubles\")\n  \n  # Split and unlist to separate digits\n  x_split &lt;- unlist(strsplit(x_rev, \"\"), use.names = FALSE)\n  x_add &lt;- sum(as.numeric(x_split))\n  \n  npi_inform(paste0(paste0(x_split, collapse = \" + \"), paste0(\" = \", x_add)), \"Sum individual digits\")\n\n  # Add constant 24 to the sum of the digits\n  x_24 &lt;- x_add + 24\n  \n  npi_inform(paste0(paste0(c(x_add, 24), collapse = \" + \"), paste0(\" = \", x_24)), \"Add 24 to the sum\")\n  \n  x_divide &lt;- x_24 / 10\n  npi_inform(paste0(paste0(x_24, \" / \", 10), paste0(\" = \", x_divide)), \"Divide by 10\")\n  \n  x_divide_first &lt;- as.numeric(unlist(strsplit(as.character(x_divide), \"\"), use.names = FALSE)[1])\n  npi_inform(paste0(paste0(x_divide), paste0(\" = \", x_divide_first)), \"Take first digit\")\n  \n  x_plus_one &lt;- x_divide_first + 1\n  npi_inform(paste0(paste0(x_divide_first, \" + \", 1), paste0(\" = \", x_plus_one)), \"Add one\")\n  \n  x_paste_zero &lt;- paste0(x_plus_one, \"0\")\n  npi_inform(paste0(paste0(x_plus_one, \" * \", 10), paste0(\" = \", x_paste_zero)), \"Multiply by 10\")\n  \n  # Find the next higher number ending in zero\n  x_next &lt;- ceiling(x_24 / 10) * 10\n  npi_inform(paste0(paste0(\"⌈\", x_24,\"⌉\"), paste0(\" = \" , x_next)), \"Next multiple of 10\")\n  \n  # Find the check digit by subtracting x from y\n  x_check &lt;- x_next - x_24\n  npi_inform(paste0(paste0(c(x_next, x_24), collapse = \" - \"), paste0(\" = \", x_check)), \"Find the check digit\")\n  \n  # Append the check digit to the end of the 9-digit identifier\n  id_10 &lt;- id_9\n  id_10[10] &lt;- x_check\n  \n  npi_inform(paste0(id_10, collapse = \"\"), \"Append check digit\")\n  \n  # Collapse the vector into a single string\n  npi_valid &lt;- paste0(id_10, collapse = \"\")\n  \n  # Is the syntactically valid NPI identical to the test NPI?\n  if (identical(npi_valid, npi_test)) {\n    npi_success(paste0(c(npi_test, npi_valid), collapse = \" == \"), \"NPI is syntactically valid\")\n  }\n  \n  if (!identical(npi_valid, npi_test)) {\n    npi_warn(paste0(c(npi_test, npi_valid), collapse = \" != \"), \"NPI is not syntactically valid\")\n    npi_inform(paste0(npi_valid, collapse = \"\"), \"Did you mean?\")\n  }\n  invisible(npi_valid)\n}\n\n\n\nTesting Validation\n\nconstruct_npi_2(123456789)\n\nError in `construct_npi_2()`:\n! An `npi` must be a &lt;character&gt; vector.\n\nconstruct_npi_2(\"123456789\")\n\nError in `construct_npi_2()`:\n! An `npi` must be 10 characters long.\n\nconstruct_npi_2(\"O123456789\")\n\nError in `construct_npi_2()`:\n! An `npi` must contain numbers only.\n\nconstruct_npi_2(\"0000000000\")\n\nError in `construct_npi_2()`:\n! An `npi` must start with a 1 or 2.\n\n\n\n\nDoes it Work?\n\nconstruct_npi_2(\"1234567891\")\n\n→ Testing NPI: 1234567891\n→ Remove 10th digit: 123456789\n→ Reverse order: 987654321\n→ Select every other digit: 9 7 5 3 1\n→ Double each: 18 14 10 6 2\n→ Replace original with doubles: 18 8 14 6 10 4 6 2 2\n→ Sum individual digits: 1 + 8 + 8 + 1 + 4 + 6 + 1 + 0 + 4 + 6 + 2 + 2 = 43\n→ Add 24 to the sum: 43 + 24 = 67\n→ Divide by 10: 67 / 10 = 6.7\n→ Take first digit: 6.7 = 6\n→ Add one: 6 + 1 = 7\n→ Multiply by 10: 7 * 10 = 70\n→ Next multiple of 10: ⌈67⌉ = 70\n→ Find the check digit: 70 - 67 = 3\n→ Append check digit: 1234567893\n✖ NPI is not syntactically valid: 1234567891 != 1234567893\n→ Did you mean?: 1234567893\n\nconstruct_npi_2(\"1043477615\")\n\n→ Testing NPI: 1043477615\n→ Remove 10th digit: 104347761\n→ Reverse order: 167743401\n→ Select every other digit: 1 7 4 4 1\n→ Double each: 2 14 8 8 2\n→ Replace original with doubles: 2 6 14 7 8 3 8 0 2\n→ Sum individual digits: 2 + 6 + 1 + 4 + 7 + 8 + 3 + 8 + 0 + 2 = 41\n→ Add 24 to the sum: 41 + 24 = 65\n→ Divide by 10: 65 / 10 = 6.5\n→ Take first digit: 6.5 = 6\n→ Add one: 6 + 1 = 7\n→ Multiply by 10: 7 * 10 = 70\n→ Next multiple of 10: ⌈65⌉ = 70\n→ Find the check digit: 70 - 65 = 5\n→ Append check digit: 1043477615\n✔ NPI is syntactically valid: 1043477615 == 1043477615\n\nconstruct_npi_2(\"1000000000\")\n\n→ Testing NPI: 1000000000\n→ Remove 10th digit: 100000000\n→ Reverse order: 000000001\n→ Select every other digit: 0 0 0 0 1\n→ Double each: 0 0 0 0 2\n→ Replace original with doubles: 0 0 0 0 0 0 0 0 2\n→ Sum individual digits: 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2 = 2\n→ Add 24 to the sum: 2 + 24 = 26\n→ Divide by 10: 26 / 10 = 2.6\n→ Take first digit: 2.6 = 2\n→ Add one: 2 + 1 = 3\n→ Multiply by 10: 3 * 10 = 30\n→ Next multiple of 10: ⌈26⌉ = 30\n→ Find the check digit: 30 - 26 = 4\n→ Append check digit: 1000000004\n✖ NPI is not syntactically valid: 1000000000 != 1000000004\n→ Did you mean?: 1000000004"
  }
]