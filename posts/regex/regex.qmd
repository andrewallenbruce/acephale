---
title: "Learning to Love Regexes By Learning Them"
subtitle: "I Promised Myself I Wouldn't Do This Again"
description: "Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions."
format:
  html:
    reference-location: margin
    other-links:
      - text: Regex Cheatsheet
        icon: bookmark-plus
        href: https://github.com/raredd/regex
      - text: RexEgg
        icon: bookmark-plus
        href: https://www.rexegg.com/
      - text: Regex in R
        icon: bookmark-plus
        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| echo: false
#| cache: false
knitr::opts_chunk$set(
  collapse  = FALSE,
  echo      = TRUE, 
  message   = FALSE, 
  warning   = FALSE,
  error     = TRUE,
  comment   = "",
  dpi       = 300, 
  dev       = "ragg_png",
  out.width = "100%",
  fig.align = "center",
  fig.width = 8
)
options(scipen = 999, digits = 2)

library(tidyverse)
library(rlang)
library(vctrs)
library(cli)
library(colortable)
library(emphatic)
library(fuimus)
library(stringfish)
library(re2)
library(re2r)
library(compiler)
library(data.table)
library(tidyfast)
library(collapse)
library(cheapr)
library(fastplyr)

# source(here::here("posts/regex/scripts", "lump.R"))

long_test <- stringfish::convert_to_sf(
  c(
    "0214T", "0215T", "0217T", "0218T", 
    "0219T", "0220T", "0221T", "0222T", 
    "0263T", "0265T", "0266T", "0269T", 
    "0274T", "0275T", "0329T", "0330T", 
    "0422T", "0444T", "0445T", "0506T", 
    "0507T", "15777", "20939", "22510", 
    "22511", "22512", "22513", "22514", 
    "22515", "22526", "22527", "27197", 
    "27198", "30801", "30802", "31231", 
    "32673", "34713", "34714", "34715", 
    "34716", "34717", "36221", "34812", 
    "34820", "34833", "34834", "35572", 
    "50300", "50540", "54420", "54430", 
    "55200", "55250", "55300", "58575", 
    "58600", "58605", "58700", "58720", 
    "58800", "58805", "58900", "58920", 
    "58925", "58940", "58943", "61000", 
    "61001", "61253", "63035", "63043", 
    "63044", "63045", "63046", "63047", 
    "63048", "64421", "64480", "64484", 
    "64491", "64492", "64494", "64495", 
    "64634", "64636", "76514", "92025", 
    "92081", "92082", "92083", "92132", 
    "92133", "92134", "92145", "92201", 
    "92202", "92227", "92228", "92229", 
    "92235", "92240", "92242", "95870", 
    "C7501", "C7502", "C7504", "C7505", 
    "C9771", "E0675", "G0279", "G0412",
    "G0413", "G0414", "G0415", "S2342"
))

hcpcs_tests <- sf_concat(
  c("J*", "G", "0", 4:6),
  c(as.character(30:32)),
  c(as.character(721:729)),
  c(as.character(5202:5208)),
  c(as.character(92015:92019)))

long_test2 <- sf_concat(
  sf_substr(long_test, 1, 1),
  sf_substr(long_test, 1, 2),
  sf_substr(long_test, 1, 3),
  sf_substr(long_test, 1, 4),
  sf_substr(long_test, 1, 5))

all_tests <- sf_concat(
  sf_substr(long_test, 1, 2),
  sf_substr(long_test, 1, 3),
  sf_substr(long_test, 1, 4),
  sf_substr(long_test, 1, 5),
  hcpcs_tests)

hcpcs <- stringfish::convert_to_sf(collapse::funique(northstar::search_descriptions()$hcpcs_code))

random_hcpcs <- \(n = 10, l = 5) {
  
  stringfish::sf_substr(
    sample(
      stringfish::convert_to_sf(
        collapse::funique(
          northstar::search_descriptions()$hcpcs_code)
        ), size = n), 
    start = 1, 
    stop = l, 
    nthreads = 4L)
  
}

random_hcpcs_vec <- \(n = 10) {
  c(
    sample(
      c(LETTERS[sf_grepl(
        LETTERS, "[^DINOW-Z]", 
        nthreads = 4L)], 0:9), 
      size = 10),
    random_hcpcs(n = n, l = 2),
    random_hcpcs(n = n, l = 3),
    random_hcpcs(n = n, l = 4),
    random_hcpcs(n = n, l = 5)
  )
}

split_string <- \(...) {
  stringfish::convert_to_sf(paste0(...)) |>
    stringfish::sf_split(", ", nthreads = 4L) |> 
    purrr::pluck(1)
}

new_test <- list(
  split_string(single_line_string(
    "A4467, A9283, A9285, L1900, 
    L1902, L1904, L1906, L1907, 
    L1910, L1920, L1930, L1932, 
    L1940, L1945, L1950, L1951, 
    L1960, L1970, L1971, L1980, 
    L1990, L2000, L2005, L2006, 
    L2010, L2020, L2030, L2034, 
    L2035, L2036, L2037, L2038, 
    L2106, L2108, L2112, L2114, 
    L2116, L2126, L2128, L2132, 
    L2134, L2136, L2180, L2182, 
    L2184, L2186, L2188, L2190, 
    L2192, L2200, L2210, L2220, 
    L2230, L2232, L2240, L2250, 
    L2260, L2265, L2270, L2275, 
    L2280, L2300, L2310, L2320, 
    L2330, L2335, L2340, L2350, 
    L2360, L2370, L2375, L2380, 
    L2385, L2387, L2390, L2395, 
    L2397, L2405, L2415, L2425, 
    L2430, L2492, L2500, L2510, 
    L2520, L2525, L2526, L2530, 
    L2540, L2550, L2750, L2755, 
    L2760, L2768, L2780, L2785, 
    L2795, L2800, L2810, L2820, 
    L2830, L2840, L2850, L2999, 
    L4002, L4010, L4020, L4030, 
    L4040, L4045, L4050, L4055, 
    L4060, L4070, L4080, L4090, 
    L4100, L4110, L4130, L4205, 
    L4210, L4350, L4360, L4361, 
    L4370, L4386, L4387, L4392, 
    L4394, L4396, L4397, L4398, 
    L4631"
    )), 
  split_string(single_line_string(
  "90460, 90461, 90471, 90472, 
    90473, 90474, 90619, 90620, 
    90621, 90633, 90647, 90648, 
    90651, 90670, 90672, 90674, 
    90680, 90681, 90682, 90685, 
    90686, 90687, 90688, 90696, 
    90697, 90698, 90700, 90702, 
    90707, 90710, 90713, 90714, 
    90715, 90716, 90723, 90732, 
    90734, 90740, 90743, 90744, 
    90746, 90747, 90749, 90756"
  ))) |> 
  unlist(use.names = FALSE)
```

# HCPCS

```{r}
#| label: hcpcs_all
#| echo: false
#| results: asis
rx <- list(
  all = "(^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$)",
  iI = "(^[0-9]{4}[AFMTU0-9]$)",
  iII = "(^[A-CEGHJ-MP-V][0-9]{4}$)",
  cI = "(^[0-9]{4}[AMU0-9]$)",
  cII = "(^[0-9]{4}F$)",
  cIII = "(^[0-9]{4}T$)"
)

len <- \(rx) vector_length(vec_slice(hcpcs, sf_grepl(hcpcs, rx)))

data.frame(
  row.names = c("All", "Level I", "Category I", "Category II", "Category III", "Level II"),
  Count = map_int(unlist(rx, use.names = FALSE), len), 
  Regex = unlist(rx, use.names = FALSE)) |> 
  hl(c("black", "grey20", "grey90", "grey90", "grey90", "grey20"), cols = 1) |>
  knit_print.emphatic()
```

```{r}
#| label: colortable_experiments
#| echo: false
#| results: asis
color_vc <- color_vctr(
  c(1, 2, 3, 4),
  text_color = c("blue", "green", "yellow", NA),
  style = c("underline", "italic", NA, "bold"),
  background = c(NA, NA, "blue", NA))

color_vc

vctrs::field(color_vc, 2)
```

```{r}
#| echo: false
#| eval: false
#| results: asis
data.frame(
  text_color = sample(c(NA, valid_colors("html")[, 2, drop = TRUE]), 10, replace = TRUE),
  background = sample(c(NA, valid_colors("html")[, 2, drop = TRUE]), 10, replace = TRUE),
  style      = sample(c(NA, valid_style()), 10, replace = TRUE),
  stringsAsFactors = FALSE
  ) |> 
  dplyr::mutate(
    background = ifelse(
      text_color == background, 
      sample(c(NA, valid_colors("html")[, 2, drop = TRUE]), 10, replace = TRUE), background)
  ) |>  
  dplyr::mutate(
  example = color_vctr(runif(10),
                       text_color = text_color,
                       background = background,
                       style = style)
  )
```

# TODO

   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~
   * Eliminate `g1()` step in grouping.
   * In `remove_redundant()`, try pmap for `rr()` step.


## Checklist

-   [X] `split_lengths()`
-   [X] `remove_redundant()`
-   [ ] `process_groups()`
   -   [X] `g1()`
   -   [X] `g2()`
   -   [ ] `g3()`
   -   [ ] `g4()`
   -   [ ] `g5()`
-   [ ] `reduce_groups()`

# Preprocessing

```{r}
#| label: internal_1
take     <- \(x, i) stringfish::sf_substr(x, start = i, stop = i, nthreads = 4L)
empty    <- \(x)    vctrs::vec_is_empty(x)
chop     <- \(v, g) vctrs::vec_chop(v, sizes = vctrs::vec_run_sizes(g))
p        <- \(...)  paste0(..., collapse = "")
grab     <- \(x)    x[stringfish::sf_grepl(x, "[A-Z]{1}", nthreads = 4L)]
contrast <- \(x, y) x[!stringfish::sf_substr(x, 1, collapse::funique(collapse::vlengths(y, use.names = FALSE)), nthreads = 4L) %in% y]
sorder   <- \(x)    p(p(grab(stringr::str_sort(x))), p(stringr::str_sort(x)[!stringr::str_sort(x) %in% grab(stringr::str_sort(x))]))
```

## `split_lengths()`

```{r}
#| label: split_lengths
split_lengths <- function(x) {
  
  stopifnot(is.character(x))
  
  x <- sf_gsub(x, "\\*|\\s", "", nthreads = 4L) |> 
    uniq_rmna() |> 
    str_sort()
  
  l <- vlengths(x)
  
  list(
    x1 = x[l == 1],
    x2 = x[l == 2],
    x3 = x[l == 3],
    x4 = x[l == 4],
    x5 = x[l == 5]
  )
}
```

## `remove_redundant()`

If a vector contains both `"A"` and `"A0"`, remove `"A0"`. Why? A user may input complete and incomplete HCPCS codes alongside each other. Codes that contain a common sub-string can be simplified, in turn simplifying the eventual regex output.


```{r}
#| label: remove_redundant
rr <- \(x, y) {
  
  if (empty(x)) {
    # cat(c("EMPTY: x | RETURN: character(0)"), sep = "\n")
    return(character(0))
  }
  
  if (empty(y)) {    
    # cat(c("EMPTY: y | RETURN: x"), sep = "\n")
    return(x)
  }
  contrast(x, y)
  }

remove_redundant <- function(x) {

  .c(x1, x2, x3, x4, x5) %=% x
  
  list(
    x1 = x1,
    x2 = rr(x2, x1),
    x3 = rr(x3, x1) |> rr(x2),
    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),
    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)
  )
  
}

random_hcpcs_vec(10) |> 
  split_lengths() |> 
  remove_redundant()
```

# Grouping

Group each set of vectors into regex patterns.

```{r}
#| label: internal_2
lump <- function(x, threshold = 3) {
  
  stopifnot(is.numeric(x))

  xo <- order(x)

  xs <- x[xo]
  
  dlag <- abs(c(0, xs[-1] - xs[seq_along(xs) - 1]))

  bi <- ifelse(dlag >= threshold, 1, 0)

  id <- cumsum(bi) + 1
  
  id[xo]
  
}

letters_2_numbers <- \(x) {
  
  hcpcs <- LETTERS[sf_grepl(LETTERS, "[^DINOW-Z]", nthreads = 4L)]
  
  look <- set_names(seq_along(hcpcs), hcpcs)
  
  unname(look[grab(x)])
}
```

```{r}
#| label: lump_experiments
#| echo: false
#| eval: false
dplyr::tibble(
  code = x,
  c1 = substr(x, 1, 3),
  lump_1 = lump(stringfish::sf_gsub(x, "^[A-Z]|[A-Z]$", "", nthreads = 4L) |> as.integer()),
) |> 
  print(n = 200)

lumpdf <- function(x, thresh = 3){
  
  chr <- grab(x)
  num <- as.numeric(x[!x %in% grab(x)])
  
  num <- as.numeric(num)

  xo <- order(num)

  xs <- num[xo]
  
  subtract <- tail(xs, n = -1) - head(xs, n = -1)
  
  diff <- abs(c(0, subtract))

  binary <- ifelse(diff >= thresh, 1, 0)

  id <- cumsum(binary) + 1
  
  data.table(
    xo = xo,
    xs = xs,
    # sub = subtract,
    diff = diff,
    binary = binary,
    id = id,
    idx = id[xo]
  )
}


x <- new_test |> 
  lumpdf()

dplyr::tibble(
  xo = order(new_test),
  xs = new_test[xo],
  diff = abs(
    c(0, 
      tail(xs, n = -1) - head(xs, n = -1)
      )
    )
  ,
  binary = ifelse(diff >= 3, 1, 0),
  id = cumsum(binary) + 1,
  idx = id[xo]
)
```


::: {.panel-tabset}

## [g1|g2]

```{r}
#| label: g1_g2
g1 <- function(x) {
  
  x <- get_elem(x, "x1")
  
  if (empty(x)) return(character(0))
  
  x
}

g2 <- function(x) {
  
  x <- get_elem(x, "x2")
  
  if (empty(x)) return(character(0))
  
  rsplit(x, take(x, 1), use.names = FALSE)
}

random_hcpcs_vec() |> 
  split_lengths() |> 
  remove_redundant() |>
  g1()

random_hcpcs_vec() |>
  split_lengths() |> 
  remove_redundant() |>
  g2()
```

## [g3]

```{r}
#| label: g3
g3 <- function(x) {
  
  x <- get_elem(x, "x3")
  
  if (empty(x)) return(character(0))
  
  chr <- grab(x)
  num <- x[!x %in% chr]
  
  num <- data.table(
    code = num, 
    lump = lump(as.integer(num)))
  
  chr <- data.table(
    code = chr, 
    lump = lump(as.integer(str_replace_all(chr, "[A-Z]", letters_2_numbers))))
  
  out <- vec_c(
    if (empty(num)) NULL else chop(num$code, num$lump),
    if (empty(chr)) NULL else chop(chr$code, chr$lump))
  
  if (empty(out)) return(character(0))

  out
}

x <- all_tests[nchar(all_tests) == 3] |> 
  split_lengths()

three <- all_tests[nchar(all_tests) == 3] |> 
  split_lengths() |> 
  # remove_redundant() |> 
  g3()

three   <- three[collapse::radixorder(collapse::vlengths(three), sort = FALSE)]
orphans <- three[collapse::vlengths(three) == 1] |> purrr::list_c()
groups  <- three[collapse::vlengths(three) > 1]

modifyList(
  setNames(
    groups, 
    paste0("group_", collapse::vlengths(groups))
    ), 
  list(orphans = orphans))
```

## [4]

```{r}
#| label: g4
g4 <- function(x) {
  
  x <- get_elem(x, "x4")
  
  if (empty(x)) return(character(0))
  
  chr <- grab(x)
  num <- x[!x %in% chr]
  
  num <- data.table(code = num, lump = lump(as.integer(num)))
  
  chr <- data.table(
    code = chr, 
    lump = lump(
      as.integer(
        str_replace_all(chr, "[A-Z]", letters_2_numbers)
        )))
  
  out <- vec_c(
    if (empty(num)) NULL else chop(num$code, num$lump),
    if (empty(chr)) NULL else chop(chr$code, chr$lump))
  
  if (empty(out)) return(character(0))
  
  return(out)
}

hcpcs_tests[20:25] |> 
  split_lengths() |> 
  remove_redundant() |> 
  g4()

long_test2 |> 
  split_lengths() |> 
  # remove_redundant() |> 
  g4()

all_tests |> 
  split_lengths() |> 
  remove_redundant() |>
  g4()
```

## [5]

```{r}
#| label: g5
g5 <- function(x) {
  
  x <- get_elem(x, "x5")
  
  if (empty(x)) return(character(0))
  
  chr <- grab(x)
  num <- x[!x %in% chr]
  
  num  <- data.table(code = num, lump = lump(as.integer(num)))
  
  chr <- data.table(
    code = chr, 
    lump = lump(
      as.integer(
        str_remove_all(chr, "[A-Z]")
        )))
  
  # dchr <- as.integer(str_remove_all(chr, "^[A-Z]|[A-Z]$"))
  # 
  # dchr <- ifelse(dchr %% 10 == 0, dchr + max(dchr), dchr)
  # 
  # chr <- data.table(
  #   code = chr, 
  #   lump = lump(dchr))
  
  out <- vec_c(
    if (empty(num)) NULL else chop(num$code, num$lump),
    if (empty(chr)) NULL else chop(chr$code, chr$lump))
  
  if (empty(out)) return(character(0))
  
  out
}

hcpcs_tests[26:30] |> 
  split_lengths() |> 
  # remove_redundant() |> 
  g5()

long_test2 |> 
  split_lengths() |> 
  # remove_redundant() |> 
  g5()

new_test |>
  split_lengths() |> 
  remove_redundant() |>
  g5()
```

```{r}
#| echo: false
#| eval: false
x <- long_test2 |> 
  split_lengths() |> 
  get_elem("x5")

y <- data.table(
    x,
    a1 = take(x, 1),
    a2 = take(x, 2),
    a3 = take(x, 3),
    a4 = take(x, 4),
    a5 = take(x, 5)
    )

y |> dplyr::tibble() |> 
  dplyr::mutate(
    i3 = dplyr::consecutive_id(a1, a2, a3),
    i4 = dplyr::consecutive_id(a1, a2, a4),
    i5 = dplyr::consecutive_id(a1, a2, a5),
    l3 = i3 - dplyr::lag(i3, n = 1, default = 0),
    l4 = i4 - dplyr::lag(i4, n = 1, default = 0),
    l5 = i5 - dplyr::lag(i5, n = 1, default = 0),
    ) |> 
  print(n = 100)

  # dplyr::add_count(a1, a2, a3, sort = TRUE, name = "n3") |> 
  # dplyr::add_count(a1, a2, a3, a4, sort = TRUE, name = "n4") |> 
  # dplyr::filter(n4 > 1) |> 
  # dplyr::select(x, id)

y |> 
  dplyr::add_count(a1, a2, a3, a5, sort = TRUE, name = "n5") |> 
  dplyr::filter(n5 > 1)
```

::: 

# Process Groups

```{r}
#| label: process_groups
#| message: false
process_groups <- function(x) {
  list(
    g1 = g1(x),
    g2 = g2(x),
    g3 = g3(x),
    g4 = g4(x),
    g5 = g5(x)
  )
}

hcpcs_tests |>
  split_lengths() |> 
  remove_redundant() |> 
  process_groups()

long_test2 |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups()

all_tests |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups()
```

## Reduce Runs

```{r}
#| label: reduce_runs
#| echo: true
#| eval: true
reduce_runs <- function(x) {
  
  ad <- c(LETTERS, 0:9)
  
  if (x == paste0(ad, collapse = "")) return("[A-Z0-9]")
  
  vec  <- set_names(rep(0, 36), ad)
  
  vec2 <- vec[splitter(x)]
  
  vec2 <- vec2[!is.na(vec2)]
  
  vec[names(vec2)] <- 1

  vec_group <- dplyr::tibble(
    value = names(vec),
    key = vec,
    idx = seq_along(vec),
    group = dplyr::consecutive_id(key)) |>
    dplyr::mutate(group_size = dplyr::n(), .by = group) |>
    dplyr::filter(key == 1, group_size >= 3) |>
    dplyr::select(value, group)

  if (empty(vec_group)) return(x)
  
  xgroups <- chop(vec_group$value, vec_group$group) |>
    purrr::map(fuimus::collapser) |>
    purrr::list_c()
  
  replacements <- dplyr::left_join(
    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),
    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),
    by = dplyr::join_by(group)) |>
    glue::glue_data("{start}-{end}") |>
    as.vector()

  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)

  paste0("[", res, "]")
}
```

## G == 1

```{r}
#| label: p1
#| message: false
p1 <- function(x) {
  
  g1 <- get_elem(x, "g1")
  
  if (empty(g1)) return(NULL)
  
  re <- sorder(g1) |> reduce_runs()
  
  if (re == "[A-Z0-9]") return(paste0("(^", re, "{5}$)"))
  
  postfix <- ifelse(
    sf_grepl(re, "^\\[?[A-Z]\\-?", nthreads = 4L), "[0-9]", "[A-Z0-9]")
  
  return(paste0("(^", re, postfix, "{4}$)"))
}

hcpcs_tests |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  p1()

long_test2 |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  p1()

list(g1 = c(0:9, LETTERS)) |> p1()
list(g1 = c(LETTERS[1:5], 0:9)) |> p1()
```

## G > 1

```{r}
#| label: p2
#| message: false
p2 <- function(x) {
  
  if (empty(x)) return(NULL)
  
  vecs <- str_split_fixed(x, "", fmax(vlengths(x))) |> as.data.frame()
  
  to_brackets <- vecs |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(sorder)
  
  to_vec <- to_brackets |>
    purrr::map(reduce_runs)
  
  multi_chars <- unname(nchar(to_vec) > 1)
  
  nobrack <- stringr::str_detect(to_vec[multi_chars], "\\[|\\]", TRUE)
  
  to_vec[multi_chars] <- ifelse(
    any(nobrack), 
    purrr::map_chr(to_vec[multi_chars], \(x) paste0("[", x, "]")), 
    to_vec[multi_chars])

  purrr::list_c(to_vec) |> 
    fuimus::collapser()
}
```

## Reduce Groups

```{r}
#| label: reduce_groups
#| message: false
vrg <- function(x, n) {
  
  if (is.null(x)) return(NULL)
  
  postfix <- ifelse(
    sf_grepl(x, "^\\[?[A-Z]\\-?", nthreads = 4L), "[0-9]", "[A-Z0-9]")
  
  x <- ifelse(
    n == 0, 
    paste0("(^", x, "$)"),                
    paste0("(^", x, postfix, "{", n, "}$)")) 
    
  paste0(x , collapse = "|")
}

reduce_groups <- function(x) {
  
  list(
    g1 = p1(x),
    g2 = map_vec(x$g2, p2) |> vrg(3),
    g3 = map_vec(x$g3, p2) |> vrg(2),
    g4 = map_vec(x$g4, p2) |> vrg(1),
    g5 = map_vec(x$g5, p2) |> vrg(0)
  ) |> 
    compact() |> 
    paste0(collapse = "|")
}

all_tests[nchar(all_tests) > 2] |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()

hcpcs_tests |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()

long_test2 |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()

long_test2[nchar(long_test2) == 4] |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()

new_test |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()
```

# `medrex()`

```{r}
#| label: final_output
#| message: false
medrex <- function(x) {
  x |> 
    split_lengths() |> 
    remove_redundant() |> 
    process_groups() |> 
    reduce_groups()
}
# REMOVE {1} FROM EXPRS WITH 5 CHARS
medrex(long_test2[nchar(long_test2) > 3])

vec_slice(
  hcpcs, 
  sf_grepl(hcpcs, 
           medrex(long_test2[nchar(long_test2) > 3])
           )
  )

```


{{< pagebreak >}}

::: {#nte-references .callout-tip collapse="true"}

## Links
### Reference

   - [Regex Cheatsheet](https://github.com/raredd/regex)
   - [Learn Regex](https://github.com/ziishaned/learn-regex)
   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)
   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)
   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)
   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)
   - [RexEgg](https://www.rexegg.com/)
   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)
   - [Debuggex](https://www.debuggex.com/)

### Packages

   - [**textshape**](https://github.com/trinker/textshape)
   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)
   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)
   - [**makeunique**](https://github.com/selkamand/makeunique)
   - [**similiars**](https://github.com/davidsjoberg/similiars)
   - [**strex**](https://github.com/rorynolan/strex/)
   - [**stringfish**](https://github.com/traversc/stringfish)
   - [**collapse**](https://sebkrantz.github.io/collapse/)
   - [**kit**](https://github.com/2005m/kit)
   - [**cheapr**](https://github.com/NicChr/cheapr)
   - [**fastplyr**](https://github.com/NicChr/fastplyr)
   - [**stringi**](https://stringi.gagolewski.com/)
   - [**qdapRegex**](https://github.com/trinker/qdapRegex)
   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)

### Functions

   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)
   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)
   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)
   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)
   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)

::: 


## Session Information 

```{r}
#| echo: false
pander::pander(sessionInfo())
```
