---
title: "Learning to Love Regexes By Learning Them"
subtitle: "I Promised Myself I Wouldn't Do This Again"
description: "Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions."
format:
  html:
    reference-location: margin
    other-links:
      - text: Regex Cheatsheet
        icon: bookmark-plus
        href: https://github.com/raredd/regex
      - text: RexEgg
        icon: bookmark-plus
        href: https://www.rexegg.com/
      - text: Regex in R
        icon: bookmark-plus
        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| echo: false
#| cache: false
knitr::opts_chunk$set(
  collapse  = FALSE,
  echo      = TRUE, 
  message   = FALSE, 
  warning   = FALSE,
  error     = TRUE,
  comment   = "",
  dpi       = 300, 
  dev       = "ragg_png",
  out.width = "100%",
  fig.align = "center",
  fig.width = 8
)
options(scipen = 999, digits = 2)

library(tidyverse)
library(rlang)
library(vctrs)
library(cli)
library(stringfish)
library(codex)
library(data.table)
library(collapse)
library(fuimus)
library(emphatic)
# library(re2)
# library(re2r)
# library(compiler)
# library(tidyfast)
# library(cheapr)
# library(fastplyr)
source(here::here("posts/regex/scripts", "data.R"))
```

# HCPCS

```{r}
#| label: hcpcs_all
#| echo: false
#| results: asis
rx <- list(
  all  = "^[A-CEGHJ-MP-V0-9][0-9]{3}[AFMTU0-9]$",
  iI   = "^[0-9]{4}[AFMTU0-9]$",
  cI   = "^[0-9]{4}[AMU0-9]$",
  cII  = "^[0-9]{4}F$",
  cIII = "^[0-9]{4}T$",
  iII  = "^[A-CEGHJ-MP-V][0-9]{4}$"
)

len <- \(rx) cheapr::vector_length(vctrs::vec_slice(hcpcs, stringfish::sf_grepl(hcpcs, rx, nthreads = 4L)))

data.frame(
  row.names = c("All", "-Level I", "--Category I", "--Category II", "--Category III", "-Level II"),
  Count = map_int(unlist(rx, use.names = FALSE), len), 
  Regex = unlist(rx, use.names = FALSE)) |> 
  hl(c("black", "grey20", "grey50", "grey80", "grey90", "grey20"), cols = 1) |>
  knit_print.emphatic()
```

# TODO

   * ~~If a **wildcard** begins with a **letter**, the *postfix* should be `[0-9]{n}`.~~
   * Eliminate `g1()` step in grouping.
   * In `remove_redundant()`, try pmap for `rr()` step.


## Checklist

-   [X] `split_lengths()`
-   [X] `remove_redundant()`
-   [ ] `process_groups()`
   -   [X] `g1()`
   -   [X] `g2()`
   -   [ ] `g3()`
   -   [ ] `g4()`
   -   [ ] `g5()`
-   [ ] `reduce_groups()`

# Helpers

```{r}
#| label: helpers
cutoff <- \(x) stringr::str_trunc(string = x, width = 40, side = "right")
wrap   <- \(x) stringr::str_wrap(string = x, width = 60, exdent = 5, whitespace_only = FALSE)

view <- \(x) {
  idx  <- seq_along(x)
  len  <- vlen(x)
  tree <- unname(purrr::map_vec(x, paste0, collapse = " ")) |> purrr::map_vec(cutoff)
  
    glue::glue("{format(idx)}: ", 
               "{format(len)}|", 
               "--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]")
}

view_remove <- \(x) {
  
  len  <- length(x)
  tree <- unname(paste0(x, collapse = " ")) |> purrr::map_vec(cutoff)
  
  glue::glue("Removed ", 
             "{format(len, justify = 'left')}|", 
             "--[{if (empty(tree)) NULL else format(tree, justify = 'none')}]")
}
```

# Preprocessing

## `split_lengths()`

```{r}
#| label: split_lengths
#| message: true
#| echo: true
split_lengths <- function(x, verbose = FALSE) {
  
  stopifnot(is.character(x))
  
  x <- sf_remove(x, "\\*|\\s") |> 
    unique_narm() |> 
    stringr::str_sort()
  
  l <- vlen(x)
  
  out <- list(
    x1 = x[l == 1],
    x2 = x[l == 2],
    x3 = x[l == 3],
    x4 = x[l == 4],
    x5 = x[l == 5])
  
  if (verbose) {
    
    cli::cat_boxx(
      label = view(out), 
      header = glue::glue("{cli::symbol$stop} Split By Lengths"),
      align = "left", 
      padding = c(0, 1, 0, 1))
    
    return(invisible(out))
    
  } else {
    return(out)
  }
}

random_hcpcs() |>
  split_lengths()
```

## `remove_redundant()`

If a vector contains both `"A"` and `"A0"`, remove `"A0"`, i.e., remove longer codes that share a common sub-string with shorter codes.

```{r}
#| label: remove_redundant
remove_redundant <- function(x, verbose = FALSE) {

  .c(x1, x2, x3, x4, x5) %=% x
  
  out <- list(
    x1 = x1,
    x2 = rr(x2, x1),
    x3 = rr(x3, x1) |> rr(x2),
    x4 = rr(x4, x1) |> rr(x2) |> rr(x3),
    x5 = rr(x5, x1) |> rr(x2) |> rr(x3) |> rr(x4)
  )
  
  if (verbose) {
    
    cli::cat_boxx(
      label = view(out), 
      header = glue::glue("{strrep(cli::symbol$stop, 2)} Remove Redundancies"),
      align = "left", 
      padding = c(0, 1, 0, 1))

    return(invisible(out))
    
  } else {
    return(out)
  }
}

random_hcpcs() |> 
  split_lengths() |> 
  remove_redundant()
```

## `split_first()`

```{r}
#| label: split_first
#| message: true
#| echo: true
spf <- \(x) collapse::rsplit(x, take_at(x, 1), use.names = FALSE)

split_first <- function(x, verbose = FALSE) {
  
  .c(x1, x2, x3, x4, x5) %=% x
  
  out <- list(
    x1 = list(x1),
    x2 = spf(x2),
    x3 = spf(x3),
    x4 = spf(x4),
    x5 = spf(x5))
  
  if (verbose) {
    
    cli::cat_boxx(
      label = view(out), 
      header = glue::glue("{strrep(cli::symbol$stop, 3)} Split At First"),
      align = "left", 
      padding = c(0, 1, 0, 1))
    
    return(invisible(out))
    
  } else {
    return(out)
  }
}

random_hcpcs() |> 
  split_lengths() |> 
  remove_redundant() |> 
  split_first()
```

# Grouping

Group each set of vectors into regex patterns. Deal with groups containing letters separately.

```{r}
# $r
# [1] "L80"
# $f
# [1] "L56" "L59"
# 
# ^L(5[69]|80)$

lcodes <- c("L6789", "L8000", "L5600", "L5900")

lcodes[
  sf_detect(
    lcodes, 
    "^L(5[69]|80)[0-9]{2}$"
    )
  ]
```

::: {.panel-tabset}

## [g3]

```{r}
#| label: group_3
#| eval: true
group_3 <- function(x) {

  x <- collapse::get_elem(x, "x3")
  
  if (empty(x)) return(x)
  
  l     <- vlen(x)
  leave <- x[l < 3]
  test  <- x[l >= 3]
  
  if (empty(test)) return(x)
  
  process_3 <- \(test) {

  indices <- data.table::data.table(
    code = test,
    a1 = take_at(test),
    a2 = take_at(test, 2),
    a3 = take_at(test, 3)) |>
    dplyr::mutate(i1 = dplyr::consecutive_id(a1)) |>
    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .by = a1) |>
    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .by = c(a1, a2))

  orphans <- indices |>
    dplyr::add_count(i1, name = "n1", sort = TRUE) |>
    dplyr::filter((i2 + i3 + n1) == 3) |>
    dplyr::pull(code)

  last <- indices |>
    dplyr::filter(code %!in% orphans) |>
    dplyr::select(code, a1:a3) |>
    fuimus::combine(group_id, columns = c("a1"), sep = "")

  last <- dplyr::left_join(
    last |> dplyr::count(group_id, a2),
    last |> dplyr::count(group_id, name = "g"),
    by = dplyr::join_by(group_id)) |>
    dplyr::filter(n == g) |>
    dplyr::right_join(last, by = dplyr::join_by(group_id, a2)) |>
    dplyr::filter(!is.na(n))

  rest <- indices |>
    dplyr::filter(code %!in% c(orphans, dplyr::pull(last, code))) |>
    fuimus::combine(group_id, columns = c("a1", "a2"), sep = "")

  vctrs::vec_c(
    if (empty(orphans)) NULL else list(orphans),
    if (empty(last)) NULL else chop(last$code, last$group_id),
    if (empty(rest)) NULL else chop(rest$code, rest$group_id))
  }
  vctrs::vec_c(leave, purrr::map(test, process_3))
}

long_test2[nchar(long_test2) == 3] |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_3()

random_hcpcs(30) |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_3()
```

## [All]

```{r}
#| label: process_groups
process_groups <- function(x) {
  
  list(
    g1 = x$x1,
    g2 = x$x2,
    g3 = group_3(x)
    # ,
    # g4 = g4(x, verbose = verbose),
    # g5 = g5(x, verbose = verbose)
    )
}

hcpcs_tests |>
  split_lengths() |> 
  # remove_redundant() |> 
  split_first() |>
  process_groups()

long_test2 |> 
  split_lengths() |> 
  # remove_redundant() |> 
  split_first() |> 
  process_groups()

random_hcpcs(50) |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  process_groups()
```

::: 

# Reduce Runs

```{r}
#| label: reduce_runs
#| echo: true
#| eval: true
reduce_runs <- function(x) {
  
  if (nchar(x) == 1) return(x)

  # poss <- c(LETTERS, 0:9)
  poss <- c(0:9, "&", LETTERS)
  
  test <- setNames(rep(0, 37), poss)
  
  vctr <- test[c(splitter(x), "&")]
  
  vctr <- vctr[!is.na(vctr)]
  
  test[names(vctr)] <- 1
  
  test[names(test) == "&"] <- 0

  groups <- data.table::data.table(
    value = names(test),
    keys = test,
    group = dplyr::consecutive_id(test)) |>
    dplyr::mutate(size = dplyr::n(), .by = group) |> 
    dplyr::filter(keys == 1, size >= 3) |>
    dplyr::select(value, group)

  if (empty(groups)) return(x)
  
  xgroups <- chop(groups$value, groups$group) |>
    purrr::map(smush) |>
    purrr::list_c()
  
  if (all(xgroups == smush(poss))) return("[A-Z0-9]")
  
  replacements <- dplyr::left_join(
    dplyr::slice_min(groups, by = group, order_by = value) |> dplyr::rename(start = value),
    dplyr::slice_max(groups, by = group, order_by = value) |> dplyr::rename(end = value),
    by = dplyr::join_by(group)) |>
    glue::glue_data("{start}-{end}") |>
    as.vector()

  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)

  bracket(res)
}
```

## G == 1

```{r}
#| label: reduce_1
#| eval: false
reduce_1 <- function(x) {
  
  if (empty(x[["g1"]])) return(character(0))
  
  x <- collapse::get_elem(x, "g1")[[1]]
  
  re <- sort_order(x) |> reduce_runs()
  
  if (re == "[A-Z0-9]") return(glue::glue("^{re}{{5}}$"))
  
  postfix <- ifelse(sf_detect(re, "\\[?[0-9]{1}"), "[A-Z0-9]", "[0-9]")
  
  glue::glue("^{re}{postfix}{{4}}$")
}

hcpcs_tests |> 
  split_lengths() |> 
  remove_redundant() |> 
  split_first() |>
  process_groups() |> 
  reduce_1()


c(LETTERS[1:5], 0:9) |> 
  split_lengths() |> 
  remove_redundant() |> 
  split_first() |>
  process_groups() |> 
  reduce_1()

long_test2 |>
  split_lengths() |> 
  remove_redundant() |> 
  split_first() |>
  process_groups() |> 
  reduce_1()

list(g1 = list(c(0:9, LETTERS))) |> reduce_1()

list(g1 = list(c(LETTERS[1:5], 0:9))) |> reduce_1()
```

## G > 1

```{r}
#| label: reduce_2
#| eval: false
reduce_2 <- function(x, nm = "g2") {
  
  if (empty(x[[nm]])) return(character(0))
  
  x <- collapse::get_elem(x, nm)
  l <- vlen(x)
  leave <- x[l == 1]
  test  <- x[l > 1]
  
  process_parts <- \(x) {
  
  parts <- stringr::str_split_fixed(x, "", max_vlen(x)) |> 
    as.data.frame() |>
    purrr::map(unique_narm) |> 
    purrr::map(sort_order) |>
    purrr::map(reduce_runs) |> 
    delist()
  
  multi   <- stringfish::sf_nchar(parts, nthreads = 4L) > 1
  nobrk <- !stringfish::sf_grepl(parts[multi], "\\[|\\]", nthreads = 4L)
  
  
  parts[multi] <- ifelse(
    any(nobrk), 
    purrr::map_chr(parts[multi], bracket), 
    parts[multi])

  smush(parts)
  }
  vctrs::vec_c(leave, purrr::map(test, process_parts))
}

all_tests |> 
  split_lengths() |> 
  remove_redundant() |> 
  split_first() |>
  process_groups() |> 
  reduce_2("g2")

hcpcs_tests |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  reduce_2("g3")

x <- paste0("A", c(0:5, LETTERS)) |> 
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  reduce_2("g2")
```

# Reduce Groups

```{r}
#| label: reduce_groups
#| eval: false
#| message: false
#| error: true
vec_to_regex <- vrg <- function(x, n) {
  
  if (empty(x)) return(character(0))
  
  post <- ifelse(sf_detect(x, "^\\[?[A-Z]\\-?"), "[0-9]", "[A-Z0-9]")
  
  x <- data.table::fcase(
    n == 0, glue::glue("^{x}$"),                
    n == 1, glue::glue("^{x}{post}$"),
    n == 2, glue::glue("^{x}{post}{{2}}$"),
    n == 3, glue::glue("^{x}{post}{{3}}$")
    )
    
  glue::glue_collapse(x)
}

reduce_groups <- function(x) {
  
  list(
    g1 = p1(x),
    g2 = purrr::map_chr(x$g2, p2) |> purrr::map_chr(vrg, n = 3) |> glue::as_glue(),
    g3 = purrr::map_chr(x$g3, p2) |> purrr::map_chr(vrg, n = 2) |> glue::as_glue(),
    g4 = purrr::map_chr(x$g4, p2) |> purrr::map_chr(vrg, n = 1) |> glue::as_glue(),
    g5 = purrr::map_chr(x$g5, p2) |> purrr::map_chr(vrg, n = 0) |> glue::as_glue()
  )
}

all_tests[nchar(all_tests) > 2] |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()

hcpcs_tests |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()

long_test2 |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()

# long_test2[nchar(long_test2) == 4]

new_test |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()

random_hcpcs() |> 
  split_lengths() |> 
  remove_redundant() |> 
  process_groups() |> 
  reduce_groups()
```

# `medrex()`

```{r}
#| label: final_output
#| eval: false
#| message: false
#| error: true
medrex <- function(x, verbose = TRUE) {
  x |> 
    split_lengths(verbose = verbose) |> 
    remove_redundant(verbose = verbose) |> 
    process_groups(verbose = verbose) |> 
    reduce_groups() |> 
    unlist(use.names = FALSE) |> 
    glue::glue_collapse(sep = "|")
}

long_test2[nchar(long_test2) > 4]

# REMOVE {1} FROM EXPRS WITH 5 CHARS

medrex(long_test2[nchar(long_test2) > 4])

vctrs::vec_slice(
  hcpcs, 
  stringfish::sf_grepl(
    hcpcs, 
    medrex(
      long_test2[nchar(long_test2) > 4],
      verbose = FALSE
      )
    )
  )
```


{{< pagebreak >}}

::: {#nte-references .callout-tip collapse="true"}

## Links
### Reference

   - [Regex Cheatsheet](https://github.com/raredd/regex)
   - [Learn Regex](https://github.com/ziishaned/learn-regex)
   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)
   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)
   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)
   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)
   - [RexEgg](https://www.rexegg.com/)
   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)
   - [Debuggex](https://www.debuggex.com/)

### Packages

   - [**textshape**](https://github.com/trinker/textshape)
   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)
   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)
   - [**makeunique**](https://github.com/selkamand/makeunique)
   - [**similiars**](https://github.com/davidsjoberg/similiars)
   - [**strex**](https://github.com/rorynolan/strex/)
   - [**stringfish**](https://github.com/traversc/stringfish)
   - [**collapse**](https://sebkrantz.github.io/collapse/)
   - [**kit**](https://github.com/2005m/kit)
   - [**cheapr**](https://github.com/NicChr/cheapr)
   - [**fastplyr**](https://github.com/NicChr/fastplyr)
   - [**stringi**](https://stringi.gagolewski.com/)
   - [**qdapRegex**](https://github.com/trinker/qdapRegex)
   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)

### Functions

   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)
   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)
   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)
   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)
   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)

::: 


## Session Information 

```{r}
#| echo: false
pander::pander(sessionInfo())
```
