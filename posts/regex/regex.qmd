---
title: "`{codex}`: Medical Coding Regex Translator"
subtitle: "I Promised Myself I Wouldn't Do This Again"
description: "Building a regex generator for self-contained, well-defined string detection problems is a very effective way to learn regular expressions."
format:
  html:
    reference-location: margin
    other-links:
      - text: Regex Cheatsheet
        icon: bookmark-plus
        href: https://github.com/raredd/regex
      - text: RexEgg
        icon: bookmark-plus
        href: https://www.rexegg.com/
      - text: Regex in R
        icon: bookmark-plus
        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html
editor_options: 
  chunk_output_type: console
callout-appearance: simple
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| echo: false
#| cache: false
knitr::opts_chunk$set(
  collapse  = FALSE,
  echo      = TRUE, 
  message   = FALSE, 
  warning   = FALSE,
  error     = TRUE,
  comment   = "",
  dpi       = 300, 
  dev       = "ragg_png",
  out.width = "100%",
  fig.align = "center",
  fig.width = 8
)
options(scipen = 999, digits = 2)

library(tidyverse)
library(rlang)
library(cli)
library(vctrs)
library(S7)

library(stringfish)
library(data.table)
library(collapse)

library(fuimus)
library(codex)

# library(kit)
# library(compiler)
# library(cheapr)

# library(dtplyr)
# library(fastplyr)
# library(tidyfast)
# library(tidytable)

# library(re2)
# library(re2r)

source(here::here("posts/regex/scripts", "data.R"))
```

# TODO {.unnumbered}

   * The *postfix* for a **wildcard** that begins with a **letter** is `[0-9]{n}`.
   * In `remove_redundant()`, try pmap for `rr()` step.
   * Groups 3, 4 & 5 beginning with letters.
   * Group 5 ending with letters.


<hr>

::: {#note-good .callout-note collapse="true"}

### Good Examples

### Case 1

```{r}
#| label: case_1
#| eval: false
list("L80", 
     c("L56", "L59"))

length(sf_extract(hcpcs, "^L56|^L59|^L80"))
length(sf_extract(hcpcs, "^L(5[69]|80)[0-9]{2}$"))

bench::mark(
  raw = sf_extract(hcpcs, "^L56|^L59|^L80"),
  compact = sf_extract(hcpcs, "^L(5[69]|80)[0-9]{2}$"),
  iterations = 10000) |> 
  select(expression:total_time)
```

### Case 2

```{r}
#| label: case_2
#| eval: false
list(c("021", "022", "026", "027"), 
     c("032", "033"), 
     c("042", "044"), 
     "050")

bench::mark(
  raw = sf_extract(hcpcs, "^021|^022|^026|^027|^032|^033|^042|^044|^050"),
  compact = sf_extract(hcpcs, sf_convert("^0(2[1267]|3[23]|4[24]|50)[A-Z0-9]{2}$")),
  iterations = 10000) |> 
  select(expression:total_time)
```

### Case 3

```{r}
#| label: case_3
#| eval: false
list(c("C75", "C97"),
     c("G02", "G04"))

length(sf_extract(hcpcs, "^C75|^C97|^G02|^G04"))
length(sf_extract(hcpcs, "^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$"))
length(sf_extract(hcpcs, "^(C(75|97)|G0[24])[0-9]{2}$"))

bench::mark(
  raw = sf_extract(hcpcs, "^C75|^C97|^G02|^G04"),
  reduced = sf_extract(hcpcs, "^C(75|97)[0-9]{2}$|^G0[24][0-9]{2}$"),
  compact = sf_extract(hcpcs, sf_convert("^(C(75|97)|G0[24])[0-9]{2}$")),
  iterations = 10000) |> 
  select(expression:total_time)
```

### Case 4

```{r}
#| label: case_4
#| eval: false
list("0[2-5]", 
     "15", 
     "2[027]", 
     "3[0-24-6]", 
     "5[0458]", 
     "6[134]", 
     "76", 
     "9[25]", 
     "C[79]", 
     "E0", 
     "G0", 
     "S2") -> c4list

c4list

c4raw <- "^02|^03|^04|^05|^15|^20|^22|^27|^30|^31|^32|^34|^35|^36|^50|^54|^55|^58|^61|^63|^64|^76|^92|^95|^C7|^C9|^E0|^G0|^S2"

c4compact <- paste0("^(", sf_collapse(list_c(c4list), collapse = "|"), ")[A-Z0-9]{3}$")

length(sf_extract(hcpcs, c4raw))
length(sf_extract(hcpcs, c4compact))

bench::mark(
  raw = sf_extract(hcpcs, c4raw),
  compact = sf_extract(hcpcs, c4compact),
  iterations = 10000) |> 
  select(expression:total_time)
```

::: 

<hr>

# Preprocess Steps

```{r}
utils::formatOL(
  c("Mix dry ingredients thoroughly.",
       "Pour in wet ingredients.",
       "Mix for 10 minutes.",
       "Bake for one hour at 300 degrees."),
  offset = 3
  ) |> 
  writeLines()
```


```{r}
#| label: view_length
view_length <- \(x) {
  grp_name <- format(seq_along(x))
  grp_size <- format(vlen(x), justify = "left")
  grp_mems <- unname(x)
  grp_mems <- if (empty(grp_mems)) NULL else format(grp_mems, justify = "none")
  cli::cat_bullet(glue::glue("{grp_name}: ", "{grp_size}|", "-[{grp_mems}]"))
  return(invisible(x))
}
```

```{r}
#| label: view_first
view_first <- \(x) {
  grp_name <- format(seq_along(x))
  grp_size <- format(vlen(x), justify = "left")
  
  grp_mems <- purrr::modify_if(x, is.list, \(x) map_chr(x, \(x) paste0("<", paste0(x, collapse = " "), ">")))
  grp_mems <- if (empty(grp_mems)) NULL else format(unname(grp_mems), justify = "none")

  cli::cat_bullet(glue::glue("{grp_name}: ", "{grp_size}|", "-[{grp_mems}]"))
  
  return(invisible(x))
}
```

```{r}
#| label: preprocess
x <- random_hcpcs(50)

x |> 
  split_lengths() |> 
  view_length()

x |>
  split_lengths() |> 
  remove_redundant() |>
  view_length()

x |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |> 
  view_first()

random_hcpcs(50) |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  view_first()
```

<hr>

# Process Groups

::: {.panel-tabset}

## Group 3

```{r}
#| label: group_3
c("C75", "C97", "G02", "G04") |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_3() |>
  view_first()

long_test2[nchar(long_test2) == 3] |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_3() |>
  view_first()

random_hcpcs() |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_3() |>
  view_first()
```

## Group 4

```{r}
#| label: group_4
c("C751", "C752", "C970", "G020", "G021", "G040") |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_4() |>
  view_first()

long_test2[nchar(long_test2) == 4] |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_4() |>
  view_first()

random_hcpcs() |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_4() |>
  view_first()
```

```{r}
#| label: group_4_old
#| eval: false
#| echo: false
#| message: true
old_group_4 <- function(x) {
  x <- getelem(x, "x4")

  if (empty(x))
    return(x)

  map(x, function(x) {
    idx <- data.table(
      code = x,
      grp1 = sf_sub(x, 1, 2),
      grp2 = sf_sub(x, 1, 3),
      a1 = take_at(x),
      a2 = take_at(x, 2),
      a3 = take_at(x, 3),
      a4 = take_at(x, 4),
      i1 = groupid(take_at(x))
    )
    
    message("Initial data frame")
    print(idx)
    
    idx <- idx |>
      fgroup_by(a1) |>
      fmutate(i2 = groupid(a2)) |>
      fgroup_by(a1, a2) |>
      fmutate(i3 = groupid(a3)) |>
      fgroup_by(a1, a2, a3) |>
      fmutate(i4 = groupid(a4)) |>
      fungroup()
    
    message("Grouped data frame")
    print(idx)

    lone <- fcount(idx, i1, add = TRUE) |>
      fmutate(`i2 + i3 + i4 + N` = i2 + i3 + i4 + N)
    
    message("Lone Counted")
    print(lone)
    
    lone <- lone |>
      fsubset((i2 + i3 + i4 + N) == 4)
    
    message("Lone i2 + i3 + i4 + N == 4")
    print(lone)

    last <- fsubset(idx, code %!in% lone[["code"]])
    
    message("Last Filtered")
    print(last)

    last <- join(
      fcount(last, grp1, a3),
      fcount(last, grp1, name = "G"),
      on = "grp1",
      verbose = 0
    ) |>
      fsubset(N == G) |>
      join(
        last,
        on = c("grp1", "a3"),
        how = "right",
        verbose = 0
      )
    
    message("Last Joined")
    print(last)
    
    last <- last |>
      fsubset(not_na(N))
    
    message("Last Filtered")
    print(last)

    rest <- fsubset(idx, code %!in% c(lone[["code"]], last[["code"]]))
    
    message("Rest Filtered")
    print(rest)

    c(
      if (empty(lone))
        NULL
      else
        list(lone[["code"]]),
      if (empty(last))
        NULL
      else
        gchop(last[["code"]], last[["grp1"]]),
      if (empty(rest))
        NULL
      else
        gchop(rest[["code"]], rest[["grp2"]])
    )
  })
}

c("C751", "C752", "C970", "G020", "G021", "G040") |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  old_group_4()
```

## Group 5

```{r}
#| label: group_5_num
group_5_num <- function(x) {
  
  map(x, function(x) {
    
    idx <- data.table(
      code = x,
      grp1 = sf_sub(x, 1, 2),
      grp2 = sf_sub(x, 1, 3),
      grp3 = sf_sub(x, 1, 4),
      a1 = take_at(x),
      a2 = take_at(x, 2),
      a3 = take_at(x, 3),
      a4 = take_at(x, 4),
      a5 = take_at(x, 5),
      i1 = groupid(take_at(x))) |>
      fgroup_by(a1) |> 
      fmutate(i2 = groupid(a2)) |>
      fgroup_by(a1, a2) |> 
      fmutate(i3 = groupid(a3)) |>
      fgroup_by(a1, a2, a3) |> 
      fmutate(i4 = groupid(a4)) |>
      fgroup_by(a1, a2, a3, a4) |> 
      fmutate(i5 = groupid(a5)) |> 
      fungroup()

      lone <- fcount(idx, i1, add = TRUE) |> 
        fsubset((i2 + i3 + i4 + i5 + N) == 5)
      
      last <- fsubset(idx, code %!in% lone[["code"]])
      
      last <- join(
        fcount(last, grp2, a4),
        fcount(last, grp2, name = "G"), on = "grp2", verbose = 0) |>
        fsubset(N == G) |>
        join(last, on = c("grp2", "a4"), how = "right", verbose = 0) |> 
        fsubset(not_na(N))
      
      rest <- fsubset(idx, code %!in% c(lone[["code"]], last[["code"]]))
      
      c(if (empty(lone)) NULL else list(lone[["code"]]),
        if (empty(last)) NULL else gchop(last[["code"]], last[["grp2"]]),
        if (empty(rest)) NULL else gchop(rest[["code"]], rest[["grp3"]]))
    })
}
```

```{r}
#| label: group_5_chr
group_5_chr <- function(x) {
  
  original <- x
  
  reversed <- map(
    original, 
    \(x) paste0(
      take_at(x, 5), 
      sf_remove(x, "[A-Z]$")
      )
    )

  map2(reversed, original, function(x, y) {
    
    idx <- data.table(
      orig = y,
      code = x,
      grp1 = sf_sub(x, 1, 2),
      grp2 = sf_sub(x, 1, 3),
      grp3 = sf_sub(x, 1, 4),
      a1 = take_at(x),
      a2 = take_at(x, 2),
      a3 = take_at(x, 3),
      a4 = take_at(x, 4),
      a5 = take_at(x, 5),
      i1 = groupid(take_at(x))) |>
      fgroup_by(a1) |> 
      fmutate(i2 = groupid(a2)) |>
      fgroup_by(a1, a2) |> 
      fmutate(i3 = groupid(a3)) |>
      fgroup_by(a1, a2, a3) |> 
      fmutate(i4 = groupid(a4)) |>
      fgroup_by(a1, a2, a3, a4) |> 
      fmutate(i5 = groupid(a5)) |> 
      fungroup()

      lone <- fcount(idx, i1, add = TRUE) |> 
        fsubset((i2 + i3 + i4 + i5 + N) == 5)
      
      last <- fsubset(idx, code %!in% lone[["code"]])
      
      last <- join(
        fcount(last, grp2, a4),
        fcount(last, grp2, name = "G"), on = "grp2", verbose = 0) |>
        fsubset(N == G) |>
        join(last, on = c("grp2", "a4"), how = "right", verbose = 0) |> 
        fsubset(not_na(N))
      
      rest <- fsubset(idx, code %!in% c(lone[["code"]], last[["code"]]))

    c(
      if (empty(lone))
        NULL
      else
        list(lone[["orig"]]),
      if (empty(last))
        NULL
      else
        gchop(last[["orig"]], last[["grp1"]]),
      if (empty(rest))
        NULL
      else
        gchop(rest[["orig"]], rest[["grp2"]])
    )
  })
}
```


```{r}
#| label: group_5
group_5 <- function(x) {

  x <- getelem(x, "x5")

  if (empty(x)) return(x)
  
  chr <- map(x, \(x) sf_extract(x, "[A-Z]$")) |> compact()
  num <- map(x, \(x) sf_extract(x, "[0-9]$")) |> compact()

  c(
    if (empty(chr)) NULL else group_5_chr(chr),
    if (empty(num)) NULL else group_5_num(num)
  )
}

c("C7510", "C9701", "G0200", "G0400") |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_5() |>
  view_first()

long_test2[nchar(long_test2) == 5] |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_5() |>
  view_first()

random_hcpcs() |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  group_5() |>
  view_first()
```

## process_groups

```{r}
#| eval: false
#| echo: false
view_group <- \(x) {
  
  x <- getelem(x, "3$")
  
  map(x, function(x) {
    
    map(x, function(x) {
    
    modify_if(x, function(x) vlen(x) > 1, function(x) {
      
      list_c(x)
      
      })
    })
  })
}
```

```{r}
#| eval: false
#| echo: false
not_one <- \(x) !collapse::allv(x, 1)

is_not_one <- \(x) purrr::map(purrr::map(x, vlen), not_one)

view_group <- \(x) {
  
  x <- getelem(x, "3$")
  
  if (any(vlen(x[[1]]) > 1)) list_c(vlen(x[[1]]) > 1)
  
  purrr::map_if(x[[1]], function(x) vlen(x) > 1, function(x) list_c(x))

  purrr::map(x, \(x) { which(collapse::anyv(vlen(x) > 1, value = TRUE)) })
  purrr::map(x, function(x) which(vlen(x) > 1))
  
  purrr::map_if(x, function(x) purrr::map(x, \(x) vlen(x) > 1), function(x) purrr::map(x, \(x) purrr::list_c(x)))
  
  
  grp_name <- format(seq_along(x))
  grp_size <- format(vlen(x), justify = "left")
  
  purrr::modify_if(x, is_not_one, \(x) map_chr(x, \(x) paste0("<", paste0(x, collapse = " "), ">")))
  
  grp_mems <- purrr::modify_if(x, is.list, function(x) purrr::map_chr(x, function(x) paste0("<", paste0(x, collapse = " "), ">")))
  grp_mems <- if (empty(grp_mems)) NULL else format(unname(grp_mems), justify = "none")

  cli::cat_bullet(glue::glue("{grp_name}: ", "{grp_size}|", "-[{grp_mems}]"))
  
  return(invisible(x))
}
```

```{r}
#| label: process_groups
process_groups <- function(x) {
  
  list(
    g1 = x$x1,
    g2 = x$x2,
    g3 = group_3(x),
    g4 = group_4(x),
    g5 = group_5(x))
}

hcpcs_tests |>
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  process_groups()

long_test2 |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |> 
  process_groups()

random_hcpcs(50) |> 
  split_lengths() |> 
  remove_redundant() |>
  split_first() |>
  process_groups()
```

::: 

<hr>

{{< pagebreak >}}

# Reduce Groups

::: {.panel-tabset}

## reduce_runs

```{r}
#| label: reduce_runs
reduce_runs <- function(x) {
  
  if (sf_nchar(x) == 1) 
    return(x)

  test <- setNames(rep(0, 37), c(0:9, "&", LETTERS))
  
  vec <- test[c(desplit(x), "&")]
  
  vec <- vec[not_na(vec)]
  
  test[names(vec)] <- 1
  
  test[names(test) == "&"] <- 0

  groups <- data.table(
    value = names(test),
    keys = test,
    group = groupid(test)) |>
    fgroup_by(group)
  
  groups <- join(
    groups, 
    fcount(groups, group), 
    on = "group", 
    verbose = 0) |> 
    fungroup() |> 
    fsubset(keys == 1) |>
    fsubset(N >= 3) |>
    fselect(value, group)
    
  if (empty(groups)) 
    return(x)
  
  xgroups <- gchop(
    groups$value, 
    groups$group) |>
    map(smush) |>
    list_c()
  
  if (all(xgroups == smush(c(0:9, "&", LETTERS)))) return("[A-Z0-9]")
  
  replacements <- join(
    dplyr::slice_min(groups, by = group, order_by = value) |> dplyr::rename(start = value),
    dplyr::slice_max(groups, by = group, order_by = value) |> dplyr::rename(end = value),
    on = "group", verbose = 0) |>
    stringr::str_glue_data("{start}-{end}") |>
    as.vector()

  bracket(replace_regex(x, xgroups, replacements))
}
```

## red1

```{r}
#| label: red1
red1 <- function(x) {
  
  x <- getelem(x, "g1")
  
  if (empty(x)) 
    return(character(0))
  
  re <- sort_order(x) |> 
    reduce_runs()
  
  if (re == "[A-Z0-9]") 
    return(str_glue("^{re}{{5}}"))
  
  post <- iif_else(
    sf_detect(
      re, 
      "\\[?[0-9]{1}"), 
    "[A-Z0-9]", 
    "[0-9]")
  
  str_glue("^{re}{post}{{4}}")
}

long_test2 |>
  split_lengths() |> 
  remove_redundant() |> 
  split_first() |>
  process_groups() |> 
  red1()

hcpcs_tests |> 
  split_lengths() |> 
  remove_redundant() |> 
  split_first() |>
  process_groups() |> 
  red1()


c(LETTERS[1:5], 0:9) |> 
  split_lengths() |> 
  remove_redundant() |> 
  split_first() |>
  process_groups() |> 
  red1()


list(g1 = c(0:9, LETTERS)) |> 
  red1()

list(g1 = c(LETTERS[1:5], 0:9)) |> 
  red1()
```

## red2

```{r}
#| label: red2
red2 <- function(x) {
  
  x <- getelem(x, "g2")
  
  if (empty(x)) 
    return(character(0))
  
  modify_if(x, len_gt_one, function(x) {
    
    parts <- split_max_vlen(x) |> 
    as.data.frame() |>
    map(uniq_narm) |>
    map(sort_order) |>
    map(reduce_runs) |>
    delist()

  multi <- sf_nchar(parts) > 1
  nobrk <- sf_ndetect(parts, "\\[|\\]")
  
  if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)
  
  smush(parts)
  
  })
}

long_test2[sf_nchar(long_test2) == 2] |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  red2() |> 
  view_first()

paste0("A", c(0:5, LETTERS)) |> 
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  red2() |>
  view_first()
```

## red3

```{r}
#| label: red3
red3 <- function(x) {
  
  x <- getelem(x, "g3")
  
  if (empty(x)) return(character(0))
  
  map(x, function(x) {
    
    modify_if(x, len_gt_one, function(x) {
      
      parts <- split_max_vlen(x) |> 
        as.data.frame() |>
        map(uniq_narm) |> 
        map(sort_order) |>
        map(reduce_runs) |> 
        delist()
      
      multi <- sf_nchar(parts) > 1
      nobrk <- sf_ndetect(parts, "\\[|\\]")
      
      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)
      
      smush(parts)
    })
  })
}

long_test2[sf_nchar(long_test2) == 3] |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |> 
  red3() |> 
  view_first()
```

## red4

```{r}
#| label: red4
red4 <- function(x) {
  
  x <- getelem(x, "g4")
  
  if (empty(x)) return(character(0))
  
  map(x, function(x) {
    
    modify_if(x, len_gt_one, function(x) {
      
      parts <- split_max_vlen(x) |> 
        as.data.frame() |>
        map(uniq_narm) |> 
        map(sort_order) |>
        map(reduce_runs) |> 
        delist()
      
      multi <- sf_nchar(parts) > 1
      nobrk <- sf_ndetect(parts, "\\[|\\]")
      
      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)
      
      smush(parts)
      
    })
  })
}

long_test2[sf_nchar(long_test2) == 4] |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |> 
  red4() |> 
  view_first()
```

## red5

```{r}
#| label: red5
red5 <- function(x) {
  
  x <- getelem(x, "g5")
  
  if (empty(x)) return(character(0))
  
  map(x, function(x) {
    
    modify_if(x, len_gt_one, function(x) {
      
      parts <- split_max_vlen(x) |> 
        as.data.frame() |>
        map(uniq_narm) |> 
        map(sort_order) |>
        map(reduce_runs) |> 
        delist()
      
      multi <- sf_nchar(parts) > 1
      nobrk <- sf_ndetect(parts, "\\[|\\]")
      
      if (any(multi[nobrk])) parts[multi[nobrk]] <- map_chr(parts[multi[nobrk]], bracket)
      
      smush(parts)
    })
  })
}

long_test2[sf_nchar(long_test2) == 5] |>
  split_lengths() |>
  # remove_redundant() |>
  split_first() |>
  process_groups() |> 
  red5() |> 
  view_first()
```

## reduce_groups

```{r}
#| label: reduce_groups
reduce_groups <- \(x) {
  
  list(
    g1 = red1(x),
    g2 = red2(x),
    g3 = red3(x),
    g4 = red4(x),
    g5 = red5(x)
  )
}

long_test2 |>
  split_lengths() |>
  # remove_redundant() |>
  split_first() |>
  process_groups() |> 
  reduce_groups()
```

::: 

<hr>

{{< pagebreak >}}


# Recombine Vectors

::: {.panel-tabset}

## recombine2

```{r}
#| label: recombine2
recombine2 <- function(x) {
  
  x <- getelem(x, "g2")
  
  if (empty(x)) return(character(0))
  
  x <- sf_collapse(list_c(x), collapse = '|')
  
  # str_glue("^({x})[A-Z0-9]{{3}}$")
  str_glue("({x})")
}

long_test2[sf_nchar(long_test2) == 2] |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  reduce_groups() |> 
  recombine2()

random_hcpcs() |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  reduce_groups() |> 
  recombine2()
```

## recombine3

```{r}
#| label: recombine3
recombine3 <- function(x) {
  
  x <- getelem(x, "g3")
  
  if (empty(x)) return(character(0))
  
  list(
    if (empty(x[vlen(x) == 1])) 
      NULL 
    else 
      parentheses(
        sf_collapse(
          delist(x[vlen(x) == 1]), collapse = "|")
        ) |>
      glue::as_glue(),
    if (empty(x[vlen(x) > 1])) 
      NULL 
    else 
      map(x[vlen(x) > 1], 
          function(x) {
          
            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))
          
            back  <- sf_collapse(sf_remove(delist(x), str_glue("^[{front}]{{1}}")), collapse = "|")
          
            str_glue("{front}({back})")
          
            })) |> list_flatten()
}

long_test2[sf_nchar(long_test2) == 3] |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |> 
  reduce_groups() |> 
  recombine3()

random_hcpcs(50) |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  reduce_groups() |> 
  recombine3()
```

## recombine4

```{r}
#| label: recombine4
recombine4 <- function(x) {
  
  x <- getelem(x, "g4")
  
  if (empty(x)) return(character(0))
  
  list(
    if (empty(x[vlen(x) == 1])) 
      NULL 
    else 
      parentheses(
        sf_collapse(
          delist(x[vlen(x) == 1]), collapse = "|")
        ) |>
      glue::as_glue(),
    if (empty(x[vlen(x) > 1])) 
      NULL 
    else 
      map(x[vlen(x) > 1], 
          function(x) {
          
            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))
          
            back  <- sf_collapse(sf_remove(delist(x), str_glue("^[{front}]{{1}}")), collapse = "|")
          
            str_glue("{front}({back})")
          
            })) |> list_flatten()
}

long_test2[sf_nchar(long_test2) == 4] |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |> 
  reduce_groups() |> 
  recombine4()

random_hcpcs(50) |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  reduce_groups() |> 
  recombine4()
```

## recombine5

```{r}
#| label: recombine5
recombine5 <- function(x) {
  
  x <- getelem(x, "g5")
  
  if (empty(x)) return(character(0))
  
  list(
    if (empty(x[vlen(x) == 1])) 
      NULL 
    else 
      parentheses(
        sf_collapse(
          delist(x[vlen(x) == 1]), collapse = "|")
        ) |>
      glue::as_glue(),
    if (empty(x[vlen(x) > 1])) 
      NULL 
    else 
      map(x[vlen(x) > 1], 
          function(x) {
          
            front <- uniq(sf_sub(delist(x), start = 1, stop = 1))
          
            back  <- sf_collapse(sf_remove(delist(x), str_glue("^[{front}]{{1}}")), collapse = "|")
          
            str_glue("{front}({back})")
          
            })) |> list_flatten()
}

long_test2[sf_nchar(long_test2) == 5] |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |> 
  reduce_groups() |> 
  recombine5()

random_hcpcs(50) |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  reduce_groups() |> 
  recombine5()
```

## recombine_groups

```{r}
#| label: recombine_groups
recombine_groups <- \(x) {
  
  list(
    v1 = x$g1,
    v2 = recombine2(x),
    v3 = recombine3(x),
    v4 = recombine4(x),
    v5 = recombine5(x)
  )
}

long_test2 |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |> 
  reduce_groups() |> 
  recombine_groups()


random_hcpcs(50) |>
  split_lengths() |>
  remove_redundant() |>
  split_first() |>
  process_groups() |>
  reduce_groups() |>
  recombine_groups()
```

::: 

<hr>

{{< pagebreak >}}

# Collapse Regex

```{r}
#| label: collapse_regex
#| eval: false
#| error: true
vec_to_regex <- vrg <- \(x, n) {
  
  if (empty(x)) 
    return(character(0))
  
  post <- iif_else(sf_detect(x, "^\\[?[A-Z]\\-?"), "[0-9]", "[A-Z0-9]")
  
  x <- fcase(
    n == 0, glue::glue("^{x}$"),                
    n == 1, glue::glue("^{x}{post}$"),
    n == 2, glue::glue("^{x}{post}{{2}}$"),
    n == 3, glue::glue("^{x}{post}{{3}}$")
    )
    
  glue::glue_collapse(x)
}

collapse_regex <- \(x) {
  
  list(
    g1 = red1(x),
    g2 = map_chr(x$g2, red2) |> map_chr(vrg, n = 3) |> glue::as_glue(),
    g3 = map_chr(x$g3, red3) |> map_chr(vrg, n = 2) |> glue::as_glue(),
    g4 = map_chr(x$g4, red4) |> map_chr(vrg, n = 1) |> glue::as_glue(),
    g5 = map_chr(x$g5, red5) |> map_chr(vrg, n = 0) |> glue::as_glue()
  )
}
```


```{r}
#| label: final_output
#| eval: false
#| echo: false
#| message: false
#| error: true
medrex <- function(x, verbose = TRUE) {
  x |> 
    split_lengths(verbose = verbose) |> 
    remove_redundant(verbose = verbose) |> 
    process_groups(verbose = verbose) |> 
    reduce_groups() |> 
    unlist(use.names = FALSE) |> 
    glue::glue_collapse(sep = "|")
}

long_test2[nchar(long_test2) > 4]

# REMOVE {1} FROM EXPRS WITH 5 CHARS

medrex(long_test2[nchar(long_test2) > 4])

vctrs::vec_slice(
  hcpcs, 
  stringfish::sf_grepl(
    hcpcs, 
    medrex(
      long_test2[nchar(long_test2) > 4],
      verbose = FALSE
      )
    )
  )
```

<hr>

{{< pagebreak >}}

# S7 Class

```{r}
#| label: s7_class
hcpcs <- new_class(
  name = "hcpcs",
  properties = list(
    input = class_vector,
    split_length     = new_property(class = class_list, getter = \(self) split_lengths(self@input)),
    remove_redundant = new_property(class = class_list, getter = \(self) remove_redundant(self@split_length)),
    split_first      = new_property(class = class_list, getter = \(self) split_first(self@remove_redundant)),
    process_groups   = new_property(class = class_list, getter = \(self) process_groups(self@split_first)),
    reduce_groups    = new_property(class = class_list, getter = \(self) reduce_groups(self@process_groups)),
    recombine_groups = new_property(class = class_list, getter = \(self) recombine_groups(self@reduce_groups))
    )
  )

x <- hcpcs(input = random_hcpcs(50))

x
```

<hr>

{{< pagebreak >}}

::: {#nte-references .callout-tip collapse="true"}

## Links
### Reference

   - [Regex Cheatsheet](https://github.com/raredd/regex)
   - [Learn Regex](https://github.com/ziishaned/learn-regex)
   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)
   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)
   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)
   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)
   - [RexEgg](https://www.rexegg.com/)
   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)
   - [Debuggex](https://www.debuggex.com/)

### Packages

   - [**textshape**](https://github.com/trinker/textshape)
   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)
   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)
   - [**makeunique**](https://github.com/selkamand/makeunique)
   - [**similiars**](https://github.com/davidsjoberg/similiars)
   - [**strex**](https://github.com/rorynolan/strex/)
   - [**stringfish**](https://github.com/traversc/stringfish)
   - [**collapse**](https://sebkrantz.github.io/collapse/)
   - [**kit**](https://github.com/2005m/kit)
   - [**cheapr**](https://github.com/NicChr/cheapr)
   - [**fastplyr**](https://github.com/NicChr/fastplyr)
   - [**stringi**](https://stringi.gagolewski.com/)
   - [**qdapRegex**](https://github.com/trinker/qdapRegex)
   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)

### Functions

   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)
   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)
   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)
   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)
   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)

::: 


## Session Information 

```{r}
#| echo: false
pander::pander(sessionInfo())
```
