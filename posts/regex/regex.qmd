---
title: "Vectors to Regex"
subtitle: "Attempting A Functional Regex Translator"
description: "Notes on building a regex translator from a vector of equal length strings to a regex pattern."
format:
  html:
    reference-location: margin
    other-links:
      - text: Regex Cheatsheet
        icon: bookmark-plus
        href: https://github.com/raredd/regex
      - text: RexEgg
        icon: bookmark-plus
        href: https://www.rexegg.com/
      - text: Regex in R
        icon: bookmark-plus
        href: https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| echo: false
#| cache: false

knitr::opts_chunk$set(
  collapse  = FALSE,
  echo      = TRUE, 
  message   = FALSE, 
  warning   = FALSE,
  error     = TRUE,
  comment   = "",
  dpi       = 300, 
  dev       = "ragg_png",
  out.width = "100%",
  fig.align = "center",
  fig.width = 8
)
options(scipen = 999)
library(tidyverse)
library(rlang)
library(cli)

long_test <- c(
  "0214T", 
  "0215T",
  "0217T", 
  "0218T", 
  "0219T", 
  "0220T", 
  "0221T", 
  "0222T", 
  "0263T", 
  "0265T", 
  "0266T", 
  "0269T", 
  "0274T", 
  "0275T", 
  "0329T", 
  "0330T", 
  "0422T", 
  "0444T", 
  "0445T", 
  "0506T", 
  "0507T", 
  "15777", 
  "20939", 
  "22510", 
  "22511", 
  "22512", 
  "22513", 
  "22514", 
  "22515", 
  "22526", 
  "22527", 
  "27197", 
  "27198", 
  "30801", 
  "30802", 
  "31231", 
  "32673", 
  "34713", 
  "34714", 
  "34715", 
  "34716", 
  "34717", 
  "36221", 
  "34812", 
  "34820", 
  "34833", 
  "34834", 
  "35572", 
  "50300", 
  "50540", 
  "54420", 
  "54430", 
  "55200", 
  "55250", 
  "55300", 
  "58575", 
  "58600", 
  "58605", 
  "58700", 
  "58720", 
  "58800", 
  "58805", 
  "58900", 
  "58920", 
  "58925", 
  "58940", 
  "58943", 
  "61000", 
  "61001", 
  "61253", 
  "63035", 
  "63043", 
  "63044", 
  "63045", 
  "63046", 
  "63047", 
  "63048", 
  "64421", 
  "64480", 
  "64484", 
  "64491", 
  "64492", 
  "64494", 
  "64495", 
  "64634", 
  "64636", 
  "76514", 
  "92025", 
  "92081", 
  "92082", 
  "92083", 
  "92132", 
  "92133", 
  "92134", 
  "92145", 
  "92201", 
  "92202", 
  "92227", 
  "92228", 
  "92229", 
  "92235", 
  "92240", 
  "92242", 
  "95870", 
  "C7501", 
  "C7502", 
  "C7504", 
  "C7505", 
  "C9771", 
  "E0675", 
  "G0279", 
  "G0412", 
  "G0413", 
  "G0414", 
  "G0415", 
  "S2342")

hcpcs_tests <- vctrs::vec_c(
  c(0:9, "J*", LETTERS),         # "^[0-9A-Z]{5}$"
  c(as.character(90:98)),        # "^[9][0-8][0-9]{3}$"
  c(as.character(921:929)),      # "^[9][2][1-9][0-9]{2}$"
  c(as.character(9202:9208)),    # "^[9][2][0][2-8][0-9]{1}$"
  c(as.character(92015:92019)),  # "^[9][2][0][1][5-9]$"
  long_test)

long_test2 <- vctrs::vec_c(
  stringfish::sf_substr(long_test, 1, 1),
  stringfish::sf_substr(long_test, 1, 2),
  stringfish::sf_substr(long_test, 1, 3),
  stringfish::sf_substr(long_test, 1, 4),
  stringfish::sf_substr(long_test, 1, 5)
  )
```


# Links

   - [Regex Cheatsheet](https://github.com/raredd/regex)
   - [Learn Regex](https://github.com/ziishaned/learn-regex)
   - [Evaluating strings as code](https://josiahparry.com/posts/2024-06-13-eval-strings)
   - [Building rules from code operands](https://github.com/Permian-Global-Research/rsi)
   - [Filter logic](https://github.com/atorus-research/ardis/blob/main/R/denom.R)
   - [Regular-Expression.info](https://www.regular-expressions.info/tutorial.html)
   - [RexEgg](https://www.rexegg.com/)
   - [Regular Expressions as used in R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html)
   - [Debuggex](https://www.debuggex.com/)
   

# Packages

   - [**textshape**](https://github.com/trinker/textshape)
   - [**stringr.plus**](https://github.com/johncassil/stringr.plus)
   - [**regexmagic**](https://github.com/jonocarroll/regexmagic)
   - [**makeunique**](https://github.com/selkamand/makeunique)
   - [**similiars**](https://github.com/davidsjoberg/similiars)
   - [**strex**](https://github.com/rorynolan/strex/)
   - [**stringfish**](https://github.com/traversc/stringfish)
   - [**collapse**](https://sebkrantz.github.io/collapse/)
   - [**kit**](https://github.com/2005m/kit)
   - [**cheapr**](https://github.com/NicChr/cheapr)
   - [**fastplyr**](https://github.com/NicChr/fastplyr)
   - [**stringi**](https://stringi.gagolewski.com/)
   - [**qdapRegex**](https://github.com/trinker/qdapRegex)
   - [**charcuterie**](https://github.com/jonocarroll/charcuterie)

# Examples

   - [mark::globbing](https://github.com/jmbarbone/mark/blob/main/R/glob.R)
   - [RUtil::make_unique_comb](https://github.com/raivokolde/RUtil/blob/master/Source/R/make_unique_comb.r)
   - [mirmisc::longest_common_substring](https://github.com/mirvie/mirmisc/blob/main/R/utils.R)
   - [hutils::longest prefix/suffix](https://github.com/HughParsonage/hutils/blob/master/R/longest_affix.R)
   - [tidyext::combn_2_col](https://github.com/m-clark/tidyext/blob/master/R/combn_2_col.R)



# Functions

```{r}
#| label: pos_re
#| echo: true
#| eval: true
pull_char <- \(x) stringr::str_extract_all(x, stringr::regex("[A-Z]"))
pull_numb <- \(x) stringr::str_extract_all(x, stringr::regex("[0-9]"))

pos_re <- function(x) {
  sorted   <- stringr::str_sort(x, numeric = TRUE)
  alphabet <- purrr::list_c(pull_char(sorted))
  numbers  <- purrr::list_c(pull_numb(sorted))
  paste0(
    fuimus::collapser(alphabet), 
    fuimus::collapser(numbers)
    )
}
```


```{r}
#| label: id_runs
#| echo: true
#| eval: true
id_runs <- function(x) {
  vec   <- rlang::set_names(rep(0, length(c(LETTERS, 0:9))), c(LETTERS, 0:9))
  test  <- fuimus::splitter(x)
  vecna <- vec[test]
  vecna <- vecna[!is.na(vecna)]
  vec[names(vecna)] <- 1

  vec_group <- dplyr::tibble(
    value = names(vec),
    key = vec,
    idx = 1:length(vec),
    group = dplyr::consecutive_id(key)) |>
    dplyr::mutate(group_size = dplyr::n(),
                  .by = group) |>
    dplyr::filter(key == 1, group_size >= 3) |>
    dplyr::select(value, group)

  if (vctrs::vec_is_empty(vec_group)) return(x)

  xgroups <- unname(split(vec_group, vec_group$group)) |>
    purrr::map(purrr::pluck("value")) |>
    purrr::map(paste0, collapse = "") |>
    purrr::list_c()

  replacements <- dplyr::left_join(
    dplyr::slice_min(vec_group, by = group, order_by = value) |> dplyr::rename(start = value),
    dplyr::slice_max(vec_group, by = group, order_by = value) |> dplyr::rename(end = value),
    by = dplyr::join_by(group)) |>
    glue::glue_data("{start}-{end}") |>
    as.vector()

  res <- stringi::stri_replace_all_regex(x, xgroups, replacements, vectorize_all = FALSE)

  paste0("[", res, "]")
}
```

```{r}
#| label: id_runs2
#| echo: true
#| eval: true
id_runs2 <- function(x) {
  
  test <- list(
    char = purrr::map(x, pull_char) |> purrr::list_c() |> purrr::compact() |> purrr::list_c(),
    numb = purrr::map(x, pull_numb) |> purrr::list_c() |> purrr::compact() |> purrr::list_c())
  
  vec <- list(
    char = rlang::set_names(rep(0, length(LETTERS)), LETTERS),
    numb = rlang::set_names(rep(0, length(as.character(0:9))), as.character(0:9)))
  
  vna <- list(
    char = vec$char[test$char],
    numb = vec$numb[test$numb])
  
  vna <- list(
    char = vna$char[!is.na(vna$char)],
    numb = vna$numb[!is.na(vna$numb)])
  
  vec$char[names(vna$char)] <- 1
  vec$numb[names(vna$numb)] <- 1
  
  group_char <- dplyr::tibble(
    value = names(vec$char),
    key = vec$char,
    idx = 1:length(vec$char),
    group = dplyr::consecutive_id(key)) |>
    dplyr::mutate(group_size = dplyr::n(), .by = group) |>
    dplyr::filter(key == 1, group_size >= 3) |>
    dplyr::select(value, group)
  
  group_numb <- dplyr::tibble(
    value = names(vec$numb),
    key = vec$numb,
    idx = 1:length(vec$numb),
    group = dplyr::consecutive_id(key)) |>
    dplyr::mutate(group_size = dplyr::n(), .by = group) |>
    dplyr::filter(key == 1, group_size >= 3) |>
    dplyr::select(value, group)
  
  xgroups_char <- unname(split(group_char, group_char$group)) |>
    purrr::map(purrr::pluck("value")) |>
    purrr::map(paste0, collapse = "") |>
    purrr::list_c()
  
  xgroups_numb <- unname(split(group_numb, group_numb$group)) |>
    purrr::map(purrr::pluck("value")) |>
    purrr::map(paste0, collapse = "") |>
    purrr::list_c()
  
  replace_char <- dplyr::left_join(
    dplyr::slice_min(group_char, by = group, order_by = value) |> dplyr::rename(start = value),
    dplyr::slice_max(group_char, by = group, order_by = value) |> dplyr::rename(end = value),
    by = dplyr::join_by(group)) |>
    glue::glue_data("{start}-{end}") |>
    as.vector()
  
  replace_numb <- dplyr::left_join(
    dplyr::slice_min(group_numb, by = group, order_by = value) |> dplyr::rename(start = value),
    dplyr::slice_max(group_numb, by = group, order_by = value) |> dplyr::rename(end = value),
    by = dplyr::join_by(group)) |>
    glue::glue_data("{start}-{end}") |>
    as.vector()
  
  orig <- list(
    char = paste0(test$char, collapse = ""),
    numb = paste0(test$numb, collapse = ""))
  
  res <- list(
    char = if(!vctrs::vec_is_empty(group_char)) stringi::stri_replace_all_regex(orig$char, xgroups_char, replace_char, vectorize_all = FALSE) else orig$char,
    numb = if(!vctrs::vec_is_empty(group_numb)) stringi::stri_replace_all_regex(orig$numb, xgroups_numb, replace_numb, vectorize_all = FALSE) else orig$numb
    )
  
  paste0("[", res$char, res$numb, "]")
}
```

# Split Vector by Number of Characters

```{r}
#| label: group_split_length
group_split_length <- function(x) {
  x <- gsub("\\*", "", x)
  x <- gsub(" ", "", x)
  x <- fuimus::uniq_rmna(x)
  x <- collapse::rsplit(x, collapse::vlengths(x))
  names(x) <- paste0("x", names(x))
  x
}

groups <- group_split_length(long_test2)

groups
```

# Grouping Vectors by Character Count

## One Character (Wildcard)

```{r}
#| label: group_hcpcs_1
group_hcpcs_1 <- function(x) {
  fuimus::uniq_rmna(x[["x1"]])
}

group1 <- group_hcpcs_1(groups)

group1
```

```{r}
#| label: group_hcpcs_2
group_hcpcs_2 <- function(x) {

  base <- dplyr::tibble(
    code = x[["x2"]],
    a1 = substr(code, 1, 1),
    a2 = substr(code, 2, 2))

  indices <- base |>
    dplyr::mutate(i1 = dplyr::consecutive_id(a1), .after = code) |>
    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .after = i1, .by = a1)

  orphans <- indices |>
    dplyr::add_count(i1, name = "n1", sort = TRUE) |>
    dplyr::filter((i2 + n1) == 2) |>
    dplyr::pull(code)

  last <- indices |>
    dplyr::filter(!code %in% orphans) |> 
    dplyr::select(code, a1:a2) |>
    fuimus::combine(group_id, columns = c("a1"), sep = "")

  last <- dplyr::left_join(
    last|> dplyr::count(group_id, a2),
    last|> dplyr::count(group_id, name = "g"),
    by = dplyr::join_by(group_id)) |> 
    dplyr::filter(n == g) |> 
    dplyr::right_join(last, by = dplyr::join_by(group_id, a2)) |> 
    dplyr::filter(!is.na(n))

  rest <- indices |>
    dplyr::filter(!code %in% c(orphans, dplyr::pull(last, code))) |>
    fuimus::combine(group_id, columns = c("a1"), sep = "")

  vctrs::vec_c(
    as.list(orphans),
    vctrs::vec_chop(last$code, sizes = vctrs::vec_run_sizes(last$group_id)),
    vctrs::vec_chop(rest$code, sizes = vctrs::vec_run_sizes(rest$group_id))
  )
}

group2 <- group_hcpcs_2(groups)

group2
```

```{r}
#| label: group_hcpcs_3
group_hcpcs_3 <- function(x) {

  base <- dplyr::tibble(
    code = x[["x3"]],
    a1 = substr(code, 1, 1),
    a2 = substr(code, 2, 2),
    a3 = substr(code, 3, 3))

  indices <- base |>
    dplyr::mutate(i1 = dplyr::consecutive_id(a1), .after = code) |>
    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .after = i1, .by = a1) |>
    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .after = i2, .by = c(a1, a2))

  orphans <- indices |>
    dplyr::add_count(i1, name = "n1", sort = TRUE) |>
    dplyr::filter((i2 + i3 + n1) == 3) |>
    dplyr::pull(code)

  last <- indices |>
    dplyr::filter(!code %in% orphans) |> 
    dplyr::select(code, a1:a3) |>
    fuimus::combine(group_id, columns = c("a1"), sep = "")

  last <- dplyr::left_join(
    last|> dplyr::count(group_id, a2),
    last|> dplyr::count(group_id, name = "g"),
    by = dplyr::join_by(group_id)) |> 
    dplyr::filter(n == g) |> 
    dplyr::right_join(last, by = dplyr::join_by(group_id, a2)) |> 
    dplyr::filter(!is.na(n))

  rest <- indices |>
    dplyr::filter(!code %in% c(orphans, dplyr::pull(last, code))) |>
    fuimus::combine(group_id, columns = c("a1", "a2"), sep = "")

  vctrs::vec_c(
    as.list(orphans),
    vctrs::vec_chop(last$code, sizes = vctrs::vec_run_sizes(last$group_id)),
    vctrs::vec_chop(rest$code, sizes = vctrs::vec_run_sizes(rest$group_id))
  )
}

group3 <- group_hcpcs_3(groups)

group3
```

```{r}
#| label: group_hcpcs_4
group_hcpcs_4 <- function(x) {

  base <- dplyr::tibble(
    code = x[["x4"]],
    a1 = substr(code, 1, 1),
    a2 = substr(code, 2, 2),
    a3 = substr(code, 3, 3),
    a4 = substr(code, 4, 4))

  indices <- base |>
    dplyr::mutate(i1 = dplyr::consecutive_id(a1), .after = code) |>
    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .after = i1, .by = a1) |>
    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .after = i2, .by = c(a1, a2)) |>
    dplyr::mutate(i4 = dplyr::consecutive_id(a4), .after = i3, .by = c(a1, a2, a3))

  orphans <- indices |>
    dplyr::add_count(i1, name = "n1", sort = TRUE) |>
    dplyr::filter((i2 + i3 + i4 + n1) == 4) |>
    dplyr::pull(code)

  last <- indices |>
    dplyr::filter(!code %in% orphans) |> 
    dplyr::select(code, a1:a4) |>
    fuimus::combine(group_id, columns = c("a1", "a2"), sep = "")

  last <- dplyr::left_join(
    last|> dplyr::count(group_id, a3),
    last|> dplyr::count(group_id, name = "g"),
    by = dplyr::join_by(group_id)) |> 
    dplyr::filter(n == g) |> 
    dplyr::right_join(last, by = dplyr::join_by(group_id, a3)) |> 
    dplyr::filter(!is.na(n))

  rest <- indices |>
    dplyr::filter(!code %in% c(orphans, dplyr::pull(last, code))) |>
    fuimus::combine(group_id, columns = c("a1", "a2", "a3"), sep = "")

  vctrs::vec_c(
    as.list(orphans),
    vctrs::vec_chop(last$code, sizes = vctrs::vec_run_sizes(last$group_id)),
    vctrs::vec_chop(rest$code, sizes = vctrs::vec_run_sizes(rest$group_id))
  )
}

group4 <- group_hcpcs_4(groups)

group4
```


```{r}
#| label: group_hcpcs_5
group_hcpcs_5 <- function(x) {

  base <- dplyr::tibble(
    code = x[["x5"]],
    a1 = substr(code, 1, 1),
    a2 = substr(code, 2, 2),
    a3 = substr(code, 3, 3),
    a4 = substr(code, 4, 4),
    a5 = substr(code, 5, 5))

  indices <- base |>
    dplyr::mutate(i1 = dplyr::consecutive_id(a1), .after = code) |>
    dplyr::mutate(i2 = dplyr::consecutive_id(a2), .after = i1, .by = a1) |>
    dplyr::mutate(i3 = dplyr::consecutive_id(a3), .after = i2, .by = c(a1, a2)) |>
    dplyr::mutate(i4 = dplyr::consecutive_id(a4), .after = i3, .by = c(a1, a2, a3)) |>
    dplyr::mutate(i5 = dplyr::consecutive_id(a5), .after = i4, .by = c(a1, a2, a3, a4)) |>
    dplyr::select(code, a1:a5, i1:i5)

  orphans <- indices |>
    dplyr::add_count(i1, name = "n1", sort = TRUE) |>
    dplyr::filter((i2 + i3 + i4 + i5 + n1) == 5) |>
    dplyr::pull(code)

  last <- indices |>
    dplyr::filter(!code %in% orphans) |>
    dplyr::select(code, a1:a3, a5) |>
    fuimus::combine(group_id, columns = c("a1", "a2", "a3"), sep = "")

  last <- dplyr::left_join(
    last|> dplyr::count(group_id, a5),
    last|> dplyr::count(group_id, name = "g"),
    by = dplyr::join_by(group_id)) |>
    dplyr::filter(n == g) |>
    dplyr::right_join(last,
      by = dplyr::join_by(group_id, a5)) |>
    dplyr::filter(!is.na(n))

  rest <- indices |>
    dplyr::filter(!code %in% c(orphans, dplyr::pull(last, code))) |>
    fuimus::combine(group_id, columns = c("a1", "a2", "a3", "a4"), sep = "")

  vctrs::vec_c(
    as.list(orphans),
    vctrs::vec_chop(last$code, sizes = vctrs::vec_run_sizes(last$group_id)),
    vctrs::vec_chop(rest$code, sizes = vctrs::vec_run_sizes(rest$group_id))
  )
}

group5 <- group_hcpcs_5(groups)

group5
```

# Separate Orphans from Families

```{r}
#| label: pull_orphans
pull_orphans  <- \(x) x[which(collapse::vlengths(x) == 1)] |> purrr::list_c()
pull_families <- \(x) x[which(collapse::vlengths(x) != 1)]

orphans <- list(
  o2 = pull_orphans(group2),
  o3 = pull_orphans(group3),
  o4 = pull_orphans(group4),
  o5 = pull_orphans(group5)
)

families <- list(
  g2 = pull_families(group2),
  g3 = pull_families(group3),
  g4 = pull_families(group4),
  g5 = pull_families(group5)
)

orphans

families
```

# Process Families

## Group 1

```{r}
#| label: process_hcpcs_1
process_hcpcs_1 <- function(x) {
  
  vecs <- stringr::str_split_fixed(x, "", n = max(collapse::vlengths(x))) |>
    as.data.frame() |>
    purrr::map(fuimus::na_if_common)
  
  to_brackets <- vecs |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)
  
  to_vec <- to_brackets |>
    purrr::map(id_runs2)
  
  to_vec[["V1"]]
  
  # stringr::str_glue("^{re}[A-Z0-9]{{4}}$")
}

process_hcpcs_1(group1)
process_hcpcs_1(c(LETTERS, 0:9, LETTERS))
```

## Groups Larger Than 1

```{r}
#| label: process_hcpcs_2
process_hcpcs_2 <- function(x) {
  
  vecs <- stringr::str_split_fixed(x, "", n = max(collapse::vlengths(x))) |>
    as.data.frame() |>
    purrr::map(fuimus::na_if_common)
  
  to_brackets <- vecs |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)
  
  to_vec <- to_brackets |>
    purrr::map(id_runs)
  
  multi_chars <- unname(nchar(to_vec) > 1)
  
  nobrack <- stringr::str_detect(to_vec[multi_chars], "\\[|\\]", negate = TRUE)

  to_vec[multi_chars] <- if (any(nobrack)) purrr::map_chr(to_vec[multi_chars], \(x) paste0("[", x, "]")) else to_vec[multi_chars]

  to_vec <- purrr::list_c(to_vec)

  fuimus::collapser(to_vec)
}
```


```{r}
#| label: process_hcpcs_test

families$g2
purrr::map_chr(families$g2, process_hcpcs_2)

families$g3
purrr::map_chr(families$g3, process_hcpcs_2)

families$g4
purrr::map_chr(families$g4, process_hcpcs_2)

families$g5
purrr::map_chr(families$g5, process_hcpcs_2)
```

```{r}
#| label: process_hcpcs_
#| eval: false
#| echo: false
process_hcpcs_2 <- function(x) {
  
  vecs <- stringr::str_split_fixed(x, "", n = max(collapse::vlengths(x))) |>
    as.data.frame() |>
    purrr::map(fuimus::na_if_common)
  
  to_brackets <- vecs |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)
  
  to_vec <- to_brackets |>
    purrr::map(id_runs)
  
  nobrack <- which(stringr::str_detect(to_vec[["V2"]], "\\[|\\]", negate = TRUE))

  to_vec[["V2"]][nobrack] <- purrr::map_chr(to_vec[["V2"]][nobrack], \(x) paste0("[", x, "]"))

  to_vec <- purrr::list_c(to_vec)
  
  # if (collapse::any_duplicated(to_vec)) {
  #   
  #   dupe_idx <- which(collapse::fduplicated(to_vec, all = TRUE))
  #   rp <- paste0(to_vec[dupe_idx][1], "{", length(dupe_idx), "}")
  #   to_vec[dupe_idx] <- rp
  #   to_vec <- fuimus::uniq_rmna(to_vec)
  # }
  fuimus::collapser(to_vec)
}

families$g2
purrr::map_chr(families$g2, process_hcpcs_3)
```

```{r}
#| label: process_hcpcs_4
#| eval: false
#| echo: false
process_hcpcs_4 <- function(x) {
  
  vecs <- stringr::str_split_fixed(x, "", n = max(collapse::vlengths(x))) |>
    as.data.frame() |>
    purrr::map(fuimus::na_if_common)
  
  to_brackets <- vecs |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)
  
  to_vec <- to_brackets |>
    purrr::map(id_runs)
  
  multi_chars <- unname(nchar(to_vec) > 1)
  
  nobrack <- stringr::str_detect(to_vec[multi_chars], "\\[|\\]", negate = TRUE)

  to_vec[multi_chars] <- if (any(nobrack)) purrr::map_chr(to_vec[multi_chars], \(x) paste0("[", x, "]")) else to_vec[multi_chars]

  to_vec <- purrr::list_c(to_vec)
  
  # if (collapse::any_duplicated(to_vec)) {
  #   
  #   dupe_idx <- which(collapse::fduplicated(to_vec, all = TRUE))
  #   rp <- paste0(to_vec[dupe_idx][1], "{", length(dupe_idx), "}")
  #   to_vec[dupe_idx] <- rp
  #   to_vec <- fuimus::uniq_rmna(to_vec)
  # }
  fuimus::collapser(to_vec)
}

families$g4
purrr::map_chr(families$g4, process_hcpcs_4)
```

```{r}
#| label: process_hcpcs_5
#| eval: false
#| echo: false
process_hcpcs_5 <- function(x) {
  
  vecs <- stringr::str_split_fixed(x, "", n = max(collapse::vlengths(x))) |>
    as.data.frame() |>
    purrr::map(fuimus::na_if_common)
  
  to_brackets <- vecs |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)
  
  to_vec <- to_brackets |>
    purrr::map(id_runs)
  
  multi_chars <- unname(nchar(to_vec) > 1)
  
  nobrack <- stringr::str_detect(to_vec[multi_chars], "\\[|\\]", negate = TRUE)

  to_vec[multi_chars] <- if (any(nobrack)) purrr::map_chr(to_vec[multi_chars], \(x) paste0("[", x, "]")) else to_vec[multi_chars]

  to_vec <- purrr::list_c(to_vec)
  
  # if (collapse::any_duplicated(to_vec)) {
  #   
  #   dupe_idx <- which(collapse::fduplicated(to_vec, all = TRUE))
  #   rp <- paste0(to_vec[dupe_idx][1], "{", length(dupe_idx), "}")
  #   to_vec[dupe_idx] <- rp
  #   to_vec <- fuimus::uniq_rmna(to_vec)
  # }
  fuimus::collapser(to_vec)
}

families$g5
purrr::map_chr(families$g5, process_hcpcs_5)
```

```{r}
list(
  g1 = process_hcpcs_1(group1),
  g2 = stringr::str_c(purrr::map_chr(families$g2, process_hcpcs_2), collapse = ", "),
  g3 = stringr::str_c(purrr::map_chr(families$g3, process_hcpcs_2), collapse = ", "),
  g4 = stringr::str_c(purrr::map_chr(families$g4, process_hcpcs_2), collapse = ", "),
  g5 = stringr::str_c(purrr::map_chr(families$g5, process_hcpcs_2), collapse = ", ")
) |> 
  fuimus::print_ls(prefix = "- ")
```


```{r}
#| label: construct_regex
#| echo: true
#| eval: false

# split_lengths <- function(x) {
#   
#   x <- gsub(" ", "", fuimus::uniq_rmna(x))
# 
#   stringr::str_split_fixed(x, "", n = max(collapse::vlengths(x))) |>
#     as.data.frame() |>
#     purrr::map(fuimus::na_if_common)
#   
# }
x <- group1
construct_regex <- function(x) {

  x <- gsub(" ", "", fuimus::uniq_rmna(x))

  vecs <- stringr::str_split_fixed(x, "", n = max(collapse::vlengths(x))) |>
    as.data.frame() |>
    purrr::map(fuimus::na_if_common)

  to_brackets <- vecs |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)

  to_vec <- to_brackets |>
    purrr::map(id_runs)

  nobrack <- which(stringr::str_detect(to_vec, "\\[|\\]", negate = TRUE))

  to_vec[nobrack] <- purrr::map(to_vec[nobrack], \(x) paste0("[", x, "]"))

  to_vec <- purrr::list_c(to_vec)

  if (collapse::any_duplicated(to_vec)) {

    # TODO THIS MUST COME BEFORE APPLYING QUESTION MARKS
    # probably need to vectorize this, will surely
    # have more than one unique duplicate out of order

    dupe_idx <- which(collapse::fduplicated(to_vec, all = TRUE))

    rp <- paste0(to_vec[dupe_idx][1], "{", length(dupe_idx), "}")

    to_vec[dupe_idx] <- rp

    to_vec <- collapse::funique(to_vec)

  }

  x <- paste0("^", fuimus::collapser(to_vec), "$")

  return(x)
}
```

{{< pagebreak >}}

# HCPCS

```{r}
#| label: hcpcs_tests
#| echo: true
#| eval: true
hcpcs_tests <- list(
  one = c(0:9, "J*", LETTERS),         # "^[0-9A-Z]{5}$"
  two = c(as.character(90:98)),        # "^[9][0-8][0-9]{3}$"
  three = c(as.character(921:929)),    # "^[9][2][1-9][0-9]{2}$"
  four = c(as.character(9202:9208)),   # "^[9][2][0][2-8][0-9]{1}$"
  five = c(as.character(92015:92019)), # "^[9][2][0][1][5-9]$" 
  long = long_test)

hcpcs_tests

sapply(hcpcs_tests$two, agrep, hcpcs_tests$two)

mapply(agrep, hcpcs_tests$two, hcpcs_tests$two, value=TRUE)

hcpcs_tests$two[hcpcs_tests$two == hcpcs_tests$three]

Reduce(intersect, list(hcpcs_tests$two, hcpcs_tests$three))

rbind(hcpcs_tests$two, hcpcs_tests$three)
```


```{r}
#| label: build_hcpcs_regex
#| echo: true
#| eval: true
build_hcpcs_regex <- function(x) {
  
  x <- gsub(" ", "", fuimus::uniq_rmna(x))
  
  vecs <- stringr::str_split_fixed(
    x, "", n = max(collapse::vlengths(x))) |>
    as.data.frame() |>
    purrr::map(fuimus::na_if_common)
  
  to_brackets <- vecs |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)
  
  if (length(to_brackets) == 1) {to_vec <- purrr::map(to_brackets, id_runs2)}
  if (length(to_brackets) > 1)  {to_vec <- purrr::map(to_brackets, id_runs)}
  
  nobrack         <- which(stringr::str_detect(to_vec, "\\[|\\]", negate = TRUE))
  to_vec[nobrack] <- purrr::map(to_vec[nobrack], \(x) paste0("[", x, "]"))
  to_vec          <- purrr::list_c(to_vec)
  
  if (collapse::any_duplicated(to_vec)) {
    
    # TODO probably need to vectorize this, will surely
    # have more than one unique duplicate out of order
    
    dupe_idx <- which(collapse::fduplicated(to_vec, all = TRUE))
    
    rp <- paste0(to_vec[dupe_idx][1], "{", length(dupe_idx), "}")
    
    to_vec[dupe_idx] <- rp
    
    to_vec <- fuimus::uniq_rmna(to_vec)
    
  }
  # paste0("^", fuimus::collapser(to_vec), "$")
  fuimus::collapser(to_vec)
}
```


```{r}
#| label: build_hcpcs_regex_tests
#| echo: true
#| eval: true
build_hcpcs_regex(hcpcs_tests$one)
build_hcpcs_regex(hcpcs_tests$two)
build_hcpcs_regex(hcpcs_tests$three)
build_hcpcs_regex(hcpcs_tests$four)
build_hcpcs_regex(hcpcs_tests$five)

purrr::map_chr(hcpcs_tests$long, build_hcpcs_regex)
```

```{r}
#| label: hcpcs_regex_long
#| echo: true
#| eval: false
x <- hcpcs_tests$long

dataframe_to_list <- \(x) as.list(unname(x))

hcpcs_regex_long <- function(x) {
  
  x <- gsub(" ", "", fuimus::uniq_rmna(x))
  
  vecs <- stringr::str_split_fixed(
    x, "", n = max(collapse::vlengths(x))) |>
    as.data.frame()
  
  one  <- dplyr::filter(vecs, V1 %in% names(which(table(vecs$V1) == 1)))
  rest <- dplyr::filter(vecs, V1 %in% names(which(table(vecs$V1) > 1)))
  
  dplyr::mutate(rest, .id = dplyr::consecutive_id(V1), .before = 1) |> 
  # fuimus::combine(name = key, columns = c("V1", "V2"), sep = "") |>
    tidyr::pivot_longer(
    cols = !.id, 
    names_to = "key", 
    values_to = "val") |> 
    dplyr::reframe(
      .id,
      .key = readr::parse_number(key),
      val) |>
    dplyr::arrange(.id) |> 
    dplyr::group_by(.id, .key) |>
    dplyr::mutate(n = dplyr::n_distinct(val)) |>
    dplyr::ungroup() |> 
    tidyr::pivot_wider(
      names_from = n, 
      values_from = val) |>
    print(n = 500)
  
  vctrs::vec_split(rest, rest[c("V1", "V2")]) |>
    dplyr::tibble() |>
    tidyr::unpack(key) |> 
    fuimus::combine(name = key, columns = c("V1", "V2"), sep = "") |>
    tidyr::unnest(val) |> 
    dplyr::select(-c(V1, V2)) |> 
    as.data.frame() |> 
    split(rest[1])
  
  grps <- dplyr::mutate(
    vecs, 
    id = dplyr::consecutive_id(V1, V2)) |> 
    dplyr::add_count(id) |>
    tidyr::nest(groups = -c(id, n)) |> 
    dplyr::arrange(dplyr::desc(n))
  
  grps |> 
    dplyr::filter(n == max(n)) |> 
    dplyr::pull(groups) |> 
    purrr::pluck(1) |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)
  
  to_brackets <- chops[[1]] |>
    purrr::map(fuimus::uniq_rmna) |>
    purrr::map(pos_re)
  
  if (length(to_brackets) == 1) {
    to_vec <- purrr::map(to_brackets, id_runs2)
  }
  
  if (length(to_brackets) > 1) {
    to_vec <- purrr::map(to_brackets, id_runs)
  }
  
  nobrack <- which(stringr::str_detect(to_vec, "\\[|\\]", negate = TRUE))
  
  to_vec[nobrack] <- purrr::map(to_vec[nobrack], \(x) paste0("[", x, "]"))
  
  to_vec <- purrr::list_c(to_vec)
  
  if (collapse::any_duplicated(to_vec)) {
    
    # TODO probably need to vectorize this, will surely
    # have more than one unique duplicate out of order
    
    dupe_idx <- which(collapse::fduplicated(to_vec, all = TRUE))
    
    rp <- paste0(to_vec[dupe_idx][1], "{", length(dupe_idx), "}")
    
    to_vec[dupe_idx] <- rp
    
    to_vec <- fuimus::uniq_rmna(to_vec)
    
  }
  # paste0("^", fuimus::collapser(to_vec), "$")
  fuimus::collapser(to_vec)
}
```



```{r}
c(
  # singles
  "^15777$",
  "^76514$",
  "^E0675$",
  "^S2342$",
  
  "^021[4-9]T$",
  "^022[0-2]T$",
  "^026[3569]T$",
  "^027[45]T$",
  
  
  "^0329T$",
  "^0330T$",
  "^0422T$",
  
  "^044[45]T$",
  "^050[67]T$",
  
  "^20939$",
  
  "^2251[0-5]$",
  "^2252[67]$",
  "^2719[78]$",
  
  "^3080[12]$",
  
  "^31231$",
  "^32673$", #36
  NULL
)
```

<br>
<br>

# Session Information

```{r}
#| label: sessioninfo
#| echo: false
#| eval: true
sessioninfo::session_info(pkgs = "loaded", info = "packages")
```
