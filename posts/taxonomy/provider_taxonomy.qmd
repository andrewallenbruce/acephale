---
title: "Taxonomy Codes"
subtitle: "The NUCC Health Care Provider Taxonomy Code Set"
description: "The Health Care Provider Taxonomy Code Set is a standardized system of codes used to classify and identify health care providers and designed for use within the ASC X12N Health Care transactions."
format:
  html:
    other-links:
      - text: NUCC Taxonomy Site
        icon: bookmark-plus
        href: https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40
editor_options: 
  chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
#| comment: ""
#| dev: "ragg_png"
#| out.width: "100%"
#| fig.align: "center"
#| fig.width: 8

library(tidyverse)
library(provider)
library(collapsibleTree)
library(codex)
library(arktax)
```

### Key Points

-   **Purpose**: Categorize health care providers by their type, classification, and specialization.
-   **Maintenance**: National Uniform Claim Committee (NUCC). Updated twice a year, in January and July.
-   **Application**: Used in various healthcare processes, including:
    -   Electronic healthcare transactions
    -   NPI enumeration
    -   Medicare provider enrollment
    -   Insurance credentialing
    -   Claims processing
    -   Determining network adequacy

# Overview

The **Health Care Provider Taxonomy Code Set** is an external, non-medical data code set designed for use in an electronic environment, specifically within the ASC X12N Health Care transactions, including those mandated under [HIPAA](https://aspe.hhs.gov/reports/health-insurance-portability-accountability-act-1996 "Health Insurance Portability and Accountability Act of 1996").

A taxonomy code is a unique, ten character alphanumeric code that describes a health care service provider's type, classification, and the area of specialization.

Taxonomy codes are selected by the provider at the time of NPI registration. When providers apply for NPIs, the National Plan and Provider Enumeration System (NPPES) does not verify the accuracy of the selected taxonomy codes. It only validates that the codes exist within the current version of the code set.


```{r}
#| message: false
#| warning: false
#| echo: false
#| fig.cap: "Interactive Provider Taxonomy Hierarchy"
Taxonomy <- provider::taxonomies(shape = "wide") |>
  dplyr::reframe(
    section,
    grouping,
    classification,
    specialization,
    code,
    display_name,
    definition
    )

Taxonomy |> 
  dplyr::group_by(section, grouping) |> 
  dplyr::summarise(Classifications = dplyr::n()) |>
  collapsibleTree::collapsibleTreeSummary(
    hierarchy = c("section", "grouping"),
    root = "Taxonomies",
    percentOfParent = TRUE,
    attribute = "Classifications",
    nodeSize = "leafCount",
    maxPercent = 50,
    tooltip = FALSE,
    fontSize = 14
    )
```

# Code Hierarchy

The code set is structured into 3 distinct levels:

::: {.panel-tabset}

## I: **Provider Grouping**

**A major grouping of service(s) or occupation(s) of health care providers.**

*Examples:*

   * Allopathic & Osteopathic Physicians
   * Dental Providers
   * Hospitals

## II: **Classification**

**A more specific service or occupation related to the Provider Grouping.**

For example, the Classification for Provider Grouping *Allopathic & Osteopathic Physicians* is based upon the General Specialty Certificates, as issued by the appropriate national boards.

The following boards, however, will have their general certificates appear as **Level III** Areas strictly due to display limitations of the code set for Boards that have multiple general certificates:

   * Medical Genetics
   * Preventive Medicine
   * Psychiatry & Neurology
   * Radiology
   * Surgery
   * Otolaryngology
   * Pathology

## III: **Area of Specialization**

**A more specialized area of the Classification in which a provider chooses to practice or make services available.**

For example, the Area of Specialization for Provider Grouping *Allopathic & Osteopathic Physicians* is based upon the Sub-specialty Certificates as issued by the appropriate national boards.

:::

# Medicare Crosswalk

> Providers and suppliers with the proper taxonomy code eligible for Medicare programs.

The [Medicare Provider and Supplier Taxonomy Crosswalk](https://data.cms.gov/provider-characteristics/medicare-provider-supplier-enrollment/medicare-provider-and-supplier-taxonomy-crosswalk) dataset lists the providers and suppliers eligible to enroll in Medicare programs with the proper healthcare provider taxonomy code. This data includes the Medicare specialty codes, if available, provider/supplier type description, taxonomy code, and the taxonomy description.

## NUCC to Medicare

```{r}
#| label: xwalk
xwalk <- provider::taxonomy_crosswalk(tidy = FALSE) |> 
  janitor::clean_names() |> 
  dplyr::tibble() |> 
  dplyr::mutate(
    dplyr::across(dplyr::everything(), ~ dplyr::na_if(., "")),
    dplyr::across(dplyr::everything(), ~ stringr::str_squish(.))) |> 
  dplyr::reframe(
    .id = dplyr::row_number(), 
    taxonomy_code = provider_taxonomy_code,
    taxonomy_type = provider_taxonomy_description_type_classification_specialization,
    specialty_code = medicare_specialty_code,
    specialty_type = medicare_provider_supplier_type_description) |> 
  dplyr::mutate(
    type_note = str_extract(specialty_type, "(\\[)(.*?)(\\])$", group = 2),
    code_note = str_extract(specialty_code, "(\\[)(.*?)(\\])$", group = 2),
    specialty_type = str_remove(specialty_type, "\\[.*\\]"),
    specialty_code = str_remove(specialty_code, "\\[.*\\]"))

xwalk
```


### Taxonomy Split

```{r}
#| label: tax_split
taxonomy <- xwalk |> 
  dplyr::select(.id, taxonomy_code, taxonomy_type) |> 
  dplyr::mutate(
    dlim = case_when(
      sf_detect(taxonomy_type, "/") ~ "fwslash", 
      sf_ndetect(taxonomy_type, "/") ~ "comma"),
    n = case_when(
      sf_detect(taxonomy_type, "/") ~ str_count(taxonomy_type, "/"), 
      sf_ndetect(taxonomy_type, "/") ~ str_count(taxonomy_type, ","))) |> 
  tidyr::separate_longer_delim(cols = taxonomy_type, delim = stringr::regex("[\\/|,]")) |>
  dplyr::mutate(taxonomy_type = if_else(sf_detect(taxonomy_type, "Urban Indian Health \\(I"), "Urban Indian Health [ITU] Pharmacy", str_squish(taxonomy_type)),
                dlim = NULL,
                n = NULL) |> 
  dplyr::filter(sf_ndetect(taxonomy_type, "^T$|U\\)\\sPharmacy")) |>
  dplyr::mutate(.group = dplyr::row_number(), .by = c(taxonomy_code, .id), .after = .id) |>
  tidyr::pivot_wider(
    names_from = .group,
    values_from = taxonomy_type,
    names_prefix = "tax")

taxonomy

taxonomy |> 
  hacksaw::count_split(
    tax1,
    tax2,
    tax3,
    tax4,
    tax5,
    tax6
  )
```

### Specialty Split

```{r}
#| label: spec_split

### Medicare Footnotes
footnotes <- dplyr::tibble(
  note = 1:14,
  note_description = readr::read_lines(
    here::here("posts", 
               "taxonomy", 
               "scripts", 
               "taxonomy_notes.txt"))) |> 
  dplyr::mutate(note = as.character(note))

specialty <- xwalk |> 
  dplyr::select(
    .id, 
    specialty_code,
    specialty_type,
    type_note,
    code_note) |>
  dplyr::left_join(footnotes, 
    by = dplyr::join_by(type_note == note)) |> 
  dplyr::left_join(footnotes, 
    by = dplyr::join_by(code_note == note)) |> 
  fuimus::combine(
    name = note, 
    columns = c("type_note", "code_note"), sep = ", ") |>
  fuimus::combine(
    name = note_description, 
    columns = c("note_description.x", "note_description.y"), sep = " ")


specialty |> 
  dplyr::mutate(.id = as.character(.id)) |> 
  tidyr::nest(data = .id) |> 
  dplyr::mutate(.id = map_chr(data, function(x) glue::glue("{delist(x)}") |> glue::glue_collapse(sep = ", ")),
                data = NULL) |> 
  tidyr::separate_longer_delim(
    cols = specialty_type, 
    delim = stringr::fixed("/")) |> 
  dplyr::mutate(specialty_type = str_squish(specialty_type))
```

<br>

<hr>

<br>

# arktax

```{r}
#| label: arktax_wide
arktax::retrieve_ark(
  year = 2024,
  which = "wide") |> 
  dplyr::select(code, notes) |> 
  dplyr::distinct(code, notes, .keep_all = TRUE) |>
  dplyr::mutate(updates = str_extract_all(notes, "\\[.*\\]"),
                sources = str_remove_all(notes, "\\s?\\[.*\\]") |> dplyr::na_if(""),
                notes = NULL) |>
  tidyr::unnest(updates) |>
  dplyr::select(-sources) |> 
  dplyr::filter(not_na(updates)) |> 
  separate_longer_delim(
    cols = updates, 
    delim = stringr::fixed("; ")) |> 
  dplyr::mutate(updates = str_remove_all(updates, "(^\\[)|(\\]$)"),
                multi = str_count(updates, ", \\d{1}/\\d{1}/\\d{4}")) |>
  dplyr::filter(multi > 0) |>
  print(n = 100)
```


```{r}
#| label: arktax_long
arktax::retrieve_ark(which = "long") |> 
  dplyr::filter(year == max(year), .by = code) |>
  dplyr::distinct(year, code, level, description, nyears) |> 
  print(n = 100)
```


## Sources

-   [Health Care Provider Taxonomy Code Set v24.0 (PDF)](https://www.nucc.org/images/stories/PDF/taxonomy_24_0.pdf)
-   [taxonomy.NUCC.org](https://taxonomy.nucc.org)
-   [CMS.gov](https://www.cms.gov/medicare/enrollment-renewal/providers-suppliers/health-care-taxonomy)
-   [ASAM.org](https://www.asam.org/docs/default-source/advocacy/taxonomy-one-pager.pdf?sfvrsn=b5e848c2_2)



{{< pagebreak >}}


## Session Information 

```{r}
#| echo: false
pander::pander(sessionInfo())
```
