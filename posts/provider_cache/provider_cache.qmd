---
title: "provider: Metadata Caching"
format:
  html:
    reference-location: block
editor_options: 
  chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
  dev        = "ragg_png",
  dpi        = 320,
  out.width  = "100%",
  fig.width  = 8,
  fig.asp    = 0.818,
  fig.retina = 2,
  fig.align  = "center",
  fig.show   = "hold"
)
options(scipen = 999, digits = 3)

library(tidyverse)
library(fastverse)
library(provider)
library(fuimus)
library(httr2)
```

# National Downloadable File

>   **Previous Work**
>
>   * [provider #60 - version 1](https://github.com/andrewallenbruce/provider/issues/60#issue-2000723817)
>   * [provider #60 - version 2](https://github.com/andrewallenbruce/provider/issues/60#issuecomment-1820270391)


   * [Centers for Medicare & Medicaid Services Data API](https://data.cms.gov/api-docs)
   * [API FAQ for data.CMS.gov | OCTOBER 2024 - VERSION 1.6](https://data.cms.gov/sites/default/files/2024-10/7ef65521-65a4-41ed-b600-3a0011f8ec4b/API%20Guide%20Formatted%201_6.pdf)


```{r}
httr2::url_parse("https://data.cms.gov/provider-data/api/1/datastore/query/")
    
distro 

unclass(httr2::url_parse("?limit=1&offset=100&count=true&results=true&schema=true&keys=true&format=json&rowIds=true"))
```


```{r}
#| label: url_handling
fname = "affiliations"

ndf_identifier <- \(x) {
  kit::nswitch(
    x,
    "affiliations", "27ea-46a8",
    "clinicians", "mj5m-pzi6",
    default = NA_character_,
    nThread = 4L
  )
}

url_ndf <- httr2::url_parse("https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/")

url_tmp <- url_ndf |> 
  httr2::url_build() |> 
  httr2::request()

httr2::req_template(url_tmp, "/{fname}?show-reference-ids=true", fname = ndf_identifier(fname))
```


```{r}
#| label: url_building
#| eval: false
url_ndf |> 
  httr2::url_build() |> 
  httr2::request() |> 
  httr2::req_url_path_append(
    ndf_identifier(fname)
    ) |> 
  httr2::req_url_path_append("?show-reference-ids=true") |>
  httr2::req_perform() |>
  httr2::resp_body_json(check_type = FALSE, simplifyVector = TRUE)
```



```{r}
#| label: ndf
meta_ndf <- \(fname) {
  
  stopifnot(curl::has_internet())
  
  x <- request(
    paste0(
      "https://data.cms.gov/",
      "provider-data/api/1/",
      "metastore/schemas/",
      "dataset/items/",
      switch(fname, 
             affiliations = "27ea-46a8", 
             clinicians   = "mj5m-pzi6", 
             stop("Invalid argument")),
    "?show-reference-ids=true")) |>
       req_perform() |>
       resp_body_json(
         check_type     = FALSE,
         simplifyVector = TRUE)
  
  distro <- gelm(gelm(x, "distribution"), "identifier")
  
  y <- request(
    paste0(
    "https://data.cms.gov/", 
    "provider-data/api/1/",
    "datastore/query/", 
    distro, 
    "?limit=1&offset=100&",
    "count=true&results=true&", 
    "schema=true&keys=true&",
    "format=json&rowIds=true")) |>
       req_perform() |>
       resp_body_json(
         check_type = FALSE,
         simplifyVector = TRUE)
  
  z <- gelm(gelm(gelm(y, "schema"), distro), "fields")
  
  list(
    title        = gelm(x, "title"),
    description  = gelm(x, "description"),
    identifier   = gelm(gelm(x, "identifier"), "identifier"),
    distribution = distro,
    issued       = gelm(x, "issued"), 
    modified     = gelm(x, "modified")[[1]], 
    released     = gelm(x, "released"),
    dimensions   = paste0(gelm(gelm(y, "count"), is.numeric), " x ", gelm(gelm(z, "record_number"), "length")), 
    fields       = names(z),
    site         = gelm(x, "landingPage"),
    csv          = gelm(gelm(gelm(x, "distribution"), "data"), "downloadURL", m = "df"),
    dictionary   = paste0("https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf"))
}
```

### Field Comparison

```{r}
#| label: affcols
#| layout-ncol: 2
aff <- provider::affiliations(npi = 1558595660, na.rm = FALSE, tidy = FALSE)
cat(utils::formatOL(meta_ndf("affiliations")$fields, offset = 0), sep = "\n")
cat(utils::formatOL(names(aff), offset = 0), sep = "\n")
```

```{r}
#| label: clncols
#| layout-ncol: 2
cln <- provider::clinicians(npi = 1558595660, na.rm = FALSE, tidy = FALSE)
cat(utils::formatOL(meta_ndf("clinicians")$fields), sep = "\n")
cat(utils::formatOL(names(cln), offset = 1), sep = "\n")
```

## pointblank

```{r}
#| label: pointblank
johnd <- affiliations(npi = 1558595660, na.rm = FALSE)

johnd |> 
  create_informant(
    tbl_name = NULL,
    label = "Provider Facility Affiliations"
  ) |> 
  info_tabular(
    `Row Definition` = "A row has randomized values.",
    Source = c(
      "- From the **pointblank** package.",
      "- [https://rstudio.github.io/pointblank/]()"
     )
   ) |> 
  info_columns(
    columns = npi,
    info = "10-digit National Provider Identifier.") |>
  info_columns(
    columns = pac,
    info = "10-digit PECOS Associate Control ID.") |>
  info_columns(
    columns = vars(first, middle, last, suffix),
    info = "Individual Provider's Name.") |>
  info_columns(
    columns = facility_type,
    info = "Individual Provider's Name.") |>
  info_section(
    section_name = "Notes",
    usage = "`affiliations(parent_ccn = '670055')`",
    Source = c(
      "- From the **(provider)** package.",
      "- [CMS Affiliations API](https://data.cms.gov/provider-data/dataset/27ea-46a8)"
    )) |> 
  get_informant_report(
    title = "**`affiliations()`** Data Dictionary",
    size = "standard"
  )
```

--------------------------------------------------------------------------------

# New API FAQ

## Finding Data

> Is there a catalog of available data?

Yes, the [`data.json`](https://data.cms.gov/data.json) file is an [**Open Data**](https://resources.data.gov/resources/dcat-us/) catalog containing the datasets available on our site. As new data is added, it is automatically updated to the **data.json**.

In the **data.json**, there is an array called **dataset**. You can search through this array using the title of your dataset, such as `"Payroll Based Journal Daily Nurse Staffing"`. Inside of the dataset, there is an array called **distribution** which will contain all the versions of the data in all available formats for each version. In this array there are a few different types of entries:

   * The first entry (with a description of 'latest') will provide a URL that will always point to the latest data, even as new versions are published.
   * The remaining entries will provide references to the data at fixed points in time, listed in descending order by date. For example, `"https://data.cms.gov/data-api/v1/dataset/d10d792e-
ea6e-4145-8512-34efbc1be04b/data"` will always point to the **Payroll Based Journal Daily Nurse Staffing** data from **Q2 2021**. Some datasets will have multiple historical versions available and some will only have the most recent data available.
      * The data with mediaType of "text/csv" is downloadable as a CSV file and data with mediaType of "application/zip" is downloadable as a ZIP file.
      * The data with a format of "API" will point to an API endpoint.

> How can I get an earlier version of the data?

If your data has earlier versions available, there is a "temporal" field in the distribution section of the data.json file which will indicate the time period. An example is below.

Older Version Code Example in Python

Finds the API link for the 2017 Medicare Inpatient Hospitals - by Provider and Service Data

https://data.cms.gov/provider-summary-by-type-of-service/medicare-inpatient-hospitals/medicare-inpatient-hospitals-by-provider-and-service

```python
import requests

url         = "https://data.cms.gov/data.json"
title       = "Medicare Inpatient Hospitals - by Provider and Service"
time_period = "2017-01-01/2017-12-31"
response    = requests.request("GET", url)

if response.ok:
    response = response.json()
    dataset = response['dataset']
    for set in dataset:
        if title == set['title']:
            for distro in set['distribution']:
                if 'format' in distro.keys():
                    if distro['format'] == "API" and distro['temporal'] == time_period:
                        print(f"API link for {title} from {time_period} is {distro['accessURL']}")
```

--------------------------------------------------------------------------------

## Session Information 

```{r}
#| echo: false
pander::pander(sessionInfo())
```
