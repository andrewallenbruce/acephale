---
title: "provider: Metadata Caching"
format:
  html:
    reference-location: block
editor_options: 
  chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
  dev = "ragg_png",
  dpi = 320,
  out.width = "100%",
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 2,
  fig.align = "center",
  fig.show = "hold"
)
options(scipen = 999, digits = 3)

library(tidyverse)
library(fastverse)
library(provider)
library(codex)
library(httr2)

na_if <- fuimus:::na_if

gelm <- \(l, e, m = "re", ...) collapse::get_elem(l = l, elem = e, regex = ifelse(m == "re", TRUE, FALSE), DF.as.list = ifelse(m == "df", TRUE, FALSE), ...)
```

[Centers for Medicare & Medicaid Services Data API](https://data.cms.gov/api-docs)

# National Downloadable File

>   **Previous Work**
>
>   * [provider(gh issue #60) - version 1](https://github.com/andrewallenbruce/provider/issues/60#issue-2000723817)
>   * [provider(gh issue #60) - version 2](https://github.com/andrewallenbruce/provider/issues/60#issuecomment-1820270391)

```{r}
#| label: ndf
meta_ndf <- \(fname) {
  
  stopifnot(curl::has_internet())
  
  x <- request(
    paste0(
      "https://data.cms.gov/",
      "provider-data/api/1/",
      "metastore/schemas/",
      "dataset/items/",
      switch(fname, 
             affiliations = "27ea-46a8", 
             clinicians   = "mj5m-pzi6", 
             stop("Invalid argument")),
    "?show-reference-ids=true")) |>
       req_perform() |>
       resp_body_json(
         check_type     = FALSE,
         simplifyVector = TRUE)
  
  distro <- gelm(
    gelm(
      x,
      "distribution"), 
    "identifier")
  
  y <- request(
    paste0(
    "https://data.cms.gov/", 
    "provider-data/api/1/",
    "datastore/query/", 
    distro, 
    "?limit=1&offset=100&",
    "count=true&results=true&", 
    "schema=true&keys=true&",
    "format=json&rowIds=true")) |>
       req_perform() |>
       resp_body_json(
         check_type = FALSE,
         simplifyVector = TRUE)
  
  z <- gelm(gelm(gelm(
        y, 
        "schema"), 
      distro), 
    "fields")
  
  out <- list(
    title        = gelm(x, "title"),
    description  = gelm(x, "description"),
    identifier   = gelm(gelm(x, "identifier"), "identifier"),
    distribution = distro,
    issued       = gelm(x, "issued"), 
    modified     = gelm(x, "modified")[[1]], 
    released     = gelm(x, "released"),
    dimension    = str_glue('{gelm(gelm(y, "count"), is.numeric)} x {gelm(gelm(z, "record_number"), "length")}'), 
    fields       = delist(getelem(z[names(z)], "description")),
    site         = gelm(x, "landingPage"),
    csv          = gelm(gelm(gelm(x, "distribution"), "data"), "downloadURL", m = "df"),
    dictionary   = paste0("https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf"))
  
  out
}

meta_ndf("affiliations")

meta_ndf("clinicians")
```


## pointblank

```{r}
#| label: pointblank

library(pointblank)

johnd <- affiliations(npi = 1558595660, na.rm = FALSE)

johnd |> 
  create_informant(
    tbl_name = NULL,
    label = "Provider Facility Affiliations"
  ) |> 
  info_tabular(
    `Row Definition` = "A row has randomized values.",
    Source = c(
      "- From the **pointblank** package.",
      "- [https://rstudio.github.io/pointblank/]()"
     )
   ) |> 
  info_columns(
    columns = npi,
    info = "10-digit National Provider Identifier.") |>
  info_columns(
    columns = pac,
    info = "10-digit PECOS Associate Control ID.") |>
  info_columns(
    columns = vars(first, middle, last, suffix),
    info = "Individual Provider's Name.") |>
  info_columns(
    columns = facility_type,
    info = "Individual Provider's Name.") |>
  info_section(
    section_name = "Notes",
    usage = "`affiliations(parent_ccn = '670055')`",
    Source = c(
      "- From the **(provider)** package.",
      "- [CMS Affiliations API](https://data.cms.gov/provider-data/dataset/27ea-46a8)"
    )) |> 
  get_informant_report(
    title = "**`affiliations()`** Data Dictionary",
    size = "standard"
  )
```

--------------------------------------------------------------------------------

# Codebook

## Code

```{r}
#| label: code
code <- \(variable, levels, labels) {
  dplyr::tibble(
    variable = variable, 
    level = levels, 
    label = labels)
}

code(
  "SEX", 
  levels = c(0, 1), 
  labels = c("Male", "Female"))
```

## Codebook

```{r}
#| label: codebook
codebook <- \(...) {
  
  map <- rlang::list2(...)
  
  names(map) <- purrr::map_chr(map, \(x) x$variable[1])
  
  return(map)
}

codebook(
  code("SEX", 
       levels = 0:1, 
       labels = c("Male", "Female")), 
  code("STUDY", 
       levels = 1:3, 
       labels = c("S1", "S2", "S3")))
```

## Encode

```{r}
#| label: encode
encode <- \(data, codebook) {
  
  mapped_vars <- names(codebook)
  
  mapped_data <- purrr::map2(data, names(data), \(x, var, m) {
      
      if (!var %in% mapped_vars) return(x)
      
      x <- factor(x, levels = m[[var]]$level, labels = m[[var]]$label)
      
      return(x)
    },
    m <- codebook
  )
  dplyr::as_tibble(mapped_data)
}

labels <- codebook(
  code("SEX", 
       levels = 0:1, 
       labels = c("Male", "Female")), 
  code("STUDY", 
       levels = 1:3, 
       labels = c("S1", "S2", "S3"))
  )

dataset <- data.frame(
  STUDY = c(1, 1, 1, 2, 2, 2),
  SEX   = c(0, 0, 1, 1, 1, 0),
  AGE   = c(32, 18, 64, 52, 26, 80)
)

encode(dataset, labels)
```

## Decode

```{r}
#| label: decode
decode <- \(data, codebook) {
  
  mapped_vars <- names(codebook)
  
  mapped_data <- purrr::map2(data, names(data), \(x, var, m) {
    
      if (!var %in% mapped_vars) return(x)
    
      x_chr <- as.character(x)
      
      x_lvl <- m[[var]]$level
      
      x_lab <- m[[var]]$label
      
      x <- x_lvl[match(x_chr, x_lab)]
      
      return(x)
    },
    m <- codebook
  )
  dplyr::as_tibble(mapped_data)
}

labels <- codebook(
 code("SEX", levels = c(0, 1), labels = c("Male", "Female")),
 code("STUDY", levels = c(1, 2, 3), labels = c("S1", "S2", "S3")))

dataset <- data.frame(
  STUDY = factor(c("S1", "S1", "S1", "S2", "S2", "S2")),
  SEX   = factor(c("Male", "Male", "Female", "Female", "Female", "Male")),
  AGE   = c(32, 18, 64, 52, 26, 80))

decode(dataset, labels)
```

--------------------------------------------------------------------------------


## Session Information 

```{r}
#| echo: false
pander::pander(sessionInfo())
```
