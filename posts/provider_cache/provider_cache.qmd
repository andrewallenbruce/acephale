---
title: "provider: Metadata Caching"
format:
  html:
    reference-location: block
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
  dev = "ragg_png",
  dpi = 320,
  out.width = "100%",
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 2,
  fig.align = "center",
  fig.show = "hold"
)
options(scipen = 999, digits = 3)

library(tidyverse)
library(fastverse)
library(provider)
library(codex)
library(httr2)

na_if <- fuimus:::na_if
```

# National Downloadable File

   * [Data Dictionary](https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf)


```{r}
#| label: ndf
meta_ndf <- \(fname) {
  
  x <- request(
    paste0(
      "https://data.cms.gov/",
      "provider-data/api/1/",
      "metastore/schemas/",
      "dataset/items/",
      switch(fname, 
             affiliations = "27ea-46a8", 
             clinicians   = "mj5m-pzi6", 
             stop("Invalid argument")),
    "?show-reference-ids=true")) |>
       req_perform() |>
       resp_body_json(
         check_type     = FALSE,
         simplifyVector = TRUE)
  
  y <- request(
    paste0(
    "https://data.cms.gov/", 
    "provider-data/api/1/",
    "datastore/query/", 
    x[["distribution"]][["identifier"]], 
    "?limit=1&offset=100&",
    "count=true&results=true&", 
    "schema=true&keys=true&",
    "format=json&rowIds=true")) |>
       req_perform() |>
       resp_body_json(
         check_type = FALSE,
         simplifyVector = TRUE)
  
  z <- y[["schema"]][[
    x[["distribution"]][["identifier"]]
    ]][["fields"]]
  
  out <- list(
    title = x[["title"]],
    desc  = x[["description"]],
    idnt  = x[["identifier"]],
    dist  = x[["distribution"]][["identifier"]],
    date  = c(issued = x[["issued"]], 
              modified = x[["modified"]], 
              released = x[["released"]]),
    home  = x[["landingPage"]],
    csv   = x[["distribution"]][["data"]][["downloadURL"]],
    dict  = paste0("https://data.cms.gov/provider-data/sites/default/",
                   "files/data_dictionaries/physician/DOC_Data_Dictionary.pdf"),
    dim   = c(row = y[["count"]], 
              col = z[["record_number"]][["length"]]),
    out = data.frame(
      field = names(y[["results"]]), 
      value = na_if(delist(y[["results"]]), "")
      ),
    field = c(delist(getelem(z[names(z)], "description"))))
  
  class(out) <- c("metadata", "list")
  
  out
}

meta_ndf("affiliations")

meta_ndf("clinicians")
```


```{r}
#| label: print_meta
#| eval: false
print.metadata <- \(x, ...) { 
  x <- meta_ndf("affiliations")
  
  # dimensions
  glue::glue("Dimensions: [{x[['dim']][1]} x {x[['dim']][2]}]")
  glue::glue("Dates:      {utils::formatUL(
             format(names(x[['date']]), justify = 'left')}: {unname(x[['date']]))}")
  
  x
  
  writeLines(
    formatDL(names(x), unname(x), style = "table", indent = 8)
    )
  }

utils::formatUL(
  c("Mix dry ingredients thoroughly.",
       "Pour in wet ingredients.",
       "Mix for 10 minutes.",
       "Bake for one hour at 300 degrees."),
  offset = 3
  ) |> 
  writeLines()

format.metadata <- \(x, ...) {
  
  cat(
    "Title: ", x$title, "\n",
    "Description: ", x$desc, "\n",
    "Identifier: ", x$idnt, "\n",
    "Distribution: ", x$dist, "\n",
    "Issued: ", x$date[["issued"]], "\n",
    "Modified: ", x$date[["modified"]], "\n",
    "Released: ", x$date[["released"]], "\n",
    "Home: ", x$home, "\n",
    "CSV: ", x$csv, "\n",
    "Data Dictionary: ", x$dict, "\n",
    "Dimensions: ", x$dim[["row"]], " rows x ", x$dim[["col"]], " columns", "\n",
    "Fields: ", "\n"
  )
}
```


# Previous Work

   * [provider(gh issue #60) - version 1](https://github.com/andrewallenbruce/provider/issues/60#issue-2000723817)
   * [provider(gh issue #60) - version 2](https://github.com/andrewallenbruce/provider/issues/60#issuecomment-1820270391)

# Codebook

```{r}
#| label: code
code <- \(variable, levels, labels) {
  dplyr::tibble(
    variable = variable, 
    level = levels, 
    label = labels)
}

code(
  "SEX", 
  levels = c(0, 1), 
  labels = c("Male", "Female"))
```


```{r}
#| label: codebook
codebook <- \(...) {
  
  map <- rlang::list2(...)
  
  names(map) <- purrr::map_chr(map, \(x) x$variable[1])
  
  return(map)
}

codebook(
  code("SEX", 
       levels = 0:1, 
       labels = c("Male", "Female")), 
  code("STUDY", 
       levels = 1:3, 
       labels = c("S1", "S2", "S3")))
```

```{r}
#| label: encode
encode <- \(data, codebook) {
  
  mapped_vars <- names(codebook)
  
  mapped_data <- purrr::map2(data, names(data), \(x, var, m) {
      
      if (!var %in% mapped_vars) return(x)
      
      x <- factor(x, levels = m[[var]]$level, labels = m[[var]]$label)
      
      return(x)
    },
    m <- codebook
  )
  dplyr::as_tibble(mapped_data)
}

labels <- codebook(
  code("SEX", 
       levels = 0:1, 
       labels = c("Male", "Female")), 
  code("STUDY", 
       levels = 1:3, 
       labels = c("S1", "S2", "S3"))
  )

dataset <- data.frame(
  STUDY = c(1, 1, 1, 2, 2, 2),
  SEX   = c(0, 0, 1, 1, 1, 0),
  AGE   = c(32, 18, 64, 52, 26, 80)
)

encode(dataset, labels)
```


```{r}
#| label: decode
decode <- \(data, codebook) {
  
  mapped_vars <- names(codebook)
  
  mapped_data <- purrr::map2(data, names(data), \(x, var, m) {
    
      if (!var %in% mapped_vars) return(x)
    
      x_chr <- as.character(x)
      
      x_lvl <- m[[var]]$level
      
      x_lab <- m[[var]]$label
      
      x <- x_lvl[match(x_chr, x_lab)]
      
      return(x)
    },
    m <- codebook
  )
  dplyr::as_tibble(mapped_data)
}

labels <- codebook(
 code("SEX", levels = c(0, 1), labels = c("Male", "Female")),
 code("STUDY", levels = c(1, 2, 3), labels = c("S1", "S2", "S3")))

dataset <- data.frame(
  STUDY = factor(c("S1", "S1", "S1", "S2", "S2", "S2")),
  SEX   = factor(c("Male", "Male", "Female", "Female", "Female", "Male")),
  AGE   = c(32, 18, 64, 52, 26, 80))

decode(dataset, labels)
```

