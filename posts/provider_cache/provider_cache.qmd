---
title: "provider: Metadata Caching"
format:
  html:
    reference-location: block
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false

knitr::opts_chunk$set(
  dev = "ragg_png",
  dpi = 320,
  out.width = "100%",
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 2,
  fig.align = "center",
  fig.show = "hold"
)
options(scipen = 999, digits = 3)

library(tidyverse)
library(fastverse)
library(provider)
library(httr2)
```

# National Downloadable File

   * [Data Dictionary](https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf)

```{r}
#| label: ndf
meta_ndf <- \(fn) {
  
  fn <- match.arg(fn, c("affiliations", "clinicians"))

  id <- c(affiliations = "27ea-46a8", clinicians = "mj5m-pzi6")
  
  url <- paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/metastore/",
    "schemas/dataset/items/",
    unname(id[fn]),
    "?show-reference-ids=true")
  
  x <- request(url) |>
       req_perform() |>
       resp_body_json(
         check_type = FALSE,
         simplifyVector = TRUE)
  
  x <- list(
    title        = x[["title"]],
    description  = x[["description"]],
    identifier   = x[["identifier"]],
    distribution = x[["distribution"]][["identifier"]],
    date         = c(issued   = x[["issued"]], 
                     modified = x[["modified"]], 
                     released = x[["released"]]),
    landing      = x[["landingPage"]],
    csv          = x[["distribution"]][["data"]][["downloadURL"]],
    request      = url,
    dictionary   = paste0(
      "https://data.cms.gov/",
      "provider-data/sites/default/",
      "files/data_dictionaries/physician/",
      "DOC_Data_Dictionary.pdf"
      )
    )
  
  url2 <- paste0(
    "https://data.cms.gov/", 
    "provider-data/api/1/",
    "datastore/query/", 
    x$distribution, 
    "?limit=1&offset=100&count=true&results=true", 
    "&schema=true&keys=true&format=json&rowIds=true")
  
  y <- request(url2) |>
       req_perform() |>
       resp_body_json(
         check_type = FALSE,
         simplifyVector = TRUE)
  
  yschema <- y[["schema"]][[x[["distribution"]]]][["fields"]]
  
  y <- list(
    dim = c(nrows = y[["count"]],
            ncols = yschema[["record_number"]][["length"]]),
    output = data.frame(field = names(y[["results"]]), 
                        value = codex::delist(y[["results"]])),
    fields = c(
      yschema[["npi"]][["description"]],
      yschema[["ind_pac_id"]][["description"]],
      yschema[["provider_last_name"]][["description"]],
      yschema[["provider_first_name"]][["description"]],
      yschema[["provider_middle_name"]][["description"]],
      yschema[["suff"]][["description"]],
      yschema[["facility_type"]][["description"]],
      yschema[["facility_affiliations_certification_number"]][["description"]],
      yschema[["facility_type_certification_number"]][["description"]]
    ))
  
  c(x, y)
}

meta_ndf("affiliations")

meta_ndf("clinicians")
```


# Previous Work

   * [provider(gh issue #60) - version 1](https://github.com/andrewallenbruce/provider/issues/60#issue-2000723817)
   * [provider(gh issue #60) - version 2](https://github.com/andrewallenbruce/provider/issues/60#issuecomment-1820270391)

# Codebook

```{r}
#| label: code
code <- \(variable, levels, labels) {
  dplyr::tibble(
    variable = variable, 
    level = levels, 
    label = labels)
}

code(
  "SEX", 
  levels = c(0, 1), 
  labels = c("Male", "Female"))
```


```{r}
#| label: codebook
codebook <- \(...) {
  
  map <- rlang::list2(...)
  
  names(map) <- purrr::map_chr(map, \(x) x$variable[1])
  
  return(map)
}

codebook(
  code("SEX", 
       levels = 0:1, 
       labels = c("Male", "Female")), 
  code("STUDY", 
       levels = 1:3, 
       labels = c("S1", "S2", "S3")))
```

```{r}
#| label: encode
encode <- \(data, codebook) {
  
  mapped_vars <- names(codebook)
  
  mapped_data <- purrr::map2(data, names(data), \(x, var, m) {
      
      if (!var %in% mapped_vars) return(x)
      
      x <- factor(x, levels = m[[var]]$level, labels = m[[var]]$label)
      
      return(x)
    },
    m <- codebook
  )
  dplyr::as_tibble(mapped_data)
}

labels <- codebook(
  code("SEX", 
       levels = 0:1, 
       labels = c("Male", "Female")), 
  code("STUDY", 
       levels = 1:3, 
       labels = c("S1", "S2", "S3"))
  )

dataset <- data.frame(
  STUDY = c(1, 1, 1, 2, 2, 2),
  SEX   = c(0, 0, 1, 1, 1, 0),
  AGE   = c(32, 18, 64, 52, 26, 80)
)

encode(dataset, labels)
```


```{r}
#| label: decode
decode <- \(data, codebook) {
  
  mapped_vars <- names(codebook)
  
  mapped_data <- purrr::map2(data, names(data), \(x, var, m) {
    
      if (!var %in% mapped_vars) return(x)
    
      x_chr <- as.character(x)
      
      x_lvl <- m[[var]]$level
      
      x_lab <- m[[var]]$label
      
      x <- x_lvl[match(x_chr, x_lab)]
      
      return(x)
    },
    m <- codebook
  )
  dplyr::as_tibble(mapped_data)
}

labels <- codebook(
 code("SEX", levels = c(0, 1), labels = c("Male", "Female")),
 code("STUDY", levels = c(1, 2, 3), labels = c("S1", "S2", "S3")))

dataset <- data.frame(
  STUDY = factor(c("S1", "S1", "S1", "S2", "S2", "S2")),
  SEX   = factor(c("Male", "Male", "Female", "Female", "Female", "Male")),
  AGE   = c(32, 18, 64, 52, 26, 80))

decode(dataset, labels)
```

