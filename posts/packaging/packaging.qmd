---
title: "R Packaging Workflow"
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| echo: false
#| cache: false
knitr::opts_chunk$set(
  collapse  = FALSE,
  echo      = TRUE, 
  message   = FALSE, 
  warning   = FALSE,
  error     = TRUE,
  comment   = "",
  dpi       = 300, 
  dev       = "ragg_png",
  out.width = "100%",
  fig.align = "center",
  fig.width = 8
)
options(scipen = 999, digits = 2)
```


# Initial Steps

```{r}
#| label: create-package
#| eval: false
init_pkg <- \(pkgname) {
  
  local  <- "C:/Users/Andrew/Desktop/Repositories/"
  github <- "https://github.com/andrewallenbruce/"
  
  usethis::create_package(
  path = glue::glue("{local}{pkgname}"),
  fields = list(
    Package = glue::glue("{pkgname}"),
    "Authors@R" = utils::person(
      "Andrew", 
      "Bruce", , 
      email = "andrewallenbruce@gmail.com", 
      role = c("aut", "cre", "cph")),
    Maintainer = "Andrew Bruce <andrewallenbruce@gmail.com>",
    URL = glue::glue("{github}{pkgname}"),
    BugReports = glue::glue("{github}{pkgname}/issues"))
  )
}
```

## Connect to Git

```{r}
#| label: connect-git
#| eval: false
usethis::use_git()
```

> _Will ask you to commit files to Git. Say yes._

## Create Repository on GitHub

```{r}
#| label: connect-github
#| eval: false
usethis::use_github()
```

> _Will ask you to commit files to GitHub. Say yes._

## Add License, COC, Package Document, and News

```{r}
#| label: add-license-coc-doc-news
#| eval: false
usethis::use_mit_license("Andrew Allen Bruce")
usethis::use_code_of_conduct("andrewallenbruce@gmail.com")
usethis::use_package_doc()
usethis::use_news_md()
```

## Add README.Rmd

```{r}
#| label: use-rmd
#| eval: false
usethis::use_readme_rmd()
```

## Use {roxyglobals}

```{r}
#| label: use-roxy
#| eval: false
roxyglobals::use_roxyglobals()
```

## Use {testthat}

```{r}
#| label: use-testthat
#| eval: false
usethis::use_testthat(parallel = TRUE)
usethis::use_test("add-test")
```

## Create {pkgdown} site

```{r}
#| label: use-pkgdown
#| eval: false
usethis::use_pkgdown_github_pages()
```

Copy and paste into `_pkgdown.yml` file:

```yaml
url: https://andrewallenbruce.github.io/codex/

template:
  bootstrap: 5
  light-switch: true
  bslib:
    base_font: {google: "Roboto"}
    heading_font: {google: "Roboto Slab"}
    code_font: {google: "Source Code Pro"}

navbar:
  structure:
    left:
    - intro
    - reference
    - articles
    - tutorials
    - news
    right:
    - search
    - github
    - lightswitch
  components:
    reference:
      text: Reference
      href: reference/index.html
    search:
      search: []
    lightswitch:
      icon: fa-sun
      aria-label: Light switch
      id: lightswitch
      menu:
      - text: Light
        theme: light
        icon: fa-sun
      - text: Dark
        theme: dark
        icon: fa-moon
      - text: Auto
        theme: auto
        icon: fa-adjust
    news:
      text: Changelog
      href: news/index.html
    github:
      icon: fab fa-github fa-lg
      href: https://github.com/andrewallenbruce/codex/
      aria-label: GitHub
```

Function Reference Example:

```yaml
- title: Classifications
  desc: >
    Classification systems for added context and dimensionality reduction.
  contents:
  - betos
  - ndc_lookup
  - taxonomies
  - taxonomy_codes
  - taxonomy_crosswalk
- title: Utilities
  desc: >
    Various helper functions.
  contents:
  - change
  - geomean
  - years_df
  - duration_vec
  - summary_stats
  - add_counties
```

## Run, Commit and Push

```{r}
#| label: last-steps
#| eval: false
devtools::check()
devtools::build_rmd("README.Rmd")
usethis::use_tidy_description()
```

{{< pagebreak >}}

# Add a {pin}

Call:

```{r}
#| label: use-data-raw
#| eval: false
usethis::use_data_raw("dataset")
```

Create `pins_internal.R` file in `data-raw` directory, the copy and paste into file:

```{r filename="pins_internal.R"}
#| label: pins_internal
#| eval: false
pin_update <- function(x, name, title, description) {

  board <- pins::board_folder(
    here::here("inst/extdata/pins"))

  board |>
    pins::pin_write(
      x,
      name        = name,
      title       = title,
      description = description,
      type        = "qs")

  board |> pins::write_board_manifest()
}

delete_pins <- function(pin_names) {

  board <- pins::board_folder(
    here::here("inst/extdata/pins"))

  pins::pin_delete(board, names = pin_names)
}
```

Create a new pin:

```{r filename="dataset.R"}
#| label: data_raw
#| eval: false
source(here::here("data-raw", "pins_internal.R"))

# -- Data wrangling code here -- #

pin_update(
  dataset,
  name = "object_name",
  title = "Short Description",
  description = "Long Description"
)
```

Call:

```{r}
#| label: pins_r
#| eval: false
usethis::use_r("pins")
```

Copy and paste the following to `pins.R` file:

```{r filename="pins.R"}
#| label: pins_functions
#| eval: false

#' Return GitHub raw url
#'
#' @param x `<chr>` string
#'
#' @returns `<chr>` GitHub raw url
#'
#' @examples
#' gh_raw("andrewbruce/example/main/inst/pins/")
#'
#' @autoglobal
#'
#' @keywords internal
#'
#' @export
gh_raw <- function(x) {
  paste0("https://raw.githubusercontent.com/", x)
}

#' Mount [pins][pins::pins-package] board
#'
#' @param source `<chr>` `"local"` or `"remote"`
#'
#' @param package `<chr>` package name
#'
#' @returns `<pins_board_folder>` or `<pins_board_url>`
#'
#' @autoglobal
#' 
#' @importFrom pins board_folder board_url
#' @importFrom fs path_package
#' @importFrom glue glue
#'
#' @keywords internal
#'
#' @export
mount_board <- function(source = c("local", "remote"), package = "<package_name>") {

  source <- match.arg(source)

  switch(
    source,
    local = board_folder(
      path_package("extdata/pins", package = package)
      ),
    remote = board_url(
      gh_raw(
        glue("andrewallenbruce/{package}/master/inst/extdata/pins/")
        )
      ),
    stop("Invalid source")
    )
}

#' Get a pinned dataset from a [pins][pins::pins-package] board
#'
#' @param pin `<chr>` string name of pinned dataset
#'
#' @param ... additional arguments passed to `mount_board()`
#'
#' @returns `<tibble>` or `<data.frame>`
#'
#' @autoglobal
#' 
#' @importFrom pins pin_read
#'
#' @keywords internal
#'
#' @export
get_pin <- function(pin, ...) {

  board <- mount_board(...)

  pin <- match.arg(pin, list_pins())

  pin_read(board, pin)
}

#' List pins from a [pins][pins::pins-package] board
#'
#' @param ... arguments to pass to [mount_board()]
#'
#' @returns `<list>` of [pins][pins::pins-package]
#'
#' @autoglobal
#' 
#' @importFrom pins pin_list
#'
#' @keywords internal
#'
#' @export
list_pins <- function(...) {

  board <- mount_board(...)

  pin_list(board)
}
```

{{< pagebreak >}}

## Session Information 

```{r}
#| echo: false
pander::pander(sessionInfo())
```
