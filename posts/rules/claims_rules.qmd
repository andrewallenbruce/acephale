---
title: "Building Claims Rules"
format: 
  html:
    reference-location: block
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
  dev        = "ragg_png",
  dpi        = 300,
  out.width  = "100%",
  fig.width  = 8,
  fig.asp    = 0.618,
  fig.retina = 2,
  fig.align  = "center",
  fig.show   = "hold")

options(scipen = 999)
library(here)
library(gt)
library(S7)
library(emphatic)
source(here("posts/rules/scripts", "load.R"))
```


# Goal

To build a composable, portable, and extensible healthcare claims rules engine. The engine will be used to evaluate claims data for compliance with a set of rules. The rules will be defined in a structured format and will be evaluated using R code, but should be general enough to be easily translated to another language. The goal is to create a flexible and extensible system that can be used to evaluate claims data in a variety of scenarios, pre- or post.

## Similar Work

   - [queryBuilder](https://github.com/r-world-devs/queryBuilder)
   - [healthdb](https://github.com/KevinHzq/healthdb)

# Anatomy of a **Rule**

```{r}
#| label: rule_definition
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| results: asis

data.frame(
  Field = c(
    "@index", 
    "@identifier", 
    "@category", 
    "@definition",
    "@rationale", 
    "@source",
    "@steps"
  ),
  Description = c(
    "Unique Rule Number", 
    "Unique Alphanumeric Identifier", 
    "High-Level Classification", 
    "Human Readable Description", 
    "Reason for Implementation", 
    "URLs, References, or Documentation", 
    "A <list> of Steps to Evaluate"
  )) |> 
  emphatic::hl(
    'gray30', cols = Field) |>
  knit_print.emphatic()
```


```{r}
#| echo: false
#| eval: false

# gt(rowname_col = "name") |>
  # tab_header("Class: <Rule>") |> 
  # cols_align(align = "left") |>
  # opt_table_font(font = google_font(name = "Roboto")) |>
  # opt_all_caps() |>
  # fmt_tf(columns = "optional",
  #        tf_style = "circles",
  #        colors = c("black", "grey90")) |>
  # tab_style(
  #   style = cell_text(
  #     align = "right",
  #     weight = "bold",
  #     size = px(16),
  #     whitespace = "break-spaces",
  #     transform = "lowercase",
  #     font = google_font(name = "JetBrains Mono")),
  #   locations = cells_stub()) |>
  # tab_style(
  #   style = cell_text(
  #     align = "left",
  #     weight = "normal",
  #     font = google_font(name = "Roboto Mono")),
  #   locations = cells_body(columns = c(description))) |>
  # tab_style(
  #   style = cell_text(
  #     align = "left",
  #     weight = "bold",
  #     font = google_font(name = "JetBrains Mono")),
  #   locations = cells_title()) |>
  # opt_stylize(add_row_striping = FALSE) |>
  # opt_vertical_padding(scale = 0.35) |> 
  # tab_options(column_labels.hidden = TRUE,
  #             table.width = pct(60),
  #             quarto.disable_processing = TRUE)
```

# Anatomy of a **Step**

```{r}
#| label: step_definition
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| results: asis

data.frame(
  Field = c(
    "@type", 
    "@order", 
    "@variable",
    "@value", 
    "@operation", 
    "@condition",
    "@message"
  ),
  Description = c(
    "Qualifier: All but the last step in the rule. Identify claims that meet the criteria for inspection. Claim is skipped if not met.
    Terminator: Final step, the result of which indicates a pass or fail. Claim is skipped if it passes. If it fails, the full claim information should be returned, along with the rationale for the failure.", 
    
    "Certain steps must be ahead of others, for instance:
     Dates should always be first
     @dos should always be first if present, unless patient @age is required
     If @age is required, it should be first and calculated as the number of days from @dob to @dos", 
    
    "Element to evaluate", 
    
    "Valid value, @variable's expected state", 
    
    "Validation Method:
    Regex: grepl('^I10', icd) | grepl('^J[0-9]{5}', hcpcs)
    Calculation: as.integer(dos - dob)
    Comparison: x > y, x < y, x >= y, x <= y
    Equality: x == y, identical(x, y)
    Presence: !is.na(x)", 
    
    "Functional R code to call based on @operation selected", 
    
    "Message to report if final @terminator step is not met"
  )) |> 
  emphatic::hl('gray30', cols = Field) |>
  knit_print.emphatic()
```

```{r}
#| echo: false
#| eval: false
# gt(rowname_col = "name") |>
#   tab_header("Class: <Step>") |> 
#   cols_align(align = "left") |>
#   opt_table_font(font = google_font(name = "Roboto")) |>
#   tab_style(
#     style = cell_text(
#       align = "right",
#       v_align = "top",
#       weight = "bold",
#       size = px(16),
#       whitespace = "break-spaces",
#       transform = "lowercase",
#       font = google_font(name = "JetBrains Mono")),
#     locations = cells_stub()) |>
#   tab_style(
#     style = cell_text(
#       align = "left",
#       v_align = "top",
#       weight = "normal",
#       font = google_font(name = "Roboto Mono")),
#     locations = cells_body(columns = c(description))) |>
#   tab_style(
#     style = cell_text(
#       align = "left",
#       weight = "bold",
#       font = google_font(name = "Roboto Mono")),
#     locations = cells_title()) |>
#   opt_stylize(add_row_striping = TRUE) |>
#   opt_vertical_padding(scale = 0.35) |> 
#   fmt_markdown() |> 
#   tab_options(column_labels.hidden = TRUE,
#               table.width = pct(70),
#               quarto.disable_processing = TRUE)
```

# Anatomy of a **Variable**

   - **`payer` **
     - `level`: Primary, Secondary, Tertiary
     - `group`: Self-Pay, Commercial, Medicare, Medicaid, etc.
     - `name`: BCBS, Medicaid, etc.
     - `state`: State Abbreviation *(optional)*
   - **`provider`**
     - `npi`: National Provider Identifier
     - `taxonomy`: Taxonomy Code
     - `credential`: MD, DO, etc.
     - `role`: Rendering, Referring, Supervising, Ordering
   - **`procedure`**
     - `hcpcs`: HCPCS Code: `^[A-CEGHJ-MP-V0-9][0-9]{3,3}[AFMTU0-9]$`
     - `mod_1`: Modifier 1: `^[A-HJ-NP-VXZ1-9][0-9A-Z]$`
     - `mod_2`: Modifier 2
     - `mod_3`: Modifier 3
     - `mod_4`: Modifier 4
     - `unit`: HCPCS Units of Service
     - `ndc`: National Drug Code
     - `rev_code`: Revenue Code
   - **`pos`**: Place of Service
     - `code`: 02, 11, etc. `^[0-9]{2}$`
     - `type`: **Facility** or **Non-Facility**
     - `description`: Hospital, Clinic, etc.
     - `claim`: 
        -  **Institutional**: Facility
           - `(ub04|1450|cms-1450)`
        -  **Professional**: Non-Facility
           - `(hcfa|1500|cms-1500)`
   - **`patient`**:
     - `dos`: Date of Service
     - `dob`: Date of Birth
     - `age`
     - `sex`
   - `icd`: ICD-10-CM Code

# S7

::: {.panel-tabset}

## Step

```{r}
#| label: s7_class_step
#| echo: true
#| eval: true
#| message: false
#| warning: false
step <- S7::new_class(
  name = "step",
  package = "crules",
  properties = list(
    order = S7::class_integer,
    variable = S7::class_character,
    value = S7::new_property(class = S7::class_any)
    ),
  validator = function(self) {
    if (length(self@order) != 1)    return("@order must be length 1")
    if (length(self@variable) != 1) return("@variable must be length 1")
  })

step(order = 1L, 
     variable = "dos", 
     value = "2024-08-04")
```

## Rule

```{r}
#| label: s7_class_rule
#| echo: true
#| eval: true
#| message: false
#| warning: false
rule <- S7::new_class(
  name = "rule",
  package = "crules",
  properties = list(
    index = S7::class_numeric,
    identifier = S7::class_character,
    category = S7::class_character,
    definition = S7::class_character,
    rationale = S7::class_character,
    alert = S7::class_character,
    timestamp = S7::new_property(
      class = S7::class_Date,
      getter = function(self) clock::date_now(zone = "")),
    steps = S7::class_list
    )
  )

rule

rule(
  index = 1L,
  identifier = "HCPCS:EXP:001",
  category = "Invalid HCPCS",
  definition = "<DOS> is after [2019-01-01] AND <HCPCS> is [43760]",
  rationale = "Effective 2019-01-01, HCPCS 43760 is invalid",
  alert = "See HCPCS [43762, 43763]")
```

## Variable

### Patient

```{r}
#| label: s7_class_patient
#| echo: true
#| eval: true
#| message: false
#| warning: false
patient <- S7::new_class(
  name = "patient",
  package = "crules",
  properties = list(
    sex = S7::class_character,
    dos = S7::new_property(
      class = S7::class_Date,
      default = Sys.Date(),
      setter = function(self, value) {
        self@dos <- as.Date(value)
        self
      }),
    dob = S7::new_property(
      class = S7::class_Date,
      setter = function(self, value) {
        self@dob <- as.Date(value)
        self
      }),
    age = S7::new_property(
      class = S7::class_integer, 
      getter = function(self) {
        as.integer(self@dos - self@dob)
      })
    ),
  validator = function(self) {
    if (length(self@sex) != 1)                       return("@sex must be length 1")
    if (!self@sex %in% c("Male", "Female", "Other")) return("@sex must be Male, Female, or Other")
    if (length(self@dos) != 1)                       return("@dos must be length 1")
    if (length(self@dob) != 1)                       return("@dob must be length 1")
    if (length(self@age) != 1)                       return("@age must be length 1")
    if (self@dob >= self@dos)                        return("@dob must be before @dos")
    if (self@age <= 0)                               return("@age must be greater than 0 days")
  }
)

patient

patient(dob = "2024-08-03", 
        dos = "2024-08-04", 
        sex = "Male")

pt_one <- patient(
  dob = "2024-08-03", 
  dos = "2024-08-04", 
  sex = "Male")

pt_one@dob <- "2021-07-31"

pt_one
```

### Payer

```{r}
#| label: s7_payer
#| echo: true
#| eval: true
#| message: false
#| warning: false
payer <- S7::new_class(
  name = "payer",
  package = "crules",
  properties = list(
    name = S7::class_character,
    state = S7::class_character,
    level = S7::class_character,
    group = S7::new_property(
      class = S7::class_character,
      getter = function(self) {
        dplyr::case_match(
          self@name,
          "BCBS" ~ "Commercial",
          "Medicaid" ~ "Medicaid",
          "Medicare" ~ "Medicare",
          "Patient" ~ "Self-Pay",
          .default = "Other")
      })
    ),
    validator = function(self) {
    if (length(self@name) != 1)  return("@name must be length 1")
    if (length(self@level) != 1) return("@level must be length 1")
   }
)

payer(name = "BCBS", 
      level = "Primary", 
      state = "TX")

bcbcs_tx <- payer(
  name = "BCBS", 
  level = "Primary", 
  state = "TX")

bcbcs_tx

bcbcs_tx@name <- "Medicaid"

bcbcs_tx
```

### Encounter

```{r}
#| label: s7_encounter
#| echo: true
#| eval: true
#| message: false
#| warning: false
encounter <- S7::new_class(
  name = "encounter",
  package = "crules",
  properties = list(
    pos = S7::class_character,
    referring = S7::class_character,
    rendering = S7::class_character,
    patient = S7::new_property(class = patient),
    payer = S7::new_property(class = payer)
    )
  )

enc <- encounter(
  pos = "11", 
  referring = "1234567890", 
  rendering = "0987654321",
  patient(
    dob = "2020-08-04", 
    dos = "2024-08-04", 
    sex = "Male"
  ),
  payer(
    name = "BCBS", 
    level = "Primary", 
    state = "TX"))

enc@patient@dob <- "2023-07-31"

enc
```

::: 

# Validation

::: {.panel-tabset}

## DOS

```{r}
#| label: qualify_dos
#| echo: true
#| eval: true
#| message: true
#| warning: true
#| error: true
qualify_dos <- \(df, dos, date) {
  
  arg  <- rlang::caller_arg(dos)
  call <- rlang::caller_env()
  
  x <- vctrs::vec_slice(df, df[[dos]] > date)
  
  if (vctrs::vec_is_empty(x))  {
    cli::cli_inform(
      "0 matches for {.strong {.val {rlang::sym(dos)}}} > {.val {as.Date(date)}}", 
      arg = arg,
      call = call,
      class = "qualify_dos"
      )
  }
  x
}

rule_001_example <- dplyr::tibble(
  dos = as.Date(c("2024-01-01", "2018-01-01")),
  hcpcs = as.character(c(43760, 99213))
)

rule_001_example

rule_001_example2 <- dplyr::tibble(
  dos = as.Date(c("2017-01-01", "2018-01-01", "2019-01-01")),
  hcpcs = as.character(c(99213, 99213, 99213))
)

rule_001_example2

rule_001_example |> 
  qualify_dos("dos", "2019-01-01")

rule_001_example2 |> 
  qualify_dos("dos", "2019-01-01")
```

## HCPCS

```{r}
#| label: term_hcpcs
#| echo: true
#| eval: true
#| message: true
#| warning: true
#| error: true
term_hcpcs <- \(df, hcpcs, code) {
  
  arg  <- rlang::caller_arg(hcpcs)
  call <- rlang::caller_env()
  
  x <- vctrs::vec_slice(df, df[[hcpcs]] == code)
  
  if (vctrs::vec_is_empty(x))  {
    cli::cli_inform(
      "0 matches for {.strong {.val {rlang::sym(hcpcs)}}} == {.val {rlang::sym(code)}}", 
      arg = arg,
      call = call,
      class = "term_hcpcs"
      )
  }
  x
}

rule_001_example |> 
  term_hcpcs("hcpcs", "43760")

rule_001_example2 |> 
  term_hcpcs("hcpcs", "43760")
```

## Both

```{r}
  #| label: both
#| echo: true
#| eval: true
#| message: true
#| warning: true
#| error: true
rule_001_example |> 
  qualify_dos("dos", "2019-01-01") |> 
  term_hcpcs("hcpcs", "43760")

rule_001_example2 |> 
  qualify_dos("dos", "2019-01-01") |> 
  term_hcpcs("hcpcs", "43760")
```

## Stored

```{r}
#| label: stored
#| echo: true
#| eval: true
#| message: false
#| warning: false
dos <- Sys.Date()

condition <- cleaned_steps |> 
  select(condition) |> 
  slice(2) |> 
  pull(condition)

condition

condition |> 
  rlang::parse_expr() |> 
  rlang::eval_bare()
```

::: 

# Raw Definitions

::: {.panel-tabset}

## 1

```{r}
print_desc(1)
```

## 50

```{r}
print_desc(50)
```

## 100

```{r}
print_desc(100)
```

## 500

```{r}
print_desc(500)
```

## 1000

```{r}
print_desc(1000)
```

::: 

# Metadata

   * Rulesets
      * Identifiers: 712
      * Categories: 621
      * Definitions: 703
      * Rationales: 659
      * Sources: 2

-   [X] `index`: Row number
-   [X] `number`: Rule Number
-   [X] `identifier`: Split letters/numbers, categorize Payer, State, etc.
-   [ ] `category`: Categories make little sense, need to be reclassified
-   [ ] `definition`: Define Variables, Logic, Remove Parentheses
-   [ ] `rationale`: Steps are detailed in the rationale that are missing from the rule set
-   [X] `source`: *Optional*; Extract urls from `category`

Need to define `instruction`/`suggestion` variable, taken from `rationale`

## Descriptors

```{r}
#| label: descriptors_gt
#| echo: false
#| eval: true
#| message: false
#| warning: false
descriptors |>
  slice_sample(n = 10) |>
  gt() |> 
  gtExtras::gt_merge_stack(
    col1 = "category",
    col2 = "rationale",
    font_size = c("17px", "16px"),
    palette = c("darkgreen", "royalblue"),
    font_weight = c("bold", "normal"),
    small_cap = FALSE
  )
```

## Definitions

```{r}
#| label: definitions_gt
#| echo: false
#| eval: true
#| message: false
#| warning: false
cleaned_definitions |>
  slice_sample(n = 10) |> 
  mutate(
    # category = str_wrap(category, width = 50),
    definition = str_replace_all(definition, " AND ", "<br><br><b>&&</b><br><br>") |>
      str_wrap(width = 60),
    definition = str_replace_all(definition, " OR ", "<br><br><b>||</b><br><br>") |>
      str_wrap(width = 60),
    definition = str_remove_all(definition, regex("\\s*\\(\\s*\\d+\\s*\\)\\s*")) |>
      str_wrap(width = 60),
    definition = str_squish(definition)
    # rationale = str_wrap(rationale, width = 50)
    ) |>
  gt(rowname_col = "number",
     row_group_as_column = TRUE) |>
  fmt_markdown(columns = c("definition")) |>
  cols_align(align = "left", columns = -c(number)) |>
  cols_align(align = "center", columns = c(number)) |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = "left",
        weight = "bold",
        size = px(14),
        whitespace = "break-spaces",
        font = google_font(name = "JetBrains Mono")),
      locations = cells_body(columns = c(definition))) |>
  tab_style(
      style = cell_text(
        color = "#0B0B35",
        align = "center",
        weight = "bold",
        size = px(16),
        font = google_font(name = "Roboto Condensed")),
      locations = cells_body(columns = c(number))) |>
  sub_missing(missing_text = "NO CATEGORY") |>
  tab_style(
    style = cell_text(
      v_align = "middle", 
      align = "right",
      weight = "800"),
    locations = cells_row_groups()) |> 
  tab_style(
    style = cell_text(
      size = px(16),
      font = google_font(name = "JetBrains Mono"),
      v_align = "middle", 
      align = "right"
      ),
    locations = cells_stub()) |> 
  opt_stylize(add_row_striping = TRUE) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)
```

## Step Components

Two types of a step: `qualifier` and `terminator`

A **qualifier** is basically a long `if (x & y & (a | b | c))` statement.


A **terminator** is the final step, analogous to a `stopifnot()` statement that checks the data.

-   [X] `number`:
-   [X] `order`:
-   [X] `identifier`:
-   [X] `variable`: Recode to standardize names
-   [X] `class`: Variable Data Class
-   [X] `group`: Variable Grouping
-   [X] `action`: Translate to `condition`
-   [X] `value`: Coerce to correct data type, deal with wildcards
-   [X] `condition`: Predicate function that evaluates to `TRUE` or `FALSE`

### Variables

-   [X] `dos`: 81
-   [X] `pos`: 142
-   [X] `ub04`: 106
-   [X] `age`: 158
-   [X] `sex`: 3
-   [X] `referring`: 14
-   [X] `rendering`: 20
-   [X] `icd`: 251
-   [X] `hcpcs`: 1071
-   [X] `mod_1`, `mod_2`, `mod_3`, `mod_4`: 472
-   [X] `unit`: 13
-   [X] `ndc`: 23
-   [X] `rev_code`: 19
-   [X] `primary_class`: 371
-   [X] `primary_name`: 132
-   [X] `primary_auth`: 3
-   [X] `secondary_class`: 6
-   [X] `secondary_name`: 4

# Cleaned

::: {.panel-tabset}

## Definitions

```{r}
#| label: cleaned_definitions
#| echo: true
#| eval: true
#| message: false
#| warning: false
cleaned_definitions |> 
  print(n = 100)
```

## Descriptors

```{r}
#| label: cleaned_descriptors
#| echo: true
#| eval: true
#| message: false
#| warning: false
descriptors |> 
  reframe(
    number, 
    rationale = glue::glue("{str_wrap(rationale, width = 100)}")) |> 
  print(n = 100)
```

## Steps

```{r}
#| label: cleaned_steps
#| echo: true
#| eval: true
#| message: false
#| warning: false
cleaned_steps |> 
  select(number, variable, action, condition) |> 
  print(n = 100)
```

::: 

{{< pagebreak >}}

<br>
<br>

# Session Information

```{r}
#| echo: false
pander::pander(sessionInfo())
```
