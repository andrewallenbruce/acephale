---
title: "Building Claims Rules"
format: 
  html:
    reference-location: block
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
  dev        = "ragg_png",
  dpi        = 300,
  out.width  = "100%",
  fig.width  = 8,
  fig.asp    = 0.618,
  fig.retina = 2,
  fig.align  = "center",
  fig.show   = "hold")

options(scipen = 999)
library(here)
library(gt)
library(S7)

source(here("posts/rules/scripts", "load.R"))
```


# Anatomy of a Rule

   - `rule` class
      - `identifier`: Unique Alphanumeric Identifier; `<Primary Key>`
      - `category`: High-Level Classification
      - `definition`: Human Readable Description of Rule Steps
      - `rationale`: Reason for Implementation
      - `sources`: URLs, References, or Documentation
      - `steps`: List of Steps to Evaluate
  
  - `step` class
      - `order`: Validation step order. Certain steps must be ahead of others, e.g. `dos` should always be first
         - qualifier: identifies records that meet the evaluation criteria; record is skipped if criteria is not met
         - validator: result indicates a pass or fail
      - `variable`: element of claim to evaluate
      - `method`: could define different methods for a single variable
          - regex: for matching patterns of long lists of HCPCS codes
          - calculation: days elapsed between date of birth and date of service
          - comparison: check if a value is greater than or less than another value
          - equality: check if a value is equal to another value
          - presence: check if a value is present
      - `condition`: functional code to call based on method selected
      - `value`: must be a valid instance of variable, expected state is evaluated against this value

      
  - `variable` classes:
     - Date of Service (`dos`)
       - `date`: Date of Service
     - Insurance (`payer`)
       - `name`: BCBS, Medicaid, etc.
       - `state`: State Abbreviation (optional)
       - `class`: Self-Pay, Commercial, Medicare, Medicaid, etc.
     - Diagnosis (`icd`)
       - `code`: ICD-10 Code
     - Provider (`provider`)
       - `role`: Rendering, Referring
       - `credential`: MD, DO, etc.
     - Procedure (`hcpcs`)
       - `code`: HCPCS Code
       - `mod_1`: Modifier 1
       - `mod_2`: Modifier 2
       - `mod_3`: Modifier 3
       - `mod_4`: Modifier 4
       - `unit`: Number of Units
     - NDC (`ndc`)
       - `code`: NDC Code


```{r}
rules[1, ] |> glimpse()
rules[2, ] |> glimpse()
cat(format(rules[2, 9, drop = TRUE]))
```

```{r}
rules[3, ] |> glimpse()
rules[4, ] |> glimpse()
rules[5, ] |> glimpse()
rules[6, ] |> glimpse()
cat(format(rules[3, 9, drop = TRUE]))
```


## S7 Class

```{r}
rule <- S7::new_class(
  "rule",
  package = "cruler",
  properties = list(
    identifier = S7::class_character,
    category = S7::class_character,
    definition = S7::class_character,
    rationale = S7::class_character,
    source = S7::new_property(class = S7::class_character, 
                              default = NA_character_),
    steps = S7::new_property(class = S7::class_list, 
                             default = list()),
    timestamp = S7::new_property(class = S7::class_POSIXct, 
                                 default = as.POSIXct(Sys.time()))
    )
  )

rule

hcpcs_exp <- rule(
  identifier = "HCPCS:EXP:001",
  category = "Invalid HCPCS",
  definition = "<Date of Service> is [2019-01-01] or after |AND| <HCPCS Code> is [43760]",
  rationale = "Effective 2019-01-01, HCPCS 43760 is invalid; See 43762 - 43763",
  source = "https://www.cms.gov/Medicare/Coding/HCPCSReleaseCodeSets/Alpha-Numeric-HCPCS")

hcpcs_exp

variable <- S7::new_class(
  "variable",
  package = "cruler",
  properties = list(
    name = S7::class_character,
    group = S7::class_character,
    attributes = S7::class_list
    )
  )

variable

dos_var <- variable(
  name = "dos",
  group = "encounter",
  attributes = list()
)

dos_var
```

```{r}
#| label: qualify
#| echo: true
#| message: true
#| warning: true
#| error: true
rule_001_example <- dplyr::tibble(
  dos = as.Date(c("2024-01-01", "2018-01-01")),
  hcpcs = as.character(c(43760, 99213))
)

rule_001_example

rule_001_example2 <- dplyr::tibble(
  dos = as.Date(c("2017-01-01", "2018-01-01", "2024-01-01")),
  hcpcs = as.character(c(99213, 99213, 99213))
)

rule_001_example2

qualify_dos <- function(df) {
  
  arg  <- rlang::caller_arg(df)
  call <- rlang::caller_env()
  
  x <- vctrs::vec_slice(df, df[["dos"]] >= as.Date("2019-01-01"))
  
  if (vctrs::vec_is_empty(x))  {
    cli::cli_abort(
      "No matches for {.strong dos} >= {.val {as.Date('2019-01-01')}} in {.arg {arg}}.", 
      arg = arg,
      call = call,
      class = "no_qualify_dos"
      )
  }
  return(x)
}

qualify_dos(rule_001_example)

qualify_dos(rule_001_example2)

qualify_hcpcs <- function(df) {
  
  arg  <- rlang::caller_arg(df)
  call <- rlang::caller_env()
  
  x <- vctrs::vec_slice(df, df[["hcpcs"]] == "43760")
  
  if (vctrs::vec_is_empty(x))  {
    cli::cli_abort(
      "No matches for {.strong hcpcs} == {.val {rlang::sym('43760')}} in {.arg {arg}}.", 
      arg = arg,
      call = call,
      class = "no_qualify_hcpcs"
      )
  }
  return(x)
}

qualify_hcpcs(rule_001_example)

qualify_hcpcs(rule_001_example2)

qualify_dos(rule_001_example) |> qualify_hcpcs()

qualify_dos(rule_001_example2) |> qualify_hcpcs()
```

## Metadata

-   [X] `index`: Row number
-   [X] `number`: Rule Number
-   [X] `identifier`: Split letters/numbers, categorize Payer, State, etc.
-   [ ] `category`: Categories make little sense, need to be reclassified
-   [ ] `definition`:
-   [ ] `rationale`: Steps are detailed in the rationale that are missing from the ruleset
-   [X] `source`: Extract urls from `category`

### Category

```{r}
#| label: descriptors
#| echo: true
#| eval: false
#| message: false
#| warning: false
descriptors |> 
  select(category, rationale) |> 
  filter(!is.na(category)) |> 
  distinct(category, .keep_all = TRUE) |> 
  gt() |> 
  gtExtras::gt_merge_stack(
    col1 = "category",
    col2 = "rationale",
    font_size = c("17px", "16px"),
    palette = c("darkgreen", "royalblue"),
    font_weight = c("bold", "normal"),
    small_cap = FALSE
  )
```


#### Sample

```{r}
#| label: category
#| echo: true
#| eval: false
#| message: false
#| warning: false
descriptors |>
  slice_sample(n = 15) |> 
  mutate(
    category = str_wrap(category, width = 50),
    definition = str_replace_all(definition, " AND ", "<br><br><b>&&</b><br><br>") |>
      str_wrap(width = 60),
    definition = str_replace_all(definition, " OR ", "<br><br><b>||</b><br><br>") |>
      str_wrap(width = 60),
    definition = str_remove_all(definition, regex("\\s*\\(\\s*\\d+\\s*\\)\\s*")) |>
      str_wrap(width = 60),
    definition = str_squish(definition),
    rationale = str_wrap(rationale, width = 50)) |>
  select(-source, -index) |> 
  gt(rowname_col = "identifier",
     row_group_as_column = TRUE) |>
  fmt_markdown(columns = c("definition")) |>
  cols_align(align = "left", columns = -c(number)) |>
  cols_align(align = "center", columns = c(number)) |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = "left",
        weight = "bold",
        size = px(14),
        whitespace = "break-spaces",
        font = google_font(name = "JetBrains Mono")),
      locations = cells_body(columns = c(definition))) |>
  tab_style(
      style = cell_text(
        color = "#0B0B35",
        align = "center",
        weight = "bold",
        size = px(16),
        font = google_font(name = "Roboto Condensed")),
      locations = cells_body(columns = c(number))) |>
  sub_missing(missing_text = "NO CATEGORY") |>
  gtExtras::gt_add_divider(
    columns = "category", 
    style = "solid",
    weight = "3px",
    color = "royalblue") |>  
  gtExtras::gt_merge_stack(
    col1 = "category",
    col2 = "rationale",
    font_size = c("17px", "16px"),
    palette = c("darkgreen", "royalblue"),
    font_weight = c("bold", "normal"),
    small_cap = FALSE
  ) |> 
  tab_style(
    style = cell_text(
      v_align = "middle", 
      align = "right",
      weight = "800"),
    locations = cells_row_groups()) |> 
  tab_style(
    style = cell_text(
      size = px(16),
      font = google_font(name = "JetBrains Mono"),
      v_align = "middle", 
      align = "right"
      ),
    locations = cells_stub()) |> 
  opt_stylize(add_row_striping = TRUE) |>
  tab_options(table.width = pct(85),
              quarto.disable_processing = TRUE)
```


## Components

-   [X] `number`:
-   [X] `order`:
-   [X] `identifier`:
-   [X] `variable`: Recode to standardize names
-   [X] `class`: Variable Data Class
-   [X] `group`: Variable Grouping
-   [ ] `action`: _Remove_ Translate to `condition`
-   [ ] `value`: Coerce to correct data type, deal with wildcards
-   [ ] `condition`: Predication function that evaluates to `TRUE` or `FALSE`

```{r}
#| label: components
#| echo: true
#| message: false
#| warning: false
components |> 
  count(variable) |> 
  print(n = 30)
```

### Variables

-   [X] `dos`: 81
-   [X] `age`: 158
-   [X] `unit`: 13
-   [X] `ub04`: 106
-   [X] `ndc`: 23
-   [X] `sex`: 3
-   [X] `pos`: 142
-   [X] `mod_1`, `mod_2`, `mod_3`, `mod_4`: 472
-   [X] `rev_code`: 19
-   [X] `referring`: 14
-   [ ] `icd`: 323
-   [ ] `hcpcs`: 1071
-   [ ] `rendering`: 20
-   [ ] `primary_class`: 371
-   [ ] `primary_name`: 132
-   [X] `primary_auth`: 3
-   [X] `secondary_class`: 6
-   [ ] `secondary_name`: 4

#### Cleaned

```{r}
#| label: cleaned_variables
#| echo: false
#| eval: false
#| message: false
#| warning: false
dos

# Should be in the same unit of time (days) and calculated from the 
# encounter's Date of Service (`dos`) and the patient's Date of Birth (`dob`).
age

unit

ub04

# All check for presence, should simply be `!is.na(ndc)`
ndc
sex
referring
pos

modifiers

rev_code
```


```{r}
#| label: cleaned_rules
#| echo: true
#| eval: true
#| message: false
#| warning: false
vctrs::vec_c(
  dos,
  age,
  ndc,
  unit,
  sex,
  ub04,
  pos,
  modifiers,
  rev_code,
  referring,
  primary_auth,
  secondary_class,
  secondary_name,
  primary_class
) |> 
  dplyr::arrange(number, order)
```


```{r}
components |> 
  filter(variable == "primary_name") |> 
  mutate(value = str_remove_all(value, regex(r"{\(\d+\)}")),
         value = str_remove_all(value, regex(r"{\(\D+\)}")),
         value = str_replace_all(value, " ,", ","),
         value = str_replace_all(value, ", ", ","),
         value = str_replace_all(value, " ; ", ","),
         value = str_replace_all(value, fixed("/"), ","),
         value = str_replace_all(value, fixed("*"), ""),
         value = str_replace_all(value, fixed("("), ""),
         value = str_replace_all(value, fixed("-"), ""),
         value = str_replace_all(value, fixed(" - "), ""),
         value = str_replace_all(value, fixed(" -- "), ""),
         value = str_squish(value)) |>
  separate_longer_delim(cols = value, delim = ",") |>
  mutate(
    value = str_squish(value),
    value = toupper(value),
    value = case_match(
      value,
      # UHC
      c("UNITED HEALTHCARE", 
        "UNITED HEALTHCARE MEDICARE",
        "UNITED HEALTHCARE MEDICARE PLANS",
        "SELECT ALL OCCURANCES OF UHC", 
        "SELECT ALL UHC",
        "& UHC INSURANCES",
        "UHC ADV PLAN",
        "UNITEDHEALTHCARE",
        "AARP UHC",
        "UHC COMMUNITY PLAN",
        "UHC DUAL COMPLETE",
        "UHC MEDICAID MO",
        "UHCMEDICARECOMPLETE",
        "UNITED HEALTH CARE",
        "UNITED HEALTH SHARED SERVICES",
        "UNITED HEALTHCARE CLAIM DIVISION",
        "UNITED HEALTHCARE DUAL COMPLETE",
        "UNITED HEALTHCARE MEDICARE SOLUTIONS",
        "UNITED HEALTHCARE RIVER VALLEY",
        "UNITED HEALTHCARE STUDENT",
        "UNITED HEALTHCARE STUDENT RESOURCES"
        ) ~ "UHC",
      # BCBS
      c("BLUE SHIELD OF CALIFORNIA", 
        "BLUE CROSS BLUE SHIELD OF NC",
        "BLUE CROSS BLUE SHIELD",
        "BLUE CROSS", 
        "BLUECROSSKS", 
        "ALL BLUE CROSS", 
        "BCBS FEDERAL EMPLOYEE PROGRAM", 
        "BCBS FLORIDA", 
        "BCBS ILLINOIS", 
        "BCBS MI", 
        "BCBSMI", 
        "BCBS WI", 
        "BCBS OF NC",
        "BLUE CROSS BLUE SHIELD OF SOUTH CAROLINA", 
        "BCBS AL", 
        "BCBS AL BLUE ADVANTAGE MEDICARE REPLAC", 
        "BCBS BCBS",
        "BCBS AL ALL KIDS MEDICAID CHIP",
        "BCBS AL FEDERAL EMPLOYEE PROGRAM",
        "BCBS AL FEDERAL EMPLOYEE PROGRAM PPO",
        "BCBS AL HSA PPO",
        "BCBS AL INDEMNITY",
        "BCBS AL MEDICARE SUPPLEMENT",
        "BCBS AL OUT OF STATE BLUE CARD",
        "BCBS AL OUT OF STATE BLUE CARD PPO",
        "BCBS AL PEEHIP PPO",
        "BCBS AL POS",
        "BCBS AL PPO",
        "BCBS AL PREFERRED CARE",
        "BCBS AL PREFERRED CARE PPO",
        "BCBS BCBS HMO",
        "BLUE CROSS BLUE OPEN ACCESS HMO",
        "BLUE CROSS BLUE SHIELD OF AL",
        "BLUE CROSS BLUE SHIELD OF FLORIDA",
        "BLUE CROSS BLUE SHIELD OF NORTH CAROLINA",
        "BLUE CROSS BLUE SHIELD PPO",
        "BLUE CROSS STATE HEALTH BENEFIT PLAN",
        "BLUE SHIELD",
        "BLUE SHIELD OF GEORGIA FEDERAL",
        "BLUE SHIELD OF GEORGIA PPO",
        "BLUECROSS BLUESHIELD",
        "BCBS CA",
        "BCBS FEP",
        "BCBS MEDICARE",
        "BCBS OF ALABAMA",
        "BCBS OF ARKANSAS",
        "BCBS OF AZ",
        "BCBS OF GA",
        "BCBS OF MS",
        "BCBS OF RI BCBS OF RHODE ISLAND",
        "BCBS OF SC",
        "BCBS OF SOUTH CAROLINA",
        "BCBS OF TEXAS",
        "BCBS OF VA",
        "BCBS SC",
        "BCBS SC BLUE CROSS BLUE SHIELD OF SC",
        "BCBS TX",
        "BLUE CARE",
        "BLUE CROSS & BLUE SHIELD OF MISSISSIPPI",
        "BLUE CROSS BLUE SHIE",
        "BLUE CROSS BLUE SHIELD BLUE CARE NETWORK",
        "BLUE CROSS BLUE SHIELD FASTENAL",
        "BLUE CROSS BLUE SHIELD OF CALIFORNIA",
        "BLUE CROSS BLUE SHIELD OF GEORGIA BCB",
        "BLUE CROSS BLUE SHIELD OF ILLINOIS",
        "BLUE CROSS BLUE SHIELD OF ILLINOIS BC",
        "BLUE CROSS BLUE SHIELD OF ILLINOIS BL",
        "BLUE CROSS BLUE SHIELD OF TENNESSEE",
        "BLUE CROSS BLUE SHIELD PR",
        "BLUE CROSS BLUE SHIELDS CANADIAN SERVICE",
        "BLUE CROSS BLUESHIELD OF TENNESSEE BL",
        "BLUE CROSS FLORIDA",
        "BLUE CROSS MEDICARE ADVANTAGE ALL INSTANCES OF BLUE CROSS BLUE SHIELD MEDICARE",
        "BLUE CROSS OF GA",
        "BLUE CROSS TOTAL BLUE CROSS TOTAL MED",
        "BLUE SHIELD OF TEXAS",
        "BLUECARE PLUS DSNP",
        "BLUECARE TNCARE",
        "BLUECROSS",
        "BLUECROSS BLUE CROSS BLUE SHIELD OF",
        "BLUECROSS BLUECROSS BLUESHIELD HEALT",
        "BLUECROSS BLUESHIELD BLUECROSS BLUESH",
        "BLUECROSS BLUESHIELD OF ILLINOIS BLUE",
        "BLUECROSS CAPITAL BLUE",
        "BLUECROSS PEBA",
        "INDEPENDENCE BLUE CROSS PERSONAL CHOIC",
        "CAREFIRST BCBS",
        "FLORIDA BLUE",
        "SELECT ALL BCBS",
        "SELECT ALL OCCURANCES OF BCBS",
        "SELECT ALL OCCURANCES OF HEALTHY BLUE"
        ) ~ "BCBS",
      # ANTHEM
      c("BLUE CROSS ANTHEM", 
        "ANTHEM BLUE CROSS",
        "ANTHEM BCBS",
        "BLUE CROSSCA: ANTHEM BLUE CROSS",
        "AND ANTHEM PLANS"
        ) ~ "ANTHEM",
      .default = value)) |>
  count(value, sort = TRUE) |> 
  print(n = 225)
  # mutate(payers = glue::glue("'{value}'")) |>
  # nest(payers = c(payers), value = c(value)) |>
  # rowwise() |>
  # mutate(payers = map(payers, ~paste0(., collapse = ", ")),
  #        value = map(value, ~paste0(., collapse = ", "))) |>
  # unnest(cols = c(payers, value)) |>
  # ungroup() |> 
  # mutate(
  #   method = case_when(
  #     action == "is" ~ "==", 
  #     action == "is not" ~ "!=",
  #     action == "is one of" ~ "%in%"),
  #   condition = case_when(
  #     action %in% c("is", "is not") ~ glue::glue('{variable} {method} {payers}'), 
  #     action == "is one of" ~ glue::glue('{variable} {method} c({payers})'))) |>
  # select(number, identifier, order, variable, value, condition)
```

#### Complex

```{r}
# Need to define MID-LEVEL PROVIDER
# credentials, taxonomy, etc.
components |> 
  filter(variable == "rendering")
```


```{r}
components |> 
  filter(variable == "icd") |>
  mutate(wc = case_when(str_detect(value, "\\*") ~ 1L, .default = 0L),
         nchar = if_else(wc == 1, str_count(value, "[[:alnum:]]"), 0L),
         method = case_when(
           action == "is" & wc == 1 ~ "%in%",
           action == "is" & wc == 0 ~ "==",
           .default = NA_character_)) |> 
  filter(!is.na(method)) |> 
  select(number, order, class, variable, method, value, action, wc, nchar)
```


```{r}
components |> 
  filter(variable == "hcpcs") |>
  mutate(wc = case_when(str_detect(value, "\\*") ~ 1L, .default = 0L),
         nchar = if_else(wc == 1, str_count(value, "[[:alnum:]]"), 0L),
         class = "<chr>",
         method = case_when(
           action == "is" & wc == 1 ~ "%in%",
           action == "is" & wc == 0 ~ "==",
           .default = NA_character_),
         value = str_replace_all(value, "\\s|,", " "),
         value = str_wrap(value, width = 30)
         ) |> 
  filter(!is.na(method)) |> 
  select(number, order, class, variable, method, value, action, wc, nchar)
```


## Unevaluated Code

```{r}
#| label: vars
#| echo: true
#| eval: false
#| message: false
#| warning: false
categorize_vars |>
  separate_longer_delim(cols = value, delim = ",") |>
  mutate(value = str_squish(value),
         neg = case_when(str_detect(action, "not") ~ 1L, .default = 0L),
         wc = case_when(str_detect(value, "\\*") ~ 1L, .default = 0L),
         .after = value)

head_tail(rules_new, n = 10, by = c("var", "action")) |>
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(var, action, value))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)

rules_new |>
  filter(!is.na(var)) |>
  group_by(var) |>
  count(action) |>
  ungroup() |>
  arrange(var, desc(n), action) |>
  gt(groupname_col = "var", row_group_as_column = TRUE) |>
  cols_align(align = "left") |>
  opt_table_font(
    font = google_font(name = "Roboto Condensed"),
    weight = "bold"
    ) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "normal",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(var, action))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)
```

### Regexes

```{r}
#| label: regex
#| eval: false
#| echo: true
#| message: false
#| warning: false

c(
  "^[9][0][4][7][67]$"     = '9047(6|7)', 
  "^[9][0][56][1-9][0-9]$" = '905*|906*', 
  "^[9][0][7][1-5][02-9]$" = '907(1|2|3|4|5)',
  "^[9][1][3][01][0-9]$"   = '913'
  )

rules_new |>
  filter(wc == 1,
         var == "hcpcs") |>
  mutate(value = str_remove_all(value, "\\*"),
         chars = 5 - str_length(value),
         .after = value) |>
  mutate(
    regex = case_when(
      chars == 0 ~ glue_chr("^<<value>>$", .open = "<<", .close = ">>"),
      chars == 1 ~ glue_chr("^<<value>>[0-9]$", .open = "<<", .close = ">>"),
      chars > 1 ~ glue_chr("^<<value>>[0-9]{<<chars>>}$", .open = "<<", .close = ">>")),
    regex = case_when(neg == 1L ~ glue_chr('!{regex}'), .default = regex),
    .after = regex
  ) |>
  head_tail(n = 10, by = c("var", "action")) |>
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(regex))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)
```


### HCPCS Search

```{r}
#| label: misc
#| eval: false
#| echo: true
#| message: false
#| warning: false
northstar::search_descriptions(hcpcs_desc_type = "Long") |> 
  # dplyr::mutate(not_hcpcs = !grepl("^99[0-9]{3}$", hcpcs_code)) |> 
  filter(!grepl("^99[0-9]{3,3}$", hcpcs_code)) |>
  # dplyr::mutate(has_hcpcs = grepl("^J[0-9]{4}$", hcpcs_code)) |> 
  filter(str_detect(hcpcs_code, regex("^J[0-9]{4}$"))) |> 
  filter(str_detect(hcpcs_code, regex("^(?!5405)(?<![0-9]{1})$"))) |> 
  print(n = 200)

# Match strings that don't start with "99" and don't end with 3 digits
pattern <- "^(?!99).*(?<![0-9]{3})$"

# Negation pattern
"^(?!9938[0-9]{1}$)"

# Begins with 0, ends with digit
"^0.*\\d$"

# Begins with 0, ends with letter
"^0.*[A-Z]$"

# Match strings that don't start with "a" and don't end with "z"
pattern <- "^(?!a).*[^z]$"
grep(pattern, c("apple", "banana", "cherry"), value = TRUE)
# Output: "banana" "cherry"

stringr::str_detect("99202", stringr::regex("^[992]{3}.*"))

grep("^[992]{3}.*", "99202", value = TRUE, invert = TRUE)


pattern = dplyr::case_when(
  chars == 0 & negation == FALSE ~ glue::glue("^<value>$", .open = "<", .close = ">"),
  chars > 0  & negation == FALSE ~ glue::glue("^<value>[0-9]{<chars>}$", .open = "<", .close = ">"),
  chars == 0 & negation == TRUE ~ glue::glue("^(?!<value>)$", .open = "<", .close = ">"),
  chars > 0  & negation == TRUE ~ glue::glue("^(?!<<value>>)(?<![0-9]{<<chars>>})$", .open = "<<", .close = ">>")
  )
```
