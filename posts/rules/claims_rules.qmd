---
title: "Building Claims Rules"
format: 
  html:
    reference-location: block
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
  dev        = "ragg_png",
  dpi        = 300,
  out.width  = "100%",
  fig.width  = 8,
  fig.asp    = 0.618,
  fig.retina = 2,
  fig.align  = "center",
  fig.show   = "hold")

options(scipen = 999)
library(here)
library(gt)
library(S7)

deparse_substitute <- \(x) {
    deparse(substitute(x))
}

source(here("posts/rules/scripts", "load.R"))
```


# Anatomy of a Rule

   - `rule` class
      - `identifier`: Unique Alphanumeric Identifier; `<Primary Key>`
      - `category`: High-Level Classification
      - `definition`: Human Readable Description of Rule Steps
      - `rationale`: Reason for Implementation
      - `sources`: URLs, References, or Documentation
      - `steps`: List of Steps to Evaluate
  
  - `step` class
      - `order`: Validation step order. Certain steps must be ahead of others, e.g. `dos` should always be first
         - qualifier: identifies records that meet the evaluation criteria; record is skipped if criteria is not met
         - validator: result indicates a pass or fail
      - `variable`: element of claim to evaluate
      - `method`: could define different methods for a single variable
          - regex: for matching patterns of long lists of HCPCS codes
          - calculation: days elapsed between date of birth and date of service
          - comparison: check if a value is greater than or less than another value
          - equality: check if a value is equal to another value
          - presence: check if a value is present
      - `condition`: functional code to call based on method selected
      - `value`: must be a valid instance of variable, expected state is evaluated against this value

      
  - `variable` classes:
     - Date of Service (`dos`)
       - `date`: Date of Service
     - Insurance (`payer`)
       - `name`: BCBS, Medicaid, etc.
       - `state`: State Abbreviation (optional)
       - `class`: Self-Pay, Commercial, Medicare, Medicaid, etc.
     - Diagnosis (`icd`)
       - `code`: ICD-10 Code
     - Provider (`provider`)
       - `role`: Rendering, Referring
       - `credential`: MD, DO, etc.
     - Procedure (`hcpcs`)
       - `code`: HCPCS Code
       - `mod_1`: Modifier 1
       - `mod_2`: Modifier 2
       - `mod_3`: Modifier 3
       - `mod_4`: Modifier 4
       - `unit`: Number of Units
     - NDC (`ndc`)
       - `code`: NDC Code


```{r}
brack_txt <- "This is [some text] between [brackets]"
brack_reg <- r"{\[(.*?)\]}"

paren_txt <- "This is (some text) between (brackets)"
paren_reg <- r"{\(.*?\)}"

nested_txt <- "This (has brackets) and [square brackets] mixed (together [nested])"
nested_reg <- r"{\[.*?\]|\(.*?\)}"

stringr::str_extract_all(brack_txt, brack_reg)[[1]]
stringr::str_extract_all(paren_txt, paren_reg)[[1]]
stringr::str_extract_all(nested_txt, nested_reg)[[1]]

gsub(paren_reg, "[XXXXX]", paren_txt)
```


```{r}
rules[1, ] |> glimpse()
rules[2, ] |> glimpse()
cat(format(rules[2, 9, drop = TRUE]))
```

```{r}
rules[3, ] |> glimpse()
rules[4, ] |> glimpse()
rules[5, ] |> glimpse()
rules[6, ] |> glimpse()
cat(format(rules[3, 9, drop = TRUE]))

glob2rx("[J*]")
```


## S7 Class

```{r}
rule <- S7::new_class(
  "rule",
  package = "cruler",
  properties = list(
    identifier = S7::class_character,
    category = S7::class_character,
    definition = S7::class_character,
    rationale = S7::class_character,
    source = S7::new_property(class = S7::class_character, 
                              default = NA_character_),
    steps = S7::new_property(class = S7::class_list, 
                             default = list()),
    timestamp = S7::new_property(class = S7::class_POSIXct, 
                                 default = as.POSIXct(Sys.time()))
    )
  )

rule

hcpcs_exp <- rule(
  identifier = "HCPCS:EXP:001",
  category = "Invalid HCPCS",
  definition = "<Date of Service> is [2019-01-01] or after |AND| <HCPCS Code> is [43760]",
  rationale = "Effective 2019-01-01, HCPCS 43760 is invalid; See 43762 - 43763",
  source = "https://www.cms.gov/Medicare/Coding/HCPCSReleaseCodeSets/Alpha-Numeric-HCPCS")

hcpcs_exp

variable <- S7::new_class(
  "variable",
  package = "cruler",
  properties = list(
    name = S7::class_character,
    group = S7::class_character,
    attributes = S7::class_list
    )
  )

variable

variable(
  name = "dos",
  group = "encounter",
  attributes = list()
)
```

```{r}
#| label: qualify
#| echo: true
#| message: true
#| warning: true
#| error: true
rule_001_example <- dplyr::tibble(
  dos = as.Date(c("2024-01-01", "2018-01-01")),
  hcpcs = as.character(c(43760, 99213))
)

rule_001_example

rule_001_example2 <- dplyr::tibble(
  dos = as.Date(c("2017-01-01", "2018-01-01", "2024-01-01")),
  hcpcs = as.character(c(99213, 99213, 99213))
)

rule_001_example2

qualify_dos <- function(df) {
  
  arg  <- rlang::caller_arg(df)
  call <- rlang::caller_env()
  
  x <- vctrs::vec_slice(df, df[["dos"]] >= as.Date("2019-01-01"))
  
  if (vctrs::vec_is_empty(x))  {
    cli::cli_abort(
      "No matches for {.strong dos} >= {.val {as.Date('2019-01-01')}} in {.arg {arg}}.", 
      arg = arg,
      call = call,
      class = "no_qualify_dos"
      )
  }
  return(x)
}

qualify_dos(rule_001_example)

qualify_dos(rule_001_example2)

qualify_hcpcs <- function(df) {
  
  arg  <- rlang::caller_arg(df)
  call <- rlang::caller_env()
  
  x <- vctrs::vec_slice(df, df[["hcpcs"]] == "43760")
  
  if (vctrs::vec_is_empty(x))  {
    cli::cli_abort(
      "No matches for {.strong hcpcs} == {.val {rlang::sym('43760')}} in {.arg {arg}}.", 
      arg = arg,
      call = call,
      class = "no_qualify_hcpcs"
      )
  }
  return(x)
}

qualify_hcpcs(rule_001_example)

qualify_hcpcs(rule_001_example2)

qualify_dos(rule_001_example) |> qualify_hcpcs()

qualify_dos(rule_001_example2) |> qualify_hcpcs()
```

## Metadata

-   [X] `index`: Row number
-   [X] `number`: Rule Number
-   [X] `identifier`: Split letters/numbers, categorize Payer, State, etc.
-   [ ] `category`: Categories make little sense, need to be reclassified
-   [ ] `definition`:
-   [ ] `rationale`: Steps are detailed in the rationale that are missing from the ruleset
-   [X] `source`: Extract urls from `category`

### Category

```{r}
#| label: descriptors
#| echo: true
#| message: false
#| warning: false
descriptors |> 
  select(category, rationale) |> 
  filter(!is.na(category)) |> 
  distinct(category, .keep_all = TRUE) |> 
  gt() |> 
  gtExtras::gt_merge_stack(
    col1 = "category",
    col2 = "rationale",
    font_size = c("17px", "16px"),
    palette = c("darkgreen", "royalblue"),
    font_weight = c("bold", "normal"),
    small_cap = FALSE
  )
```


#### Sample

```{r}
#| label: category
#| echo: true
#| message: false
#| warning: false
descriptors |>
  slice_sample(n = 15) |> 
  mutate(
    category = str_wrap(category, width = 50),
    definition = str_replace_all(definition, " AND ", "<br><br><b>&&</b><br><br>") |>
      str_wrap(width = 60),
    definition = str_replace_all(definition, " OR ", "<br><br><b>||</b><br><br>") |>
      str_wrap(width = 60),
    definition = str_remove_all(definition, regex("\\s*\\(\\s*\\d+\\s*\\)\\s*")) |>
      str_wrap(width = 60),
    definition = str_squish(definition),
    rationale = str_wrap(rationale, width = 50)) |>
  select(-source, -index) |> 
  gt(rowname_col = "identifier",
     row_group_as_column = TRUE) |>
  fmt_markdown(columns = c("definition")) |>
  cols_align(align = "left", columns = -c(number)) |>
  cols_align(align = "center", columns = c(number)) |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = "left",
        weight = "bold",
        size = px(14),
        whitespace = "break-spaces",
        font = google_font(name = "JetBrains Mono")),
      locations = cells_body(columns = c(definition))) |>
  tab_style(
      style = cell_text(
        color = "#0B0B35",
        align = "center",
        weight = "bold",
        size = px(16),
        font = google_font(name = "Roboto Condensed")),
      locations = cells_body(columns = c(number))) |>
  sub_missing(missing_text = "NO CATEGORY") |>
  gtExtras::gt_add_divider(
    columns = "category", 
    style = "solid",
    weight = "3px",
    color = "royalblue") |>  
  gtExtras::gt_merge_stack(
    col1 = "category",
    col2 = "rationale",
    font_size = c("17px", "16px"),
    palette = c("darkgreen", "royalblue"),
    font_weight = c("bold", "normal"),
    small_cap = FALSE
  ) |> 
  tab_style(
    style = cell_text(
      v_align = "middle", 
      align = "right",
      weight = "800"),
    locations = cells_row_groups()) |> 
  tab_style(
    style = cell_text(
      size = px(16),
      font = google_font(name = "JetBrains Mono"),
      v_align = "middle", 
      align = "right"
      ),
    locations = cells_stub()) |> 
  opt_stylize(add_row_striping = TRUE) |>
  tab_options(table.width = pct(85),
              quarto.disable_processing = TRUE)
```


## Components

-   [X] `number`:
-   [X] `order`:
-   [X] `identifier`:
-   [X] `variable`: Recode to standardize names
-   [X] `class`: Variable Data Class
-   [X] `group`: Variable Grouping
-   [ ] `action`: _Remove_ Translate to `condition`
-   [ ] `value`: Coerce to correct data type, deal with wildcards
-   [ ] `condition`: Predication function that evaluates to `TRUE` or `FALSE`

```{r}
#| label: components
#| echo: true
#| message: false
#| warning: false
components
```

### Variables

-   [X] `hcpcs`: 
-   [ ] `mod_1`: 
-   [ ] `mod_2`:
-   [ ] `mod_3`:
-   [ ] `mod_4`:
-   [X] `unit`: 
-   [X] `icd`:
-   [X] `dos`:
-   [X] `pos`:
-   [X] `ub04`:
-   [X] `ndc`:
-   [ ] `rev_code`:
-   [ ] `cci`:
-   [ ] `lcd`:
-   [ ] `ncd`:
-   [ ] `dob`:
-   [ ] `sex`:
-   [ ] `age`:
-   [ ] `rendering`:
-   [ ] `referring`:
-   [ ] `primary_class`:
-   [ ] `primary_name`:
-   [ ] `primary_auth`:
-   [ ] `secondary_class`:
-   [ ] `secondary_name`:

```{r}
#| label: class_group
#| echo: true
#| message: false
#| warning: false
components  |> 
  filter(!is.na(class), !group %in% c("ncci")) |>
  count(group, variable, name = "steps") |>
  gt(groupname_col = "group",
     row_group_as_column = TRUE
     ) |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "JetBrains Mono")) |>
  opt_all_caps(locations = c("column_labels")) |>
  tab_style(
      style = cell_text(
        color = "royalblue",
        align = 'right',
        weight = "bold",
        size = px(16),
        font = google_font(name = "Fira Code")),
      locations = cells_row_groups()) |>
  opt_stylize() |>
  tab_options(table.width = pct(50),
              quarto.disable_processing = TRUE)
```

#### `dos`

```{r}
dos <- components |> 
  filter(variable == "dos") |> 
  mutate(class = "<date>",
         value = anytime::anydate(value),
         method = if_else(str_detect(action, "after"), ">", "<"),
         condition = glue::glue('{variable} {method} {value}')) |> 
  select(number, identifier, order, condition)

dos |> 
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(condition))) |>
  opt_stylize() |>
  tab_options(table.width = pct(50),
              quarto.disable_processing = TRUE)
```

#### `age`

All ages should be in the same unit of time, in this case, days.

Should be calculated from the encounter's Date of Service (`dos`) and the patient's Date of Birth (`dob`).

```{r}
dos <- components |> 
  filter(variable == "dos") |> 
  mutate(class = "<date>",
         value = anytime::anydate(value),
         method = if_else(str_detect(action, "after"), ">", "<"),
         condition = glue::glue('{variable} {method} {value}')) |> 
  select(number, identifier, order, condition)

age <- components |> 
  filter(variable == "age") |> 
  mutate(class = "<int>", 
         age = strex::str_extract_numbers(value),
         period = strex::str_extract_non_numerics(value),
         .before = variable) |> 
  unnest(c(age, period)) |> 
  mutate(age = as.integer(age),
         period = str_remove_all(period, "\\s|,"),
         value = NULL,
         method = case_match(
           action,
           c("is younger than", "younger than") ~ "<",
           "is older than" ~ ">",
           "is" ~ "==",
           .default = NA_character_),
    value = case_when(
      period == "years" ~ as.duration(years(age)) / ddays(1),
      period == "months" ~ as.duration(months(age)) / ddays(1),
      period == "days" ~ as.duration(days(age)) / ddays(1),
      .default = NA_real_),
    value = as.integer(value),
    condition = glue::glue('{variable} {method} {value}')
  ) |> 
  select(number, identifier, order, condition)

age |> 
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(condition))) |>
  tab_options(table.width = pct(50),
              quarto.disable_processing = TRUE)
```

#### `sex`

```{r}
components |> 
  filter(variable == "sex")
```

#### `ub04`

```{r}
components |> 
  filter(variable == "ub04")
```

#### `mod_1`

```{r}
# number 27   identifier MCD:CA:013  mod == SL
# number 921  identifier DME:028     semicolons to commas
# number 1061	identifier ANES:010    deal with wildcards
# number 583	identifier PODIA:004
# modifiers must be quoted
# for wildcards longer vectors, can probably use regex
mod_1 <- components |> 
  filter(variable == "mod_1") |> 
  mutate(class = "<chr>",
         value = if_else(identifier == "MCD:CA:013", "SL", value),
         commas = str_detect(value, ",|;"),
         method = if_else(action == "is", "==", "!="),
         method = if_else(commas, "%in%", method),
         method = if_else(value == "Present", "!is.na(mod_1)", method),
         variable = if_else(value == "Present", NA_character_, variable),
         variable = if_else(commas, "!mod_1", variable),
         value = if_else(value == "Present", NA_character_, value),
         value = if_else(commas, glue::glue("c({value})"), value),
         condition = glue::glue('{variable} {method} {value}', .na = "")) |> 
  select(number, identifier, order, condition)

mod_1 |> 
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(condition))) |>
  tab_options(table.width = pct(50),
              quarto.disable_processing = TRUE)
```

#### `mod_2`

```{r}
components |> 
  filter(variable == "mod_2") |> 
  mutate(class = "<chr>",
         value = if_else(identifier == "MCD:CA:013", "SL", value),
         commas = str_detect(value, ",|;"),
         method = if_else(action == "is", "==", "!="),
         method = if_else(commas, "%in%", method),
         method = if_else(value == "Present", "!is.na(mod_2)", method),
         variable = if_else(value == "Present", NA_character_, variable),
         variable = if_else(commas, "!mod_2", variable),
         value = if_else(value == "Present", NA_character_, value),
         value = if_else(commas, glue::glue("c({value})"), value),
         condition = glue::glue('{variable} {method} {value}', .na = "")) |> 
  select(number, identifier, order, condition)
```

#### `mod_3`

```{r}
components |> 
  filter(variable == "mod_3") |> 
  mutate(class = "<chr>",
         value = if_else(identifier == "MCD:CA:013", "SL", value),
         commas = str_detect(value, ",|;"),
         method = if_else(action == "is", "==", "!="),
         method = if_else(commas, "%in%", method),
         method = if_else(value == "Present", "!is.na(mod_3)", method),
         variable = if_else(value == "Present", NA_character_, variable),
         variable = if_else(commas, "!mod_3", variable),
         value = if_else(value == "Present", NA_character_, value),
         value = if_else(commas, glue::glue("c({value})"), value),
         condition = glue::glue('{variable} {method} {value}', .na = "")) |> 
  select(number, identifier, order, condition)
```

#### `mod_4`

```{r}
components |> 
  filter(variable == "mod_4") |> 
  mutate(class = "<chr>",
         value = if_else(identifier == "MCD:CA:013", "SL", value),
         commas = str_detect(value, ",|;"),
         method = if_else(action == "is", "==", "!="),
         method = if_else(commas, "%in%", method),
         method = if_else(value == "Present", "!is.na(mod_4)", method),
         variable = if_else(value == "Present", NA_character_, variable),
         variable = if_else(commas, "!mod_4", variable),
         value = if_else(value == "Present", NA_character_, value),
         value = if_else(commas, glue::glue("c({value})"), value),
         condition = glue::glue('{variable} {method} {value}', .na = "")) |> 
  select(number, identifier, order, condition)
```

#### `rev_code`

```{r}
components |> 
  filter(variable == "rev_code")
```

#### NCCI: Remove

```{r}
components |> 
  filter(number == 468) |> 
  filter(variable == "cci")
```

```{r}
components |> 
  filter(number == 467) |> 
  filter(variable == "lcd")
```

```{r}
components |> 
  filter(number == 466) |>
  filter(variable == "ncd")
```

#### `rendering`

```{r}
components |> 
  filter(variable == "rendering")
```

#### `referring`

```{r}
components |> 
  filter(variable == "referring")
```

#### `primary_class`

```{r}
components |> 
  filter(variable == "primary_class")
```

#### `primary_name`

```{r}
components |> 
  filter(variable == "primary_name")
```

#### `primary_auth`

```{r}
components |> 
  filter(variable == "primary_auth")
```

#### `secondary_class`

```{r}
components |> 
  filter(variable == "secondary_class")
```

#### `secondary_name`

```{r}
components |> 
  filter(variable == "secondary_name")
```


#### `ndc`

How can this be represented in relational algebra? Detect presence with regex?

If not present, then is `NA` its' representation? If so, `is.na(x)` would equal `is not present` and `!is.na(x)` would equal `is present`


```{r}
components |> 
  filter(variable == "ndc") |> 
  mutate(method = if_else(str_detect(action, "is not"), "is.na(x)", "!is.na(x)")) |> 
  select(number, order, class, variable, method, value, action) |> 
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(variable, method, value))) |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "normal",
        style = "italic",
        decorate = "underline",
        stretch = "condensed",
        font = google_font(name = "Fira Code")),
      locations = cells_body(columns = c(class))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)
```

#### `icd`

some values contain wildcards *

```{r}
components |> 
  filter(variable == "icd") |>
  mutate(wc = case_when(str_detect(value, "\\*") ~ 1L, .default = 0L),
         nchar = if_else(wc == 1, str_count(value, "[[:alnum:]]"), 0L),
         method = case_when(
           action == "is" & wc == 1 ~ "%in%",
           action == "is" & wc == 0 ~ "==",
           .default = NA_character_)) |> 
  filter(!is.na(method)) |> 
  select(number, order, class, variable, method, value, action, wc, nchar) |> 
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(variable, method, value))) |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "normal",
        style = "italic",
        decorate = "underline",
        stretch = "condensed",
        font = google_font(name = "Fira Code")),
      locations = cells_body(columns = c(class))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)
```


#### `hcpcs`

```{r}
components |> 
  filter(variable == "hcpcs") |>
  mutate(wc = case_when(str_detect(value, "\\*") ~ 1L, .default = 0L),
         nchar = if_else(wc == 1, str_count(value, "[[:alnum:]]"), 0L),
         class = "<chr>",
         method = case_when(
           action == "is" & wc == 1 ~ "%in%",
           action == "is" & wc == 0 ~ "==",
           .default = NA_character_),
         value = str_replace_all(value, "\\s|,", " "),
         value = str_wrap(value, width = 30)
         ) |> 
  filter(!is.na(method)) |> 
  select(number, order, class, variable, method, value, action, wc, nchar) |> 
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(variable, method))) |>
  tab_style(
      style = cell_text(
        align = "left",
        weight = "bold",
        size = px(14),
        whitespace = "break-spaces",
        font = google_font(name = "JetBrains Mono")),
      locations = cells_body(columns = c(value))) |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "normal",
        style = "italic",
        decorate = "underline",
        stretch = "condensed",
        font = google_font(name = "Fira Code")),
      locations = cells_body(columns = c(class))) |>
  tab_options(table.width = pct(75),
              quarto.disable_processing = TRUE)
```

#### `unit`

```{r}
components |> 
  filter(variable == "unit") |> 
  mutate(class = "<int>", 
         value = as.integer(value),
         method = if_else(str_detect(action, "is not"), "!=", "=="),
         .before = variable) |> 
  select(number, order, class, variable, method, value, action) |> 
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(variable, method, value))) |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "normal",
        style = "italic",
        decorate = "underline",
        stretch = "condensed",
        font = google_font(name = "Fira Code")),
      locations = cells_body(columns = c(class))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)
```


## Unevaluated Code

```{r}
#| label: vars
#| echo: true
#| eval: false
#| message: false
#| warning: false
categorize_vars |>
  separate_longer_delim(cols = value, delim = ",") |>
  mutate(value = str_squish(value),
         neg = case_when(str_detect(action, "not") ~ 1L, .default = 0L),
         wc = case_when(str_detect(value, "\\*") ~ 1L, .default = 0L),
         .after = value)

head_tail(rules_new, n = 10, by = c("var", "action")) |>
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(var, action, value))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)

rules_new |>
  filter(!is.na(var)) |>
  group_by(var) |>
  count(action) |>
  ungroup() |>
  arrange(var, desc(n), action) |>
  gt(groupname_col = "var", row_group_as_column = TRUE) |>
  cols_align(align = "left") |>
  opt_table_font(
    font = google_font(name = "Roboto Condensed"),
    weight = "bold"
    ) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "normal",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(var, action))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)
```


### Regexes

```{r}
#| label: regex
#| eval: false
#| echo: true
#| message: false
#| warning: false

c(
  "^[9][0][4][7][67]$"     = '9047(6|7)', 
  "^[9][0][56][1-9][0-9]$" = '905*|906*', 
  "^[9][0][7][1-5][02-9]$" = '907(1|2|3|4|5)',
  "^[9][1][3][01][0-9]$"   = '913'
  )

rules_new |>
  filter(wc == 1,
         var == "hcpcs") |>
  mutate(value = str_remove_all(value, "\\*"),
         chars = 5 - str_length(value),
         .after = value) |>
  mutate(
    regex = case_when(
      chars == 0 ~ glue_chr("^<<value>>$", .open = "<<", .close = ">>"),
      chars == 1 ~ glue_chr("^<<value>>[0-9]$", .open = "<<", .close = ">>"),
      chars > 1 ~ glue_chr("^<<value>>[0-9]{<<chars>>}$", .open = "<<", .close = ">>")),
    regex = case_when(neg == 1L ~ glue_chr('!{regex}'), .default = regex),
    .after = regex
  ) |>
  head_tail(n = 10, by = c("var", "action")) |>
  gt() |>
  cols_align(align = "left") |>
  opt_table_font(font = google_font(name = "Roboto Condensed")) |>
  opt_all_caps() |>
  tab_style(
      style = cell_text(
        align = 'left',
        weight = "bold",
        font = google_font(name = "Roboto Mono")),
      locations = cells_body(columns = c(regex))) |>
  tab_options(table.width = pct(100),
              quarto.disable_processing = TRUE)
```


### HCPCS Search

```{r}
#| label: misc
#| eval: false
#| echo: true
#| message: false
#| warning: false
northstar::search_descriptions(hcpcs_desc_type = "Long") |> 
  # dplyr::mutate(not_hcpcs = !grepl("^99[0-9]{3}$", hcpcs_code)) |> 
  filter(!grepl("^99[0-9]{3,3}$", hcpcs_code)) |>
  # dplyr::mutate(has_hcpcs = grepl("^J[0-9]{4}$", hcpcs_code)) |> 
  filter(str_detect(hcpcs_code, regex("^J[0-9]{4}$"))) |> 
  filter(str_detect(hcpcs_code, regex("^(?!5405)(?<![0-9]{1})$"))) |> 
  print(n = 200)

# Match strings that don't start with "99" and don't end with 3 digits
pattern <- "^(?!99).*(?<![0-9]{3})$"

# Negation pattern
"^(?!9938[0-9]{1}$)"

# Begins with 0, ends with digit
"^0.*\\d$"

# Begins with 0, ends with letter
"^0.*[A-Z]$"

# Match strings that don't start with "a" and don't end with "z"
pattern <- "^(?!a).*[^z]$"
grep(pattern, c("apple", "banana", "cherry"), value = TRUE)
# Output: "banana" "cherry"

stringr::str_detect("99202", stringr::regex("^[992]{3}.*"))

grep("^[992]{3}.*", "99202", value = TRUE, invert = TRUE)


pattern = dplyr::case_when(
  chars == 0 & negation == FALSE ~ glue::glue("^<value>$", .open = "<", .close = ">"),
  chars > 0  & negation == FALSE ~ glue::glue("^<value>[0-9]{<chars>}$", .open = "<", .close = ">"),
  chars == 0 & negation == TRUE ~ glue::glue("^(?!<value>)$", .open = "<", .close = ">"),
  chars > 0  & negation == TRUE ~ glue::glue("^(?!<<value>>)(?<![0-9]{<<chars>>})$", .open = "<<", .close = ">>")
  )
```
