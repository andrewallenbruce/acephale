---
title: "Claims Analysis"
description: "A guide to National Provider Identifiers and the CMS standard for NPI validation."
format:
  html:
    reference-location: block
    other-links:
      - text: Luhn Algorithm
        icon: bookmark-plus
        href: https://en.wikipedia.org/wiki/Luhn_algorithm
---

```{r setup}
#| message: false
#| warning: false
#| echo: false
#| cache: false

knitr::opts_chunk$set(
  collapse  = FALSE,
  echo      = TRUE, 
  message   = FALSE, 
  warning   = FALSE,
  error     = TRUE,
  comment   = "",
  dpi       = 600, 
  dev       = "ragg_png",
  out.width = "100%",
  fig.align = "center",
  fig.width = 8
)
options(scipen = 999)

library(tidyverse)
library(downlit)
library(gt)
library(gtExtras)
```

```{r}
#| message: false
#| warning: false
#| echo: false
claims_spec <- cols(
  rendering = col_character(),
  id = col_character(),
  enc = col_integer(),
  dos = col_date(format = ""),
  dob = col_date(format = ""),
  age = col_integer(),
  dor = col_date(format = ""),
  icd_code = col_character(),
  hcpcs_order = col_integer(),
  hcpcs_code = col_character(),
  hcpcs_desc = col_character(),
  hcpcs_unit = col_integer(),
  hcpcs_mod_1 = col_character(),
  hcpcs_mod_2 = col_character(),
  pos = col_character(),
  pos_name = col_character(),
  ins_class = col_character(),
  ins_prim = col_character(),
  ins_sec = col_character(),
  charges = col_double(),
  payments = col_double(),
  adjustments = col_double(),
  allowed = col_double(),
  adj_code_1 = col_character(),
  adj_code_2 = col_character(),
  adj_code_3 = col_character()
)

claims <- read_csv(
  here::here(
    "posts/claims/data", 
    "clean_rpt_rend.csv"
    ), 
  col_types = claims_spec) |> 
  mutate(year = clock::get_year(dos),
         quarter = quarter(dos, with_year = FALSE),
         .after = dos)

source <- c(
  rvu::get_source(year = 2022, source = "pprrvu"),
  rvu::get_source(year = 2023, source = "pprrvu"),
  rvu::get_source(year = 2024, source = "pprrvu")
  )

pos <- northstar::search_pos() |> select(-c(pos_name, pos_description))
```


# Claims Example

```{r}
claims
```


## Find Date Range of the Claims

```{r}
date_range <- timeplyr::calendar(
  timeplyr::time_completev(
    collapse::funique(claims$dos), 
    time_by = "days"), 
  name = "dos") |> 
  dplyr::select(-dplyr::matches("^[iso|epi]"))

date_range
```

## Get Unique HCPCS Codes

```{r}
yq <- claims |> 
  filter(!is.na(hcpcs_code)) |> 
  distinct(year, quarter, hcpcs_code)

yq <- split(yq$hcpcs_code, yq[c("year", "quarter")]) |> 
  purrr::compact() |> 
  cheapr::enframe_(name = "yq", value = "hcpcs_code") |> 
  arrange(yq)

yqi <- claims |> 
  distinct(y = year, q = quarter) |> 
  as.list()

yqs <- as.character(str_glue("{yqi$y}.{yqi$q}"))

rvu_22.2 <- source$rvu22b_apr |> 
  filter(hcpcs %in% c(filter(yq, yq == yqs[1]) |> pull(hcpcs_code) |> pluck(1))) |> 
  select(hcpcs, work_rvu, facility_pe_rvu, non_fac_pe_rvu, mp_rvu, conv_factor) |> 
  mutate(year = yqi$y[1], quarter = yqi$q[1], .before = 1)

rvu_22.3 <- source$rvu22c_jul |> 
  filter(hcpcs %in% c(filter(yq, yq == yqs[2]) |> pull(hcpcs_code) |> pluck(1))) |> 
  select(hcpcs, work_rvu, facility_pe_rvu, non_fac_pe_rvu, mp_rvu, conv_factor) |> 
  mutate(year = yqi$y[2], quarter = yqi$q[2], .before = 1)

rvu_22.4 <- source$rvu22d_oct |> 
  filter(hcpcs %in% c(filter(yq, yq == yqs[3]) |> pull(hcpcs_code) |> pluck(1))) |> 
  select(hcpcs, work_rvu, facility_pe_rvu, non_fac_pe_rvu, mp_rvu, conv_factor) |> 
  mutate(year = yqi$y[3], quarter = yqi$q[3], .before = 1)

rvu_23.1 <- source$rvu23a_jan |> 
  filter(hcpcs %in% c(filter(yq, yq == yqs[4]) |> pull(hcpcs_code) |> pluck(1))) |> 
  select(hcpcs, work_rvu, facility_pe_rvu, non_fac_pe_rvu, mp_rvu, conv_factor) |> 
  mutate(year = yqi$y[4], quarter = yqi$q[4], .before = 1)

rvu_23.2 <- source$rvu23b_apr |> 
  filter(hcpcs %in% c(filter(yq, yq == yqs[5]) |> pull(hcpcs_code) |> pluck(1))) |> 
  select(hcpcs, work_rvu, facility_pe_rvu, non_fac_pe_rvu, mp_rvu, conv_factor) |> 
  mutate(year = yqi$y[5], quarter = yqi$q[5], .before = 1)

rvu_23.3 <- source$rvu23c_jul |> 
  filter(hcpcs %in% c(filter(yq, yq == yqs[6]) |> pull(hcpcs_code) |> pluck(1))) |> 
  select(hcpcs, work_rvu, facility_pe_rvu, non_fac_pe_rvu, mp_rvu, conv_factor) |> 
  mutate(year = yqi$y[6], quarter = yqi$q[6], .before = 1)

rvu_23.4 <- source$rvu23d_oct |> 
  filter(hcpcs %in% c(filter(yq, yq == yqs[7]) |> pull(hcpcs_code) |> pluck(1))) |> 
  select(hcpcs, work_rvu, facility_pe_rvu, non_fac_pe_rvu, mp_rvu, conv_factor) |> 
  mutate(year = yqi$y[7], quarter = yqi$q[7], .before = 1)

rvu_24.1 <- source$rvu24a_jan |> 
  filter(hcpcs %in% c(filter(yq, yq == yqs[8]) |> pull(hcpcs_code) |> pluck(1))) |> 
  select(hcpcs, work_rvu, facility_pe_rvu, non_fac_pe_rvu, mp_rvu, conv_factor) |> 
  mutate(year = yqi$y[8], quarter = yqi$q[8], .before = 1)

rvu_join <- vctrs::vec_rbind(
  rvu_22.2,
  rvu_22.3,
  rvu_22.4,
  rvu_23.1,
  rvu_23.2,
  rvu_23.3,
  rvu_24.1
  )
```



```{r}
rvu_join |> 
  dplyr::mutate(
    tot_fac_rvu = work_rvu + facility_pe_rvu + mp_rvu,
    tot_non_rvu = work_rvu + non_fac_pe_rvu + mp_rvu,
    par_non_amt = tot_non_rvu * conv_factor,
    par_fac_amt = tot_fac_rvu * conv_factor,
    nonpar_non_amt = par_non_amt * 1.15,
    nonpar_fac_amt = par_non_amt * 1.15,
    limiting_non = nonpar_non_amt * 0.95,
    limiting_fac = nonpar_fac_amt * 0.95,
  ) |> 
  dplyr::filter(par_fac_amt > 0) |> 
  gt::gt(
    rowname_col = "year", 
    groupname_col = "hcpcs",
    row_group_as_column = TRUE
    ) |> 
  gt::opt_table_font(font = gt::google_font(name = "Atkinson Hyperlegible")) |> 
  gt::fmt_currency(
    columns = c("par_non_amt", 
                "par_fac_amt", 
                "nonpar_non_amt", 
                "nonpar_fac_amt", 
                "limiting_non", 
                "limiting_fac")
    ) |>
  gt::cols_label(
    quarter = gt::md("**Qtr**"),
    work_rvu = gt::md("<b><small>RVU</small></b><i><sub>wk</sub></i>"),
    facility_pe_rvu = gt::md("<i>f</i><b><small>RVU</small></b><i><sub>pe</sub></i>"),
    non_fac_pe_rvu = gt::md("<i>nf</i><b><small>RVU</small></b><i><sub>pe</sub></i>"),
    mp_rvu = gt::md("<b><small>RVU</small></b><i><sub>mp</sub></i>"),
    conv_factor = gt::md("<b>CF</b>"),
    tot_fac_rvu = gt::md("<i>f</i><b><small>RVU</small></b><i>s</i>"),
    tot_non_rvu = gt::md("<i>nf</i><b><small>RVU</small></b><i>s</i>"),
    par_non_amt = gt::md("<i>nf</i><b><small>PAR</small></b>"),
    par_fac_amt = gt::md("<i>f</i><b><small>PAR</small></b>"),
    nonpar_non_amt = gt::md("<i>nf</i><b><small>NPAR</small></b>"),
    nonpar_fac_amt = gt::md("<i>f</i><b><small>NPAR</small></b>"),
    limiting_non = gt::md("<i>nf</i><b><small>LC</small></b>"),
    limiting_fac = gt::md("<i>f</i><b><small>LC</small></b>")
  ) |> 
  gt::cols_align(align = "center") |>
  gt::tab_style(
      style = gt::cell_text(
        align = 'center',
        size = gt::px(16),
        font = gt::google_font(name = "Fira Code"),
        weight = "bold"),
      locations = gt::cells_row_groups()) |> 
  gt::tab_style(
      style = gt::cell_text(
      font = gt::google_font(name = "Fira Code")),
      locations = gt::cells_body()) |> 
  gt::tab_options(
    quarto.disable_processing = TRUE,
    table.width = "100%"
  )
```

# Comparing Reimbursement to Medicare Baseline

```{r}
claims_unajusted <- claims |> 
  left_join(
    pos, 
    by = join_by(pos == pos_code)) |> 
  left_join(
    rvu_join,
    by = join_by(
      hcpcs_code == hcpcs, 
      year, 
      quarter)) |> 
  mutate(
    pe_rvu = case_when(
      pos_type == "Non-Facility" ~ non_fac_pe_rvu,
      pos_type == "Facility" ~ facility_pe_rvu,
      .default = NA_real_
      ),
    facility_pe_rvu = NULL,
    non_fac_pe_rvu = NULL,
    total_rvu = work_rvu + pe_rvu + mp_rvu,
    par_amt = total_rvu * conv_factor * hcpcs_unit,
    nonpar_amt = par_amt * 1.15,
    limit_chrg = nonpar_amt * 0.95,
    .after = work_rvu) |> 
  filter(
    ins_class != "SELF", 
    !is.na(hcpcs_code),
    !is.na(work_rvu),
    !(work_rvu == 0.0 & 
        pe_rvu == 0.0 & 
        mp_rvu == 0.0),
    charges > 0) |> 
  select(
    pt_id = id,
    pt_enc = enc,
    dos_dt = dos,
    dos_yr = year,
    dos_qt = quarter,
    prov_rend = rendering,
    hcpcs_ord = hcpcs_order,
    hcpcs_code,
    hcpcs_uos = hcpcs_unit,
    pos_type,
    ins_class,
    charges,
    allowed,
    payments,
    adjustments,
    par_unadj = par_amt,
    non_unadj = nonpar_amt,
    lim_unadj = limit_chrg,
    work_rvu,
    pe_rvu,
    mp_rvu,
    sum_rvu = total_rvu,
    cf = conv_factor)

claims_unajusted |> skimr::skim()
```


