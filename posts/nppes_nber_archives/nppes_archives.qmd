---
title: "NPPES NPI Archives"
format:
  html:
    reference-location: block
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false

knitr::opts_chunk$set(
  dev = "ragg_png",
  dpi = 320,
  out.width = "100%",
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 2,
  fig.align = "center",
  fig.show = "hold"
)
options(scipen = 999, digits = 3)

library(tidyverse)
library(data.table)
library(collapse)
library(fuimus)
library(codex)
library(nppez)
library(arktax)
library(arknpi)
library(S7)

wk <- arknpi::get_pin("wk_2024_01_01-07")
deactivated <- arknpi::get_pin("deactivated")

# wk_2024_01_01 <- nppez:::get_pin("wk20240101")
# wk_2024_01_22 <- nppez:::get_pin("wk20240122")
# wk_2024_02_05 <- nppez:::get_pin("wk_20240205")
```

# Weekly NPPES Step-Through

## Deactivated NPIs

```{r}
#| label: deactivated
deactivated |> 
  collapse::fcount(deact_date) |> 
  print(n = 50)
```

## Base

```{r}
#| label: base
base <- wk$base

# Split into individuals and organizations
base_grp <- collapse::GRP(base, ~ entity)

base_split <- collapse::rsplit(base, base_grp) |> 
  purrr::map(fuimus::remove_quiet) |> 
  setNames(collapse::GRPnames(base_grp))

base_split
```

### Considerations:

#### No Credentials

   - Look for credentials in `last_name`

```{r}
#| label: base_no_credentials
base |> 
  collapse::fsubset(codex::na(credential)) |> 
  collapse::fsubset(entity == "I") |> 
  collapse::fsubset(codex::sf_detect(last_name, ", ")) |> 
  dplyr::glimpse()
```

#### Organization Parts 

   - `org_subpart`s have `org_parent` names
   - Non-subparts only have `org_provider` names

```{r}
#| label: base_org_parts
collapse::rsplit(base_split$O, base_split$O$org_subpart) |> 
  purrr::map(fuimus::remove_quiet)
```

#### Sole Proprietors

   - If `sole_prop` is `X` (Did Not Answer), then `cert_date` is `NA`
   - Looks like `deact_date` & `react_date` are `NA` as well

```{r}
#| label: base_sole
collapse::rsplit(base_split$I, base_split$I$sole_prop) |> 
  purrr::map(fuimus::remove_quiet)
```

## Address

   - Consider matches on **city, state, & zip** with different addresses

```{r}
#| label: address
address <- wk$address

# Exact match on all address fields
exact <- address |> 
  dplyr::filter(
    mail_address == prac_address,
    mail_city == prac_city,
    mail_state == prac_state,
    mail_zip == prac_zip,
    mail_country == prac_country,
    mail_phone == prac_phone,
    mail_fax == prac_fax) |> 
  collapse::fcompute(
    npi = npi,
    entity = entity,
    purpose = "MP",
    address = prac_address,
    city = prac_city,
    state = prac_state,
    zip = arknpi::make_zip(prac_zip),
    country = prac_country,
    phone = arknpi::make_phone(prac_phone),
    fax = arknpi::make_phone(prac_fax))

# Match on all except FAX
fax <- address |> 
  dplyr::filter(
    npi %!in% exact$npi,  
    mail_address == prac_address, 
    mail_city == prac_city,
    mail_state == prac_state,
    mail_country == prac_country,
    mail_zip == prac_zip,
    mail_phone == prac_phone) |> 
  collapse::fcompute(
    npi = npi,
    entity = entity,
    address = prac_address,
    city = prac_city,
    state = prac_state,
    zip = arknpi::make_zip(prac_zip),
    country = prac_country,
    phone = arknpi::make_phone(prac_phone),
    fax = arknpi::make_case(mail_fax, prac_fax),
    purpose = arknpi::make_purpose(mail_fax, prac_fax)) |>
  collapse::fmutate(fax = arknpi::make_phone(fax))

# Match on all except ZIP, PHONE, and FAX
phone <- address |> 
  dplyr::filter(npi %!in% c(exact$npi, fax$npi),      
    mail_address == prac_address,
    mail_city == prac_city,
    mail_state == prac_state,
    mail_country == prac_country) |>
  collapse::fcompute(
    npi = npi,
    entity = entity,
    purpose = arknpi::make_purpose(mail_phone, prac_phone),
    address = prac_address,
    city = prac_city,
    state = prac_state,
    zip = arknpi::make_case(mail_zip, prac_zip),
    country = prac_country,
    phone = arknpi::make_case(mail_phone, prac_phone),
    fax = arknpi::make_case(mail_fax, prac_fax)) |> 
  collapse::fmutate(
    zip = arknpi::make_zip(zip),
    phone = arknpi::make_phone(phone),
    fax = arknpi::make_phone(fax))

# Pivot remaining addresses
piv <- address |> 
  dplyr::filter(npi %!in% c(exact$npi, fax$npi, phone$npi)) |> 
  tidyr::pivot_longer(
    -c(npi, entity), 
    names_to = "type_part", 
    values_to = "value") |> 
  tidyr::separate_wider_delim(
    type_part, 
    delim = "_", 
    names = c("type", "part")) |> 
  collapse::fmutate(
    purpose = dplyr::case_when(
      type == "mail" ~ "M",
      type == "prac" ~ "P",
    .default = type),
    type = NULL) |>
  tidyr::pivot_wider(
    names_from = part, 
    values_from = value) |> 
  collapse::fmutate(
    zip = arknpi::make_zip(zip),
    phone = arknpi::make_phone(phone),
    fax = arknpi::make_phone(fax))

address <- collapse::rowbind(exact, fax, phone, piv)

add_grp <- collapse::GRP(address, ~ entity)

address <- collapse::rsplit(address, add_grp) |> 
  purrr::map(remove_quiet) |> 
  setNames(collapse::GRPnames(add_grp))

address
```

## Taxonomy

```{r}
#| label: taxonomy
taxonomy <- wk$taxonomy |> 
  dplyr::select(npi, entity, dplyr::starts_with("taxonomy")) |> 
  collapse::fmutate(
    taxonomy_level = data.table::fcase(
      taxonomy_primary == "Y", "P",
      taxonomy_primary == "N", "O",
      taxonomy_primary == "X", "X"),
    taxonomy_primary = NULL)

taxonomy <- collapse::rowbind(
  taxonomy |> 
    collapse::fsubset(codex::na(taxonomy_group)) |> 
    collapse::fselect(-taxonomy_group) |> 
    dplyr::distinct(),
  taxonomy |> 
    collapse::fsubset(codex::not_na(taxonomy_group)) |> 
    collapse::fselect(-taxonomy_code, -taxonomy_level) |> 
    dplyr::distinct() |> 
    collapse::frename(taxonomy_code = taxonomy_group) |> 
    collapse::fmutate(taxonomy_level = "G")
  ) |> 
  collapse::fmutate(
    taxonomy_level = factor(
      taxonomy_level, 
      levels = c("P", "O", "X", "G"), 
      ordered = TRUE)) |> 
  dplyr::arrange(npi, taxonomy_level)

taxonomy
```

#### Deduplicate Primary Taxonomy

```{r}
#| label: taxonomy_duplicates
taxonomy <- taxonomy |> 
  collapse::fmutate(
    primary = ifelse(
      taxonomy_level == "P", 
      taxonomy_code, 
      NA_character_)) |> 
  tidyr::fill(primary, .by = npi) |> 
  collapse::fgroup_by(npi) |>
  collapse::fmutate(
    eq = ifelse(
      taxonomy_level != "P" & taxonomy_code == primary, 
      TRUE, 
      FALSE)) |> 
  collapse::fungroup() |> 
  collapse::fsubset(!eq) |> 
  collapse::fselect(-eq, -primary)

taxonomy
```

### Taxonomy Split

```{r}
#| label: taxonomy_split
tax_grp <- collapse::GRP(taxonomy, ~ entity)

taxonomy <- collapse::rsplit(taxonomy, tax_grp) |> 
  purrr::map(remove_quiet) |> 
  setNames(collapse::GRPnames(tax_grp))

taxonomy
```

## License

```{r}
#| label: license
license <- collapse::fselect(
  wk$taxonomy, 
  npi, 
  entity, 
  license_no, 
  license_state) |> 
  dplyr::distinct()

license_grp <- collapse::GRP(license, ~ entity)

license <- collapse::rsplit(license, license_grp) |> 
  purrr::map(\(df) fuimus::remove_quiet(df) |> 
               dplyr::filter(codex::not_na(license_no))) |> 
  setNames(collapse::GRPnames(license_grp))

license
```

## Identifiers

```{r}
#| label: identifier
identifier <- wk$identifier |> 
  # Remove Taxonomy Codes
  collapse::fsubset(codex::sf_ndetect(otid, "^[A-Z0-9]{9}X$")) |> 
  collapse::fmutate(otid_type = as.character(as.integer(otid_type)))

id_grp <- collapse::GRP(identifier, ~ entity)

collapse::rsplit(identifier, id_grp) |> 
  purrr::map(remove_quiet) |> 
  setNames(collapse::GRPnames(id_grp))
```

## Other Names

```{r}
#| label: other
other <- wk$other

oth_grp <- collapse::GRP(other, ~ entity)

other <- collapse::rsplit(other, oth_grp) |> 
  purrr::map(remove_quiet) |> 
  setNames(collapse::GRPnames(oth_grp))

other$I <- vctrs::vec_slice(other$I, cheapr::row_na_counts(other$I) < 6)

other
```

## Authorized Official

```{r}
#| label: ao
wk$ao |> 
  collapse::fmutate(ao_phone = arknpi::make_phone(ao_phone))
```

<hr>

{{< pagebreak >}}


## Session Information 

```{r}
#| echo: false
pander::pander(sessionInfo())
```
